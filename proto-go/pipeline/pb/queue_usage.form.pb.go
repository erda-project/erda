// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: queue_usage.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*QueueUsage)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueueUsageItem)(nil)

// QueueUsage implement urlenc.URLValuesUnmarshaler.
func (m *QueueUsage) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "inUseCPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.InUseCPU = val
			case "inUseMemoryMB":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.InUseMemoryMB = val
			case "remainingCPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.RemainingCPU = val
			case "remainingMemoryMB":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.RemainingMemoryMB = val
			case "processingCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProcessingCount = val
			case "pendingCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PendingCount = val
			}
		}
	}
	return nil
}

// QueueUsageItem implement urlenc.URLValuesUnmarshaler.
func (m *QueueUsageItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "requestsCPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.RequestsCPU = val
			case "requestsMemoryMB":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.RequestsMemoryMB = val
			case "index":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Index = val
			case "priority":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Priority = val
			case "addedTime":
				if m.AddedTime == nil {
					m.AddedTime = &timestamppb.Timestamp{}
				}
			case "addedTime.seconds":
				if m.AddedTime == nil {
					m.AddedTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AddedTime.Seconds = val
			case "addedTime.nanos":
				if m.AddedTime == nil {
					m.AddedTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.AddedTime.Nanos = int32(val)
			}
		}
	}
	return nil
}
