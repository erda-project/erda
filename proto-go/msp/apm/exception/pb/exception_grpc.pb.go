// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: exception.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ExceptionServiceClient is the client API for ExceptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExceptionServiceClient interface {
	GetExceptions(ctx context.Context, in *GetExceptionsRequest, opts ...grpc.CallOption) (*GetExceptionsResponse, error)
	GetExceptionEventIds(ctx context.Context, in *GetExceptionEventIdsRequest, opts ...grpc.CallOption) (*GetExceptionEventIdsResponse, error)
	GetExceptionEvent(ctx context.Context, in *GetExceptionEventRequest, opts ...grpc.CallOption) (*GetExceptionEventResponse, error)
}

type exceptionServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewExceptionServiceClient(cc grpc1.ClientConnInterface) ExceptionServiceClient {
	return &exceptionServiceClient{cc}
}

func (c *exceptionServiceClient) GetExceptions(ctx context.Context, in *GetExceptionsRequest, opts ...grpc.CallOption) (*GetExceptionsResponse, error) {
	out := new(GetExceptionsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.exception.ExceptionService/GetExceptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exceptionServiceClient) GetExceptionEventIds(ctx context.Context, in *GetExceptionEventIdsRequest, opts ...grpc.CallOption) (*GetExceptionEventIdsResponse, error) {
	out := new(GetExceptionEventIdsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.exception.ExceptionService/GetExceptionEventIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exceptionServiceClient) GetExceptionEvent(ctx context.Context, in *GetExceptionEventRequest, opts ...grpc.CallOption) (*GetExceptionEventResponse, error) {
	out := new(GetExceptionEventResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.exception.ExceptionService/GetExceptionEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExceptionServiceServer is the server API for ExceptionService service.
// All implementations should embed UnimplementedExceptionServiceServer
// for forward compatibility
type ExceptionServiceServer interface {
	GetExceptions(context.Context, *GetExceptionsRequest) (*GetExceptionsResponse, error)
	GetExceptionEventIds(context.Context, *GetExceptionEventIdsRequest) (*GetExceptionEventIdsResponse, error)
	GetExceptionEvent(context.Context, *GetExceptionEventRequest) (*GetExceptionEventResponse, error)
}

// UnimplementedExceptionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExceptionServiceServer struct {
}

func (*UnimplementedExceptionServiceServer) GetExceptions(context.Context, *GetExceptionsRequest) (*GetExceptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExceptions not implemented")
}
func (*UnimplementedExceptionServiceServer) GetExceptionEventIds(context.Context, *GetExceptionEventIdsRequest) (*GetExceptionEventIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExceptionEventIds not implemented")
}
func (*UnimplementedExceptionServiceServer) GetExceptionEvent(context.Context, *GetExceptionEventRequest) (*GetExceptionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExceptionEvent not implemented")
}

func RegisterExceptionServiceServer(s grpc1.ServiceRegistrar, srv ExceptionServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ExceptionService_serviceDesc(srv, opts...), srv)
}

var _ExceptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.apm.exception.ExceptionService",
	HandlerType: (*ExceptionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "exception.proto",
}

func _get_ExceptionService_serviceDesc(srv ExceptionServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ExceptionService_GetExceptions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetExceptions(ctx, req.(*GetExceptionsRequest))
	}
	var _ExceptionService_GetExceptions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExceptionService_GetExceptions_info = transport.NewServiceInfo("erda.msp.apm.exception.ExceptionService", "GetExceptions", srv)
		_ExceptionService_GetExceptions_Handler = h.Interceptor(_ExceptionService_GetExceptions_Handler)
	}

	_ExceptionService_GetExceptionEventIds_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetExceptionEventIds(ctx, req.(*GetExceptionEventIdsRequest))
	}
	var _ExceptionService_GetExceptionEventIds_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExceptionService_GetExceptionEventIds_info = transport.NewServiceInfo("erda.msp.apm.exception.ExceptionService", "GetExceptionEventIds", srv)
		_ExceptionService_GetExceptionEventIds_Handler = h.Interceptor(_ExceptionService_GetExceptionEventIds_Handler)
	}

	_ExceptionService_GetExceptionEvent_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetExceptionEvent(ctx, req.(*GetExceptionEventRequest))
	}
	var _ExceptionService_GetExceptionEvent_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExceptionService_GetExceptionEvent_info = transport.NewServiceInfo("erda.msp.apm.exception.ExceptionService", "GetExceptionEvent", srv)
		_ExceptionService_GetExceptionEvent_Handler = h.Interceptor(_ExceptionService_GetExceptionEvent_Handler)
	}

	var serviceDesc = _ExceptionService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetExceptions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetExceptionsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExceptionServiceServer).GetExceptions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExceptionService_GetExceptions_info)
				}
				if interceptor == nil {
					return _ExceptionService_GetExceptions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.exception.ExceptionService/GetExceptions",
				}
				return interceptor(ctx, in, info, _ExceptionService_GetExceptions_Handler)
			},
		},
		{
			MethodName: "GetExceptionEventIds",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetExceptionEventIdsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExceptionServiceServer).GetExceptionEventIds(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExceptionService_GetExceptionEventIds_info)
				}
				if interceptor == nil {
					return _ExceptionService_GetExceptionEventIds_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.exception.ExceptionService/GetExceptionEventIds",
				}
				return interceptor(ctx, in, info, _ExceptionService_GetExceptionEventIds_Handler)
			},
		},
		{
			MethodName: "GetExceptionEvent",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetExceptionEventRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExceptionServiceServer).GetExceptionEvent(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExceptionService_GetExceptionEvent_info)
				}
				if interceptor == nil {
					return _ExceptionService_GetExceptionEvent_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.exception.ExceptionService/GetExceptionEvent",
				}
				return interceptor(ctx, in, info, _ExceptionService_GetExceptionEvent_Handler)
			},
		},
	}
	return &serviceDesc
}
