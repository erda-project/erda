// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: adapter.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterInstrumentationLibraryServiceImp adapter.proto
func RegisterInstrumentationLibraryServiceImp(regester transport.Register, srv InstrumentationLibraryServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterInstrumentationLibraryServiceHandler(regester, InstrumentationLibraryServiceHandler(srv), _ops.HTTP...)
	RegisterInstrumentationLibraryServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.msp.apm.adapter.InstrumentationLibraryService",
	)
}

var (
	instrumentationLibraryServiceClientType  = reflect.TypeOf((*InstrumentationLibraryServiceClient)(nil)).Elem()
	instrumentationLibraryServiceServerType  = reflect.TypeOf((*InstrumentationLibraryServiceServer)(nil)).Elem()
	instrumentationLibraryServiceHandlerType = reflect.TypeOf((*InstrumentationLibraryServiceHandler)(nil)).Elem()
)

// InstrumentationLibraryServiceClientType .
func InstrumentationLibraryServiceClientType() reflect.Type {
	return instrumentationLibraryServiceClientType
}

// InstrumentationLibraryServiceServerType .
func InstrumentationLibraryServiceServerType() reflect.Type {
	return instrumentationLibraryServiceServerType
}

// InstrumentationLibraryServiceHandlerType .
func InstrumentationLibraryServiceHandlerType() reflect.Type {
	return instrumentationLibraryServiceHandlerType
}

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		instrumentationLibraryServiceClientType,
		// server types
		instrumentationLibraryServiceServerType,
		// handler types
		instrumentationLibraryServiceHandlerType,
	}
}
