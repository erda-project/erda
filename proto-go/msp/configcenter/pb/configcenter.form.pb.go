// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: configcenter.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Groups)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGroupPropertiesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGroupPropertiesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SaveGroupPropertiesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SaveGroupPropertiesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GroupProperties)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Property)(nil)

// GetGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantID":
				m.TenantID = vals[0]
			case "keyword":
				m.Keyword = vals[0]
			case "pageNum":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNum = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// GetGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Groups{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &Groups{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			case "data.list":
				if m.Data == nil {
					m.Data = &Groups{}
				}
				m.Data.List = vals
			}
		}
	}
	return nil
}

// Groups implement urlenc.URLValuesUnmarshaler.
func (m *Groups) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			case "list":
				m.List = vals
			}
		}
	}
	return nil
}

// GetGroupPropertiesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetGroupPropertiesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantID":
				m.TenantID = vals[0]
			case "groupID":
				m.GroupID = vals[0]
			}
		}
	}
	return nil
}

// GetGroupPropertiesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetGroupPropertiesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// SaveGroupPropertiesRequest implement urlenc.URLValuesUnmarshaler.
func (m *SaveGroupPropertiesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantID":
				m.TenantID = vals[0]
			case "groupID":
				m.GroupID = vals[0]
			}
		}
	}
	return nil
}

// SaveGroupPropertiesResponse implement urlenc.URLValuesUnmarshaler.
func (m *SaveGroupPropertiesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// GroupProperties implement urlenc.URLValuesUnmarshaler.
func (m *GroupProperties) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "group":
				m.Group = vals[0]
			}
		}
	}
	return nil
}

// Property implement urlenc.URLValuesUnmarshaler.
func (m *Property) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "key":
				m.Key = vals[0]
			case "value":
				m.Value = vals[0]
			case "source":
				m.Source = vals[0]
			}
		}
	}
	return nil
}
