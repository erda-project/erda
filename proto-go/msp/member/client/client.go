// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: member.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/msp/member/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// MemberService member.proto
	MemberService() pb.MemberServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		memberService: pb.NewMemberServiceClient(cc),
	}
}

type serviceClients struct {
	memberService pb.MemberServiceClient
}

func (c *serviceClients) MemberService() pb.MemberServiceClient {
	return c.memberService
}

type memberServiceWrapper struct {
	client pb.MemberServiceClient
	opts   []grpc1.CallOption
}

func (s *memberServiceWrapper) ScopeRoleAccess(ctx context.Context, req *pb.ScopeRoleAccessRequest) (*pb.ScopeRoleAccessResponse, error) {
	return s.client.ScopeRoleAccess(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *memberServiceWrapper) ListMember(ctx context.Context, req *pb.ListMemberRequest) (*pb.ListMemberResponse, error) {
	return s.client.ListMember(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *memberServiceWrapper) CreateOrUpdateMember(ctx context.Context, req *pb.CreateOrUpdateMemberRequest) (*pb.CreateOrUpdateMemberResponse, error) {
	return s.client.CreateOrUpdateMember(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *memberServiceWrapper) DeleteMember(ctx context.Context, req *pb.DeleteMemberRequest) (*pb.DeleteMemberResponse, error) {
	return s.client.DeleteMember(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *memberServiceWrapper) ListMemberRoles(ctx context.Context, req *pb.ListMemberRolesRequest) (*pb.ListMemberRolesResponse, error) {
	return s.client.ListMemberRoles(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
