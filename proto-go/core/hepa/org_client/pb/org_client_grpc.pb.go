// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: org_client.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// OrgClientServiceClient is the client API for OrgClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgClientServiceClient interface {
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*DeleteClientResponse, error)
	GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	UpdateCredentials(ctx context.Context, in *UpdateCredentialsRequest, opts ...grpc.CallOption) (*UpdateCredentialsResponse, error)
	GrantEndpoint(ctx context.Context, in *GrantEndpointRequest, opts ...grpc.CallOption) (*GrantEndpointResponse, error)
	RevokeEndpoint(ctx context.Context, in *RevokeEndpointRequest, opts ...grpc.CallOption) (*RevokeEndpointResponse, error)
	ChangeClientLimit(ctx context.Context, in *ChangeClientLimitRequest, opts ...grpc.CallOption) (*ChangeClientLimitResponse, error)
}

type orgClientServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewOrgClientServiceClient(cc grpc1.ClientConnInterface) OrgClientServiceClient {
	return &orgClientServiceClient{cc}
}

func (c *orgClientServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error) {
	out := new(CreateClientResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClientServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*DeleteClientResponse, error) {
	out := new(DeleteClientResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClientServiceClient) GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/GetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClientServiceClient) UpdateCredentials(ctx context.Context, in *UpdateCredentialsRequest, opts ...grpc.CallOption) (*UpdateCredentialsResponse, error) {
	out := new(UpdateCredentialsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/UpdateCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClientServiceClient) GrantEndpoint(ctx context.Context, in *GrantEndpointRequest, opts ...grpc.CallOption) (*GrantEndpointResponse, error) {
	out := new(GrantEndpointResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/GrantEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClientServiceClient) RevokeEndpoint(ctx context.Context, in *RevokeEndpointRequest, opts ...grpc.CallOption) (*RevokeEndpointResponse, error) {
	out := new(RevokeEndpointResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/RevokeEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClientServiceClient) ChangeClientLimit(ctx context.Context, in *ChangeClientLimitRequest, opts ...grpc.CallOption) (*ChangeClientLimitResponse, error) {
	out := new(ChangeClientLimitResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.org_client.OrgClientService/ChangeClientLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgClientServiceServer is the server API for OrgClientService service.
// All implementations should embed UnimplementedOrgClientServiceServer
// for forward compatibility
type OrgClientServiceServer interface {
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*DeleteClientResponse, error)
	GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
	UpdateCredentials(context.Context, *UpdateCredentialsRequest) (*UpdateCredentialsResponse, error)
	GrantEndpoint(context.Context, *GrantEndpointRequest) (*GrantEndpointResponse, error)
	RevokeEndpoint(context.Context, *RevokeEndpointRequest) (*RevokeEndpointResponse, error)
	ChangeClientLimit(context.Context, *ChangeClientLimitRequest) (*ChangeClientLimitResponse, error)
}

// UnimplementedOrgClientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrgClientServiceServer struct {
}

func (*UnimplementedOrgClientServiceServer) CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedOrgClientServiceServer) DeleteClient(context.Context, *DeleteClientRequest) (*DeleteClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (*UnimplementedOrgClientServiceServer) GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (*UnimplementedOrgClientServiceServer) UpdateCredentials(context.Context, *UpdateCredentialsRequest) (*UpdateCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentials not implemented")
}
func (*UnimplementedOrgClientServiceServer) GrantEndpoint(context.Context, *GrantEndpointRequest) (*GrantEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantEndpoint not implemented")
}
func (*UnimplementedOrgClientServiceServer) RevokeEndpoint(context.Context, *RevokeEndpointRequest) (*RevokeEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeEndpoint not implemented")
}
func (*UnimplementedOrgClientServiceServer) ChangeClientLimit(context.Context, *ChangeClientLimitRequest) (*ChangeClientLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeClientLimit not implemented")
}

func RegisterOrgClientServiceServer(s grpc1.ServiceRegistrar, srv OrgClientServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_OrgClientService_serviceDesc(srv, opts...), srv)
}

var _OrgClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.org_client.OrgClientService",
	HandlerType: (*OrgClientServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "org_client.proto",
}

func _get_OrgClientService_serviceDesc(srv OrgClientServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_OrgClientService_CreateClient_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateClient(ctx, req.(*CreateClientRequest))
	}
	var _OrgClientService_CreateClient_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_CreateClient_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "CreateClient", srv)
		_OrgClientService_CreateClient_Handler = h.Interceptor(_OrgClientService_CreateClient_Handler)
	}

	_OrgClientService_DeleteClient_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	var _OrgClientService_DeleteClient_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_DeleteClient_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "DeleteClient", srv)
		_OrgClientService_DeleteClient_Handler = h.Interceptor(_OrgClientService_DeleteClient_Handler)
	}

	_OrgClientService_GetCredentials_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCredentials(ctx, req.(*GetCredentialsRequest))
	}
	var _OrgClientService_GetCredentials_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_GetCredentials_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "GetCredentials", srv)
		_OrgClientService_GetCredentials_Handler = h.Interceptor(_OrgClientService_GetCredentials_Handler)
	}

	_OrgClientService_UpdateCredentials_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCredentials(ctx, req.(*UpdateCredentialsRequest))
	}
	var _OrgClientService_UpdateCredentials_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_UpdateCredentials_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "UpdateCredentials", srv)
		_OrgClientService_UpdateCredentials_Handler = h.Interceptor(_OrgClientService_UpdateCredentials_Handler)
	}

	_OrgClientService_GrantEndpoint_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GrantEndpoint(ctx, req.(*GrantEndpointRequest))
	}
	var _OrgClientService_GrantEndpoint_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_GrantEndpoint_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "GrantEndpoint", srv)
		_OrgClientService_GrantEndpoint_Handler = h.Interceptor(_OrgClientService_GrantEndpoint_Handler)
	}

	_OrgClientService_RevokeEndpoint_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RevokeEndpoint(ctx, req.(*RevokeEndpointRequest))
	}
	var _OrgClientService_RevokeEndpoint_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_RevokeEndpoint_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "RevokeEndpoint", srv)
		_OrgClientService_RevokeEndpoint_Handler = h.Interceptor(_OrgClientService_RevokeEndpoint_Handler)
	}

	_OrgClientService_ChangeClientLimit_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ChangeClientLimit(ctx, req.(*ChangeClientLimitRequest))
	}
	var _OrgClientService_ChangeClientLimit_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OrgClientService_ChangeClientLimit_info = transport.NewServiceInfo("erda.core.hepa.org_client.OrgClientService", "ChangeClientLimit", srv)
		_OrgClientService_ChangeClientLimit_Handler = h.Interceptor(_OrgClientService_ChangeClientLimit_Handler)
	}

	var serviceDesc = _OrgClientService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateClientRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).CreateClient(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_CreateClient_info)
				}
				if interceptor == nil {
					return _OrgClientService_CreateClient_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/CreateClient",
				}
				return interceptor(ctx, in, info, _OrgClientService_CreateClient_Handler)
			},
		},
		{
			MethodName: "DeleteClient",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteClientRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).DeleteClient(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_DeleteClient_info)
				}
				if interceptor == nil {
					return _OrgClientService_DeleteClient_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/DeleteClient",
				}
				return interceptor(ctx, in, info, _OrgClientService_DeleteClient_Handler)
			},
		},
		{
			MethodName: "GetCredentials",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCredentialsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).GetCredentials(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_GetCredentials_info)
				}
				if interceptor == nil {
					return _OrgClientService_GetCredentials_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/GetCredentials",
				}
				return interceptor(ctx, in, info, _OrgClientService_GetCredentials_Handler)
			},
		},
		{
			MethodName: "UpdateCredentials",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCredentialsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).UpdateCredentials(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_UpdateCredentials_info)
				}
				if interceptor == nil {
					return _OrgClientService_UpdateCredentials_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/UpdateCredentials",
				}
				return interceptor(ctx, in, info, _OrgClientService_UpdateCredentials_Handler)
			},
		},
		{
			MethodName: "GrantEndpoint",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GrantEndpointRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).GrantEndpoint(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_GrantEndpoint_info)
				}
				if interceptor == nil {
					return _OrgClientService_GrantEndpoint_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/GrantEndpoint",
				}
				return interceptor(ctx, in, info, _OrgClientService_GrantEndpoint_Handler)
			},
		},
		{
			MethodName: "RevokeEndpoint",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RevokeEndpointRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).RevokeEndpoint(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_RevokeEndpoint_info)
				}
				if interceptor == nil {
					return _OrgClientService_RevokeEndpoint_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/RevokeEndpoint",
				}
				return interceptor(ctx, in, info, _OrgClientService_RevokeEndpoint_Handler)
			},
		},
		{
			MethodName: "ChangeClientLimit",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ChangeClientLimitRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrgClientServiceServer).ChangeClientLimit(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OrgClientService_ChangeClientLimit_info)
				}
				if interceptor == nil {
					return _OrgClientService_ChangeClientLimit_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.org_client.OrgClientService/ChangeClientLimit",
				}
				return interceptor(ctx, in, info, _OrgClientService_ChangeClientLimit_Handler)
			},
		},
	}
	return &serviceDesc
}
