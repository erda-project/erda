// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: runtime_service.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetServiceApiPrefixRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetServiceApiPrefixResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ServiceRuntime)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetServiceRuntimesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetServiceRuntimesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteRuntimeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteRuntimeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*App)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAppsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAppsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeRuntimeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*EndpointDomain)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ServiceDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeRuntimeRequest)(nil)

// GetServiceApiPrefixRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetServiceApiPrefixRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			case "app":
				m.App = vals[0]
			case "service":
				m.Service = vals[0]
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// GetServiceApiPrefixResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetServiceApiPrefixResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals
			}
		}
	}
	return nil
}

// ServiceRuntime implement urlenc.URLValuesUnmarshaler.
func (m *ServiceRuntime) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "runtimeName":
				m.RuntimeName = vals[0]
			case "appId":
				m.AppId = vals[0]
			case "appName":
				m.AppName = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			}
		}
	}
	return nil
}

// GetServiceRuntimesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetServiceRuntimesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetServiceRuntimesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetServiceRuntimesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			case "app":
				m.App = vals[0]
			case "service":
				m.Service = vals[0]
			}
		}
	}
	return nil
}

// DeleteRuntimeRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteRuntimeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// DeleteRuntimeResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteRuntimeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// App implement urlenc.URLValuesUnmarshaler.
func (m *App) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "services":
				m.Services = vals
			}
		}
	}
	return nil
}

// GetAppsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAppsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetAppsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAppsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			}
		}
	}
	return nil
}

// ChangeRuntimeResponse implement urlenc.URLValuesUnmarshaler.
func (m *ChangeRuntimeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// EndpointDomain implement urlenc.URLValuesUnmarshaler.
func (m *EndpointDomain) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "domain":
				m.Domain = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// ServiceDetail implement urlenc.URLValuesUnmarshaler.
func (m *ServiceDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "serviceName":
				m.ServiceName = vals[0]
			case "innerAddress":
				m.InnerAddress = vals[0]
			}
		}
	}
	return nil
}

// ChangeRuntimeRequest implement urlenc.URLValuesUnmarshaler.
func (m *ChangeRuntimeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgId":
				m.OrgId = vals[0]
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "runtimeName":
				m.RuntimeName = vals[0]
			case "releaseId":
				m.ReleaseId = vals[0]
			case "serviceGroupNamespace":
				m.ServiceGroupNamespace = vals[0]
			case "projectNamespace":
				m.ProjectNamespace = vals[0]
			case "serviceGroupName":
				m.ServiceGroupName = vals[0]
			case "appId":
				m.AppId = vals[0]
			case "appName":
				m.AppName = vals[0]
			case "useApigw":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.UseApigw = val
			}
		}
	}
	return nil
}
