// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: collector.proto

package pb

import (
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorServiceClient interface {
}

type collectorServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc1.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations should embed UnimplementedCollectorServiceServer
// for forward compatibility
type CollectorServiceServer interface {
}

// UnimplementedCollectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollectorServiceServer struct {
}

func RegisterCollectorServiceServer(s grpc1.ServiceRegistrar, srv CollectorServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_CollectorService_serviceDesc(srv, opts...), srv)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.monitor.collector.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "collector.proto",
}

func _get_CollectorService_serviceDesc(srv CollectorServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	var serviceDesc = _CollectorService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{}
	return &serviceDesc
}
