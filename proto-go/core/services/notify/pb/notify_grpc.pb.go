// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: notify.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// NotifyServiceClient is the client API for NotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyServiceClient interface {
	// +private
	GetAllNotifyTemplates(ctx context.Context, in *GetAllNotifyTemplatesRequest, opts ...grpc.CallOption) (*GetAllNotifyTemplatesResponse, error)
	GetNotifyTemplate(ctx context.Context, in *GetNotifyTemplateRequest, opts ...grpc.CallOption) (*GetNotifyTemplateResponse, error)
	CreateNotify(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyResponse, error)
	DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...grpc.CallOption) (*DeleteNotifyResponse, error)
	UpdateNotify(ctx context.Context, in *UpdateNotifyRequest, opts ...grpc.CallOption) (*UpdateNotifyResponse, error)
	GetUserNotifyList(ctx context.Context, in *GetUserNotifyListRequest, opts ...grpc.CallOption) (*GetUserNotifyListResponse, error)
	NotifyEnable(ctx context.Context, in *NotifyEnableRequest, opts ...grpc.CallOption) (*NotifyEnableResponse, error)
	CreateUserDefineNotifyTemplate(ctx context.Context, in *CreateUserDefineNotifyTemplateRequest, opts ...grpc.CallOption) (*CreateUserDefineNotifyTemplateResponse, error)
	GetNotifyDetail(ctx context.Context, in *GetNotifyDetailRequest, opts ...grpc.CallOption) (*GetNotifyDetailResponse, error)
	GetAllGroups(ctx context.Context, in *GetAllGroupsRequest, opts ...grpc.CallOption) (*GetAllGroupsResponse, error)
}

type notifyServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewNotifyServiceClient(cc grpc1.ClientConnInterface) NotifyServiceClient {
	return &notifyServiceClient{cc}
}

func (c *notifyServiceClient) GetAllNotifyTemplates(ctx context.Context, in *GetAllNotifyTemplatesRequest, opts ...grpc.CallOption) (*GetAllNotifyTemplatesResponse, error) {
	out := new(GetAllNotifyTemplatesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/GetAllNotifyTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetNotifyTemplate(ctx context.Context, in *GetNotifyTemplateRequest, opts ...grpc.CallOption) (*GetNotifyTemplateResponse, error) {
	out := new(GetNotifyTemplateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/GetNotifyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) CreateNotify(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyResponse, error) {
	out := new(CreateNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/CreateNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...grpc.CallOption) (*DeleteNotifyResponse, error) {
	out := new(DeleteNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/DeleteNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) UpdateNotify(ctx context.Context, in *UpdateNotifyRequest, opts ...grpc.CallOption) (*UpdateNotifyResponse, error) {
	out := new(UpdateNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/UpdateNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetUserNotifyList(ctx context.Context, in *GetUserNotifyListRequest, opts ...grpc.CallOption) (*GetUserNotifyListResponse, error) {
	out := new(GetUserNotifyListResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/GetUserNotifyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) NotifyEnable(ctx context.Context, in *NotifyEnableRequest, opts ...grpc.CallOption) (*NotifyEnableResponse, error) {
	out := new(NotifyEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/NotifyEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) CreateUserDefineNotifyTemplate(ctx context.Context, in *CreateUserDefineNotifyTemplateRequest, opts ...grpc.CallOption) (*CreateUserDefineNotifyTemplateResponse, error) {
	out := new(CreateUserDefineNotifyTemplateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/CreateUserDefineNotifyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetNotifyDetail(ctx context.Context, in *GetNotifyDetailRequest, opts ...grpc.CallOption) (*GetNotifyDetailResponse, error) {
	out := new(GetNotifyDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/GetNotifyDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetAllGroups(ctx context.Context, in *GetAllGroupsRequest, opts ...grpc.CallOption) (*GetAllGroupsResponse, error) {
	out := new(GetAllGroupsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.notify.NotifyService/GetAllGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServiceServer is the server API for NotifyService service.
// All implementations should embed UnimplementedNotifyServiceServer
// for forward compatibility
type NotifyServiceServer interface {
	// +private
	GetAllNotifyTemplates(context.Context, *GetAllNotifyTemplatesRequest) (*GetAllNotifyTemplatesResponse, error)
	GetNotifyTemplate(context.Context, *GetNotifyTemplateRequest) (*GetNotifyTemplateResponse, error)
	CreateNotify(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error)
	DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyResponse, error)
	UpdateNotify(context.Context, *UpdateNotifyRequest) (*UpdateNotifyResponse, error)
	GetUserNotifyList(context.Context, *GetUserNotifyListRequest) (*GetUserNotifyListResponse, error)
	NotifyEnable(context.Context, *NotifyEnableRequest) (*NotifyEnableResponse, error)
	CreateUserDefineNotifyTemplate(context.Context, *CreateUserDefineNotifyTemplateRequest) (*CreateUserDefineNotifyTemplateResponse, error)
	GetNotifyDetail(context.Context, *GetNotifyDetailRequest) (*GetNotifyDetailResponse, error)
	GetAllGroups(context.Context, *GetAllGroupsRequest) (*GetAllGroupsResponse, error)
}

// UnimplementedNotifyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotifyServiceServer struct {
}

func (*UnimplementedNotifyServiceServer) GetAllNotifyTemplates(context.Context, *GetAllNotifyTemplatesRequest) (*GetAllNotifyTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotifyTemplates not implemented")
}
func (*UnimplementedNotifyServiceServer) GetNotifyTemplate(context.Context, *GetNotifyTemplateRequest) (*GetNotifyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyTemplate not implemented")
}
func (*UnimplementedNotifyServiceServer) CreateNotify(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotify not implemented")
}
func (*UnimplementedNotifyServiceServer) DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotify not implemented")
}
func (*UnimplementedNotifyServiceServer) UpdateNotify(context.Context, *UpdateNotifyRequest) (*UpdateNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotify not implemented")
}
func (*UnimplementedNotifyServiceServer) GetUserNotifyList(context.Context, *GetUserNotifyListRequest) (*GetUserNotifyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifyList not implemented")
}
func (*UnimplementedNotifyServiceServer) NotifyEnable(context.Context, *NotifyEnableRequest) (*NotifyEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyEnable not implemented")
}
func (*UnimplementedNotifyServiceServer) CreateUserDefineNotifyTemplate(context.Context, *CreateUserDefineNotifyTemplateRequest) (*CreateUserDefineNotifyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDefineNotifyTemplate not implemented")
}
func (*UnimplementedNotifyServiceServer) GetNotifyDetail(context.Context, *GetNotifyDetailRequest) (*GetNotifyDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyDetail not implemented")
}
func (*UnimplementedNotifyServiceServer) GetAllGroups(context.Context, *GetAllGroupsRequest) (*GetAllGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroups not implemented")
}

func RegisterNotifyServiceServer(s grpc1.ServiceRegistrar, srv NotifyServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_NotifyService_serviceDesc(srv, opts...), srv)
}

var _NotifyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.services.notify.NotifyService",
	HandlerType: (*NotifyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "notify.proto",
}

func _get_NotifyService_serviceDesc(srv NotifyServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_NotifyService_GetAllNotifyTemplates_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAllNotifyTemplates(ctx, req.(*GetAllNotifyTemplatesRequest))
	}
	var _NotifyService_GetAllNotifyTemplates_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetAllNotifyTemplates_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetAllNotifyTemplates", srv)
		_NotifyService_GetAllNotifyTemplates_Handler = h.Interceptor(_NotifyService_GetAllNotifyTemplates_Handler)
	}

	_NotifyService_GetNotifyTemplate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetNotifyTemplate(ctx, req.(*GetNotifyTemplateRequest))
	}
	var _NotifyService_GetNotifyTemplate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetNotifyTemplate_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetNotifyTemplate", srv)
		_NotifyService_GetNotifyTemplate_Handler = h.Interceptor(_NotifyService_GetNotifyTemplate_Handler)
	}

	_NotifyService_CreateNotify_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateNotify(ctx, req.(*CreateNotifyRequest))
	}
	var _NotifyService_CreateNotify_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_CreateNotify_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "CreateNotify", srv)
		_NotifyService_CreateNotify_Handler = h.Interceptor(_NotifyService_CreateNotify_Handler)
	}

	_NotifyService_DeleteNotify_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteNotify(ctx, req.(*DeleteNotifyRequest))
	}
	var _NotifyService_DeleteNotify_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_DeleteNotify_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "DeleteNotify", srv)
		_NotifyService_DeleteNotify_Handler = h.Interceptor(_NotifyService_DeleteNotify_Handler)
	}

	_NotifyService_UpdateNotify_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateNotify(ctx, req.(*UpdateNotifyRequest))
	}
	var _NotifyService_UpdateNotify_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_UpdateNotify_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "UpdateNotify", srv)
		_NotifyService_UpdateNotify_Handler = h.Interceptor(_NotifyService_UpdateNotify_Handler)
	}

	_NotifyService_GetUserNotifyList_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetUserNotifyList(ctx, req.(*GetUserNotifyListRequest))
	}
	var _NotifyService_GetUserNotifyList_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetUserNotifyList_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetUserNotifyList", srv)
		_NotifyService_GetUserNotifyList_Handler = h.Interceptor(_NotifyService_GetUserNotifyList_Handler)
	}

	_NotifyService_NotifyEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.NotifyEnable(ctx, req.(*NotifyEnableRequest))
	}
	var _NotifyService_NotifyEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_NotifyEnable_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "NotifyEnable", srv)
		_NotifyService_NotifyEnable_Handler = h.Interceptor(_NotifyService_NotifyEnable_Handler)
	}

	_NotifyService_CreateUserDefineNotifyTemplate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateUserDefineNotifyTemplate(ctx, req.(*CreateUserDefineNotifyTemplateRequest))
	}
	var _NotifyService_CreateUserDefineNotifyTemplate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_CreateUserDefineNotifyTemplate_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "CreateUserDefineNotifyTemplate", srv)
		_NotifyService_CreateUserDefineNotifyTemplate_Handler = h.Interceptor(_NotifyService_CreateUserDefineNotifyTemplate_Handler)
	}

	_NotifyService_GetNotifyDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetNotifyDetail(ctx, req.(*GetNotifyDetailRequest))
	}
	var _NotifyService_GetNotifyDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetNotifyDetail_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetNotifyDetail", srv)
		_NotifyService_GetNotifyDetail_Handler = h.Interceptor(_NotifyService_GetNotifyDetail_Handler)
	}

	_NotifyService_GetAllGroups_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAllGroups(ctx, req.(*GetAllGroupsRequest))
	}
	var _NotifyService_GetAllGroups_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetAllGroups_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetAllGroups", srv)
		_NotifyService_GetAllGroups_Handler = h.Interceptor(_NotifyService_GetAllGroups_Handler)
	}

	var serviceDesc = _NotifyService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetAllNotifyTemplates",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAllNotifyTemplatesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetAllNotifyTemplates(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetAllNotifyTemplates_info)
				}
				if interceptor == nil {
					return _NotifyService_GetAllNotifyTemplates_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/GetAllNotifyTemplates",
				}
				return interceptor(ctx, in, info, _NotifyService_GetAllNotifyTemplates_Handler)
			},
		},
		{
			MethodName: "GetNotifyTemplate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetNotifyTemplateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetNotifyTemplate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetNotifyTemplate_info)
				}
				if interceptor == nil {
					return _NotifyService_GetNotifyTemplate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/GetNotifyTemplate",
				}
				return interceptor(ctx, in, info, _NotifyService_GetNotifyTemplate_Handler)
			},
		},
		{
			MethodName: "CreateNotify",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateNotifyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).CreateNotify(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_CreateNotify_info)
				}
				if interceptor == nil {
					return _NotifyService_CreateNotify_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/CreateNotify",
				}
				return interceptor(ctx, in, info, _NotifyService_CreateNotify_Handler)
			},
		},
		{
			MethodName: "DeleteNotify",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteNotifyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).DeleteNotify(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_DeleteNotify_info)
				}
				if interceptor == nil {
					return _NotifyService_DeleteNotify_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/DeleteNotify",
				}
				return interceptor(ctx, in, info, _NotifyService_DeleteNotify_Handler)
			},
		},
		{
			MethodName: "UpdateNotify",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateNotifyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).UpdateNotify(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_UpdateNotify_info)
				}
				if interceptor == nil {
					return _NotifyService_UpdateNotify_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/UpdateNotify",
				}
				return interceptor(ctx, in, info, _NotifyService_UpdateNotify_Handler)
			},
		},
		{
			MethodName: "GetUserNotifyList",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetUserNotifyListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetUserNotifyList(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetUserNotifyList_info)
				}
				if interceptor == nil {
					return _NotifyService_GetUserNotifyList_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/GetUserNotifyList",
				}
				return interceptor(ctx, in, info, _NotifyService_GetUserNotifyList_Handler)
			},
		},
		{
			MethodName: "NotifyEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(NotifyEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).NotifyEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_NotifyEnable_info)
				}
				if interceptor == nil {
					return _NotifyService_NotifyEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/NotifyEnable",
				}
				return interceptor(ctx, in, info, _NotifyService_NotifyEnable_Handler)
			},
		},
		{
			MethodName: "CreateUserDefineNotifyTemplate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateUserDefineNotifyTemplateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).CreateUserDefineNotifyTemplate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_CreateUserDefineNotifyTemplate_info)
				}
				if interceptor == nil {
					return _NotifyService_CreateUserDefineNotifyTemplate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/CreateUserDefineNotifyTemplate",
				}
				return interceptor(ctx, in, info, _NotifyService_CreateUserDefineNotifyTemplate_Handler)
			},
		},
		{
			MethodName: "GetNotifyDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetNotifyDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetNotifyDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetNotifyDetail_info)
				}
				if interceptor == nil {
					return _NotifyService_GetNotifyDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/GetNotifyDetail",
				}
				return interceptor(ctx, in, info, _NotifyService_GetNotifyDetail_Handler)
			},
		},
		{
			MethodName: "GetAllGroups",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAllGroupsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetAllGroups(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetAllGroups_info)
				}
				if interceptor == nil {
					return _NotifyService_GetAllGroups_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.notify.NotifyService/GetAllGroups",
				}
				return interceptor(ctx, in, info, _NotifyService_GetAllGroups_Handler)
			},
		},
	}
	return &serviceDesc
}
