// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: cron.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	TimeCreated     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	CronExpr        string                 `protobuf:"bytes,4,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
	CronStartTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=cronStartTime,proto3" json:"cronStartTime,omitempty"`
	PipelineYmlName string                 `protobuf:"bytes,6,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	Enable          bool                   `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Cron) Reset() {
	*x = Cron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cron) ProtoMessage() {}

func (x *Cron) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cron.ProtoReflect.Descriptor instead.
func (*Cron) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{0}
}

func (x *Cron) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Cron) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *Cron) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *Cron) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

func (x *Cron) GetCronStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CronStartTime
	}
	return nil
}

func (x *Cron) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *Cron) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type CronPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllSources bool     `protobuf:"varint,1,opt,name=allSources,proto3" json:"allSources,omitempty"`
	Sources    []string `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`   // ?source=cdp-dev&source=cdp-test
	YmlNames   []string `protobuf:"bytes,3,rep,name=ymlNames,proto3" json:"ymlNames,omitempty"` // ?ymlName=11&ymlName=22
	PageSize   int64    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNo     int64    `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
}

func (x *CronPagingRequest) Reset() {
	*x = CronPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronPagingRequest) ProtoMessage() {}

func (x *CronPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronPagingRequest.ProtoReflect.Descriptor instead.
func (*CronPagingRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{1}
}

func (x *CronPagingRequest) GetAllSources() bool {
	if x != nil {
		return x.AllSources
	}
	return false
}

func (x *CronPagingRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *CronPagingRequest) GetYmlNames() []string {
	if x != nil {
		return x.YmlNames
	}
	return nil
}

func (x *CronPagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CronPagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type CronPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*Cron `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CronPagingResponse) Reset() {
	*x = CronPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronPagingResponse) ProtoMessage() {}

func (x *CronPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronPagingResponse.ProtoReflect.Descriptor instead.
func (*CronPagingResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{2}
}

func (x *CronPagingResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CronPagingResponse) GetData() []*Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

type CronStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronStartRequest) Reset() {
	*x = CronStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStartRequest) ProtoMessage() {}

func (x *CronStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStartRequest.ProtoReflect.Descriptor instead.
func (*CronStartRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{3}
}

func (x *CronStartRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cron `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronStartResponse) Reset() {
	*x = CronStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStartResponse) ProtoMessage() {}

func (x *CronStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStartResponse.ProtoReflect.Descriptor instead.
func (*CronStartResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{4}
}

func (x *CronStartResponse) GetData() *Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

type CronStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronStopRequest) Reset() {
	*x = CronStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStopRequest) ProtoMessage() {}

func (x *CronStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStopRequest.ProtoReflect.Descriptor instead.
func (*CronStopRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{5}
}

func (x *CronStopRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cron `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronStopResponse) Reset() {
	*x = CronStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStopResponse) ProtoMessage() {}

func (x *CronStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStopResponse.ProtoReflect.Descriptor instead.
func (*CronStopResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{6}
}

func (x *CronStopResponse) GetData() *Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

type CronCreateRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineYml            string                 `protobuf:"bytes,1,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	ClusterName            string                 `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	PipelineYmlName        string                 `protobuf:"bytes,3,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	PipelineSource         string                 `protobuf:"bytes,4,opt,name=pipelineSource,proto3" json:"pipelineSource,omitempty"`
	Labels                 map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NormalLabels           map[string]string      `protobuf:"bytes,6,rep,name=normalLabels,proto3" json:"normalLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Envs                   map[string]string      `protobuf:"bytes,7,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigManageNamespaces []string               `protobuf:"bytes,8,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	AutoStartCron          bool                   `protobuf:"varint,9,opt,name=autoStartCron,proto3" json:"autoStartCron,omitempty"`
	CronStartFrom          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=cronStartFrom,proto3" json:"cronStartFrom,omitempty"`
}

func (x *CronCreateRequestV1) Reset() {
	*x = CronCreateRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCreateRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCreateRequestV1) ProtoMessage() {}

func (x *CronCreateRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCreateRequestV1.ProtoReflect.Descriptor instead.
func (*CronCreateRequestV1) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{7}
}

func (x *CronCreateRequestV1) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *CronCreateRequestV1) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CronCreateRequestV1) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *CronCreateRequestV1) GetPipelineSource() string {
	if x != nil {
		return x.PipelineSource
	}
	return ""
}

func (x *CronCreateRequestV1) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CronCreateRequestV1) GetNormalLabels() map[string]string {
	if x != nil {
		return x.NormalLabels
	}
	return nil
}

func (x *CronCreateRequestV1) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *CronCreateRequestV1) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *CronCreateRequestV1) GetAutoStartCron() bool {
	if x != nil {
		return x.AutoStartCron
	}
	return false
}

func (x *CronCreateRequestV1) GetCronStartFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CronStartFrom
	}
	return nil
}

type CronCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineCreateRequest *CronCreateRequestV1 `protobuf:"bytes,1,opt,name=pipelineCreateRequest,proto3" json:"pipelineCreateRequest,omitempty"`
}

func (x *CronCreateRequest) Reset() {
	*x = CronCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCreateRequest) ProtoMessage() {}

func (x *CronCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCreateRequest.ProtoReflect.Descriptor instead.
func (*CronCreateRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{8}
}

func (x *CronCreateRequest) GetPipelineCreateRequest() *CronCreateRequestV1 {
	if x != nil {
		return x.PipelineCreateRequest
	}
	return nil
}

type CronCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronCreateResponse) Reset() {
	*x = CronCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCreateResponse) ProtoMessage() {}

func (x *CronCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCreateResponse.ProtoReflect.Descriptor instead.
func (*CronCreateResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{9}
}

func (x *CronCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type CronDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronDeleteRequest) Reset() {
	*x = CronDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronDeleteRequest) ProtoMessage() {}

func (x *CronDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronDeleteRequest.ProtoReflect.Descriptor instead.
func (*CronDeleteRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{10}
}

func (x *CronDeleteRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CronDeleteResponse) Reset() {
	*x = CronDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronDeleteResponse) ProtoMessage() {}

func (x *CronDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronDeleteResponse.ProtoReflect.Descriptor instead.
func (*CronDeleteResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{11}
}

type CronGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronGetRequest) Reset() {
	*x = CronGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronGetRequest) ProtoMessage() {}

func (x *CronGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronGetRequest.ProtoReflect.Descriptor instead.
func (*CronGetRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{12}
}

func (x *CronGetRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cron `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronGetResponse) Reset() {
	*x = CronGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronGetResponse) ProtoMessage() {}

func (x *CronGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronGetResponse.ProtoReflect.Descriptor instead.
func (*CronGetResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{13}
}

func (x *CronGetResponse) GetData() *Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

type CronUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID      uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PipelineYml string `protobuf:"bytes,3,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	CronExpr    string `protobuf:"bytes,4,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
}

func (x *CronUpdateRequest) Reset() {
	*x = CronUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronUpdateRequest) ProtoMessage() {}

func (x *CronUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronUpdateRequest.ProtoReflect.Descriptor instead.
func (*CronUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{14}
}

func (x *CronUpdateRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

func (x *CronUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CronUpdateRequest) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *CronUpdateRequest) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

type CronUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CronUpdateResponse) Reset() {
	*x = CronUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronUpdateResponse) ProtoMessage() {}

func (x *CronUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronUpdateResponse.ProtoReflect.Descriptor instead.
func (*CronUpdateResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{15}
}

var File_cron_proto protoreflect.FileDescriptor

var file_cron_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x22, 0x5d, 0x0a, 0x12, 0x43,
	0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x72,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29,
	0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x10, 0x43, 0x72, 0x6f,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa2, 0x06, 0x0a, 0x13, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59,
	0x6d, 0x6c, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x62, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x31, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31,
	0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09,
	0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x52, 0x15, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28,
	0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x43,
	0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x11, 0x43,
	0x72, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8a, 0x08, 0x0a,
	0x0b, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e,
	0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x12, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x3f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d, 0x7b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x7d, 0x26, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x3d,
	0x7b, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x43,
	0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x1a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72,
	0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0a,
	0x43, 0x72, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cron_proto_rawDescOnce sync.Once
	file_cron_proto_rawDescData = file_cron_proto_rawDesc
)

func file_cron_proto_rawDescGZIP() []byte {
	file_cron_proto_rawDescOnce.Do(func() {
		file_cron_proto_rawDescData = protoimpl.X.CompressGZIP(file_cron_proto_rawDescData)
	})
	return file_cron_proto_rawDescData
}

var file_cron_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cron_proto_goTypes = []interface{}{
	(*Cron)(nil),                  // 0: erda.core.pipeline.cron.Cron
	(*CronPagingRequest)(nil),     // 1: erda.core.pipeline.cron.CronPagingRequest
	(*CronPagingResponse)(nil),    // 2: erda.core.pipeline.cron.CronPagingResponse
	(*CronStartRequest)(nil),      // 3: erda.core.pipeline.cron.CronStartRequest
	(*CronStartResponse)(nil),     // 4: erda.core.pipeline.cron.CronStartResponse
	(*CronStopRequest)(nil),       // 5: erda.core.pipeline.cron.CronStopRequest
	(*CronStopResponse)(nil),      // 6: erda.core.pipeline.cron.CronStopResponse
	(*CronCreateRequestV1)(nil),   // 7: erda.core.pipeline.cron.CronCreateRequestV1
	(*CronCreateRequest)(nil),     // 8: erda.core.pipeline.cron.CronCreateRequest
	(*CronCreateResponse)(nil),    // 9: erda.core.pipeline.cron.CronCreateResponse
	(*CronDeleteRequest)(nil),     // 10: erda.core.pipeline.cron.CronDeleteRequest
	(*CronDeleteResponse)(nil),    // 11: erda.core.pipeline.cron.CronDeleteResponse
	(*CronGetRequest)(nil),        // 12: erda.core.pipeline.cron.CronGetRequest
	(*CronGetResponse)(nil),       // 13: erda.core.pipeline.cron.CronGetResponse
	(*CronUpdateRequest)(nil),     // 14: erda.core.pipeline.cron.CronUpdateRequest
	(*CronUpdateResponse)(nil),    // 15: erda.core.pipeline.cron.CronUpdateResponse
	nil,                           // 16: erda.core.pipeline.cron.CronCreateRequestV1.LabelsEntry
	nil,                           // 17: erda.core.pipeline.cron.CronCreateRequestV1.NormalLabelsEntry
	nil,                           // 18: erda.core.pipeline.cron.CronCreateRequestV1.EnvsEntry
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
}
var file_cron_proto_depIdxs = []int32{
	19, // 0: erda.core.pipeline.cron.Cron.timeCreated:type_name -> google.protobuf.Timestamp
	19, // 1: erda.core.pipeline.cron.Cron.timeUpdated:type_name -> google.protobuf.Timestamp
	19, // 2: erda.core.pipeline.cron.Cron.cronStartTime:type_name -> google.protobuf.Timestamp
	0,  // 3: erda.core.pipeline.cron.CronPagingResponse.data:type_name -> erda.core.pipeline.cron.Cron
	0,  // 4: erda.core.pipeline.cron.CronStartResponse.data:type_name -> erda.core.pipeline.cron.Cron
	0,  // 5: erda.core.pipeline.cron.CronStopResponse.data:type_name -> erda.core.pipeline.cron.Cron
	16, // 6: erda.core.pipeline.cron.CronCreateRequestV1.labels:type_name -> erda.core.pipeline.cron.CronCreateRequestV1.LabelsEntry
	17, // 7: erda.core.pipeline.cron.CronCreateRequestV1.normalLabels:type_name -> erda.core.pipeline.cron.CronCreateRequestV1.NormalLabelsEntry
	18, // 8: erda.core.pipeline.cron.CronCreateRequestV1.envs:type_name -> erda.core.pipeline.cron.CronCreateRequestV1.EnvsEntry
	19, // 9: erda.core.pipeline.cron.CronCreateRequestV1.cronStartFrom:type_name -> google.protobuf.Timestamp
	7,  // 10: erda.core.pipeline.cron.CronCreateRequest.pipelineCreateRequest:type_name -> erda.core.pipeline.cron.CronCreateRequestV1
	0,  // 11: erda.core.pipeline.cron.CronGetResponse.data:type_name -> erda.core.pipeline.cron.Cron
	8,  // 12: erda.core.pipeline.cron.CronService.CronCreate:input_type -> erda.core.pipeline.cron.CronCreateRequest
	1,  // 13: erda.core.pipeline.cron.CronService.CronPaging:input_type -> erda.core.pipeline.cron.CronPagingRequest
	3,  // 14: erda.core.pipeline.cron.CronService.CronStart:input_type -> erda.core.pipeline.cron.CronStartRequest
	5,  // 15: erda.core.pipeline.cron.CronService.CronStop:input_type -> erda.core.pipeline.cron.CronStopRequest
	10, // 16: erda.core.pipeline.cron.CronService.CronDelete:input_type -> erda.core.pipeline.cron.CronDeleteRequest
	12, // 17: erda.core.pipeline.cron.CronService.CronGet:input_type -> erda.core.pipeline.cron.CronGetRequest
	14, // 18: erda.core.pipeline.cron.CronService.CronUpdate:input_type -> erda.core.pipeline.cron.CronUpdateRequest
	9,  // 19: erda.core.pipeline.cron.CronService.CronCreate:output_type -> erda.core.pipeline.cron.CronCreateResponse
	2,  // 20: erda.core.pipeline.cron.CronService.CronPaging:output_type -> erda.core.pipeline.cron.CronPagingResponse
	4,  // 21: erda.core.pipeline.cron.CronService.CronStart:output_type -> erda.core.pipeline.cron.CronStartResponse
	6,  // 22: erda.core.pipeline.cron.CronService.CronStop:output_type -> erda.core.pipeline.cron.CronStopResponse
	11, // 23: erda.core.pipeline.cron.CronService.CronDelete:output_type -> erda.core.pipeline.cron.CronDeleteResponse
	13, // 24: erda.core.pipeline.cron.CronService.CronGet:output_type -> erda.core.pipeline.cron.CronGetResponse
	15, // 25: erda.core.pipeline.cron.CronService.CronUpdate:output_type -> erda.core.pipeline.cron.CronUpdateResponse
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cron_proto_init() }
func file_cron_proto_init() {
	if File_cron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCreateRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cron_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cron_proto_goTypes,
		DependencyIndexes: file_cron_proto_depIdxs,
		MessageInfos:      file_cron_proto_msgTypes,
	}.Build()
	File_cron_proto = out.File
	file_cron_proto_rawDesc = nil
	file_cron_proto_goTypes = nil
	file_cron_proto_depIdxs = nil
}
