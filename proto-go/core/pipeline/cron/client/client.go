// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: cron.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/cron/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// CronService cron.proto
	CronService() pb.CronServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		cronService: pb.NewCronServiceClient(cc),
	}
}

type serviceClients struct {
	cronService pb.CronServiceClient
}

func (c *serviceClients) CronService() pb.CronServiceClient {
	return c.cronService
}

type cronServiceWrapper struct {
	client pb.CronServiceClient
	opts   []grpc1.CallOption
}

func (s *cronServiceWrapper) CronCreate(ctx context.Context, req *pb.CronCreateRequest) (*pb.CronCreateResponse, error) {
	return s.client.CronCreate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cronServiceWrapper) CronPaging(ctx context.Context, req *pb.CronPagingRequest) (*pb.CronPagingResponse, error) {
	return s.client.CronPaging(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cronServiceWrapper) CronStart(ctx context.Context, req *pb.CronStartRequest) (*pb.CronStartResponse, error) {
	return s.client.CronStart(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cronServiceWrapper) CronStop(ctx context.Context, req *pb.CronStopRequest) (*pb.CronStopResponse, error) {
	return s.client.CronStop(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cronServiceWrapper) CronDelete(ctx context.Context, req *pb.CronDeleteRequest) (*pb.CronDeleteResponse, error) {
	return s.client.CronDelete(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cronServiceWrapper) CronGet(ctx context.Context, req *pb.CronGetRequest) (*pb.CronGetResponse, error) {
	return s.client.CronGet(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cronServiceWrapper) CronUpdate(ctx context.Context, req *pb.CronUpdateRequest) (*pb.CronUpdateResponse, error) {
	return s.client.CronUpdate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
