// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: report.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/report/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ReportService report.proto
	ReportService() pb.ReportServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		reportService: pb.NewReportServiceClient(cc),
	}
}

type serviceClients struct {
	reportService pb.ReportServiceClient
}

func (c *serviceClients) ReportService() pb.ReportServiceClient {
	return c.reportService
}

type reportServiceWrapper struct {
	client pb.ReportServiceClient
	opts   []grpc1.CallOption
}

func (s *reportServiceWrapper) QueryPipelineReportSet(ctx context.Context, req *pb.PipelineReportSetQueryRequest) (*pb.PipelineReportSetQueryResponse, error) {
	return s.client.QueryPipelineReportSet(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) PagingPipelineReportSet(ctx context.Context, req *pb.PipelineReportSetPagingRequest) (*pb.PipelineReportSetPagingResponse, error) {
	return s.client.PagingPipelineReportSet(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
