// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: build.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/build/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// BuildService build.proto
	BuildService() pb.BuildServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		buildService: pb.NewBuildServiceClient(cc),
	}
}

type serviceClients struct {
	buildService pb.BuildServiceClient
}

func (c *serviceClients) BuildService() pb.BuildServiceClient {
	return c.buildService
}

type buildServiceWrapper struct {
	client pb.BuildServiceClient
	opts   []grpc1.CallOption
}

func (s *buildServiceWrapper) QueryBuildArtifact(ctx context.Context, req *pb.BuildArtifactQueryRequest) (*pb.BuildArtifactQueryResponse, error) {
	return s.client.QueryBuildArtifact(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *buildServiceWrapper) RegisterBuildArtifact(ctx context.Context, req *pb.BuildArtifactRegisterRequest) (*pb.BuildArtifactRegisterResponse, error) {
	return s.client.RegisterBuildArtifact(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *buildServiceWrapper) ReportBuildCache(ctx context.Context, req *pb.BuildCacheReportRequest) (*pb.BuildCacheReportResponse, error) {
	return s.client.ReportBuildCache(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
