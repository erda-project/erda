// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: greeter.proto, user.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/examples/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// GreeterService greeter.proto
	GreeterService() pb.GreeterServiceClient
	// UserService user.proto
	UserService() pb.UserServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		greeterService: pb.NewGreeterServiceClient(cc),
		userService:    pb.NewUserServiceClient(cc),
	}
}

type serviceClients struct {
	greeterService pb.GreeterServiceClient
	userService    pb.UserServiceClient
}

func (c *serviceClients) GreeterService() pb.GreeterServiceClient {
	return c.greeterService
}

func (c *serviceClients) UserService() pb.UserServiceClient {
	return c.userService
}

type greeterServiceWrapper struct {
	client pb.GreeterServiceClient
	opts   []grpc1.CallOption
}

func (s *greeterServiceWrapper) SayHello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloResponse, error) {
	return s.client.SayHello(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

type userServiceWrapper struct {
	client pb.UserServiceClient
	opts   []grpc1.CallOption
}

func (s *userServiceWrapper) GetUser(ctx context.Context, req *pb.GetUserRequest) (*pb.GetUserResponse, error) {
	return s.client.GetUser(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *userServiceWrapper) UpdateUser(ctx context.Context, req *pb.GetUserRequest) (*pb.UpdateUserResponse, error) {
	return s.client.UpdateUser(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
