// Code generated by MockGen. DO NOT EDIT.
// Source: ../storage/storage.go

// Package query is a generated GoMock package.
package query

import (
	"context"
	"reflect"

	"github.com/golang/mock/gomock"

	"github.com/erda-project/erda/internal/tools/monitor/core/event"
	"github.com/erda-project/erda/internal/tools/monitor/core/event/storage"
	"github.com/erda-project/erda/internal/tools/monitor/core/storekit"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// NewWriter mocks base method.
func (m *MockStorage) NewWriter(ctx context.Context) (storekit.BatchWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter", ctx)
	ret0, _ := ret[0].(storekit.BatchWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWriter indicates an expected call of NewWriter.
func (mr *MockStorageMockRecorder) NewWriter(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockStorage)(nil).NewWriter), ctx)
}

// QueryPaged mocks base method.
func (m *MockStorage) QueryPaged(ctx context.Context, sel *storage.Selector, pageNo, pageSize int) ([]*event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPaged", ctx, sel, pageNo, pageSize)
	ret0, _ := ret[0].([]*event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPaged indicates an expected call of QueryPaged.
func (mr *MockStorageMockRecorder) QueryPaged(ctx, sel, pageNo, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPaged", reflect.TypeOf((*MockStorage)(nil).QueryPaged), ctx, sel, pageNo, pageSize)
}
