// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	apistructs "github.com/erda-project/erda/apistructs"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
)

// MockAddonOperator is a mock of AddonOperator interface.
type MockAddonOperator struct {
	ctrl     *gomock.Controller
	recorder *MockAddonOperatorMockRecorder
}

// MockAddonOperatorMockRecorder is the mock recorder for MockAddonOperator.
type MockAddonOperatorMockRecorder struct {
	mock *MockAddonOperator
}

// NewMockAddonOperator creates a new mock instance.
func NewMockAddonOperator(ctrl *gomock.Controller) *MockAddonOperator {
	mock := &MockAddonOperator{ctrl: ctrl}
	mock.recorder = &MockAddonOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddonOperator) EXPECT() *MockAddonOperatorMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockAddonOperator) Convert(arg0 *apistructs.ServiceGroup) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockAddonOperatorMockRecorder) Convert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockAddonOperator)(nil).Convert), arg0)
}

// Create mocks base method.
func (m *MockAddonOperator) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAddonOperatorMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAddonOperator)(nil).Create), arg0)
}

// Inspect mocks base method.
func (m *MockAddonOperator) Inspect(arg0 *apistructs.ServiceGroup) (*apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0)
	ret0, _ := ret[0].(*apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockAddonOperatorMockRecorder) Inspect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockAddonOperator)(nil).Inspect), arg0)
}

// IsSupported mocks base method.
func (m *MockAddonOperator) IsSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupported indicates an expected call of IsSupported.
func (mr *MockAddonOperatorMockRecorder) IsSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupported", reflect.TypeOf((*MockAddonOperator)(nil).IsSupported))
}

// Remove mocks base method.
func (m *MockAddonOperator) Remove(arg0 *apistructs.ServiceGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockAddonOperatorMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAddonOperator)(nil).Remove), arg0)
}

// Update mocks base method.
func (m *MockAddonOperator) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddonOperatorMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddonOperator)(nil).Update), arg0)
}

// Validate mocks base method.
func (m *MockAddonOperator) Validate(arg0 *apistructs.ServiceGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAddonOperatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAddonOperator)(nil).Validate), arg0)
}

// MockK8SUtil is a mock of K8SUtil interface.
type MockK8SUtil struct {
	ctrl     *gomock.Controller
	recorder *MockK8SUtilMockRecorder
}

// MockK8SUtilMockRecorder is the mock recorder for MockK8SUtil.
type MockK8SUtilMockRecorder struct {
	mock *MockK8SUtil
}

// NewMockK8SUtil creates a new mock instance.
func NewMockK8SUtil(ctrl *gomock.Controller) *MockK8SUtil {
	mock := &MockK8SUtil{ctrl: ctrl}
	mock.recorder = &MockK8SUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8SUtil) EXPECT() *MockK8SUtilMockRecorder {
	return m.recorder
}

// GetK8SAddr mocks base method.
func (m *MockK8SUtil) GetK8SAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8SAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetK8SAddr indicates an expected call of GetK8SAddr.
func (mr *MockK8SUtilMockRecorder) GetK8SAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8SAddr", reflect.TypeOf((*MockK8SUtil)(nil).GetK8SAddr))
}

// MockDeploymentUtil is a mock of DeploymentUtil interface.
type MockDeploymentUtil struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentUtilMockRecorder
}

// MockDeploymentUtilMockRecorder is the mock recorder for MockDeploymentUtil.
type MockDeploymentUtilMockRecorder struct {
	mock *MockDeploymentUtil
}

// NewMockDeploymentUtil creates a new mock instance.
func NewMockDeploymentUtil(ctrl *gomock.Controller) *MockDeploymentUtil {
	mock := &MockDeploymentUtil{ctrl: ctrl}
	mock.recorder = &MockDeploymentUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentUtil) EXPECT() *MockDeploymentUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeploymentUtil) Create(arg0 *v1.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDeploymentUtilMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeploymentUtil)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDeploymentUtil) Delete(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentUtilMockRecorder) Delete(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentUtil)(nil).Delete), namespace, name)
}

// Get mocks base method.
func (m *MockDeploymentUtil) Get(namespace, name string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", namespace, name)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeploymentUtilMockRecorder) Get(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeploymentUtil)(nil).Get), namespace, name)
}

// List mocks base method.
func (m *MockDeploymentUtil) List(namespace string, labelSelector map[string]string) (*v1.DeploymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace, labelSelector)
	ret0, _ := ret[0].(*v1.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDeploymentUtilMockRecorder) List(namespace, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeploymentUtil)(nil).List), namespace, labelSelector)
}

// Patch mocks base method.
func (m *MockDeploymentUtil) Patch(namespace, deployName, containerName string, snippet v10.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", namespace, deployName, containerName, snippet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockDeploymentUtilMockRecorder) Patch(namespace, deployName, containerName, snippet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockDeploymentUtil)(nil).Patch), namespace, deployName, containerName, snippet)
}

// MockStatefulsetUtil is a mock of StatefulsetUtil interface.
type MockStatefulsetUtil struct {
	ctrl     *gomock.Controller
	recorder *MockStatefulsetUtilMockRecorder
}

// MockStatefulsetUtilMockRecorder is the mock recorder for MockStatefulsetUtil.
type MockStatefulsetUtilMockRecorder struct {
	mock *MockStatefulsetUtil
}

// NewMockStatefulsetUtil creates a new mock instance.
func NewMockStatefulsetUtil(ctrl *gomock.Controller) *MockStatefulsetUtil {
	mock := &MockStatefulsetUtil{ctrl: ctrl}
	mock.recorder = &MockStatefulsetUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatefulsetUtil) EXPECT() *MockStatefulsetUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStatefulsetUtil) Create(arg0 *v1.StatefulSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStatefulsetUtilMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStatefulsetUtil)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockStatefulsetUtil) Delete(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStatefulsetUtilMockRecorder) Delete(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStatefulsetUtil)(nil).Delete), namespace, name)
}

// Get mocks base method.
func (m *MockStatefulsetUtil) Get(namespace, name string) (*v1.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", namespace, name)
	ret0, _ := ret[0].(*v1.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStatefulsetUtilMockRecorder) Get(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStatefulsetUtil)(nil).Get), namespace, name)
}

// List mocks base method.
func (m *MockStatefulsetUtil) List(namespace string) (v1.StatefulSetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace)
	ret0, _ := ret[0].(v1.StatefulSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStatefulsetUtilMockRecorder) List(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStatefulsetUtil)(nil).List), namespace)
}

// MockDaemonsetUtil is a mock of DaemonsetUtil interface.
type MockDaemonsetUtil struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonsetUtilMockRecorder
}

// MockDaemonsetUtilMockRecorder is the mock recorder for MockDaemonsetUtil.
type MockDaemonsetUtilMockRecorder struct {
	mock *MockDaemonsetUtil
}

// NewMockDaemonsetUtil creates a new mock instance.
func NewMockDaemonsetUtil(ctrl *gomock.Controller) *MockDaemonsetUtil {
	mock := &MockDaemonsetUtil{ctrl: ctrl}
	mock.recorder = &MockDaemonsetUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaemonsetUtil) EXPECT() *MockDaemonsetUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDaemonsetUtil) Create(arg0 *v1.DaemonSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDaemonsetUtilMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDaemonsetUtil)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDaemonsetUtil) Delete(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDaemonsetUtilMockRecorder) Delete(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDaemonsetUtil)(nil).Delete), namespace, name)
}

// Get mocks base method.
func (m *MockDaemonsetUtil) Get(namespace, name string) (*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", namespace, name)
	ret0, _ := ret[0].(*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDaemonsetUtilMockRecorder) Get(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDaemonsetUtil)(nil).Get), namespace, name)
}

// List mocks base method.
func (m *MockDaemonsetUtil) List(namespace string, labelSelector map[string]string) (*v1.DaemonSetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace, labelSelector)
	ret0, _ := ret[0].(*v1.DaemonSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDaemonsetUtilMockRecorder) List(namespace, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDaemonsetUtil)(nil).List), namespace, labelSelector)
}

// Update mocks base method.
func (m *MockDaemonsetUtil) Update(arg0 *v1.DaemonSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDaemonsetUtilMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDaemonsetUtil)(nil).Update), arg0)
}

// MockServiceUtil is a mock of ServiceUtil interface.
type MockServiceUtil struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUtilMockRecorder
}

// MockServiceUtilMockRecorder is the mock recorder for MockServiceUtil.
type MockServiceUtilMockRecorder struct {
	mock *MockServiceUtil
}

// NewMockServiceUtil creates a new mock instance.
func NewMockServiceUtil(ctrl *gomock.Controller) *MockServiceUtil {
	mock := &MockServiceUtil{ctrl: ctrl}
	mock.recorder = &MockServiceUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUtil) EXPECT() *MockServiceUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceUtil) Create(service *v10.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceUtilMockRecorder) Create(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceUtil)(nil).Create), service)
}

// Delete mocks base method.
func (m *MockServiceUtil) Delete(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceUtilMockRecorder) Delete(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceUtil)(nil).Delete), namespace, name)
}

// Get mocks base method.
func (m *MockServiceUtil) Get(namespace, name string) (*v10.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", namespace, name)
	ret0, _ := ret[0].(*v10.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceUtilMockRecorder) Get(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceUtil)(nil).Get), namespace, name)
}

// List mocks base method.
func (m *MockServiceUtil) List(namespace string, selectors map[string]string) (v10.ServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace, selectors)
	ret0, _ := ret[0].(v10.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceUtilMockRecorder) List(namespace, selectors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceUtil)(nil).List), namespace, selectors)
}

// Put mocks base method.
func (m *MockServiceUtil) Put(service *v10.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockServiceUtilMockRecorder) Put(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockServiceUtil)(nil).Put), service)
}

// MockNamespaceUtil is a mock of NamespaceUtil interface.
type MockNamespaceUtil struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceUtilMockRecorder
}

// MockNamespaceUtilMockRecorder is the mock recorder for MockNamespaceUtil.
type MockNamespaceUtilMockRecorder struct {
	mock *MockNamespaceUtil
}

// NewMockNamespaceUtil creates a new mock instance.
func NewMockNamespaceUtil(ctrl *gomock.Controller) *MockNamespaceUtil {
	mock := &MockNamespaceUtil{ctrl: ctrl}
	mock.recorder = &MockNamespaceUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceUtil) EXPECT() *MockNamespaceUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNamespaceUtil) Create(ns string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ns, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNamespaceUtilMockRecorder) Create(ns, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNamespaceUtil)(nil).Create), ns, labels)
}

// Delete mocks base method.
func (m *MockNamespaceUtil) Delete(ns string, force ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ns}
	for _, a := range force {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceUtilMockRecorder) Delete(ns interface{}, force ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ns}, force...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespaceUtil)(nil).Delete), varargs...)
}

// Exists mocks base method.
func (m *MockNamespaceUtil) Exists(ns string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockNamespaceUtilMockRecorder) Exists(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockNamespaceUtil)(nil).Exists), ns)
}

// MockSecretUtil is a mock of SecretUtil interface.
type MockSecretUtil struct {
	ctrl     *gomock.Controller
	recorder *MockSecretUtilMockRecorder
}

// MockSecretUtilMockRecorder is the mock recorder for MockSecretUtil.
type MockSecretUtilMockRecorder struct {
	mock *MockSecretUtil
}

// NewMockSecretUtil creates a new mock instance.
func NewMockSecretUtil(ctrl *gomock.Controller) *MockSecretUtil {
	mock := &MockSecretUtil{ctrl: ctrl}
	mock.recorder = &MockSecretUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretUtil) EXPECT() *MockSecretUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretUtil) Create(arg0 *v10.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSecretUtilMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretUtil)(nil).Create), arg0)
}

// CreateIfNotExist mocks base method.
func (m *MockSecretUtil) CreateIfNotExist(secret *v10.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExist", secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIfNotExist indicates an expected call of CreateIfNotExist.
func (mr *MockSecretUtilMockRecorder) CreateIfNotExist(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExist", reflect.TypeOf((*MockSecretUtil)(nil).CreateIfNotExist), secret)
}

// Get mocks base method.
func (m *MockSecretUtil) Get(ns, name string) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ns, name)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretUtilMockRecorder) Get(ns, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretUtil)(nil).Get), ns, name)
}

// MockImageSecretUtil is a mock of ImageSecretUtil interface.
type MockImageSecretUtil struct {
	ctrl     *gomock.Controller
	recorder *MockImageSecretUtilMockRecorder
}

// MockImageSecretUtilMockRecorder is the mock recorder for MockImageSecretUtil.
type MockImageSecretUtilMockRecorder struct {
	mock *MockImageSecretUtil
}

// NewMockImageSecretUtil creates a new mock instance.
func NewMockImageSecretUtil(ctrl *gomock.Controller) *MockImageSecretUtil {
	mock := &MockImageSecretUtil{ctrl: ctrl}
	mock.recorder = &MockImageSecretUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageSecretUtil) EXPECT() *MockImageSecretUtilMockRecorder {
	return m.recorder
}

// NewImageSecret mocks base method.
func (m *MockImageSecretUtil) NewImageSecret(ns string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewImageSecret", ns)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewImageSecret indicates an expected call of NewImageSecret.
func (mr *MockImageSecretUtilMockRecorder) NewImageSecret(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImageSecret", reflect.TypeOf((*MockImageSecretUtil)(nil).NewImageSecret), ns)
}

// MockHealthcheckUtil is a mock of HealthcheckUtil interface.
type MockHealthcheckUtil struct {
	ctrl     *gomock.Controller
	recorder *MockHealthcheckUtilMockRecorder
}

// MockHealthcheckUtilMockRecorder is the mock recorder for MockHealthcheckUtil.
type MockHealthcheckUtilMockRecorder struct {
	mock *MockHealthcheckUtil
}

// NewMockHealthcheckUtil creates a new mock instance.
func NewMockHealthcheckUtil(ctrl *gomock.Controller) *MockHealthcheckUtil {
	mock := &MockHealthcheckUtil{ctrl: ctrl}
	mock.recorder = &MockHealthcheckUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthcheckUtil) EXPECT() *MockHealthcheckUtilMockRecorder {
	return m.recorder
}

// NewHealthcheckProbe mocks base method.
func (m *MockHealthcheckUtil) NewHealthcheckProbe(arg0 *apistructs.Service) *v10.Probe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHealthcheckProbe", arg0)
	ret0, _ := ret[0].(*v10.Probe)
	return ret0
}

// NewHealthcheckProbe indicates an expected call of NewHealthcheckProbe.
func (mr *MockHealthcheckUtilMockRecorder) NewHealthcheckProbe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHealthcheckProbe", reflect.TypeOf((*MockHealthcheckUtil)(nil).NewHealthcheckProbe), arg0)
}

// MockPVCUtil is a mock of PVCUtil interface.
type MockPVCUtil struct {
	ctrl     *gomock.Controller
	recorder *MockPVCUtilMockRecorder
}

// MockPVCUtilMockRecorder is the mock recorder for MockPVCUtil.
type MockPVCUtilMockRecorder struct {
	mock *MockPVCUtil
}

// NewMockPVCUtil creates a new mock instance.
func NewMockPVCUtil(ctrl *gomock.Controller) *MockPVCUtil {
	mock := &MockPVCUtil{ctrl: ctrl}
	mock.recorder = &MockPVCUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVCUtil) EXPECT() *MockPVCUtilMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPVCUtil) Create(pvc *v10.PersistentVolumeClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pvc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPVCUtilMockRecorder) Create(pvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPVCUtil)(nil).Create), pvc)
}

// MockOverCommitUtil is a mock of OverCommitUtil interface.
type MockOverCommitUtil struct {
	ctrl     *gomock.Controller
	recorder *MockOverCommitUtilMockRecorder
}

// MockOverCommitUtilMockRecorder is the mock recorder for MockOverCommitUtil.
type MockOverCommitUtilMockRecorder struct {
	mock *MockOverCommitUtil
}

// NewMockOverCommitUtil creates a new mock instance.
func NewMockOverCommitUtil(ctrl *gomock.Controller) *MockOverCommitUtil {
	mock := &MockOverCommitUtil{ctrl: ctrl}
	mock.recorder = &MockOverCommitUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverCommitUtil) EXPECT() *MockOverCommitUtilMockRecorder {
	return m.recorder
}

// ResourceOverCommit mocks base method.
func (m *MockOverCommitUtil) ResourceOverCommit(workspace apistructs.DiceWorkspace, resources apistructs.Resources) (v10.ResourceRequirements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceOverCommit", workspace, resources)
	ret0, _ := ret[0].(v10.ResourceRequirements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceOverCommit indicates an expected call of ResourceOverCommit.
func (mr *MockOverCommitUtilMockRecorder) ResourceOverCommit(workspace, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceOverCommit", reflect.TypeOf((*MockOverCommitUtil)(nil).ResourceOverCommit), workspace, resources)
}
