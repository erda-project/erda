// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda/internal/tools/orchestrator/components/runtime (interfaces: DBService,BundleService,EventManagerService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	apistructs "github.com/erda-project/erda/apistructs"
	dbclient "github.com/erda-project/erda/internal/tools/orchestrator/dbclient"
	events "github.com/erda-project/erda/internal/tools/orchestrator/events"
	spec "github.com/erda-project/erda/internal/tools/orchestrator/spec"
)

// MockDBService is a mock of DBService interface.
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService.
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance.
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// FindDomainsByRuntimeId mocks base method.
func (m *MockDBService) FindDomainsByRuntimeId(arg0 uint64) ([]dbclient.RuntimeDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDomainsByRuntimeId", arg0)
	ret0, _ := ret[0].([]dbclient.RuntimeDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDomainsByRuntimeId indicates an expected call of FindDomainsByRuntimeId.
func (mr *MockDBServiceMockRecorder) FindDomainsByRuntimeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDomainsByRuntimeId", reflect.TypeOf((*MockDBService)(nil).FindDomainsByRuntimeId), arg0)
}

// FindLastDeployment mocks base method.
func (m *MockDBService) FindLastDeployment(arg0 uint64) (*dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastDeployment", arg0)
	ret0, _ := ret[0].(*dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastDeployment indicates an expected call of FindLastDeployment.
func (mr *MockDBServiceMockRecorder) FindLastDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastDeployment", reflect.TypeOf((*MockDBService)(nil).FindLastDeployment), arg0)
}

// FindRuntime mocks base method.
func (m *MockDBService) FindRuntime(arg0 spec.RuntimeUniqueId) (*dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntime", arg0)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRuntime indicates an expected call of FindRuntime.
func (mr *MockDBServiceMockRecorder) FindRuntime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntime", reflect.TypeOf((*MockDBService)(nil).FindRuntime), arg0)
}

// GetRuntime mocks base method.
func (m *MockDBService) GetRuntime(arg0 uint64) (*dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntime", arg0)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntime indicates an expected call of GetRuntime.
func (mr *MockDBServiceMockRecorder) GetRuntime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntime", reflect.TypeOf((*MockDBService)(nil).GetRuntime), arg0)
}

// GetRuntimeAllowNil mocks base method.
func (m *MockDBService) GetRuntimeAllowNil(arg0 uint64) (*dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeAllowNil", arg0)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeAllowNil indicates an expected call of GetRuntimeAllowNil.
func (mr *MockDBServiceMockRecorder) GetRuntimeAllowNil(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeAllowNil", reflect.TypeOf((*MockDBService)(nil).GetRuntimeAllowNil), arg0)
}

// GetRuntimeHPARulesByRuntimeId mocks base method.
func (m *MockDBService) GetRuntimeHPARulesByRuntimeId(arg0 uint64) ([]dbclient.RuntimeHPA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeHPARulesByRuntimeId", arg0)
	ret0, _ := ret[0].([]dbclient.RuntimeHPA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeHPARulesByRuntimeId indicates an expected call of GetRuntimeHPARulesByRuntimeId.
func (mr *MockDBServiceMockRecorder) GetRuntimeHPARulesByRuntimeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeHPARulesByRuntimeId", reflect.TypeOf((*MockDBService)(nil).GetRuntimeHPARulesByRuntimeId), arg0)
}

// UpdateRuntime mocks base method.
func (m *MockDBService) UpdateRuntime(arg0 *dbclient.Runtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuntime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRuntime indicates an expected call of UpdateRuntime.
func (mr *MockDBServiceMockRecorder) UpdateRuntime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuntime", reflect.TypeOf((*MockDBService)(nil).UpdateRuntime), arg0)
}

// MockBundleService is a mock of BundleService interface.
type MockBundleService struct {
	ctrl     *gomock.Controller
	recorder *MockBundleServiceMockRecorder
}

// MockBundleServiceMockRecorder is the mock recorder for MockBundleService.
type MockBundleServiceMockRecorder struct {
	mock *MockBundleService
}

// NewMockBundleService creates a new mock instance.
func NewMockBundleService(ctrl *gomock.Controller) *MockBundleService {
	mock := &MockBundleService{ctrl: ctrl}
	mock.recorder = &MockBundleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleService) EXPECT() *MockBundleServiceMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockBundleService) CheckPermission(arg0 *apistructs.PermissionCheckRequest) (*apistructs.PermissionCheckResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", arg0)
	ret0, _ := ret[0].(*apistructs.PermissionCheckResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockBundleServiceMockRecorder) CheckPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockBundleService)(nil).CheckPermission), arg0)
}

// GetApp mocks base method.
func (m *MockBundleService) GetApp(arg0 uint64) (*apistructs.ApplicationDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*apistructs.ApplicationDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockBundleServiceMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockBundleService)(nil).GetApp), arg0)
}

// GetCluster mocks base method.
func (m *MockBundleService) GetCluster(arg0 string) (*apistructs.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0)
	ret0, _ := ret[0].(*apistructs.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockBundleServiceMockRecorder) GetCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockBundleService)(nil).GetCluster), arg0)
}

// InspectServiceGroupWithTimeout mocks base method.
func (m *MockBundleService) InspectServiceGroupWithTimeout(arg0, arg1 string) (*apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectServiceGroupWithTimeout", arg0, arg1)
	ret0, _ := ret[0].(*apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectServiceGroupWithTimeout indicates an expected call of InspectServiceGroupWithTimeout.
func (mr *MockBundleServiceMockRecorder) InspectServiceGroupWithTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectServiceGroupWithTimeout", reflect.TypeOf((*MockBundleService)(nil).InspectServiceGroupWithTimeout), arg0, arg1)
}

// MockEventManagerService is a mock of EventManagerService interface.
type MockEventManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockEventManagerServiceMockRecorder
}

// MockEventManagerServiceMockRecorder is the mock recorder for MockEventManagerService.
type MockEventManagerServiceMockRecorder struct {
	mock *MockEventManagerService
}

// NewMockEventManagerService creates a new mock instance.
func NewMockEventManagerService(ctrl *gomock.Controller) *MockEventManagerService {
	mock := &MockEventManagerService{ctrl: ctrl}
	mock.recorder = &MockEventManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventManagerService) EXPECT() *MockEventManagerServiceMockRecorder {
	return m.recorder
}

// EmitEvent mocks base method.
func (m *MockEventManagerService) EmitEvent(arg0 *events.RuntimeEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEvent", arg0)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockEventManagerServiceMockRecorder) EmitEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockEventManagerService)(nil).EmitEvent), arg0)
}
