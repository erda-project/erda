// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda/internal/tools/orchestrator/components/runtime (interfaces: DBService,BundleService,EventManagerService,ClusterService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pb "github.com/erda-project/erda-proto-go/core/clustermanager/cluster/pb"
	apistructs "github.com/erda-project/erda/apistructs"
	dbclient "github.com/erda-project/erda/internal/tools/orchestrator/dbclient"
	events "github.com/erda-project/erda/internal/tools/orchestrator/events"
	spec "github.com/erda-project/erda/internal/tools/orchestrator/spec"
	diceyml "github.com/erda-project/erda/pkg/parser/diceyml"
	gomock "github.com/golang/mock/gomock"
)

// MockDBService is a mock of DBService interface.
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService.
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance.
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// CreateDeployment mocks base method.
func (m *MockDBService) CreateDeployment(arg0 *dbclient.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockDBServiceMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDBService)(nil).CreateDeployment), arg0)
}

// CreateOrUpdateRuntimeService mocks base method.
func (m *MockDBService) CreateOrUpdateRuntimeService(arg0 *dbclient.RuntimeService, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRuntimeService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateRuntimeService indicates an expected call of CreateOrUpdateRuntimeService.
func (mr *MockDBServiceMockRecorder) CreateOrUpdateRuntimeService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRuntimeService", reflect.TypeOf((*MockDBService)(nil).CreateOrUpdateRuntimeService), arg0, arg1)
}

// FindDeploymentsByIDs mocks base method.
func (m *MockDBService) FindDeploymentsByIDs(arg0 []uint64) (map[uint64]dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentsByIDs", arg0)
	ret0, _ := ret[0].(map[uint64]dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentsByIDs indicates an expected call of FindDeploymentsByIDs.
func (mr *MockDBServiceMockRecorder) FindDeploymentsByIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentsByIDs", reflect.TypeOf((*MockDBService)(nil).FindDeploymentsByIDs), arg0)
}

// FindDomainsByRuntimeId mocks base method.
func (m *MockDBService) FindDomainsByRuntimeId(arg0 uint64) ([]dbclient.RuntimeDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDomainsByRuntimeId", arg0)
	ret0, _ := ret[0].([]dbclient.RuntimeDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDomainsByRuntimeId indicates an expected call of FindDomainsByRuntimeId.
func (mr *MockDBServiceMockRecorder) FindDomainsByRuntimeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDomainsByRuntimeId", reflect.TypeOf((*MockDBService)(nil).FindDomainsByRuntimeId), arg0)
}

// FindLastDeployment mocks base method.
func (m *MockDBService) FindLastDeployment(arg0 uint64) (*dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastDeployment", arg0)
	ret0, _ := ret[0].(*dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastDeployment indicates an expected call of FindLastDeployment.
func (mr *MockDBServiceMockRecorder) FindLastDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastDeployment", reflect.TypeOf((*MockDBService)(nil).FindLastDeployment), arg0)
}

// FindLastDeploymentIDsByRutimeIDs mocks base method.
func (m *MockDBService) FindLastDeploymentIDsByRutimeIDs(arg0 []uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastDeploymentIDsByRutimeIDs", arg0)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastDeploymentIDsByRutimeIDs indicates an expected call of FindLastDeploymentIDsByRutimeIDs.
func (mr *MockDBServiceMockRecorder) FindLastDeploymentIDsByRutimeIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastDeploymentIDsByRutimeIDs", reflect.TypeOf((*MockDBService)(nil).FindLastDeploymentIDsByRutimeIDs), arg0)
}

// FindLastSuccessDeployment mocks base method.
func (m *MockDBService) FindLastSuccessDeployment(arg0 uint64) (*dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastSuccessDeployment", arg0)
	ret0, _ := ret[0].(*dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastSuccessDeployment indicates an expected call of FindLastSuccessDeployment.
func (mr *MockDBServiceMockRecorder) FindLastSuccessDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastSuccessDeployment", reflect.TypeOf((*MockDBService)(nil).FindLastSuccessDeployment), arg0)
}

// FindNotOutdatedOlderThan mocks base method.
func (m *MockDBService) FindNotOutdatedOlderThan(arg0, arg1 uint64) ([]dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotOutdatedOlderThan", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotOutdatedOlderThan indicates an expected call of FindNotOutdatedOlderThan.
func (mr *MockDBServiceMockRecorder) FindNotOutdatedOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotOutdatedOlderThan", reflect.TypeOf((*MockDBService)(nil).FindNotOutdatedOlderThan), arg0, arg1)
}

// FindPreDeployment mocks base method.
func (m *MockDBService) FindPreDeployment(arg0 spec.RuntimeUniqueId) (*dbclient.PreDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPreDeployment", arg0)
	ret0, _ := ret[0].(*dbclient.PreDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPreDeployment indicates an expected call of FindPreDeployment.
func (mr *MockDBServiceMockRecorder) FindPreDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPreDeployment", reflect.TypeOf((*MockDBService)(nil).FindPreDeployment), arg0)
}

// FindPreDeploymentOrCreate mocks base method.
func (m *MockDBService) FindPreDeploymentOrCreate(arg0 spec.RuntimeUniqueId, arg1 *diceyml.DiceYaml) (*dbclient.PreDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPreDeploymentOrCreate", arg0, arg1)
	ret0, _ := ret[0].(*dbclient.PreDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPreDeploymentOrCreate indicates an expected call of FindPreDeploymentOrCreate.
func (mr *MockDBServiceMockRecorder) FindPreDeploymentOrCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPreDeploymentOrCreate", reflect.TypeOf((*MockDBService)(nil).FindPreDeploymentOrCreate), arg0, arg1)
}

// FindRuntime mocks base method.
func (m *MockDBService) FindRuntime(arg0 spec.RuntimeUniqueId) (*dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntime", arg0)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRuntime indicates an expected call of FindRuntime.
func (mr *MockDBServiceMockRecorder) FindRuntime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntime", reflect.TypeOf((*MockDBService)(nil).FindRuntime), arg0)
}

// FindRuntimeOrCreate mocks base method.
func (m *MockDBService) FindRuntimeOrCreate(arg0 spec.RuntimeUniqueId, arg1 string, arg2 apistructs.RuntimeSource, arg3 string, arg4 uint64, arg5 string, arg6, arg7 uint64, arg8, arg9, arg10 string) (*dbclient.Runtime, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntimeOrCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRuntimeOrCreate indicates an expected call of FindRuntimeOrCreate.
func (mr *MockDBServiceMockRecorder) FindRuntimeOrCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntimeOrCreate", reflect.TypeOf((*MockDBService)(nil).FindRuntimeOrCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// FindRuntimesByAppId mocks base method.
func (m *MockDBService) FindRuntimesByAppId(arg0 uint64) ([]dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntimesByAppId", arg0)
	ret0, _ := ret[0].([]dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRuntimesByAppId indicates an expected call of FindRuntimesByAppId.
func (mr *MockDBServiceMockRecorder) FindRuntimesByAppId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntimesByAppId", reflect.TypeOf((*MockDBService)(nil).FindRuntimesByAppId), arg0)
}

// FindRuntimesByIds mocks base method.
func (m *MockDBService) FindRuntimesByIds(arg0 []uint64) ([]dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntimesByIds", arg0)
	ret0, _ := ret[0].([]dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRuntimesByIds indicates an expected call of FindRuntimesByIds.
func (mr *MockDBServiceMockRecorder) FindRuntimesByIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntimesByIds", reflect.TypeOf((*MockDBService)(nil).FindRuntimesByIds), arg0)
}

// FindRuntimesInApps mocks base method.
func (m *MockDBService) FindRuntimesInApps(arg0 []uint64, arg1 string) (map[uint64][]*dbclient.Runtime, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntimesInApps", arg0, arg1)
	ret0, _ := ret[0].(map[uint64][]*dbclient.Runtime)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRuntimesInApps indicates an expected call of FindRuntimesInApps.
func (mr *MockDBServiceMockRecorder) FindRuntimesInApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntimesInApps", reflect.TypeOf((*MockDBService)(nil).FindRuntimesInApps), arg0, arg1)
}

// FindRuntimesNewerThan mocks base method.
func (m *MockDBService) FindRuntimesNewerThan(arg0 uint64, arg1 int) ([]dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRuntimesNewerThan", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRuntimesNewerThan indicates an expected call of FindRuntimesNewerThan.
func (mr *MockDBServiceMockRecorder) FindRuntimesNewerThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRuntimesNewerThan", reflect.TypeOf((*MockDBService)(nil).FindRuntimesNewerThan), arg0, arg1)
}

// FindTopDeployments mocks base method.
func (m *MockDBService) FindTopDeployments(arg0 uint64, arg1 int) ([]dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopDeployments", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopDeployments indicates an expected call of FindTopDeployments.
func (mr *MockDBServiceMockRecorder) FindTopDeployments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopDeployments", reflect.TypeOf((*MockDBService)(nil).FindTopDeployments), arg0, arg1)
}

// GetAddonNodesByInstanceIDs mocks base method.
func (m *MockDBService) GetAddonNodesByInstanceIDs(arg0 []string) (*[]dbclient.AddonNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonNodesByInstanceIDs", arg0)
	ret0, _ := ret[0].(*[]dbclient.AddonNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonNodesByInstanceIDs indicates an expected call of GetAddonNodesByInstanceIDs.
func (mr *MockDBServiceMockRecorder) GetAddonNodesByInstanceIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonNodesByInstanceIDs", reflect.TypeOf((*MockDBService)(nil).GetAddonNodesByInstanceIDs), arg0)
}

// GetAppRuntimeNumberByWorkspace mocks base method.
func (m *MockDBService) GetAppRuntimeNumberByWorkspace(arg0 uint64, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppRuntimeNumberByWorkspace", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppRuntimeNumberByWorkspace indicates an expected call of GetAppRuntimeNumberByWorkspace.
func (mr *MockDBServiceMockRecorder) GetAppRuntimeNumberByWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppRuntimeNumberByWorkspace", reflect.TypeOf((*MockDBService)(nil).GetAppRuntimeNumberByWorkspace), arg0, arg1)
}

// GetDeployment mocks base method.
func (m *MockDBService) GetDeployment(arg0 uint64) (*dbclient.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0)
	ret0, _ := ret[0].(*dbclient.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockDBServiceMockRecorder) GetDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDBService)(nil).GetDeployment), arg0)
}

// GetInstanceRouting mocks base method.
func (m *MockDBService) GetInstanceRouting(arg0 string) (*dbclient.AddonInstanceRouting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceRouting", arg0)
	ret0, _ := ret[0].(*dbclient.AddonInstanceRouting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceRouting indicates an expected call of GetInstanceRouting.
func (mr *MockDBServiceMockRecorder) GetInstanceRouting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceRouting", reflect.TypeOf((*MockDBService)(nil).GetInstanceRouting), arg0)
}

// GetRuntime mocks base method.
func (m *MockDBService) GetRuntime(arg0 uint64) (*dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntime", arg0)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntime indicates an expected call of GetRuntime.
func (mr *MockDBServiceMockRecorder) GetRuntime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntime", reflect.TypeOf((*MockDBService)(nil).GetRuntime), arg0)
}

// GetRuntimeAllowNil mocks base method.
func (m *MockDBService) GetRuntimeAllowNil(arg0 uint64) (*dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeAllowNil", arg0)
	ret0, _ := ret[0].(*dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeAllowNil indicates an expected call of GetRuntimeAllowNil.
func (mr *MockDBServiceMockRecorder) GetRuntimeAllowNil(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeAllowNil", reflect.TypeOf((*MockDBService)(nil).GetRuntimeAllowNil), arg0)
}

// GetRuntimeByProjectIDs mocks base method.
func (m *MockDBService) GetRuntimeByProjectIDs(arg0 []uint64) (*[]dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeByProjectIDs", arg0)
	ret0, _ := ret[0].(*[]dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeByProjectIDs indicates an expected call of GetRuntimeByProjectIDs.
func (mr *MockDBServiceMockRecorder) GetRuntimeByProjectIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeByProjectIDs", reflect.TypeOf((*MockDBService)(nil).GetRuntimeByProjectIDs), arg0)
}

// GetRuntimeHPAByServices mocks base method.
func (m *MockDBService) GetRuntimeHPAByServices(arg0 spec.RuntimeUniqueId, arg1 []string) ([]dbclient.RuntimeHPA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeHPAByServices", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.RuntimeHPA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeHPAByServices indicates an expected call of GetRuntimeHPAByServices.
func (mr *MockDBServiceMockRecorder) GetRuntimeHPAByServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeHPAByServices", reflect.TypeOf((*MockDBService)(nil).GetRuntimeHPAByServices), arg0, arg1)
}

// GetRuntimeHPARulesByRuntimeId mocks base method.
func (m *MockDBService) GetRuntimeHPARulesByRuntimeId(arg0 uint64) ([]dbclient.RuntimeHPA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeHPARulesByRuntimeId", arg0)
	ret0, _ := ret[0].([]dbclient.RuntimeHPA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeHPARulesByRuntimeId indicates an expected call of GetRuntimeHPARulesByRuntimeId.
func (mr *MockDBServiceMockRecorder) GetRuntimeHPARulesByRuntimeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeHPARulesByRuntimeId", reflect.TypeOf((*MockDBService)(nil).GetRuntimeHPARulesByRuntimeId), arg0)
}

// GetRuntimeVPAByServices mocks base method.
func (m *MockDBService) GetRuntimeVPAByServices(arg0 spec.RuntimeUniqueId, arg1 []string) ([]dbclient.RuntimeVPA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeVPAByServices", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.RuntimeVPA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeVPAByServices indicates an expected call of GetRuntimeVPAByServices.
func (mr *MockDBServiceMockRecorder) GetRuntimeVPAByServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeVPAByServices", reflect.TypeOf((*MockDBService)(nil).GetRuntimeVPAByServices), arg0, arg1)
}

// GetRuntimeVPARulesByRuntimeId mocks base method.
func (m *MockDBService) GetRuntimeVPARulesByRuntimeId(arg0 uint64) ([]dbclient.RuntimeVPA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeVPARulesByRuntimeId", arg0)
	ret0, _ := ret[0].([]dbclient.RuntimeVPA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeVPARulesByRuntimeId indicates an expected call of GetRuntimeVPARulesByRuntimeId.
func (mr *MockDBServiceMockRecorder) GetRuntimeVPARulesByRuntimeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeVPARulesByRuntimeId", reflect.TypeOf((*MockDBService)(nil).GetRuntimeVPARulesByRuntimeId), arg0)
}

// GetUnDeletableAttachMentsByRuntimeID mocks base method.
func (m *MockDBService) GetUnDeletableAttachMentsByRuntimeID(arg0, arg1 uint64) (*[]dbclient.AddonAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnDeletableAttachMentsByRuntimeID", arg0, arg1)
	ret0, _ := ret[0].(*[]dbclient.AddonAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnDeletableAttachMentsByRuntimeID indicates an expected call of GetUnDeletableAttachMentsByRuntimeID.
func (mr *MockDBServiceMockRecorder) GetUnDeletableAttachMentsByRuntimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnDeletableAttachMentsByRuntimeID", reflect.TypeOf((*MockDBService)(nil).GetUnDeletableAttachMentsByRuntimeID), arg0, arg1)
}

// ListAddonInstancesByProjectIDs mocks base method.
func (m *MockDBService) ListAddonInstancesByProjectIDs(arg0 []uint64, arg1 ...string) (*[]dbclient.AddonInstance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddonInstancesByProjectIDs", varargs...)
	ret0, _ := ret[0].(*[]dbclient.AddonInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddonInstancesByProjectIDs indicates an expected call of ListAddonInstancesByProjectIDs.
func (mr *MockDBServiceMockRecorder) ListAddonInstancesByProjectIDs(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddonInstancesByProjectIDs", reflect.TypeOf((*MockDBService)(nil).ListAddonInstancesByProjectIDs), varargs...)
}

// ListRoutingInstanceByOrgCluster mocks base method.
func (m *MockDBService) ListRoutingInstanceByOrgCluster(arg0 string, arg1 uint64) ([]dbclient.AddonInstanceRouting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingInstanceByOrgCluster", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.AddonInstanceRouting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingInstanceByOrgCluster indicates an expected call of ListRoutingInstanceByOrgCluster.
func (mr *MockDBServiceMockRecorder) ListRoutingInstanceByOrgCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingInstanceByOrgCluster", reflect.TypeOf((*MockDBService)(nil).ListRoutingInstanceByOrgCluster), arg0, arg1)
}

// ListRuntimeByOrgCluster mocks base method.
func (m *MockDBService) ListRuntimeByOrgCluster(arg0 string, arg1 uint64) ([]dbclient.Runtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuntimeByOrgCluster", arg0, arg1)
	ret0, _ := ret[0].([]dbclient.Runtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuntimeByOrgCluster indicates an expected call of ListRuntimeByOrgCluster.
func (mr *MockDBServiceMockRecorder) ListRuntimeByOrgCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuntimeByOrgCluster", reflect.TypeOf((*MockDBService)(nil).ListRuntimeByOrgCluster), arg0, arg1)
}

// UpdateAttachment mocks base method.
func (m *MockDBService) UpdateAttachment(arg0 *dbclient.AddonAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttachment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttachment indicates an expected call of UpdateAttachment.
func (mr *MockDBServiceMockRecorder) UpdateAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttachment", reflect.TypeOf((*MockDBService)(nil).UpdateAttachment), arg0)
}

// UpdateDeployment mocks base method.
func (m *MockDBService) UpdateDeployment(arg0 *dbclient.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockDBServiceMockRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockDBService)(nil).UpdateDeployment), arg0)
}

// UpdatePreDeployment mocks base method.
func (m *MockDBService) UpdatePreDeployment(arg0 *dbclient.PreDeployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreDeployment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePreDeployment indicates an expected call of UpdatePreDeployment.
func (mr *MockDBServiceMockRecorder) UpdatePreDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreDeployment", reflect.TypeOf((*MockDBService)(nil).UpdatePreDeployment), arg0)
}

// UpdateRuntime mocks base method.
func (m *MockDBService) UpdateRuntime(arg0 *dbclient.Runtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuntime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRuntime indicates an expected call of UpdateRuntime.
func (mr *MockDBServiceMockRecorder) UpdateRuntime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuntime", reflect.TypeOf((*MockDBService)(nil).UpdateRuntime), arg0)
}

// MockBundleService is a mock of BundleService interface.
type MockBundleService struct {
	ctrl     *gomock.Controller
	recorder *MockBundleServiceMockRecorder
}

// MockBundleServiceMockRecorder is the mock recorder for MockBundleService.
type MockBundleServiceMockRecorder struct {
	mock *MockBundleService
}

// NewMockBundleService creates a new mock instance.
func NewMockBundleService(ctrl *gomock.Controller) *MockBundleService {
	mock := &MockBundleService{ctrl: ctrl}
	mock.recorder = &MockBundleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleService) EXPECT() *MockBundleServiceMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockBundleService) CheckPermission(arg0 *apistructs.PermissionCheckRequest) (*apistructs.PermissionCheckResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", arg0)
	ret0, _ := ret[0].(*apistructs.PermissionCheckResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockBundleServiceMockRecorder) CheckPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockBundleService)(nil).CheckPermission), arg0)
}

// CreateEmailNotify mocks base method.
func (m *MockBundleService) CreateEmailNotify(arg0 string, arg1 map[string]string, arg2 string, arg3 uint64, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailNotify", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmailNotify indicates an expected call of CreateEmailNotify.
func (mr *MockBundleServiceMockRecorder) CreateEmailNotify(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailNotify", reflect.TypeOf((*MockBundleService)(nil).CreateEmailNotify), arg0, arg1, arg2, arg3, arg4)
}

// CreateMboxNotify mocks base method.
func (m *MockBundleService) CreateMboxNotify(arg0 string, arg1 map[string]string, arg2 string, arg3 uint64, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMboxNotify", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMboxNotify indicates an expected call of CreateMboxNotify.
func (mr *MockBundleServiceMockRecorder) CreateMboxNotify(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMboxNotify", reflect.TypeOf((*MockBundleService)(nil).CreateMboxNotify), arg0, arg1, arg2, arg3, arg4)
}

// GetAllProjects mocks base method.
func (m *MockBundleService) GetAllProjects() ([]apistructs.ProjectDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects")
	ret0, _ := ret[0].([]apistructs.ProjectDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockBundleServiceMockRecorder) GetAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockBundleService)(nil).GetAllProjects))
}

// GetAllValidBranchWorkspace mocks base method.
func (m *MockBundleService) GetAllValidBranchWorkspace(arg0 uint64, arg1 string) ([]apistructs.ValidBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidBranchWorkspace", arg0, arg1)
	ret0, _ := ret[0].([]apistructs.ValidBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidBranchWorkspace indicates an expected call of GetAllValidBranchWorkspace.
func (mr *MockBundleServiceMockRecorder) GetAllValidBranchWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidBranchWorkspace", reflect.TypeOf((*MockBundleService)(nil).GetAllValidBranchWorkspace), arg0, arg1)
}

// GetApp mocks base method.
func (m *MockBundleService) GetApp(arg0 uint64) (*apistructs.ApplicationDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*apistructs.ApplicationDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockBundleServiceMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockBundleService)(nil).GetApp), arg0)
}

// GetCluster mocks base method.
func (m *MockBundleService) GetCluster(arg0 string) (*apistructs.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0)
	ret0, _ := ret[0].(*apistructs.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockBundleServiceMockRecorder) GetCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockBundleService)(nil).GetCluster), arg0)
}

// GetDiceYAML mocks base method.
func (m *MockBundleService) GetDiceYAML(arg0 string, arg1 ...string) (*diceyml.DiceYaml, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiceYAML", varargs...)
	ret0, _ := ret[0].(*diceyml.DiceYaml)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiceYAML indicates an expected call of GetDiceYAML.
func (mr *MockBundleServiceMockRecorder) GetDiceYAML(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiceYAML", reflect.TypeOf((*MockBundleService)(nil).GetDiceYAML), varargs...)
}

// GetGittarCommit mocks base method.
func (m *MockBundleService) GetGittarCommit(arg0, arg1, arg2 string) (*apistructs.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGittarCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apistructs.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGittarCommit indicates an expected call of GetGittarCommit.
func (mr *MockBundleServiceMockRecorder) GetGittarCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGittarCommit", reflect.TypeOf((*MockBundleService)(nil).GetGittarCommit), arg0, arg1, arg2)
}

// GetLog mocks base method.
func (m *MockBundleService) GetLog(arg0 string, arg1 apistructs.DashboardSpotLogRequest) (*apistructs.DashboardSpotLogData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", arg0, arg1)
	ret0, _ := ret[0].(*apistructs.DashboardSpotLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog.
func (mr *MockBundleServiceMockRecorder) GetLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockBundleService)(nil).GetLog), arg0, arg1)
}

// GetMyApps mocks base method.
func (m *MockBundleService) GetMyApps(arg0 string, arg1 uint64) (*apistructs.ApplicationListResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyApps", arg0, arg1)
	ret0, _ := ret[0].(*apistructs.ApplicationListResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyApps indicates an expected call of GetMyApps.
func (mr *MockBundleServiceMockRecorder) GetMyApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyApps", reflect.TypeOf((*MockBundleService)(nil).GetMyApps), arg0, arg1)
}

// GetMyAppsByProject mocks base method.
func (m *MockBundleService) GetMyAppsByProject(arg0 string, arg1, arg2 uint64, arg3 string) (*apistructs.ApplicationListResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyAppsByProject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*apistructs.ApplicationListResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyAppsByProject indicates an expected call of GetMyAppsByProject.
func (mr *MockBundleServiceMockRecorder) GetMyAppsByProject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyAppsByProject", reflect.TypeOf((*MockBundleService)(nil).GetMyAppsByProject), arg0, arg1, arg2, arg3)
}

// GetProject mocks base method.
func (m *MockBundleService) GetProject(arg0 uint64) (*apistructs.ProjectDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*apistructs.ProjectDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockBundleServiceMockRecorder) GetProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockBundleService)(nil).GetProject), arg0)
}

// GetProjectBranchRules mocks base method.
func (m *MockBundleService) GetProjectBranchRules(arg0 uint64) ([]*apistructs.BranchRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectBranchRules", arg0)
	ret0, _ := ret[0].([]*apistructs.BranchRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectBranchRules indicates an expected call of GetProjectBranchRules.
func (mr *MockBundleServiceMockRecorder) GetProjectBranchRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectBranchRules", reflect.TypeOf((*MockBundleService)(nil).GetProjectBranchRules), arg0)
}

// InspectServiceGroupWithTimeout mocks base method.
func (m *MockBundleService) InspectServiceGroupWithTimeout(arg0, arg1 string) (*apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectServiceGroupWithTimeout", arg0, arg1)
	ret0, _ := ret[0].(*apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectServiceGroupWithTimeout indicates an expected call of InspectServiceGroupWithTimeout.
func (mr *MockBundleServiceMockRecorder) InspectServiceGroupWithTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectServiceGroupWithTimeout", reflect.TypeOf((*MockBundleService)(nil).InspectServiceGroupWithTimeout), arg0, arg1)
}

// InvalidateOAuth2Token mocks base method.
func (m *MockBundleService) InvalidateOAuth2Token(arg0 apistructs.OAuth2TokenInvalidateRequest) (*apistructs.OAuth2Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateOAuth2Token", arg0)
	ret0, _ := ret[0].(*apistructs.OAuth2Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateOAuth2Token indicates an expected call of InvalidateOAuth2Token.
func (mr *MockBundleServiceMockRecorder) InvalidateOAuth2Token(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateOAuth2Token", reflect.TypeOf((*MockBundleService)(nil).InvalidateOAuth2Token), arg0)
}

// ListMembers mocks base method.
func (m *MockBundleService) ListMembers(arg0 apistructs.MemberListRequest) ([]apistructs.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].([]apistructs.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockBundleServiceMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockBundleService)(nil).ListMembers), arg0)
}

// ListUsers mocks base method.
func (m *MockBundleService) ListUsers(arg0 apistructs.UserListRequest) (*apistructs.UserListResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*apistructs.UserListResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockBundleServiceMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockBundleService)(nil).ListUsers), arg0)
}

// MockEventManagerService is a mock of EventManagerService interface.
type MockEventManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockEventManagerServiceMockRecorder
}

// MockEventManagerServiceMockRecorder is the mock recorder for MockEventManagerService.
type MockEventManagerServiceMockRecorder struct {
	mock *MockEventManagerService
}

// NewMockEventManagerService creates a new mock instance.
func NewMockEventManagerService(ctrl *gomock.Controller) *MockEventManagerService {
	mock := &MockEventManagerService{ctrl: ctrl}
	mock.recorder = &MockEventManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventManagerService) EXPECT() *MockEventManagerServiceMockRecorder {
	return m.recorder
}

// EmitEvent mocks base method.
func (m *MockEventManagerService) EmitEvent(arg0 *events.RuntimeEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEvent", arg0)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockEventManagerServiceMockRecorder) EmitEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockEventManagerService)(nil).EmitEvent), arg0)
}

// MockClusterService is a mock of ClusterService interface.
type MockClusterService struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceMockRecorder
}

// MockClusterServiceMockRecorder is the mock recorder for MockClusterService.
type MockClusterServiceMockRecorder struct {
	mock *MockClusterService
}

// NewMockClusterService creates a new mock instance.
func NewMockClusterService(ctrl *gomock.Controller) *MockClusterService {
	mock := &MockClusterService{ctrl: ctrl}
	mock.recorder = &MockClusterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterService) EXPECT() *MockClusterServiceMockRecorder {
	return m.recorder
}

// GetCluster mocks base method.
func (m *MockClusterService) GetCluster(arg0 context.Context, arg1 *pb.GetClusterRequest) (*pb.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterServiceMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterService)(nil).GetCluster), arg0, arg1)
}
