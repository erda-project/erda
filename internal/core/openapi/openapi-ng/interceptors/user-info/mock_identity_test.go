// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda-proto-go/core/user/pb (interfaces: UserServiceServer)

// Package userinfo is a generated GoMock package.
package userinfo

import (
	context "context"
	reflect "reflect"

	pb "github.com/erda-project/erda-proto-go/core/user/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// FindUsers mocks base method.
func (m *MockUserServiceServer) FindUsers(arg0 context.Context, arg1 *pb.FindUsersRequest) (*pb.FindUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", arg0, arg1)
	ret0, _ := ret[0].(*pb.FindUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockUserServiceServerMockRecorder) FindUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockUserServiceServer)(nil).FindUsers), arg0, arg1)
}

// FindUsersByKey mocks base method.
func (m *MockUserServiceServer) FindUsersByKey(arg0 context.Context, arg1 *pb.FindUsersByKeyRequest) (*pb.FindUsersByKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersByKey", arg0, arg1)
	ret0, _ := ret[0].(*pb.FindUsersByKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersByKey indicates an expected call of FindUsersByKey.
func (mr *MockUserServiceServerMockRecorder) FindUsersByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersByKey", reflect.TypeOf((*MockUserServiceServer)(nil).FindUsersByKey), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserServiceServer) GetUser(arg0 context.Context, arg1 *pb.GetUserRequest) (*pb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceServer)(nil).GetUser), arg0, arg1)
}
