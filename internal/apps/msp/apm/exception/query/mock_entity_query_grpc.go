// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../../api/proto-go/oap/entity/pb/entity_grpc.pb.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	pb "github.com/erda-project/erda-proto-go/oap/entity/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEntityServiceClient is a mock of EntityServiceClient interface.
type MockEntityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceClientMockRecorder
}

// MockEntityServiceClientMockRecorder is the mock recorder for MockEntityServiceClient.
type MockEntityServiceClientMockRecorder struct {
	mock *MockEntityServiceClient
}

// NewMockEntityServiceClient creates a new mock instance.
func NewMockEntityServiceClient(ctrl *gomock.Controller) *MockEntityServiceClient {
	mock := &MockEntityServiceClient{ctrl: ctrl}
	mock.recorder = &MockEntityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityServiceClient) EXPECT() *MockEntityServiceClientMockRecorder {
	return m.recorder
}

// GetEntity mocks base method.
func (m *MockEntityServiceClient) GetEntity(ctx context.Context, in *pb.GetEntityRequest, opts ...grpc.CallOption) (*pb.GetEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntity", varargs...)
	ret0, _ := ret[0].(*pb.GetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockEntityServiceClientMockRecorder) GetEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).GetEntity), varargs...)
}

// ListEntities mocks base method.
func (m *MockEntityServiceClient) ListEntities(ctx context.Context, in *pb.ListEntitiesRequest, opts ...grpc.CallOption) (*pb.ListEntitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntities", varargs...)
	ret0, _ := ret[0].(*pb.ListEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockEntityServiceClientMockRecorder) ListEntities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockEntityServiceClient)(nil).ListEntities), varargs...)
}

// RemoveEntity mocks base method.
func (m *MockEntityServiceClient) RemoveEntity(ctx context.Context, in *pb.RemoveEntityRequest, opts ...grpc.CallOption) (*pb.RemoveEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntity", varargs...)
	ret0, _ := ret[0].(*pb.RemoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntity indicates an expected call of RemoveEntity.
func (mr *MockEntityServiceClientMockRecorder) RemoveEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).RemoveEntity), varargs...)
}

// SetEntity mocks base method.
func (m *MockEntityServiceClient) SetEntity(ctx context.Context, in *pb.SetEntityRequest, opts ...grpc.CallOption) (*pb.SetEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetEntity", varargs...)
	ret0, _ := ret[0].(*pb.SetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEntity indicates an expected call of SetEntity.
func (mr *MockEntityServiceClientMockRecorder) SetEntity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntity", reflect.TypeOf((*MockEntityServiceClient)(nil).SetEntity), varargs...)
}

// MockEntityServiceServer is a mock of EntityServiceServer interface.
type MockEntityServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceServerMockRecorder
}

// MockEntityServiceServerMockRecorder is the mock recorder for MockEntityServiceServer.
type MockEntityServiceServerMockRecorder struct {
	mock *MockEntityServiceServer
}

// NewMockEntityServiceServer creates a new mock instance.
func NewMockEntityServiceServer(ctrl *gomock.Controller) *MockEntityServiceServer {
	mock := &MockEntityServiceServer{ctrl: ctrl}
	mock.recorder = &MockEntityServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityServiceServer) EXPECT() *MockEntityServiceServerMockRecorder {
	return m.recorder
}

// GetEntity mocks base method.
func (m *MockEntityServiceServer) GetEntity(arg0 context.Context, arg1 *pb.GetEntityRequest) (*pb.GetEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockEntityServiceServerMockRecorder) GetEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).GetEntity), arg0, arg1)
}

// ListEntities mocks base method.
func (m *MockEntityServiceServer) ListEntities(arg0 context.Context, arg1 *pb.ListEntitiesRequest) (*pb.ListEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntities", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockEntityServiceServerMockRecorder) ListEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockEntityServiceServer)(nil).ListEntities), arg0, arg1)
}

// RemoveEntity mocks base method.
func (m *MockEntityServiceServer) RemoveEntity(arg0 context.Context, arg1 *pb.RemoveEntityRequest) (*pb.RemoveEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEntity", arg0, arg1)
	ret0, _ := ret[0].(*pb.RemoveEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntity indicates an expected call of RemoveEntity.
func (mr *MockEntityServiceServerMockRecorder) RemoveEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).RemoveEntity), arg0, arg1)
}

// SetEntity mocks base method.
func (m *MockEntityServiceServer) SetEntity(arg0 context.Context, arg1 *pb.SetEntityRequest) (*pb.SetEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEntity", arg0, arg1)
	ret0, _ := ret[0].(*pb.SetEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEntity indicates an expected call of SetEntity.
func (mr *MockEntityServiceServerMockRecorder) SetEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntity", reflect.TypeOf((*MockEntityServiceServer)(nil).SetEntity), arg0, arg1)
}
