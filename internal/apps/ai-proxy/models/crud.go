// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by erda-cli. DO NOT EDIT.
// Source: .erda/ai-proxy/migrations/ai-proxy/20230706-credentials.sql

package models

import (
	"errors"
	"reflect"

	"gorm.io/gorm"
)

var (
	_ Field   = field{}
	_ Where   = where{}
	_ Setter  = setter{}
	_ Creator = &creator{}
	_ Deleter = &deleter{}
	_ Updater = &updater{}
	_ Getter  = &getter{}
	_ Pager   = &pager{}
)

type Field interface {
	IsNull() Where
	IsNotNull() Where
	Equal(v any) Where
	NotEqual(v any) Where
	In([]any) Where
	NotIn([]any) Where
	LessThan(v any) Where
	MoreThan(v any) Where
	LessEqualThan(v any) Where
	MoreEqualThan(v any) Where
	Set(v any) Setter
	DESC() string
	ASC() string
}

type Where interface {
	Query() any
	Args() []any
}

type Setter interface {
	Key() string
	Value() any
}
type Creator interface {
	Create() error
}

type Deleter interface {
	Where(wheres ...Where) Deleter
	Delete() (affects int64, err error)
}

type Updater interface {
	Where(wheres ...Where) Updater
	Set(setters ...Setter) Updater
	Updates(setters ...Setter) (affects int64, err error)
	Update() (affects int64, err error)
}

type Getter interface {
	Where(wheres ...Where) Getter
	Get() (ok bool, err error)
}

type Pager interface {
	Where(wheres ...Where) Pager
	Paging(size, num int, orders ...string) (total int64, err error)
}
type field struct {
	name string
}

func (w field) IsNull() Where {
	return where{query: w.name + " is null"}
}

func (w field) IsNotNull() Where {
	return where{query: w.name + " is not null"}
}

func (w field) Equal(v any) Where {
	return where{query: w.name + " = ?", args: []any{v}}
}

func (w field) NotEqual(v any) Where {
	return where{query: w.name + " != ?", args: []any{v}}
}

func (w field) In(v []any) Where {
	return where{query: w.name + " in ?", args: []any{v}}
}

func (w field) NotIn(v []any) Where {
	return where{query: w.name + " not in ?", args: []any{v}}
}

func (w field) LessThan(v any) Where {
	return where{query: w.name + " < ?", args: []any{v}}
}

func (w field) MoreThan(v any) Where {
	return where{query: w.name + " > ?", args: []any{v}}
}

func (w field) LessEqualThan(v any) Where {
	return where{query: w.name + " <= ?", args: []any{v}}
}

func (w field) MoreEqualThan(v any) Where {
	return where{query: w.name + " >= ?", args: []any{v}}
}

func (w field) DESC() string {
	return w.name + " DESC"
}

func (w field) ASC() string {
	return w.name + " ASC"
}

func (w field) Set(v any) Setter {
	return &setter{key: w.name, value: v}
}

type where struct {
	query any
	args  []any
}

func (w where) Query() any {
	return w.query
}

func (w where) Args() []any {
	return w.args
}

type setter struct {
	key   string
	value any
}

func (s setter) Key() string {
	return s.key
}

func (s setter) Value() any {
	return s.value
}

type creator struct {
	db    *gorm.DB
	model any
}

func (c *creator) Create() error {
	return c.db.Create(c.model).Error
}

type deleter struct {
	db    *gorm.DB
	model any
	where []Where
}

func (d *deleter) Where(where ...Where) Deleter {
	d.where = append(d.where, where...)
	return d
}

func (d *deleter) Delete() (int64, error) {
	var db = d.db
	for _, w := range d.where {
		db = db.Where(w.Query(), w.Args()...)
	}
	err := db.Delete(d.model).Error
	return db.RowsAffected, err
}

type updater struct {
	db      *gorm.DB
	model   interface{ TableName() string }
	where   []Where
	updates map[string]any
}

func (u *updater) Where(where ...Where) Updater {
	u.where = append(u.where, where...)
	return u
}

func (u *updater) Set(set ...Setter) Updater {
	for _, item := range set {
		u.updates[item.Key()] = item.Value()
	}
	return u
}

func (u *updater) Updates(set ...Setter) (int64, error) {
	if len(set) > 0 {
		return u.Set(set...).Updates()
	}

	var db = u.db
	for _, w := range u.where {
		db = db.Where(w.Query(), w.Args()...)
	}
	err := db.Updates(u.updates).Error
	return db.RowsAffected, err
}

func (u *updater) Update() (int64, error) {
	var db = u.db
	for _, w := range u.where {
		db = db.Where(w.Query(), w.Args()...)
	}
	err := db.Updates(u.model).Error
	return db.RowsAffected, err
}

type getter struct {
	model any
	db    *gorm.DB
	where []Where
}

func (g *getter) Where(wheres ...Where) Getter {
	g.where = append(g.where, wheres...)
	return g
}

func (g *getter) Get() (bool, error) {
	var db = g.db
	for _, w := range g.where {
		db = db.Where(w.Query(), w.Args()...)
	}
	err := db.First(g.model).Error
	if err == nil {
		return true, nil
	}
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return false, nil
	}
	return false, err
}

type pager struct {
	db    *gorm.DB
	list  any
	where []Where
}

func (p *pager) Where(wheres ...Where) Pager {
	p.where = append(p.where, wheres...)
	return p
}

func (p *pager) Paging(size, num int, orders ...string) (int64, error) {
	var db = p.db.Model(reflect.New(reflect.TypeOf(p.list).Elem().Elem()).Interface())
	for _, w := range p.where {
		db = db.Where(w.Query(), w.Args()...)
	}
	var count int64
	err := db.Count(&count).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return 0, nil
		}
		return 0, err
	}
	if num > 0 && size >= 0 {
		db = db.Limit(size).Offset((num - 1) * size)
	}
	for _, order := range orders {
		db = db.Order(order)
	}
	return count, db.Find(p.list).Error
}
