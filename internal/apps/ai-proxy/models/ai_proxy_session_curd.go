// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by erda-cli. DO NOT EDIT.
// Source: bin/erda-cli gorm gen -f .erda/ai-proxy/migrations/ai-proxy/20230823-ai-proxy.sql -o internal/apps/ai-proxy/models

package models

import (
	"time"

	"gorm.io/gorm"
)

var (
	_ time.Time
)

var (
	_ CRUDer = (*AIProxySession)(nil)
	_ Lister = (*AIProxySessionList)(nil)
)

// FieldBaseModel returns the Field interface{} for the field ai_proxy_session.id
func (this AIProxySession) FieldBaseModel() Field { return field{name: "id"} }

// FieldClientID returns the Field interface{} for the field ai_proxy_session.client_id
func (this AIProxySession) FieldClientID() Field { return field{name: "client_id"} }

// FieldPromptID returns the Field interface{} for the field ai_proxy_session.prompt_id
func (this AIProxySession) FieldPromptID() Field { return field{name: "prompt_id"} }

// FieldModelID returns the Field interface{} for the field ai_proxy_session.model_id
func (this AIProxySession) FieldModelID() Field { return field{name: "model_id"} }

// FieldScene returns the Field interface{} for the field ai_proxy_session.scene
func (this AIProxySession) FieldScene() Field { return field{name: "scene"} }

// FieldUserID returns the Field interface{} for the field ai_proxy_session.user_id
func (this AIProxySession) FieldUserID() Field { return field{name: "user_id"} }

// FieldName returns the Field interface{} for the field ai_proxy_session.name
func (this AIProxySession) FieldName() Field { return field{name: "name"} }

// FieldTopic returns the Field interface{} for the field ai_proxy_session.topic
func (this AIProxySession) FieldTopic() Field { return field{name: "topic"} }

// FieldNumOfCtxMsg returns the Field interface{} for the field ai_proxy_session.num_of_ctx_msg
func (this AIProxySession) FieldNumOfCtxMsg() Field { return field{name: "num_of_ctx_msg"} }

// FieldIsArchived returns the Field interface{} for the field ai_proxy_session.is_archived
func (this AIProxySession) FieldIsArchived() Field { return field{name: "is_archived"} }

// FieldResetAt returns the Field interface{} for the field ai_proxy_session.reset_at
func (this AIProxySession) FieldResetAt() Field { return field{name: "reset_at"} }

// FieldTemperature returns the Field interface{} for the field ai_proxy_session.temperature
func (this AIProxySession) FieldTemperature() Field { return field{name: "temperature"} }

// FieldMetadata returns the Field interface{} for the field ai_proxy_session.metadata
func (this AIProxySession) FieldMetadata() Field { return field{name: "metadata"} }

// Creator returns a Creator interface that you can create record with.
func (this *AIProxySession) Creator(db *gorm.DB) Creator {
	return &creator{db: db, model: this}
}

// Retriever returns a Retriever that you can select one record with.
func (this *AIProxySession) Retriever(db *gorm.DB) Retriever {
	return &retriever{
		db:    db.Model(this),
		model: this,
		where: make([]Where, 0),
	}
}

// Updater returns an Updater that you can update records with.
func (this *AIProxySession) Updater(db *gorm.DB) Updater {
	return &updater{
		db:      db.Model(this),
		model:   this,
		where:   nil,
		updates: make(map[string]any),
	}
}

// Deleter returns a Deleter that you can delete records with.
func (this *AIProxySession) Deleter(db *gorm.DB) Deleter {
	return &deleter{
		db:    db.Model(this),
		model: this,
		where: make([]Where, 0),
	}
}

// FieldClientID returns the Field interface{} for the field ai_proxy_session.client_id
func (list AIProxySessionList) FieldClientID() Field { return field{name: "client_id"} }

// FieldPromptID returns the Field interface{} for the field ai_proxy_session.prompt_id
func (list AIProxySessionList) FieldPromptID() Field { return field{name: "prompt_id"} }

// FieldModelID returns the Field interface{} for the field ai_proxy_session.model_id
func (list AIProxySessionList) FieldModelID() Field { return field{name: "model_id"} }

// FieldScene returns the Field interface{} for the field ai_proxy_session.scene
func (list AIProxySessionList) FieldScene() Field { return field{name: "scene"} }

// FieldUserID returns the Field interface{} for the field ai_proxy_session.user_id
func (list AIProxySessionList) FieldUserID() Field { return field{name: "user_id"} }

// FieldName returns the Field interface{} for the field ai_proxy_session.name
func (list AIProxySessionList) FieldName() Field { return field{name: "name"} }

// FieldTopic returns the Field interface{} for the field ai_proxy_session.topic
func (list AIProxySessionList) FieldTopic() Field { return field{name: "topic"} }

// FieldNumOfCtxMsg returns the Field interface{} for the field ai_proxy_session.num_of_ctx_msg
func (list AIProxySessionList) FieldNumOfCtxMsg() Field { return field{name: "num_of_ctx_msg"} }

// FieldIsArchived returns the Field interface{} for the field ai_proxy_session.is_archived
func (list AIProxySessionList) FieldIsArchived() Field { return field{name: "is_archived"} }

// FieldResetAt returns the Field interface{} for the field ai_proxy_session.reset_at
func (list AIProxySessionList) FieldResetAt() Field { return field{name: "reset_at"} }

// FieldTemperature returns the Field interface{} for the field ai_proxy_session.temperature
func (list AIProxySessionList) FieldTemperature() Field { return field{name: "temperature"} }

// FieldMetadata returns the Field interface{} for the field ai_proxy_session.metadata
func (list AIProxySessionList) FieldMetadata() Field { return field{name: "metadata"} }

// FieldBaseModelList returns a slice for the field BaseModel

func (list AIProxySessionList) FieldBaseModelList() BaseModelList {
	var results BaseModelList
	for _, v := range list {
		results = append(results, &v.BaseModel)
	}
	return results
}

// FieldClientIDList returns a slice for the field ClientID

func (list AIProxySessionList) FieldClientIDList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.ClientID)
	}
	return results
}

// FieldPromptIDList returns a slice for the field PromptID

func (list AIProxySessionList) FieldPromptIDList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.PromptID)
	}
	return results
}

// FieldModelIDList returns a slice for the field ModelID

func (list AIProxySessionList) FieldModelIDList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.ModelID)
	}
	return results
}

// FieldSceneList returns a slice for the field Scene

func (list AIProxySessionList) FieldSceneList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.Scene)
	}
	return results
}

// FieldUserIDList returns a slice for the field UserID

func (list AIProxySessionList) FieldUserIDList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.UserID)
	}
	return results
}

// FieldNameList returns a slice for the field Name

func (list AIProxySessionList) FieldNameList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.Name)
	}
	return results
}

// FieldTopicList returns a slice for the field Topic

func (list AIProxySessionList) FieldTopicList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.Topic)
	}
	return results
}

// FieldNumOfCtxMsgList returns a slice for the field NumOfCtxMsg

func (list AIProxySessionList) FieldNumOfCtxMsgList() []int64 {
	var results []int64
	for _, v := range list {
		results = append(results, v.NumOfCtxMsg)
	}
	return results
}

// FieldIsArchivedList returns a slice for the field IsArchived

func (list AIProxySessionList) FieldIsArchivedList() []bool {
	var results []bool
	for _, v := range list {
		results = append(results, v.IsArchived)
	}
	return results
}

// FieldResetAtList returns a slice for the field ResetAt

func (list AIProxySessionList) FieldResetAtList() []time.Time {
	var results []time.Time
	for _, v := range list {
		results = append(results, v.ResetAt)
	}
	return results
}

// FieldTemperatureList returns a slice for the field Temperature

func (list AIProxySessionList) FieldTemperatureList() []float64 {
	var results []float64
	for _, v := range list {
		results = append(results, v.Temperature)
	}
	return results
}

// FieldMetadataList returns a slice for the field Metadata

func (list AIProxySessionList) FieldMetadataList() []Metadata {
	var results []Metadata
	for _, v := range list {
		results = append(results, v.Metadata)
	}
	return results
}

// Pager returns a Pager that you can query records by paging with.
func (list *AIProxySessionList) Pager(db *gorm.DB) Pager {
	return &pager{
		db:    db,
		list:  list,
		where: nil,
	}
}
