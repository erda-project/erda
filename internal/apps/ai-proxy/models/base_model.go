// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by erda-cli. DO NOT EDIT.
// Source:

package models

import (
	"time"

	"github.com/erda-project/erda-infra/providers/mysql/v2/plugins/fields"
)

var (
	FieldID        = field{name: "id"}
	FieldCreatedAt = field{name: "created_at"}
	FieldUpdatedAt = field{name: "updated_at"}
	FieldDeletedAt = field{name: "deleted_at"}
)

// BaseModel is the base struct for some models
type BaseModel struct {
	ID        fields.UUID      `gorm:"column:id;type:char(36)" json:"id" yaml:"id"`
	CreatedAt time.Time        `gorm:"column:created_at;type:datetime" json:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time        `gorm:"column:updated_at;type:datetime" json:"updatedAt" yaml:"updatedAt"`
	DeletedAt fields.DeletedAt `gorm:"column:deleted_at;type:datetime" json:"deletedAt" yaml:"deletedAt"`
}

// FieldID returns the Field interface{} for the field id
func (this BaseModel) FieldID() Field { return FieldID }

// FieldCreatedAt returns the Field interface{} for the field created_at
func (this BaseModel) FieldCreatedAt() Field { return FieldCreatedAt }

// FieldUpdatedAt returns the Field interface{} for the field updated_at
func (this BaseModel) FieldUpdatedAt() Field { return FieldUpdatedAt }

// FieldDeletedAt returns the Field interface{} for the field deleted_at
func (this BaseModel) FieldDeletedAt() Field { return FieldDeletedAt }

type BaseModelList []*BaseModel

func (list BaseModelList) FieldIDStrList() []String {
	var results []fields.UUID
	for _, v := range list {
		results = append(results, v.ID.String)
	}
	return results
}

func (list BaseModelList) FieldIDList() []fields.UUID {
	var results []fields.UUID
	for _, v := range list {
		results = append(results, v.ID)
	}
	return results
}

func (list BaseModelList) FieldCreatedAtList() []time.Time {
	var results []time.Time
	for _, v := range list {
		results = append(results, v.CreatedAt)
	}
	return results
}

func (list BaseModelList) FieldUpdatedAtList() []time.Time {
	var results []time.Time
	for _, v := range list {
		results = append(results, v.UpdatedAt)
	}
	return results
}

func (list BaseModelList) FieldDeletedAtList() []fields.DeletedAt {
	var results []fields.DeletedAt
	for _, v := range list {
		results = append(results, v.DeletedAt)
	}
	return results
}

// BaseModelWithID returns a new BaseModel with the string id
func BaseModelWithID(id string) BaseModel {
	return BaseModel{ID: fields.UUID{String: id, Valid: true}}
}
