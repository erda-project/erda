// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by erda-cli. DO NOT EDIT.
// Source: bin/erda-cli gorm gen -f .erda/ai-proxy/migrations/ai-proxy/20230823-ai-proxy.sql -o internal/apps/ai-proxy/models

package models

import (
	"time"

	"gorm.io/gorm"
)

var (
	_ time.Time
)

var (
	_ CRUDer = (*AIProxyPrompt)(nil)
	_ Lister = (*AIProxyPromptList)(nil)
)

// FieldBaseModel returns the Field interface{} for the field ai_proxy_prompt.id
func (this AIProxyPrompt) FieldBaseModel() Field { return field{name: "id"} }

// FieldName returns the Field interface{} for the field ai_proxy_prompt.name
func (this AIProxyPrompt) FieldName() Field { return field{name: "name"} }

// FieldDesc returns the Field interface{} for the field ai_proxy_prompt.desc
func (this AIProxyPrompt) FieldDesc() Field { return field{name: "desc"} }

// FieldClientID returns the Field interface{} for the field ai_proxy_prompt.client_id
func (this AIProxyPrompt) FieldClientID() Field { return field{name: "client_id"} }

// FieldMessages returns the Field interface{} for the field ai_proxy_prompt.messages
func (this AIProxyPrompt) FieldMessages() Field { return field{name: "messages"} }

// FieldMetadata returns the Field interface{} for the field ai_proxy_prompt.metadata
func (this AIProxyPrompt) FieldMetadata() Field { return field{name: "metadata"} }

// Creator returns a Creator interface that you can create record with.
func (this *AIProxyPrompt) Creator(db *gorm.DB) Creator {
	return &creator{db: db, model: this}
}

// Retriever returns a Retriever that you can select one record with.
func (this *AIProxyPrompt) Retriever(db *gorm.DB) Retriever {
	return &retriever{
		db:    db.Model(this),
		model: this,
		where: make([]Where, 0),
	}
}

// Updater returns an Updater that you can update records with.
func (this *AIProxyPrompt) Updater(db *gorm.DB) Updater {
	return &updater{
		db:      db.Model(this),
		model:   this,
		where:   nil,
		updates: make(map[string]any),
	}
}

// Deleter returns a Deleter that you can delete records with.
func (this *AIProxyPrompt) Deleter(db *gorm.DB) Deleter {
	return &deleter{
		db:    db.Model(this),
		model: this,
		where: make([]Where, 0),
	}
}

// FieldName returns the Field interface{} for the field ai_proxy_prompt.name
func (list AIProxyPromptList) FieldName() Field { return field{name: "name"} }

// FieldDesc returns the Field interface{} for the field ai_proxy_prompt.desc
func (list AIProxyPromptList) FieldDesc() Field { return field{name: "desc"} }

// FieldClientID returns the Field interface{} for the field ai_proxy_prompt.client_id
func (list AIProxyPromptList) FieldClientID() Field { return field{name: "client_id"} }

// FieldMessages returns the Field interface{} for the field ai_proxy_prompt.messages
func (list AIProxyPromptList) FieldMessages() Field { return field{name: "messages"} }

// FieldMetadata returns the Field interface{} for the field ai_proxy_prompt.metadata
func (list AIProxyPromptList) FieldMetadata() Field { return field{name: "metadata"} }

// FieldBaseModelList returns a slice for the field BaseModel

func (list AIProxyPromptList) FieldBaseModelList() BaseModelList {
	var results BaseModelList
	for _, v := range list {
		results = append(results, &v.BaseModel)
	}
	return results
}

// FieldNameList returns a slice for the field Name

func (list AIProxyPromptList) FieldNameList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.Name)
	}
	return results
}

// FieldDescList returns a slice for the field Desc

func (list AIProxyPromptList) FieldDescList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.Desc)
	}
	return results
}

// FieldClientIDList returns a slice for the field ClientID

func (list AIProxyPromptList) FieldClientIDList() []string {
	var results []string
	for _, v := range list {
		results = append(results, v.ClientID)
	}
	return results
}

// FieldMessagesList returns a slice for the field Messages

func (list AIProxyPromptList) FieldMessagesList() []Messages {
	var results []Messages
	for _, v := range list {
		results = append(results, v.Messages)
	}
	return results
}

// FieldMetadataList returns a slice for the field Metadata

func (list AIProxyPromptList) FieldMetadataList() []Metadata {
	var results []Metadata
	for _, v := range list {
		results = append(results, v.Metadata)
	}
	return results
}

// Pager returns a Pager that you can query records by paging with.
func (list *AIProxyPromptList) Pager(db *gorm.DB) Pager {
	return &pager{
		db:    db,
		list:  list,
		where: nil,
	}
}
