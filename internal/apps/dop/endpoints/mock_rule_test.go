// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda-proto-go/dop/rule/pb (interfaces: RuleServiceServer)

// Package endpoints is a generated GoMock package.
package endpoints

import (
	context "context"
	reflect "reflect"

	pb "github.com/erda-project/erda-proto-go/dop/rule/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockRuleServiceServer is a mock of RuleServiceServer interface.
type MockRuleServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRuleServiceServerMockRecorder
}

// MockRuleServiceServerMockRecorder is the mock recorder for MockRuleServiceServer.
type MockRuleServiceServerMockRecorder struct {
	mock *MockRuleServiceServer
}

// NewMockRuleServiceServer creates a new mock instance.
func NewMockRuleServiceServer(ctrl *gomock.Controller) *MockRuleServiceServer {
	mock := &MockRuleServiceServer{ctrl: ctrl}
	mock.recorder = &MockRuleServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleServiceServer) EXPECT() *MockRuleServiceServerMockRecorder {
	return m.recorder
}

// CreateRule mocks base method.
func (m *MockRuleServiceServer) CreateRule(arg0 context.Context, arg1 *pb.CreateRuleRequest) (*pb.CreateRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockRuleServiceServerMockRecorder) CreateRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockRuleServiceServer)(nil).CreateRule), arg0, arg1)
}

// DeleteRule mocks base method.
func (m *MockRuleServiceServer) DeleteRule(arg0 context.Context, arg1 *pb.DeleteRuleRequest) (*pb.DeleteRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockRuleServiceServerMockRecorder) DeleteRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockRuleServiceServer)(nil).DeleteRule), arg0, arg1)
}

// Fire mocks base method.
func (m *MockRuleServiceServer) Fire(arg0 context.Context, arg1 *pb.FireRequest) (*pb.FireResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fire", arg0, arg1)
	ret0, _ := ret[0].(*pb.FireResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fire indicates an expected call of Fire.
func (mr *MockRuleServiceServerMockRecorder) Fire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fire", reflect.TypeOf((*MockRuleServiceServer)(nil).Fire), arg0, arg1)
}

// GetRule mocks base method.
func (m *MockRuleServiceServer) GetRule(arg0 context.Context, arg1 *pb.GetRuleRequest) (*pb.GetRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockRuleServiceServerMockRecorder) GetRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockRuleServiceServer)(nil).GetRule), arg0, arg1)
}

// ListRuleExecHistory mocks base method.
func (m *MockRuleServiceServer) ListRuleExecHistory(arg0 context.Context, arg1 *pb.ListRuleExecHistoryRequest) (*pb.ListRuleExecHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleExecHistory", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListRuleExecHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleExecHistory indicates an expected call of ListRuleExecHistory.
func (mr *MockRuleServiceServerMockRecorder) ListRuleExecHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleExecHistory", reflect.TypeOf((*MockRuleServiceServer)(nil).ListRuleExecHistory), arg0, arg1)
}

// ListRules mocks base method.
func (m *MockRuleServiceServer) ListRules(arg0 context.Context, arg1 *pb.ListRulesRequest) (*pb.ListRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockRuleServiceServerMockRecorder) ListRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockRuleServiceServer)(nil).ListRules), arg0, arg1)
}

// UpdateRule mocks base method.
func (m *MockRuleServiceServer) UpdateRule(arg0 context.Context, arg1 *pb.UpdateRuleRequest) (*pb.UpdateRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockRuleServiceServerMockRecorder) UpdateRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockRuleServiceServer)(nil).UpdateRule), arg0, arg1)
}
