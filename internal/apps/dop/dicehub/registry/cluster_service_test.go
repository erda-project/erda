// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda-proto-go/core/clustermanager/cluster/pb (interfaces: ClusterServiceServer)

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	pb "github.com/erda-project/erda-proto-go/core/clustermanager/cluster/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockClusterServiceServer is a mock of ClusterServiceServer interface.
type MockClusterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceServerMockRecorder
}

// MockClusterServiceServerMockRecorder is the mock recorder for MockClusterServiceServer.
type MockClusterServiceServerMockRecorder struct {
	mock *MockClusterServiceServer
}

// NewMockClusterServiceServer creates a new mock instance.
func NewMockClusterServiceServer(ctrl *gomock.Controller) *MockClusterServiceServer {
	mock := &MockClusterServiceServer{ctrl: ctrl}
	mock.recorder = &MockClusterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterServiceServer) EXPECT() *MockClusterServiceServerMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterServiceServer) CreateCluster(arg0 context.Context, arg1 *pb.CreateClusterRequest) (*pb.CreateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterServiceServerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterServiceServer)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockClusterServiceServer) DeleteCluster(arg0 context.Context, arg1 *pb.DeleteClusterRequest) (*pb.DeleteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterServiceServerMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterServiceServer)(nil).DeleteCluster), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockClusterServiceServer) GetCluster(arg0 context.Context, arg1 *pb.GetClusterRequest) (*pb.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterServiceServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterServiceServer)(nil).GetCluster), arg0, arg1)
}

// ListCluster mocks base method.
func (m *MockClusterServiceServer) ListCluster(arg0 context.Context, arg1 *pb.ListClusterRequest) (*pb.ListClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCluster indicates an expected call of ListCluster.
func (mr *MockClusterServiceServerMockRecorder) ListCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCluster", reflect.TypeOf((*MockClusterServiceServer)(nil).ListCluster), arg0, arg1)
}

// PatchCluster mocks base method.
func (m *MockClusterServiceServer) PatchCluster(arg0 context.Context, arg1 *pb.PatchClusterRequest) (*pb.PatchClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.PatchClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchCluster indicates an expected call of PatchCluster.
func (mr *MockClusterServiceServerMockRecorder) PatchCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCluster", reflect.TypeOf((*MockClusterServiceServer)(nil).PatchCluster), arg0, arg1)
}

// UpdateCluster mocks base method.
func (m *MockClusterServiceServer) UpdateCluster(arg0 context.Context, arg1 *pb.UpdateClusterRequest) (*pb.UpdateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockClusterServiceServerMockRecorder) UpdateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockClusterServiceServer)(nil).UpdateCluster), arg0, arg1)
}
