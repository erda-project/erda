"""
Generated by Erda Migrator.
Please implement the function entry, and add it to the list entries.
"""

import json
import django.db.models


class DiceRelease(django.db.models.Model):
    """
    generated by erda-cli
    """

    release_id = django.db.models.CharField(primary_key=True)
    release_name = django.db.models.CharField()
    desc = django.db.models.TextField()
    dice = django.db.models.TextField()
    addon = django.db.models.TextField()
    labels = django.db.models.CharField()
    version = django.db.models.CharField()
    org_id = django.db.models.BigIntegerField()
    project_id = django.db.models.BigIntegerField()
    application_id = django.db.models.BigIntegerField()
    project_name = django.db.models.CharField()
    application_name = django.db.models.CharField()
    user_id = django.db.models.CharField()
    cluster_name = django.db.models.CharField()
    cross_cluster = django.db.models.BooleanField()
    resources = django.db.models.TextField()
    reference = django.db.models.BigIntegerField()
    created_at = django.db.models.DateTimeField()
    updated_at = django.db.models.DateTimeField()
    changelog = django.db.models.TextField()
    is_stable = django.db.models.BooleanField()
    is_formal = django.db.models.BooleanField()
    is_project_release = django.db.models.BooleanField()
    modes = django.db.models.TextField()
    tags = django.db.models.CharField()
    git_branch = django.db.models.CharField()
    is_latest = django.db.models.BooleanField()
    
    class Meta:
        db_table = "dice_release"


def entry():
    releases = DiceRelease.objects.all()

    for release in releases:
        if not release.is_project_release:
            continue
        try:
            list = json.loads(release.modes)
            modes = {'default': {'expose': True, 'applicationReleaseList': list}}
            s = json.dumps(modes)
        except Execption as e:
            print("release %s json parse error, exception: %s, skip" % (release.release_id, e))
            continue
        release.modes = s
        release.save()


entries: [callable] = [
    entry,
]
