"""
Generated by Erda Migrator.
Please implement the function entry, and add it to the list entries.
"""
import json

import django.db.models


class ErdaDevFlowRule(django.db.models.Model):
    """
    generated by erda-cli
    """

    id = django.db.models.CharField(primary_key=True)
    flows = django.db.models.TextField()
    org_id = django.db.models.BigIntegerField()
    org_name = django.db.models.CharField()
    project_id = django.db.models.BigIntegerField()
    project_name = django.db.models.CharField()
    creator = django.db.models.CharField()
    updater = django.db.models.CharField()
    created_at = django.db.models.DateTimeField(auto_now=True)
    updated_at = django.db.models.DateTimeField(auto_now=True, auto_now_add=True)
    deleted_at = django.db.models.BigIntegerField()
    branch_policies = django.db.models.TextField()

    class Meta:
        db_table = "erda_dev_flow_rule"


def entry():
    """
    please implement this and add it to the list entries
    """
    rules = ErdaDevFlowRule.objects.all()
    for rule in rules:
        if rule.flows == "":
            continue
        flows = json.loads(rule.flows)
        new_flows = list()
        policies = list()
        for flow in flows:
            branchType = "single_branch"
            if flow['flowType'] == "multi_branch":
                branchType = "multi_branch"

            if flow['flowType'] == "single_branch":
                branch = flow['targetBranch']
            else:
                branch = flow['changeBranch']
            new_flows.append({
                "name": flow['name'],
                "targetBranch": branch,
                "artifact": flow['artifact'],
                "environment": flow['environment'],
            })
            if branchType == "single_branch":
                policies.append({
                    "branch": branch,
                    "branchType": "single_branch",
                    "policy": None,
                })
            elif branchType == "multi_branch":
                policies.append({
                    "branch": branch,
                    "branchType": "multi_branch",
                    "policy": {
                        "sourceBranch": flow['targetBranch'],
                        "currentBranch": branch,
                        "tempBranch": flow['autoMergeBranch'],
                        "targetBranch": None
                    },
                })

        rule.branch_policies = json.dumps(policies)
        rule.flows = json.dumps(new_flows)
        rule.save()
    pass


entries: [callable] = [
    entry,
]
