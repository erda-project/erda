"""
Generated by Erda Migrator.
Please implement the function entry, and add it to the list entries.
"""
import json
import uuid

import django.db.models
from django.core.exceptions import ObjectDoesNotExist


class DiceOrg(django.db.models.Model):
    """
    generated by erda-cli
    """

    id = django.db.models.BigIntegerField()
    name = django.db.models.CharField()
    logo = django.db.models.CharField()
    config = django.db.models.TextField()
    locale = django.db.models.CharField()
    desc = django.db.models.CharField()
    type = django.db.models.CharField()
    creator = django.db.models.CharField()
    operation = django.db.models.CharField()
    status = django.db.models.CharField()
    open_fdp = django.db.models.BooleanField()
    created_at = django.db.models.DateTimeField()
    updated_at = django.db.models.DateTimeField()
    version = django.db.models.CharField()
    display_name = django.db.models.CharField()
    blockout_config = django.db.models.TextField()
    is_public = django.db.models.BooleanField()

    class Meta:
        db_table = "dice_org"


class ErdaProject(django.db.models.Model):
    """
    generated by erda-cli
    """

    id = django.db.models.BigIntegerField()
    name = django.db.models.CharField()
    display_name = django.db.models.CharField()
    logo = django.db.models.CharField()
    desc = django.db.models.CharField()
    cluster_config = django.db.models.CharField()
    cpu_quota = django.db.models.DecimalField()
    mem_quota = django.db.models.DecimalField()
    creator = django.db.models.CharField()
    org_id = django.db.models.BigIntegerField()
    version = django.db.models.CharField()
    created_at = django.db.models.DateTimeField()
    updated_at = django.db.models.DateTimeField()
    dd_hook = django.db.models.TextField()
    email = django.db.models.TextField()
    functions = django.db.models.CharField()
    active_time = django.db.models.DateTimeField()
    rollback_config = django.db.models.CharField()
    enable_ns = django.db.models.BooleanField()
    is_public = django.db.models.BooleanField()
    type = django.db.models.CharField()
    soft_deleted_at = django.db.models.BigIntegerField()

    class Meta:
        db_table = "erda_project"


class DiceBranchRules(django.db.models.Model):
    """
    generated by erda-cli
    """

    id = django.db.models.BigIntegerField()
    created_at = django.db.models.DateTimeField()
    updated_at = django.db.models.DateTimeField()
    rule = django.db.models.CharField()
    desc = django.db.models.CharField()
    workspace = django.db.models.CharField()
    artifact_workspace = django.db.models.CharField()
    is_protect = django.db.models.BooleanField()
    is_trigger_pipeline = django.db.models.BooleanField()
    need_approval = django.db.models.BooleanField()
    scope_type = django.db.models.CharField()
    scope_id = django.db.models.BigIntegerField()

    class Meta:
        db_table = "dice_branch_rules"


class ErdaDevFlowRule(django.db.models.Model):
    """
    generated by erda-cli
    """

    id = django.db.models.CharField(primary_key=True)
    flows = django.db.models.TextField()
    org_id = django.db.models.BigIntegerField()
    org_name = django.db.models.CharField()
    project_id = django.db.models.BigIntegerField()
    project_name = django.db.models.CharField()
    creator = django.db.models.CharField()
    updater = django.db.models.CharField()
    created_at = django.db.models.DateTimeField(auto_now=True)
    updated_at = django.db.models.DateTimeField(auto_now=True, auto_now_add=True)
    deleted_at = django.db.models.BigIntegerField()

    class Meta:
        db_table = "erda_dev_flow_rule"


def entry():
    """
    please implement this and add it to the list entries
    """
    rules = DiceBranchRules.objects.all()

    rule_dict = dict()
    for rule in rules:
        if rule.scope_type != "project":
            continue
        if rule.scope_id in rule_dict:
            rule_dict[rule.scope_id].append(rule)
        else:
            rule_dict[rule.scope_id] = list()
            rule_dict[rule.scope_id].append(rule)

    for k, rules in rule_dict.items():
        if len(rules) == 0:
            continue
        try:
            project = ErdaProject.objects.get(id=k)
            org = DiceOrg.objects.get(id=project.org_id)
        except ObjectDoesNotExist:
            print("Either the project or org doesn't exist.")
            continue
        dev_flow = ErdaDevFlowRule()
        dev_flow.id = str(uuid.uuid4())
        dev_flow.org_id = org.id
        dev_flow.org_name = org.name
        dev_flow.project_id = project.id
        dev_flow.project_name = project.name
        dev_flow.created_at = rules[0].created_at
        dev_flow.updated_at = rules[0].updated_at
        dev_flow.creator = project.creator
        dev_flow.updater = project.creator
        dev_flow.deleted_at = 0
        flows = list()
        for rule in rules:
            artifact = ""
            if rule.workspace == "DEV":
                artifact = "alpha"
            elif rule.workspace == "TEST":
                artifact = "beta"
            elif rule.workspace == "STAGING":
                artifact = "rc"
            elif rule.workspace == "PROD":
                artifact = "stable"
            flows.append({
                "name": rule.workspace,
                "flowType": "single_branch",
                "targetBranch": rule.rule,
                "changeFromBranch": "",
                "enableAutoMerge": False,
                "artifact": artifact,
                "environment": rule.workspace,
                "startWorkflowHints": None
            })

        dev_flow.flows = json.dumps(flows)
        dev_flow.save()
    pass


entries: [callable] = [
    entry,
]
