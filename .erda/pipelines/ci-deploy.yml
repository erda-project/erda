version: "1.1"

on:
  push:
    branches:
      - dev

stages:
  - stage:
      - git-checkout:
          alias: erda
          params:
            depth: 1
      - git-checkout:
          alias: erda-actions
          params:
            uri: https://erda.cloud/erda/dop/erda-project/erda-actions-mirror
            branch: master
            depth: 1
      - git-checkout:
          alias: erda-addons
          params:
            uri: https://erda.cloud/erda/dop/erda-project/erda-addons-mirror
            branch: master
            depth: 1
      - git-checkout:
          alias: erda-actions-enterprise
          params:
            uri: https://erda.cloud/erda/dop/erda-project/erda-actions-enterprise-mirror
            branch: master
            depth: 1
      - git-checkout:
          alias: erda-addons-enterprise
          params:
            uri: https://erda.cloud/erda/dop/erda-project/erda-addons-enterprise-mirror
            branch: master
            depth: 1
      - git-checkout:
          alias: erda-java-extensions
          params:
            uri: https://erda.cloud/erda/dop/erda-project/erda-java-extensions-mirror
            branch: master
            depth: 1
  - stage:
      - extract-repo-version:
          params:
            git_dir: ${{ dirs.erda }}
  - stage:
      - custom-script:
          alias: build-erda
          commands:
            - cd ${{ dirs.erda }}
            - mkdir -p extensions
            - cp -r ${{ dirs.erda-actions }} extensions
            - cp -r ${{ dirs.erda-addons }} extensions
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - make prepare
            - make build-push-all
          loop:
            break: task_status == 'Success'
            strategy:
              max_times: 5
              decline_ratio: 2
              decline_limit_sec: 60
              interval_sec: 5
          resources:
            cpu: 2
            mem: 2048
      - custom-script:
          alias: build-erda-cli
          commands:
            - cd ${{ dirs.erda }}
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - make prepare-cli
            - make build-push-image MODULE_PATH=cli
          loop:
            break: task_status == 'Success'
            strategy:
              max_times: 5
              decline_ratio: 2
              decline_limit_sec: 60
              interval_sec: 5
          resources:
            cpu: 2
            mem: 2048
      - custom-script:
          alias: build-erda-dicehub-ee
          commands:
            - cd ${{ dirs.erda }}
            - mkdir -p extensions
            - cp -r ${{ dirs.erda-actions }} extensions
            - cp -r ${{ dirs.erda-addons }} extensions
            - cp -r ${{ dirs.erda-actions-enterprise }} extensions
            - cp -r ${{ dirs.erda-addons-enterprise }} extensions
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - make prepare
            - make build-push-image MODULE_PATH=dicehub
          loop:
            break: task_status == 'Success'
            strategy:
              max_times: 5
              decline_ratio: 2
              decline_limit_sec: 60
              interval_sec: 5
          resources:
            cpu: 2
            mem: 2048
      - custom-script:
          alias: build-agent
          commands:
            - cd ${{ dirs.erda }}
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - MODULE_PATH=cluster-agent make build-push-image
          loop:
            break: task_status == 'Success'
            strategy:
              max_times: 5
              decline_ratio: 2
              decline_limit_sec: 60
              interval_sec: 5
          resources:
            cpu: 2
            mem: 2048
      - custom-script:
          alias: build-monitor-injector
          commands:
            - cd ${{ dirs.erda-java-extensions }}
            - make ci-build-local -e SKIP_TEST=true
            - cd ${{ dirs.erda }}
            - cp -r ${{ dirs.erda-java-extensions }}/dist/erda-java-agent ./build/java-agent
            - make build-push-image MODULE_PATH=monitor/agent-injector
          resources:
            cpu: 1
            mem: 1024
      - custom-script:
          alias: build-diagnotor-agent
          commands:
            - cd ${{ dirs.erda }}
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - make build-push-image MODULE_PATH=monitor/diagnotor-agent
          resources:
            cpu: 1
            mem: 1024
      - custom-script:
          alias: build-erda-cli-linux
          description: 运行自定义命令
          commands:
            - workDir=$(pwd)
            - echo $workDir
            - cd ${{ dirs.erda }}
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - GOPROXY=https://goproxy.cn,direct make prepare-cli
            - GOOS=linux GOPROXY=https://goproxy.cn,direct make cli
            - cd $workDir
            - cp ${{ dirs.erda }}/bin/erda-cli .
            - export CLI_VERSION=$(echo ${{ outputs.extract-repo-version.version }} | sed "s/\+.*//g")
            - 'echo action meta: version=${CLI_VERSION}'
          resources:
            cpu: 2
            mem: 2048
      - custom-script:
          alias: build-erda-cli-mac
          description: 运行自定义命令
          commands:
            - workDir=$(pwd)
            - echo $workDir
            - cd ${{ dirs.erda }}
            - export ERDA_VERSION=${{ outputs.extract-repo-version.major_minor_version }}
            - GOPROXY=https://goproxy.cn,direct make prepare-cli
            - GOOS=darwin GOPROXY=https://goproxy.cn,direct make cli
            - cd $workDir
            - cp ${{ dirs.erda }}/bin/erda-cli .
            - export CLI_VERSION=$(echo ${{ outputs.extract-repo-version.version }} | sed "s/\+.*//g")
            - 'echo action meta: version=${CLI_VERSION}'
          resources:
            cpu: 2
            mem: 2048
  - stage:
      - oss-upload:
          alias: upload-linux-erda-cli
          description: 上传文件到OSS
          version: "1.0"
          params:
            access_key_id: ((cli_oss_access_key_id))
            access_key_secret: ((cli_oss_access_key_secret))
            bucket: ((cli_oss_bucket))
            endpoint: http://oss-cn-hangzhou.aliyuncs.com
            local_path: ${{ dirs.build-erda-cli-linux }}/erda-cli
            oss_path: cli/linux/erda-${{ outputs.build-erda-cli-linux.version }}
      - oss-upload:
          alias: upload-mac-erda-cli
          description: 上传文件到OSS
          version: "1.0"
          params:
            access_key_id: ((cli_oss_access_key_id))
            access_key_secret: ((cli_oss_access_key_secret))
            bucket: ((cli_oss_bucket))
            endpoint: http://oss-cn-hangzhou.aliyuncs.com
            local_path: ${{ dirs.build-erda-cli-mac }}/erda-cli
            oss_path: cli/mac/erda-${{ outputs.build-erda-cli-mac.version }}
  - stage:
      - erda-mysql-migration:
          alias: dryrun-on-mysql80
          version: 1.0-80
          params:
            database: erda
            lint_config: .erda/migrations/config.yml
            migrationdir: .erda/migrations
            mysql_host: ${{ configs.legacy_migration_mysql_host }}
            mysql_port: 3306
            mysql_username: ${{ configs.legacy_migration_mysql_username }}
            mysql_password: ${{ configs.legacy_migration_mysql_password }}
            retry_timeout: 150
            skip_migration: "true"
            skip_pre_migration: true
            workdir: ${{ dirs.erda }}
      - erda-mysql-migration:
          alias: dryrun-on-mysql56
          version: 1.0-56
          params:
            database: erda
            lint_config: .erda/migrations/config.yml
            migrationdir: .erda/migrations
            mysql_host: ${{ configs.legacy_migration_mysql_host }}
            mysql_port: 3306
            mysql_username: ${{ configs.legacy_migration_mysql_username }}
            mysql_password: ${{ configs.legacy_migration_mysql_password }}
            retry_timeout: 150
            skip_migration: "true"
            skip_pre_migration: true
            workdir: ${{ dirs.erda }}
  - stage:
      - release:
          alias: release-erda
          params:
            check_diceyml: false
            cross_cluster: "true"
            dice_yml: ${{ dirs.erda }}/erda.yml
            tag_version: ${{ outputs.extract-repo-version.version }}
            image:
              action-runner-scheduler: ${{ outputs.build-erda.image }}
              admin: ${{ outputs.build-erda.image }}
              cluster-agent: ${{ outputs.build-agent.image }}
              cluster-dialer: ${{ outputs.build-erda.image }}
              cluster-manager: ${{ outputs.build-erda.image }}
              cmp: ${{ outputs.build-erda.image }}
              collector: ${{ outputs.build-erda.image }}
              core-services: ${{ outputs.build-erda.image }}
              dicehub: ${{ outputs.build-erda-dicehub-ee.image }}
              dop: ${{ outputs.build-erda.image }}
              ecp: ${{ outputs.build-erda.image }}
              eventbox: ${{ outputs.build-erda.image }}
              gittar: ${{ outputs.build-erda.image }}
              hepa: ${{ outputs.build-erda.image }}
              log-service: ${{ outputs.build-erda.image }}
              monitor-agent-injector: ${build-monitor-injector:OUTPUT:image}
              monitor: ${{ outputs.build-erda.image }}
              msp: ${{ outputs.build-erda.image }}
              openapi: ${{ outputs.build-erda.image }}
              orchestrator: ${{ outputs.build-erda.image }}
              pipeline: ${{ outputs.build-erda.image }}
              scheduler: ${{ outputs.build-erda.image }}
              streaming: ${{ outputs.build-erda.image }}
              uc-adaptor: ${{ outputs.build-erda.image }}
              erda-cli: ${{ outputs.build-erda-cli.image }}
  - stage:
      - dice:
          params:
            release_name: ${{ outputs.extract-repo-version.version }}
            workspace: DEV
            application_name: erda
            type: application
