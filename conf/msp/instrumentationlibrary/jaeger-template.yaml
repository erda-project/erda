- instrumentationlibrary: Jaeger
  templates:
    - language: Java
      template:
        "zh-CN": |
          #### 获取接入点和鉴权信息

          - 接入点：{{endpoint}}
          - 环境ID：{{erda_env_id}}
          - Token: 在此页面创建和获取

          #### 配置鉴权信息

          您可以在 HTTP/HTTPS 协议的 Header 中或者 Jaeger 协议的 Tag 字段中配置鉴权信息，具体字段及详细说明如下所示
          - erda.env.id : 微服务项目环境ID
          - erda.env.token : 微服务环境鉴权Token，在此页面创建和获取

          #### 通过 Jaeger SpringCloud Starter 上报数据

          1. 引入 opentracing-spring-jaeger-cloud-starter 依赖

          ``` maven
          <dependency>
              <groupId>io.opentracing.contrib</groupId>
              <artifactId>opentracing-spring-jaeger-cloud-starter</artifactId>
              <version>3.3.1</version>
          </dependency>
          ```

          2. 在 application.yml 中配置 Jaeger

          ``` yaml
          opentracing:
            jaeger:
              service-name: <your_service_name>
              http-sender:
                url: {{endpoint}}
              log-spans: true
              tags:
                erda.env.id: {{erda_env_id}}
                erda.env.token: <your_token>
          ```

        "en-US": |
          #### Get endpoint and authentication information

          - Endpoint: {{endpoint}}
          - Environment ID: {{erda_env_id}}
          - Token: Create and get on this page

          #### Configure authentication information

          You can configure authentication information in the header of the HTTP/HTTPS protocol or the tag field of the Jaeger protocol. The fields and descriptions are as follows.
          - erda.env.id: Environment ID of microservice project
          - erda.env.token: Authentication token of microservice environment, created and obtained on this page

          #### Report data via Jaeger SpringCloud Starter

          1. Import opentracing-spring-jaeger-cloud-starter dependency

          ``` maven
          <dependency>
              <groupId>io.opentracing.contrib</groupId>
              <artifactId>opentracing-spring-jaeger-cloud-starter</artifactId>
              <version>3.3.1</version>
          </dependency>
          ```

          2. Configure Jaeger in application.yml
          ``` yaml
          opentracing:
            jaeger:
              service-name: <your_service_name>
              http-sender:
                url: {{endpoint}}
              log-spans: true
              tags:
                erda.env.id: {{erda_env_id}}
                erda.env.token: <your_token>
          ```
    - language: Node.js
      template:
        "zh-CN": |
          #### 获取接入点和鉴权信息

          - 接入点：{{endpoint}}
          - 环境ID：{{erda_env_id}}
          - Token: 在此页面创建和获取

          #### 配置鉴权信息

          您可以在 HTTP/HTTPS 协议的 Header 中或者 Jaeger 协议的 Tag 字段中配置鉴权信息，具体字段及详细说明如下所示
          - erda.env.id : 微服务项目环境ID
          - erda.env.token : 微服务环境鉴权Token，在此页面创建和获取

          #### 通过 jaeger-client-node 上报数据

          1. 引入 jaeger-client 依赖

          ``` nodejs
          npm install --save jaeger-client
          ```

          2. 配置 Tracer

          ``` nodejs
          const {initTracer} = require("jaeger-client");

          const config = {
              serviceName: <your_service_name>,
              reporter: {
                  // Provide the traces endpoint; this forces the client to connect directly to the Collector and send
                  // spans over HTTP
                  collectorEndpoint: {{endpoint}},
              },
          };
          const options = {
              tags: {
                  'erda.env.id': {{erda_env_id}},
                  'erda.env.token': <your_token>,
              }
          };

          const tracer = initTracer(config, options);
          ```

        "en-US": |
          #### Get endpoint and authentication information

          - Endpoint: {{endpoint}}
          - Environment ID: {{erda_env_id}}
          - Token: Create and get on this page

          #### Configure authentication information

          You can configure authentication information in the header of the HTTP/HTTPS protocol or the tag field of the Jaeger protocol. The fields and descriptions are as follows.
          - erda.env.id: Environment ID of microservice project
          - erda.env.token: Authentication token of microservice environment, created and obtained on this page

          #### Report data via jaeger-client-node

          1. Import jaeger-client dependency

          ``` nodejs
          npm install --save jaeger-client
          ```

          2. Configure Tracer

          ``` nodejs
          const {initTracer} = require("jaeger-client");

          const config = {
              serviceName: <your_service_name>,
              reporter: {
                  // Provide the traces endpoint; this forces the client to connect directly to the Collector and send
                  // spans over HTTP
                  collectorEndpoint: {{endpoint}},
              },
          };
          const options = {
              tags: {
                  'erda.env.id': {{erda_env_id}},
                  'erda.env.token': <your_token>,
              }
          };

          const tracer = initTracer(config, options);
          ```
    - language: .NET Core
      template:
        "zh-CN": |
          #### 获取接入点和鉴权信息

          - 接入点：{{endpoint}}
          - 环境ID：{{erda_env_id}}
          - Token: 在此页面创建和获取

          #### 配置鉴权信息

          您可以在 HTTP/HTTPS 协议的 Header 中或者 Jaeger 协议的 Tag 字段中配置鉴权信息，具体字段及详细说明如下所示
          - erda.env.id : 微服务项目环境ID
          - erda.env.token : 微服务环境鉴权Token，在此页面创建和获取

          #### 通过 jaeger-client-csharp 上报数据

          1. 引入依赖

          ``` shell
          dotnet add package Jaeger --version 1.0.3
          ```

          2. 注册全局Tracer

          ``` csharp
          // Use "OpenTracing.Contrib.NetCore" to automatically generate spans for ASP.NET Core, Entity Framework Core, ...
          // See https://github.com/opentracing-contrib/csharp-netcore for details.
          services.AddOpenTracing();

          // Adds the Jaeger Tracer.
          services.AddSingleton<ITracer>(serviceProvider =>{

            var loggerFactory = serviceProvider.GetRequiredService<ILoggerFactory>();

            var senderResolver = new SenderResolver(loggerFactory).RegisterSenderFactory<ThriftSenderFactory>();
            var senderConfiguration = new Configuration.SenderConfiguration(loggerFactory)
                                            .WithSenderResolver(senderResolver)
                                            .WithEndpoint("{{endpoint}}");

            var reporterConfiguration = new Configuration.ReporterConfiguration(loggerFactory)
                                              .WithSender(senderConfiguration)
                                              .WithLogSpans(true);

            var samplerConfiguration = new Configuration.SamplerConfiguration(loggerFactory)
                                              .WithType("const")
                                              .WithParam(1);

            var tracerTagMaps = new Dictionary<string, string>();
            tracerTagMaps["erda.env.id"] = "{{erda_env_id}}";
            tracerTagMaps["erda.env.token"] = "<鉴权Token>";

            var tracer = new Configuration("<服务名>", loggerFactory)
                                .WithSampler(samplerConfiguration)
                                .WithReporter(reporterConfiguration)
                                .WithTracerTags(tracerTagMaps)
                                .GetTracer();

            // Allows code that can't use DI to also access the tracer.
            GlobalTracer.Register(tracer);

            return tracer;
          });
          ```


        "en-US": |
          #### Get endpoint and authentication information

          - Endpoint: {{endpoint}}
          - Environment ID: {{erda_env_id}}
          - Token: Create and get on this page

          #### Configure authentication information

          You can configure authentication information in the header of the HTTP/HTTPS protocol or the tag field of the Jaeger protocol. The fields and descriptions are as follows.
          - erda.env.id: Environment ID of microservice project
          - erda.env.token: Authentication token of microservice environment, created and obtained on this page

          #### Report data via jaeger-client-csharp

          1. Import dependencies

          ``` shell
          dotnet add package Jaeger --version 1.0.3
          ```

          2. Register global tracer

          ``` csharp
          // Use "OpenTracing.Contrib.NetCore" to automatically generate spans for ASP.NET Core, Entity Framework Core, ...
          // See https://github.com/opentracing-contrib/csharp-netcore for details.
          services.AddOpenTracing();

          // Adds the Jaeger Tracer.
          services.AddSingleton<ITracer>(serviceProvider =>{

            var loggerFactory = serviceProvider.GetRequiredService<ILoggerFactory>();

            var senderResolver = new SenderResolver(loggerFactory).RegisterSenderFactory<ThriftSenderFactory>();
            var senderConfiguration = new Configuration.SenderConfiguration(loggerFactory)
                                            .WithSenderResolver(senderResolver)
                                            .WithEndpoint("{{endpoint}}");

            var reporterConfiguration = new Configuration.ReporterConfiguration(loggerFactory)
                                              .WithSender(senderConfiguration)
                                              .WithLogSpans(true);

            var samplerConfiguration = new Configuration.SamplerConfiguration(loggerFactory)
                                              .WithType("const")
                                              .WithParam(1);

            var tracerTagMaps = new Dictionary<string, string>();
            tracerTagMaps["erda.env.id"] = "{{erda_env_id}}";
            tracerTagMaps["erda.env.token"] = "<authentication token>";

            var tracer = new Configuration("<service name>", loggerFactory)
                                .WithSampler(samplerConfiguration)
                                .WithReporter(reporterConfiguration)
                                .WithTracerTags(tracerTagMaps)
                                .GetTracer();

            // Allows code that can't use DI to also access the tracer.
            GlobalTracer.Register(tracer);

            return tracer;
          });
          ```
    - language: Golang
      template:
        "zh-CN": |
          #### 获取接入点和鉴权信息

          - 接入点：{{endpoint}}
          - 环境ID：{{erda_env_id}}
          - Token: 在此页面创建和获取

          #### 配置鉴权信息

          您可以在 HTTP/HTTPS 协议的 Header 中或者 Jaeger 协议的 Tag 字段中配置鉴权信息，具体字段及详细说明如下所示
          - erda.env.id : 微服务项目环境ID
          - erda.env.token : 微服务环境鉴权Token，在此页面创建和获取

          #### 通过 jaeger-client-go 上报数据

          1. 引入 jaeger-client-go 依赖

          ```golang
          import(
          	"github.com/opentracing/opentracing-go"
              "github.com/uber/jaeger-client-go"
              jaegercfg "github.com/uber/jaeger-client-go/config"
          )
          ```

          2. 配置 Tracer

          ```golang
          cfg := jaegercfg.Configuration{
          	Sampler: &jaegercfg.SamplerConfig{
          		Type:  jaeger.SamplerTypeConst,
          		Param: 1,
          	},
          	Reporter: &jaegercfg.ReporterConfig{
          		LogSpans:          true,
            		CollectorEndpoint: "{{endpoint}}",
          	},
          	Tags: []opentracing.Tag{
          		{
          			Key:   "erda.env.id",
          			Value: "{{erda_env_id}}",
          		},
          		{
          			Key:   "erda.env.token",
          			Value: "<your_token>",
          		},
          	},
          }
          closer, err := cfg.InitGlobalTracer("<your_service_name>", jaegercfg.Logger(jaeger.StdLogger))
          if err != nil {
          	panic(err)
          }
          defer closer.Close()
          t := opentracing.GlobalTracer()
          span := t.StartSpan("<your_operationName>")
          defer span.Finish()
          ```

        "en-US": |
          #### Get endpoint and authentication information
          - Endpoint: {{endpoint}}
          - Environment ID: {{erda_env_id}}
          - Token: Create and get on this page

          #### Configure authentication information

          You can configure authentication information in the header of the HTTP/HTTPS protocol or the tag field of the Jaeger protocol. The fields and descriptions are as follows.
          - erda.env.id: Environment ID of microservice project
          - erda.env.token: Authentication token of microservice environment, created and obtained on this page

          #### Report data via jaeger-client-go

          1. Import jaeger-client-go dependency

          ```golang
          import(
          	"github.com/opentracing/opentracing-go"
              "github.com/uber/jaeger-client-go"
              jaegercfg "github.com/uber/jaeger-client-go/config"
          )
          ```

          2. Configure Tracer

          ```golang
          cfg := jaegercfg.Configuration{
          	Sampler: &jaegercfg.SamplerConfig{
          		Type:  jaeger.SamplerTypeConst,
          		Param: 1,
          	},
          	Reporter: &jaegercfg.ReporterConfig{
          		LogSpans:          true,
            		CollectorEndpoint: "{{endpoint}}",
          	},
          	Tags: []opentracing.Tag{
          		{
          			Key:   "erda.env.id",
          			Value: "{{erda_env_id}}",
          		},
          		{
          			Key:   "erda.env.token",
          			Value: "<your_token>",
          		},
          	},
          }
          closer, err := cfg.InitGlobalTracer("<your_service_name>", jaegercfg.Logger(jaeger.StdLogger))
          if err != nil {
          	panic(err)
          }
          defer closer.Close()
          t := opentracing.GlobalTracer()
          span := t.StartSpan("<your_operationName>")
          defer span.Finish()
          ```
