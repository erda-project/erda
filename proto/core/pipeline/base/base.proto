syntax = "proto3";

package erda.core.pipeline.base;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "common/identity.proto";
import "common/commit.proto";
import "common/metadata.proto";
import "core/pipeline/queue/queue.proto";
import "core/pipeline/cron/cron.proto";

option go_package = "github.com/erda-project/erda-proto-go/core/pipeline/base/pb";

service BaseService {
  ////////// pipelines
  rpc PipelineCreate (PipelineCreateRequest) returns (PipelineCreateResponse) {
    option (google.api.http) = {
      post: "/api/v2/pipelines",
    };
  }
  rpc PipelinePaging (PipelinePagingRequest) returns (PipelinePagingResponse) {
    option (google.api.http) = {
      get: "/api/pipelines?source={sources}&ymlName={ymlNames}&status={statuses}&notStatus={notStatuses}&triggerMode={triggerModes}&clusterName={clusterNames}&mustMatchLabels={mustMatchLabelsJSON}&mustMatchLabel={mustMatchLabelsQueryParams}&anyMatchLabels={anyMatchLabelsJSON}&anyMatchLabel={anyMatchLabelsQueryParams}&branches={commaBranches}&sources={commaSources}&ymlNames={commaYmlNames}&statuses={commaStatuses}&branch={branches}",
    };
  }
  rpc PipelineDetail (PipelineDetailRequest) returns (PipelineDetailResponse) {
    option (google.api.http) = {
      get: "/api/pipelines/{pipelineID}",
    };
  }
  rpc PipelineOperate (PipelineOperateRequest) returns (PipelineOperateResponse) {
    option (google.api.http) = {
      put: "/api/pipelines/{pipelineID}",
    };
  }
  rpc PipelineDelete (PipelineDeleteRequest) returns (PipelineDeleteResponse) {
    option (google.api.http) = {
      delete: "/api/pipelines/{pipelineID}",
    };
  }
  rpc PipelineRun (PipelineRunRequest) returns (PipelineRunResponse) {
    option (google.api.http) = {
      post: "/api/pipelines/{pipelineID}/actions/run",
    };
  }
  rpc PipelineCancel (PipelineCancelRequest) returns (PipelineCancelResponse) {
    option (google.api.http) = {
      post: "/api/pipelines/{pipelineID}/actions/cancel",
    };
  }
  rpc PipelineRerun (PipelineRerunRequest) returns (PipelineRerunResponse) {
    option (google.api.http) = {
      post: "/api/pipelines/{pipelineID}/actions/rerun",
    };
  }
  rpc PipelineRerunFailed (PipelineRerunFailedRequest) returns (PipelineRerunFailedResponse) {
    option (google.api.http) = {
      post: "/api/pipelines/{pipelineID}/actions/rerun-failed",
    };
  }
  rpc DeprecatedPipelineBatchCreate (DeprecatedPipelineBatchCreateRequest) returns (DeprecatedPipelineBatchCreateResponse) {
    option (google.api.http) = {
      post: "/api/pipelines/actions/batch-create",
    };
  }
  rpc PipelineYmlGraph (PipelineYmlGraphRequest) returns (PipelineYmlGraphResponse) {
    option (google.api.http) = {
      post: "/api/pipelines/actions/pipeline-yml-graph",
    };
  }

  // task
  rpc PipelineTaskDetail (PipelineTaskDetailRequest) returns (PipelineTaskDetailResponse) {
    option (google.api.http) = {
      get: "/api/pipelines/{pipelineID}/tasks/{taskID}",
    };
  }
  rpc PipelineTaskGetBootstrapInfo (PipelineTaskGetBootstrapInfoRequest) returns (PipelineTaskGetBootstrapInfoResponse) {
    option (google.api.http) = {
      get: "/api/pipelines/{pipelineID}/tasks/{taskID}/actions/get-bootstrap-info",
    };
  }

  rpc PipelineCallback (PipelineCallbackRequest) returns (PipelineCallbackResponse) {
    option (google.api.http) = {
      get: "/api/pipelines/actions/callback",
    };
  }

  rpc QueryPipelineSnippet (PipelineSnippetQueryRequest) returns (PipelineSnippetQueryRequest) {
    option (google.api.http) = {
      get: "/api/pipeline-snippets/actions/query-details",
    };
  }

}

message PipelineSnippetQueryRequest {
  repeated SnippetDetailQuery snippetConfigs = 1;
}
message PipelineSnippetQueryResponse {
  map<string, SnippetQueryDetail> data = 1;
}
message SnippetDetailQuery {
  string source = 1;
  string name   = 2;
  map<string, string> labels = 3;
  string alias = 4;
}
message SnippetQueryDetail {
  repeated PipelineParam params = 1;
  repeated string outputs = 2;
}

message PipelineInstance {
  // base
  uint64 ID = 1 [json_name = "id"];
  string source = 2;
  string ymlName = 3;
  string namespace = 4;
  string clusterName = 5;
  string status = 6;
  string type = 7;
  string triggerMode = 8;
  uint64 cronID = 9;
  map<string, string> labels = 10;
  string ymlSource = 11;
  string ymlContent = 12;
  PipelineExtra extra = 13;

  // app related info
  uint64 orgID = 14;
  string orgName = 15;
  uint64 projectID = 16;
  string projectName = 17;
  uint64 applicationID = 18;
  string applicationName = 19;
  string branch = 20;
  string commit = 21;
  common.CommitDetail commitDetail = 22;

  // runtime info
  double progress = 23;
  int64 costTimeSec = 24;
  google.protobuf.Timestamp timeBegin = 25;
  google.protobuf.Timestamp timeEnd = 26;
  google.protobuf.Timestamp timeCreated = 27;
  google.protobuf.Timestamp timeUpdated = 28;
}
message PipelineExtra {
  string diceWorkspace = 1;
  PipelineUser submitUser = 2;
  PipelineUser runUser = 3;
  PipelineUser cancelUser = 4;
  string cronExpr = 5;
  google.protobuf.Timestamp cronTriggerTime = 6;
  ShowMessage show_message = 7;
  repeated string configManageNamespaces = 8;
  bool isAutoRun = 9;
  repeated string callbackURLs = 10;
}
message PipelineInstanceDetail {
  // TODO embed
  // base
  uint64 ID = 1 [json_name = "id"];
  string source = 2;
  string ymlName = 3;
  string namespace = 4;
  string clusterName = 5;
  string status = 6;
  string type = 7;
  string triggerMode = 8;
  uint64 cronID = 9;
  map<string, string> labels = 10;
  string ymlSource = 11;
  string ymlContent = 12;
  PipelineExtra extra = 13;

  // app related info
  uint64 orgID = 14;
  string orgName = 15;
  uint64 projectID = 16;
  string projectName = 17;
  uint64 applicationID = 18;
  string applicationName = 19;
  string branch = 20;
  string commit = 21;
  common.CommitDetail commitDetail = 22;

  // runtime info
  double progress = 23;
  int64 costTimeSec = 24;
  google.protobuf.Timestamp timeBegin = 25;
  google.protobuf.Timestamp timeEnd = 26;
  google.protobuf.Timestamp timeCreated = 27;
  google.protobuf.Timestamp timeUpdated = 28;

  // additional fields
  repeated PipelineStageDetail pipelineStages = 29;
  repeated PipelineStageDetail pipelineSnippetStages = 30;
  core.pipeline.cron.Cron pipelineCron = 31;
  PipelineButton pipelineButton = 32;
  map<string, PipelineTaskActionDetail> pipelineTaskActionDetails = 33;
  repeated PipelineParamWithValue runParams = 34;
  repeated PipelineEvent events = 35;
  bool needApproval = 36;
}
message PipelineGC {
  PipelineResourceGC resourceGC = 1;
  PipelineDatabaseGC databaseGC = 2;
}
// PipelineResourceGC releases occupied resource by pipeline, such as:
// - k8s pv (netdata volume)
// - k8s pod
// - k8s namespace
message PipelineResourceGC {
  // SuccessTTLSecond means when to release resource if pipeline status is Success.
  // Normally success ttl should be small even to zero, because everything is ok and don't need to rerun.
  // Default is 1800s(30min)
  uint64 successTTLSecond = 1;
  // FailedTTLSecond means when to release resource if pipeline status is Failed.
  // Normally failed ttl should larger than SuccessTTLSecond, because you may want to rerun this failed pipeline,
  // which need these resource.
  // Default is 1800s.
  uint64 failedTTLSecond = 2;
}
// PipelineDatabaseGC represents database record gc strategy.
message PipelineDatabaseGC {
  PipelineDBGCItem analyzed = 1;
  PipelineDBGCItem finished = 2;
}
message PipelineDBGCItem {
  // NeedArchive means whether this record need be archived:
  // If true, archive record to specific archive table;
  // If false, delete record and cannot be found anymore.
  bool needArchive = 1;
  // TTLSecond means when to do archive or delete operation.
  uint64 TTLSecond = 2 [json_name = "ttlSecond"];
}
message PipelineRunParam {
  string name = 1;
  google.protobuf.Value value = 2;
}
message PipelineRunParamWithValue {
  string name = 1;
  google.protobuf.Value value = 2; // parsed from pipeline.yml
  google.protobuf.Value trueValue = 3; // true value: placeholders will be replaced
}
message PipelineUser {
  string ID = 1 [json_name = "id"];
  string name = 2;
  string avatar = 3;
}
message ShowMessage {
  string msg = 1;
  repeated string stacks = 2;
  bool abortRun = 3; // if false, canManualRun should be false
}
message StorageConfig {
  bool enableNFS = 1;
  bool enableLocal = 2;
}
message PipelineButton {
  bool canManualRun = 1;
  bool canCancel = 2;
  bool canForceCancel = 3;
  bool canRerun = 4;
  bool canRerunFailed = 5;
  bool canStartCron = 6;
  bool canStopCron = 7;
  bool canPause = 8;
  bool canUnpause = 9;
  bool canDelete = 10;
}
message PipelineExecuteRecord {
  uint64 PipelineID = 1;
  string status = 2;
  string triggerMode = 3;
  google.protobuf.Timestamp timeCreated = 4;
  google.protobuf.Timestamp timeBegin = 5;
  google.protobuf.Timestamp timeEnd = 6;
}

///////////// event
// PipelineEvent is k8s-event-like stream event.
message PipelineEvent {
  // Optional; this should be a short, machine understandable string that gives the reason
  // for this event being generated. For example, if the event is reporting that a container
  // can't start, the Reason might be "ImageNotFound".
  // +optional
  string reason = 1;

  // Optional. A human-readable description of the status of this operation.
  // +optional
  string message = 2;

  // Optional. The component reporting this event. Should be a short machine understandable string.
  // +optional
  PipelineEventSource source = 3;

  // The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
  // +optional
  google.protobuf.Timestamp firstTimestamp = 4;

  // The time at which the most recent occurrence of this event was recorded.
  // +optional
  google.protobuf.Timestamp lastTimestamp = 5;

  // The number of times this event has occurred.
  // +optional
  int32 count = 6;

  // Type of this event (Normal, Warning), new types could be added in the future.
  // +optional
  string type = 7;
}

// PipelineEventSource represents the source from which an event is generated
message PipelineEventSource {
  // Component from which the event is generated.
  // +optional
  string component = 1;

  // Node name on which the event is generated.
  // +optional
  string host = 2;
}

////////////// metadata
message ErrorResponse {
  string code = 1;
  string msg = 2;
  google.protobuf.Value ctx = 3;
}

///////////// pipelineyaml
message PipelineOutput {
  string name = 1;
  string desc = 2;
  string ref = 3;
}
message PipelineOutputWithValue {
  string name = 1;
  string desc = 2;
  string ref = 3;
  google.protobuf.Value value = 4;
}

message PipelineParam {
  string name = 1;
  bool required = 2;
  google.protobuf.Value default = 3;
  string desc = 4;
  string type = 5;
}
message PipelineParamWithValue {
  string name = 1;
  bool required = 2;
  google.protobuf.Value default = 3;
  string desc = 4;
  string type = 5;

  google.protobuf.Value value = 6;
}
message PipelineYml {
  // used to generated pipeline yaml
  string version = 1;
  map<string, string> envs = 2;
  string cron = 3;
  CronCompensator cronCompensator = 4;
  google.protobuf.ListValue stages = 5; // [][]*PipelineYmlAction
  repeated PipelineYmlAction flatActions = 6;
  repeated PipelineParam params = 7;
  repeated PipelineOutput outputs = 8;

  // --- 以下字段与构造 pipeline yml 无关 ---

  // 1.0 升级相关
  bool needUpgrade = 9; // pipeline yml 是否需要升级

  // YmlContent:
  // 1) 当 needUpgrade 为 true  时，ymlContent 返回升级后的 yml
  // 2) 当 needUpgrade 为 false 时：
  //    1) 用户传入的为 YAML(apistructs.PipelineYml) 时，ymlContent 返回 YAML(spec.PipelineYml)
  //    2) 用户传入的为 YAML(spec.PipelineYml) 时，返回优化后的 YAML(spec.PipelineYml)
  string ymlContent = 10;
  TriggerConfig on = 11;

  // describe the use of network hooks in the pipeline
  repeated NetworkHookInfo lifecycle = 12;
}
message TriggerConfig {
  PushTrigger push = 1;
  MergeTrigger merge = 2;
}
message PushTrigger {
  repeated string branches = 1;
  repeated string tags = 2;
}
message MergeTrigger {
  repeated string branches = 1;
}
message NetworkHookInfo {
  string hook = 1; // hook type
  string client = 2; // use network client
  map<string, google.protobuf.Value> labels = 3; // additional information
}
message PipelineYmlAction {
  string alias = 1;
  string type = 2;
  string description = 3;
  string version = 4;
  map<string, google.protobuf.Value> params = 5;
  string image = 6;
  repeated string commands = 7;
  int64 timeout = 8;
  repeated string namespaces = 9;
  Resources resources = 10;
  string displayName = 11;
  string logoUrl = 12;
  repeated ActionCache caches = 13;
  SnippetConfig snippetConfig = 14;
  string if = 15;
  TaskLoop loop = 16;
  SnippetStages snippetStages = 17;
}
message Resources {
  double cpu = 1;
  double mem = 2;
  double disk = 3;
}
message CronCompensator {
  bool enable = 1;
  bool latestFirst = 2;
  bool stopIfLatterExecuted = 3;
}
message ActionCache {
  // 缓存生成的 key 或者是用户指定的 key
  // 用户指定的话 需要 {{basePath}}/路径/{{endPath}} 来自定义 key
  // 用户没有指定 key 有一定的生成规则, 具体生成规则看 prepare.go 的 setActionCacheStorageAndBinds 方法
  string key = 1;
  string path = 2; // 指定那个目录被缓存, 只能是由 / 开始的绝对路径
}
message TaskLoop {
  string break = 1;
  TaskLoopStrategy strategy = 2;
}
message TaskLoopStrategy {
  int64 maxTimes = 1; // 最大重试次数，-1 表示不限制
  double declineRatio = 2; // 重试衰退速率  2s - 4s - 8s - 16s
  int64 declineLimitSec = 3;// 重试衰退最大值  2s - 4s - 8s - 8s - 8s
  uint64 intervalSec = 4; // 重试间隔时间 2s - 2s - 2s - 2s
}
message SnippetStages {
  repeated PipelineParam params = 1;
  repeated PipelineOutput outputs = 2;
  google.protobuf.ListValue stages = 3; // [][]*PipelineYmlAction
}

///////////// stage
message PipelineStage {
  uint64 ID = 1 [json_name = "id"];
  uint64 pipelineID = 2;
  string name = 3;
  string status = 4;
  int64  costTimeSec = 5;
  google.protobuf.Timestamp timeBegin = 6;
  google.protobuf.Timestamp timeEnd = 7;
  google.protobuf.Timestamp timeCreated = 8;
  google.protobuf.Timestamp timeUpdated = 9;
}
message PipelineStageDetail {
  uint64 ID = 1 [json_name = "id"];
  uint64 pipelineID = 2;
  string name = 3;
  string status = 4;
  int64  costTimeSec = 5;
  google.protobuf.Timestamp timeBegin = 6;
  google.protobuf.Timestamp timeEnd = 7;
  google.protobuf.Timestamp timeCreated = 8;
  google.protobuf.Timestamp timeUpdated = 9;

  repeated PipelineTask pipelineTasks = 10;
}

/////////////
message PipelineTask {
  uint64 ID = 1 [json_name = "id"];
  uint64 pipelineID = 2;
  uint64 stageID = 3;
  string name = 4;
  string type = 5;
  string status = 6;
  PipelineTaskExtra extra = 7;
  map<string, string> labels = 8;
  PipelineTaskResult result = 9;
  bool isSnippet = 10;
  uint64 snippetPipelineID = 11;
  PipelineTaskSnippetDetail snippetPipelineDetail = 12; // detail of snippet pipeline
  int64 costTimeSec = 13; // -1 means no cost info, 0 means cost 0s exactly
  int64 queueTimeSec = 14;
  google.protobuf.Timestamp timeBegin = 15;
  google.protobuf.Timestamp timeEnd = 16;
  google.protobuf.Timestamp timeCreated = 17;
  google.protobuf.Timestamp timeUpdated = 18;
}
message PipelineTaskExtra {
  string UUID = 1 [json_name = "uuid"];
  bool allowFailure = 2;
}
message PipelineTaskResult {
  repeated common.MetadataField metadata = 1;
  repeated ErrorResponse errors = 2;
  PipelineTaskMachineStat machineStat = 3;
}
message PipelineTaskSnippetDetail {
  repeated PipelineOutputWithValue outputs = 1;
  // direct snippet task number, won't query recursively.
  // -1 means UNKNOWN, concrete value assigned when reconcile.
  int64 directSnippetTaskNum = 2;
  // recursive snippet task number, i.e. the whole expanded tasks number.
  // -1 means UNKNOWN, concrete value will be reported by AOP.
  int64 recursiveSnippetTaskNum = 3;
}

message PipelineTaskMachineStat {
  PipelineTaskMachineHostStat host = 1;
  PipelineTaskMachinePodStat pod = 2;
  PipelineTaskMachineLoadStat load = 3;
  PipelineTaskMachineMemStat mem = 4;
  PipelineTaskMachineSwapStat swap = 5;
}
message PipelineTaskMachineHostStat {
  string hostIP = 1;
  string hostname = 2;
  uint64 uptimeSec = 3;
  uint64 bootTimeSec = 4;
  string OS = 5 [json_name = "os"];
  string platform = 6;
  string platformVersion = 7;
  string kernelVersion = 8;
  string kernelArch = 9;
}
message PipelineTaskMachinePodStat {
  string podIP = 1;
}
message PipelineTaskMachineLoadStat {
  double load1 = 1;
  double load5 = 2;
  double load15 = 3;
}
message PipelineTaskMachineMemStat {
  uint64 total = 1;
  uint64 available = 2;
  uint64 used = 3;
  uint64 free = 4;
  double usedPercent = 5;
  uint64 buffers = 6;
  uint64 cached = 7;
}
message PipelineTaskMachineSwapStat {
  uint64 total = 1;
  uint64 used = 2;
  uint64 free = 3;
  double usedPercent = 4;
}

message PipelineTaskActionDetail {
  string logoUrl = 1;
  string displayName = 2;
  string description = 3;
}

////////////// request & response
message PipelineCreateRequest {
  // PipelineYml is pipeline yaml content.
  // +required
  string pipelineYml = 1 [(validator.field) = {string_not_empty: true}];

  // ClusterName represents the cluster the pipeline will be executed.
  // +required
  string clusterName = 2 [(validator.field) = {string_not_empty: true}];

  // PipelineYmlName
  // Equal to `Name`.
  // Default is `pipeline.yml`.
  // +optional
  string pipelineYmlName = 3 [(validator.field) = {string_not_empty: true}];

  // PipelineSource represents the source where pipeline created from.
  // Equal to `Namespace`.
  // +required
  string pipelineSource = 4 [(validator.field) = {string_not_empty: true}];

  // Labels is Map of string keys and values, can be used to filter pipeline.
  // If label key or value is too long, it will be moved to NormalLabels automatically and overwrite value if key already exists in NormalLabels.
  // +optional
  map<string, string> labels = 5;

  // NormalLabels is Map of string keys and values, cannot be used to filter pipeline.
  // +optional
  map<string, string> normalLabels = 6;

  // Envs is Map of string keys and values.
  // +optional
  map<string, string> envs = 7;

  // ConfigManageNamespaces pipeline fetch configs from cms by namespaces in order.
  // Pipeline won't generate default ns.
  // +optional
  repeated string configManageNamespaces = 8;

  // AutoRun represents whether auto run the created pipeline.
  // Default is false.
  // +optional
  // Deprecated, please use `AutoRunAtOnce` or `AutoStartCron`.
  // Alias for AutoRunAtOnce.
  bool autoRun = 9;

  // ForceRun represents stop other running pipelines to run.
  // Default is false.
  // +optional
  bool forceRun = 10;

  // AutoRunAtOnce alias for `AutoRun`.
  // AutoRunAtOnce represents whether auto run the created pipeline.
  // Default is false.
  // +optional
  bool autoRunAtOnce = 11;

  // AutoStartCron represents whether auto start cron.
  // If a pipeline doesn't have `cron` field, ignore.
  // Default is false.
  // +optional
  bool autoStartCron = 12;

  // CronStartFrom specify time when to start
  // +optional
  google.protobuf.Timestamp cronStartFrom = 13;

  // GC represents pipeline gc configs.
  // If config is empty, will use default config.
  // +optional
  PipelineGC GC = 14 [json_name = "gc"];

  // RunPipelineParams represents pipeline params runtime input
  // if pipeline have params runPipelineParams can not be empty
  // +optional
  repeated PipelineRunParam runParams = 15;

  // Internal-Use below

  // BindQueue represents the queue pipeline binds, internal use only, parsed from Labels: LabelBindPipelineQueueID
  core.pipeline.queue.Queue bindQueue = 16 [json_name = "-"];

  common.IdentityInfo identityInfo = 17 [json_name = "-"];
}
message PipelineCreateResponse {
  PipelineInstance data = 1;
}

message PipelinePagingRequest {
  int64 pageNum = 1;
  int64 pageSize = 2;
  bool largePageSize = 3;
  bool countOnly = 4; // only total

  bool allSources = 5;
  repeated string sources = 6;
  repeated string ymlNames = 7;
  repeated string statuses = 8;
  repeated string notStatuses = 9;
  repeated string triggerModes = 10;
  repeated string clusterNames = 11;

  // IncludeSnippet whether include snippet, default is false.
  bool includeSnippet = 12;

  // time

  // 开始执行时间 左闭区间
  // http GET query param 请赋值该字段
  int64 startTimeBeginTimestamp = 13;
  // Deprecated, use `StartedAtTimestamp`.
  // format: 2006-01-02T15:04:05, TZ: CST
  string startTimeBeginCST = 14;

  // 开始执行时间 右闭区间
  // http GET query param 请赋值该字段
  int64 endTimeBeginTimestamp = 15;
  // Deprecated, use `StartedAtTimestamp`.
  // format: 2006-01-02T15:04:05, TZ: CST
  string endTimeBeginCST = 16;

  // 创建时间 左闭区间
  // http GET query param 请赋值该字段
  int64 startTimeCreatedTimestamp = 17;

  // 创建时间 右闭区间
  // http GET query param 请赋值该字段
  int64 endTimeCreatedTimestamp = 18;

  // labels

  // Deprecated
  // 供 CDP 工作流明细查询使用，JSON(map[string]string)
  string mustMatchLabelsJSON = 19;
  // ?mustMatchLabel=key1=value1
  // &mustMatchLabel=key1=value2
  // &mustMatchLabel=key2=value3
  repeated string mustMatchLabelsQueryParams = 20;

  // Deprecated
  // 供 CDP 工作流明细查询使用，JSON(map[string]string)
  string anyMatchLabelsJSON = 21;
  // ?anyMatchLabel=key1=value1
  // &anyMatchLabel=key1=value2
  // &anyMatchLabel=key2=value3
  repeated string anyMatchLabelsQueryParams = 22;

  // Deprecated, use schema `branch`
  string commaBranches = 23;
  // Deprecated, use schema `source`
  string commaSources = 24;
  // Deprecated, use schema `ymlName`
  string commaYmlNames = 25;
  // Deprecated, use schema `status`
  string commaStatuses = 26;
  // Deprecated, use mustMatchLabels, key=appID
  uint64 appID = 27;
  // Deprecated, use mustMatchLabels, key=branch
  repeated string branches = 28;
}
message PipelinePagingResponse {
  PipelineListResponseData data = 1;
}
message PipelineListResponseData {
  repeated PagePipeline pipelines = 1;
  int64 total = 2;
  int64 currentPageSize = 3;
}
message PagePipeline {
  uint64 ID = 1 [json_name = "id"];
  uint64 cronID = 2;
  string commit = 3;
  string source = 4;
  string ymlName = 5;
  PipelineExtra extra = 6;
  map<string, string> filterLabels = 7;
  map<string, string> normalLabels = 8;

  // runtime
  string type = 9;
  string triggerMode = 10;
  string clusterName = 11;
  string status = 12;
  double progress = 13; // eg: 0.8 = 80%

  // snippet
  bool isSnippet = 14;
  uint64 parentPipelineID = 15;
  uint64  parentTaskID = 16;

  // time
  int64 costTimeSec = 17;
  google.protobuf.Timestamp timeBegin = 18;
  google.protobuf.Timestamp timeEnd = 19;
  google.protobuf.Timestamp timeCreated = 20;
  google.protobuf.Timestamp timeUpdated = 21;
}
message SnippetConfig {
  string source = 1;
  string name = 2;
  map<string, string> labels = 3;
}

message PipelineDetailRequest {
  bool simplePipelineBaseResult = 1;
  uint64 pipelineID = 2;
}
message PipelineDetailResponse {
  PipelineInstanceDetail data = 1;
}

message PipelineTaskOperateRequest {
  uint64 taskID = 1;
  google.protobuf.Value disable = 2;
  google.protobuf.Value pause = 3;
}
message PipelineOperateRequest {
  uint64 pipelineID = 1;
  repeated PipelineTaskOperateRequest taskOperates = 2;
}
message PipelineOperateResponse {
}

message PipelineDeleteRequest {
  uint64 pipelineID = 1;
}
message PipelineDeleteResponse {
}

message PipelineRunRequest {
  uint64 pipelineID = 1; // get from path variable
  bool forceRun = 2;
  repeated  PipelineRunParam pipelineRunParams = 3;
  common.IdentityInfo identityInfo = 4;
}
message PipelineRunResponse {
}

message PipelineCancelRequest {
  uint64 pipelineID = 1;
  common.IdentityInfo identityInfo = 2;
}
message PipelineCancelResponse {
}

message PipelineRerunRequest {
  uint64 pipelineID = 1;
  bool autoRunAtOnce = 2;
  common.IdentityInfo identityInfo = 3;
}
message PipelineRerunResponse {
  PipelineInstance data = 1;
}

message PipelineRerunFailedRequest {
  uint64 pipelineID = 1;
  bool autoRunAtOnce = 2;
  common.IdentityInfo identityInfo = 3;
}
message PipelineRerunFailedResponse {
  PipelineInstance data = 1;
}

message PipelineTaskDetailRequest {
  uint64 pipelineID = 1;
  uint64 taskID = 2;
}
message PipelineTaskDetailResponse {
  PipelineTask data = 1;
}

message PipelineTaskGetBootstrapInfoRequest {
  uint64 pipelineID = 1;
  uint64 taskID = 2;
}
message PipelineTaskGetBootstrapInfoResponse {
  bytes data = 1;
}

message DeprecatedPipelineBatchCreateRequest {
  uint64 appID = 1;
  string branch = 2;
  string source = 3;
  repeated string batchPipelineYmlPaths = 4;
  bool autoRun = 5;
  repeated string callbackURLs = 6;
  string userID = 7;
}
message DeprecatedPipelineBatchCreateResponse {
  map<string, PipelineInstance> data = 1;
}

message PipelineYmlGraphRequest {
  string pipelineYmlContent = 1;
  map<string, string> globalSnippetConfigLabels = 2;
  SnippetConfig snippetConfig = 3;
}
message PipelineYmlGraphResponse {
  PipelineYml data = 1;
}
message PipelineCallbackRequest {
  string type = 1;
  bytes data = 2;
}
message PipelineCallbackResponse {
}
