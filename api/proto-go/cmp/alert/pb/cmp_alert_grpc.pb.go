// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: cmp_alert.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	GetAlertConditions(ctx context.Context, in *GetAlertConditionsRequest, opts ...grpc.CallOption) (*GetAlertConditionsResponse, error)
	GetAlertConditionsValue(ctx context.Context, in *GetAlertConditionsValueRequest, opts ...grpc.CallOption) (*GetAlertConditionsValueResponse, error)
}

type alertServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewAlertServiceClient(cc grpc1.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) GetAlertConditions(ctx context.Context, in *GetAlertConditionsRequest, opts ...grpc.CallOption) (*GetAlertConditionsResponse, error) {
	out := new(GetAlertConditionsResponse)
	err := c.cc.Invoke(ctx, "/erda.cmp.alert.AlertService/GetAlertConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertConditionsValue(ctx context.Context, in *GetAlertConditionsValueRequest, opts ...grpc.CallOption) (*GetAlertConditionsValueResponse, error) {
	out := new(GetAlertConditionsValueResponse)
	err := c.cc.Invoke(ctx, "/erda.cmp.alert.AlertService/GetAlertConditionsValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations should embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	GetAlertConditions(context.Context, *GetAlertConditionsRequest) (*GetAlertConditionsResponse, error)
	GetAlertConditionsValue(context.Context, *GetAlertConditionsValueRequest) (*GetAlertConditionsValueResponse, error)
}

// UnimplementedAlertServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (*UnimplementedAlertServiceServer) GetAlertConditions(context.Context, *GetAlertConditionsRequest) (*GetAlertConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConditions not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertConditionsValue(context.Context, *GetAlertConditionsValueRequest) (*GetAlertConditionsValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConditionsValue not implemented")
}

func RegisterAlertServiceServer(s grpc1.ServiceRegistrar, srv AlertServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_AlertService_serviceDesc(srv, opts...), srv)
}

var _AlertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.cmp.alert.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "cmp_alert.proto",
}

func _get_AlertService_serviceDesc(srv AlertServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_AlertService_GetAlertConditions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertConditions(ctx, req.(*GetAlertConditionsRequest))
	}
	var _AlertService_GetAlertConditions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertConditions_info = transport.NewServiceInfo("erda.cmp.alert.AlertService", "GetAlertConditions", srv)
		_AlertService_GetAlertConditions_Handler = h.Interceptor(_AlertService_GetAlertConditions_Handler)
	}

	_AlertService_GetAlertConditionsValue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertConditionsValue(ctx, req.(*GetAlertConditionsValueRequest))
	}
	var _AlertService_GetAlertConditionsValue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertConditionsValue_info = transport.NewServiceInfo("erda.cmp.alert.AlertService", "GetAlertConditionsValue", srv)
		_AlertService_GetAlertConditionsValue_Handler = h.Interceptor(_AlertService_GetAlertConditionsValue_Handler)
	}

	var serviceDesc = _AlertService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetAlertConditions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertConditionsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertConditions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertConditions_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertConditions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.cmp.alert.AlertService/GetAlertConditions",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertConditions_Handler)
			},
		},
		{
			MethodName: "GetAlertConditionsValue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertConditionsValueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertConditionsValue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertConditionsValue_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertConditionsValue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.cmp.alert.AlertService/GetAlertConditionsValue",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertConditionsValue_Handler)
			},
		},
	}
	return &serviceDesc
}
