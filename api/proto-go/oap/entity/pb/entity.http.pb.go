// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: entity.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// EntityServiceHandler is the server API for EntityService service.
type EntityServiceHandler interface {
	// POST /api/oap/entities
	SetEntity(context.Context, *SetEntityRequest) (*SetEntityResponse, error)
	// DELETE /api/oap/entities/{type}/{key}
	RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error)
	// GET /api/oap/entities/{type}/{key}
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	// GET /api/oap/entities
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
}

// RegisterEntityServiceHandler register EntityServiceHandler to http.Router.
func RegisterEntityServiceHandler(r http.Router, srv EntityServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_SetEntity := func(method, path string, fn func(context.Context, *SetEntityRequest) (*SetEntityResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SetEntityRequest))
		}
		var SetEntity_info transport.ServiceInfo
		if h.Interceptor != nil {
			SetEntity_info = transport.NewServiceInfo("erda.oap.entity.EntityService", "SetEntity", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SetEntity_info)
				}
				r = r.WithContext(ctx)
				var in SetEntityRequest
				if err := h.Decode(r, &in.Data); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_RemoveEntity := func(method, path string, fn func(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*RemoveEntityRequest))
		}
		var RemoveEntity_info transport.ServiceInfo
		if h.Interceptor != nil {
			RemoveEntity_info = transport.NewServiceInfo("erda.oap.entity.EntityService", "RemoveEntity", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, RemoveEntity_info)
				}
				r = r.WithContext(ctx)
				var in RemoveEntityRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "type":
							in.Type = val
						case "key":
							in.Key = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetEntity := func(method, path string, fn func(context.Context, *GetEntityRequest) (*GetEntityResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetEntityRequest))
		}
		var GetEntity_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetEntity_info = transport.NewServiceInfo("erda.oap.entity.EntityService", "GetEntity", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetEntity_info)
				}
				r = r.WithContext(ctx)
				var in GetEntityRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "type":
							in.Type = val
						case "key":
							in.Key = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListEntities := func(method, path string, fn func(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListEntitiesRequest))
		}
		var ListEntities_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListEntities_info = transport.NewServiceInfo("erda.oap.entity.EntityService", "ListEntities", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListEntities_info)
				}
				r = r.WithContext(ctx)
				var in ListEntitiesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SetEntity("POST", "/api/oap/entities", srv.SetEntity)
	add_RemoveEntity("DELETE", "/api/oap/entities/{type}/{key}", srv.RemoveEntity)
	add_GetEntity("GET", "/api/oap/entities/{type}/{key}", srv.GetEntity)
	add_ListEntities("GET", "/api/oap/entities", srv.ListEntities)
}
