// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: opentelemetry.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterOpenTelemetryServiceImp opentelemetry.proto
func RegisterOpenTelemetryServiceImp(regester transport.Register, srv OpenTelemetryServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterOpenTelemetryServiceHandler(regester, OpenTelemetryServiceHandler(srv), _ops.HTTP...)
	RegisterOpenTelemetryServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.oap.collector.receiver.opentelemetry.OpenTelemetryService",
	)
}

var (
	openTelemetryServiceClientType  = reflect.TypeOf((*OpenTelemetryServiceClient)(nil)).Elem()
	openTelemetryServiceServerType  = reflect.TypeOf((*OpenTelemetryServiceServer)(nil)).Elem()
	openTelemetryServiceHandlerType = reflect.TypeOf((*OpenTelemetryServiceHandler)(nil)).Elem()
)

// OpenTelemetryServiceClientType .
func OpenTelemetryServiceClientType() reflect.Type { return openTelemetryServiceClientType }

// OpenTelemetryServiceServerType .
func OpenTelemetryServiceServerType() reflect.Type { return openTelemetryServiceServerType }

// OpenTelemetryServiceHandlerType .
func OpenTelemetryServiceHandlerType() reflect.Type { return openTelemetryServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		openTelemetryServiceClientType,
		// server types
		openTelemetryServiceServerType,
		// handler types
		openTelemetryServiceHandlerType,
	}
}
