// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: marketplace.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/common/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MarketplaceClient is the client API for Marketplace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceClient interface {
	// ListGalleries:
	// en: list galleries in the org.
	// zh_CN: 查询组织下所有的 gallery.
	ListGalleries(ctx context.Context, in *ListGalleriesReq, opts ...grpc.CallOption) (*ListGalleriesResp, error)
	// CreateGallery:
	// en: publish a gallery
	// zh_CN: 发布到集市
	CreateGallery(ctx context.Context, in *CreateGalleryReq, opts ...grpc.CallOption) (*pb.VoidResponse, error)
	// GetGallery:
	// en: query details of the gallery.
	// zh_CN: 查询 gallery 详情.
	GetGallery(ctx context.Context, in *GetGalleryReq, opts ...grpc.CallOption) (*GetGalleryResp, error)
	// DeleteGallery:
	// en: delete the gallery from marketplace.
	// zh_CN: 从 marketplace 下架 gallery.
	DeleteGallery(ctx context.Context, in *DeleteGalleryReq, opts ...grpc.CallOption) (*pb.VoidResponse, error)
}

type marketplaceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMarketplaceClient(cc grpc1.ClientConnInterface) MarketplaceClient {
	return &marketplaceClient{cc}
}

func (c *marketplaceClient) ListGalleries(ctx context.Context, in *ListGalleriesReq, opts ...grpc.CallOption) (*ListGalleriesResp, error) {
	out := new(ListGalleriesResp)
	err := c.cc.Invoke(ctx, "/erda.admin.marketplace.Marketplace/ListGalleries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) CreateGallery(ctx context.Context, in *CreateGalleryReq, opts ...grpc.CallOption) (*pb.VoidResponse, error) {
	out := new(pb.VoidResponse)
	err := c.cc.Invoke(ctx, "/erda.admin.marketplace.Marketplace/CreateGallery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) GetGallery(ctx context.Context, in *GetGalleryReq, opts ...grpc.CallOption) (*GetGalleryResp, error) {
	out := new(GetGalleryResp)
	err := c.cc.Invoke(ctx, "/erda.admin.marketplace.Marketplace/GetGallery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) DeleteGallery(ctx context.Context, in *DeleteGalleryReq, opts ...grpc.CallOption) (*pb.VoidResponse, error) {
	out := new(pb.VoidResponse)
	err := c.cc.Invoke(ctx, "/erda.admin.marketplace.Marketplace/DeleteGallery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceServer is the server API for Marketplace service.
// All implementations should embed UnimplementedMarketplaceServer
// for forward compatibility
type MarketplaceServer interface {
	// ListGalleries:
	// en: list galleries in the org.
	// zh_CN: 查询组织下所有的 gallery.
	ListGalleries(context.Context, *ListGalleriesReq) (*ListGalleriesResp, error)
	// CreateGallery:
	// en: publish a gallery
	// zh_CN: 发布到集市
	CreateGallery(context.Context, *CreateGalleryReq) (*pb.VoidResponse, error)
	// GetGallery:
	// en: query details of the gallery.
	// zh_CN: 查询 gallery 详情.
	GetGallery(context.Context, *GetGalleryReq) (*GetGalleryResp, error)
	// DeleteGallery:
	// en: delete the gallery from marketplace.
	// zh_CN: 从 marketplace 下架 gallery.
	DeleteGallery(context.Context, *DeleteGalleryReq) (*pb.VoidResponse, error)
}

// UnimplementedMarketplaceServer should be embedded to have forward compatible implementations.
type UnimplementedMarketplaceServer struct {
}

func (*UnimplementedMarketplaceServer) ListGalleries(context.Context, *ListGalleriesReq) (*ListGalleriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGalleries not implemented")
}
func (*UnimplementedMarketplaceServer) CreateGallery(context.Context, *CreateGalleryReq) (*pb.VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGallery not implemented")
}
func (*UnimplementedMarketplaceServer) GetGallery(context.Context, *GetGalleryReq) (*GetGalleryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGallery not implemented")
}
func (*UnimplementedMarketplaceServer) DeleteGallery(context.Context, *DeleteGalleryReq) (*pb.VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGallery not implemented")
}

func RegisterMarketplaceServer(s grpc1.ServiceRegistrar, srv MarketplaceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Marketplace_serviceDesc(srv, opts...), srv)
}

var _Marketplace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.admin.marketplace.Marketplace",
	HandlerType: (*MarketplaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "marketplace.proto",
}

func _get_Marketplace_serviceDesc(srv MarketplaceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Marketplace_ListGalleries_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListGalleries(ctx, req.(*ListGalleriesReq))
	}
	var _Marketplace_ListGalleries_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Marketplace_ListGalleries_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "ListGalleries", srv)
		_Marketplace_ListGalleries_Handler = h.Interceptor(_Marketplace_ListGalleries_Handler)
	}

	_Marketplace_CreateGallery_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateGallery(ctx, req.(*CreateGalleryReq))
	}
	var _Marketplace_CreateGallery_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Marketplace_CreateGallery_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "CreateGallery", srv)
		_Marketplace_CreateGallery_Handler = h.Interceptor(_Marketplace_CreateGallery_Handler)
	}

	_Marketplace_GetGallery_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetGallery(ctx, req.(*GetGalleryReq))
	}
	var _Marketplace_GetGallery_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Marketplace_GetGallery_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "GetGallery", srv)
		_Marketplace_GetGallery_Handler = h.Interceptor(_Marketplace_GetGallery_Handler)
	}

	_Marketplace_DeleteGallery_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteGallery(ctx, req.(*DeleteGalleryReq))
	}
	var _Marketplace_DeleteGallery_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Marketplace_DeleteGallery_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "DeleteGallery", srv)
		_Marketplace_DeleteGallery_Handler = h.Interceptor(_Marketplace_DeleteGallery_Handler)
	}

	var serviceDesc = _Marketplace_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListGalleries",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListGalleriesReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MarketplaceServer).ListGalleries(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Marketplace_ListGalleries_info)
				}
				if interceptor == nil {
					return _Marketplace_ListGalleries_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.admin.marketplace.Marketplace/ListGalleries",
				}
				return interceptor(ctx, in, info, _Marketplace_ListGalleries_Handler)
			},
		},
		{
			MethodName: "CreateGallery",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateGalleryReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MarketplaceServer).CreateGallery(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Marketplace_CreateGallery_info)
				}
				if interceptor == nil {
					return _Marketplace_CreateGallery_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.admin.marketplace.Marketplace/CreateGallery",
				}
				return interceptor(ctx, in, info, _Marketplace_CreateGallery_Handler)
			},
		},
		{
			MethodName: "GetGallery",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetGalleryReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MarketplaceServer).GetGallery(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Marketplace_GetGallery_info)
				}
				if interceptor == nil {
					return _Marketplace_GetGallery_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.admin.marketplace.Marketplace/GetGallery",
				}
				return interceptor(ctx, in, info, _Marketplace_GetGallery_Handler)
			},
		},
		{
			MethodName: "DeleteGallery",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteGalleryReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MarketplaceServer).DeleteGallery(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Marketplace_DeleteGallery_info)
				}
				if interceptor == nil {
					return _Marketplace_DeleteGallery_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.admin.marketplace.Marketplace/DeleteGallery",
				}
				return interceptor(ctx, in, info, _Marketplace_DeleteGallery_Handler)
			},
		},
	}
	return &serviceDesc
}
