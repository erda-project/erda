// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: marketplace.proto

package pb

import (
	base64 "encoding/base64"
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ListGalleriesReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListGalleriesResp)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListGalleriesRespData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListGalleriesRespDataItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*User)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGalleryResp)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGalleryRespData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGalleryRespDataItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ActionParam)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ActionOutputs)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetGalleryReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteGalleryReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateGalleryReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateGalleryReq_ReleaseSpec)(nil)

// ListGalleriesReq implement urlenc.URLValuesUnmarshaler.
func (m *ListGalleriesReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "keyword":
				m.Keyword = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageNo = int32(val)
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageSize = int32(val)
			}
		}
	}
	return nil
}

// ListGalleriesResp implement urlenc.URLValuesUnmarshaler.
func (m *ListGalleriesResp) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ListGalleriesRespData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &ListGalleriesRespData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.Total = int32(val)
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// ListGalleriesRespData implement urlenc.URLValuesUnmarshaler.
func (m *ListGalleriesRespData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Total = int32(val)
			}
		}
	}
	return nil
}

// ListGalleriesRespDataItem implement urlenc.URLValuesUnmarshaler.
func (m *ListGalleriesRespDataItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "releaseID":
				m.ReleaseID = vals[0]
			case "type":
				m.Type = vals[0]
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "category":
				m.Category = vals[0]
			case "displayCategory":
				m.DisplayCategory = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "publisher":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
			case "publisher.id":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
				m.Publisher.Id = vals[0]
			case "publisher.name":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
				m.Publisher.Name = vals[0]
			case "publisher.nickName":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
				m.Publisher.NickName = vals[0]
			case "logoUrl":
				m.LogoUrl = vals[0]
			}
		}
	}
	return nil
}

// User implement urlenc.URLValuesUnmarshaler.
func (m *User) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "nickName":
				m.NickName = vals[0]
			}
		}
	}
	return nil
}

// GetGalleryResp implement urlenc.URLValuesUnmarshaler.
func (m *GetGalleryResp) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &GetGalleryRespData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &GetGalleryRespData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.Total = int32(val)
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// GetGalleryRespData implement urlenc.URLValuesUnmarshaler.
func (m *GetGalleryRespData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Total = int32(val)
			}
		}
	}
	return nil
}

// GetGalleryRespDataItem implement urlenc.URLValuesUnmarshaler.
func (m *GetGalleryRespDataItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "version":
				m.Version = vals[0]
			case "type":
				m.Type = vals[0]
			case "category":
				m.Category = vals[0]
			case "logoUrl":
				m.LogoUrl = vals[0]
			case "dice":
				if m.Dice == nil {
					m.Dice = &anypb.Any{}
				}
			case "dice.type_url":
				if m.Dice == nil {
					m.Dice = &anypb.Any{}
				}
				m.Dice.TypeUrl = vals[0]
			case "dice.value":
				if m.Dice == nil {
					m.Dice = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Dice.Value = val
			case "spec":
				if m.Spec == nil {
					m.Spec = &anypb.Any{}
				}
			case "spec.type_url":
				if m.Spec == nil {
					m.Spec = &anypb.Any{}
				}
				m.Spec.TypeUrl = vals[0]
			case "spec.value":
				if m.Spec == nil {
					m.Spec = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Spec.Value = val
			case "readme":
				m.Readme = vals[0]
			case "changeLog":
				m.ChangeLog = vals[0]
			case "isDefault":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsDefault = val
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "publisher":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
			case "publisher.id":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
				m.Publisher.Id = vals[0]
			case "publisher.name":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
				m.Publisher.Name = vals[0]
			case "publisher.nickName":
				if m.Publisher == nil {
					m.Publisher = &User{}
				}
				m.Publisher.NickName = vals[0]
			case "configVars":
				m.ConfigVars = vals
			}
		}
	}
	return nil
}

// ActionParam implement urlenc.URLValuesUnmarshaler.
func (m *ActionParam) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "required":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Required = val
			case "default":
				m.Default = vals[0]
			}
		}
	}
	return nil
}

// ActionOutputs implement urlenc.URLValuesUnmarshaler.
func (m *ActionOutputs) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "desc":
				m.Desc = vals[0]
			}
		}
	}
	return nil
}

// GetGalleryReq implement urlenc.URLValuesUnmarshaler.
func (m *GetGalleryReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "version":
				m.Version = vals[0]
			}
		}
	}
	return nil
}

// DeleteGalleryReq implement urlenc.URLValuesUnmarshaler.
func (m *DeleteGalleryReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "version":
				m.Version = vals[0]
			}
		}
	}
	return nil
}

// CreateGalleryReq implement urlenc.URLValuesUnmarshaler.
func (m *CreateGalleryReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "version":
				m.Version = vals[0]
			case "any":
				if m.Any == nil {
					m.Any = &anypb.Any{}
				}
			case "any.type_url":
				if m.Any == nil {
					m.Any = &anypb.Any{}
				}
				m.Any.TypeUrl = vals[0]
			case "any.value":
				if m.Any == nil {
					m.Any = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Any.Value = val
			}
		}
	}
	return nil
}

// CreateGalleryReq_ReleaseSpec implement urlenc.URLValuesUnmarshaler.
func (m *CreateGalleryReq_ReleaseSpec) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "releaseID":
				m.ReleaseID = vals[0]
			}
		}
	}
	return nil
}
