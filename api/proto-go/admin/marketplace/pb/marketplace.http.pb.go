// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: marketplace.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/common/pb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MarketplaceHandler is the server API for Marketplace service.
type MarketplaceHandler interface {
	// ListGalleries:
	// en: list galleries in the org.
	// zh_CN: 查询组织下所有的 gallery.
	// GET /api/marketplace/galleries
	ListGalleries(context.Context, *ListGalleriesReq) (*ListGalleriesResp, error)
	// CreateGallery:
	// en: publish a gallery
	// zh_CN: 发布到集市
	// POST /api/marketplace/galleries
	CreateGallery(context.Context, *CreateGalleryReq) (*pb.VoidResponse, error)
	// GetGallery:
	// en: query details of the gallery.
	// zh_CN: 查询 gallery 详情.
	// GET /api/marketplace/galleries/{name}
	GetGallery(context.Context, *GetGalleryReq) (*GetGalleryResp, error)
	// DeleteGallery:
	// en: delete the gallery from marketplace.
	// zh_CN: 从 marketplace 下架 gallery.
	// DELETE /api/marketplace/galleries/{name}
	DeleteGallery(context.Context, *DeleteGalleryReq) (*pb.VoidResponse, error)
}

// RegisterMarketplaceHandler register MarketplaceHandler to http.Router.
func RegisterMarketplaceHandler(r http.Router, srv MarketplaceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ListGalleries := func(method, path string, fn func(context.Context, *ListGalleriesReq) (*ListGalleriesResp, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListGalleriesReq))
		}
		var ListGalleries_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListGalleries_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "ListGalleries", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListGalleries_info)
				}
				r = r.WithContext(ctx)
				var in ListGalleriesReq
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["keyword"]; len(vals) > 0 {
					in.Keyword = vals[0]
				}
				if vals := params["pageNo"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 32)
					if err != nil {
						return nil, err
					}
					in.PageNo = int32(val)
				}
				if vals := params["pageSize"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 32)
					if err != nil {
						return nil, err
					}
					in.PageSize = int32(val)
				}
				if vals := params["type"]; len(vals) > 0 {
					in.Type = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateGallery := func(method, path string, fn func(context.Context, *CreateGalleryReq) (*pb.VoidResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateGalleryReq))
		}
		var CreateGallery_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateGallery_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "CreateGallery", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateGallery_info)
				}
				r = r.WithContext(ctx)
				var in CreateGalleryReq
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetGallery := func(method, path string, fn func(context.Context, *GetGalleryReq) (*GetGalleryResp, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetGalleryReq))
		}
		var GetGallery_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetGallery_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "GetGallery", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetGallery_info)
				}
				r = r.WithContext(ctx)
				var in GetGalleryReq
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["type"]; len(vals) > 0 {
					in.Type = vals[0]
				}
				if vals := params["version"]; len(vals) > 0 {
					in.Version = vals[0]
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteGallery := func(method, path string, fn func(context.Context, *DeleteGalleryReq) (*pb.VoidResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteGalleryReq))
		}
		var DeleteGallery_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteGallery_info = transport.NewServiceInfo("erda.admin.marketplace.Marketplace", "DeleteGallery", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteGallery_info)
				}
				r = r.WithContext(ctx)
				var in DeleteGalleryReq
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["type"]; len(vals) > 0 {
					in.Type = vals[0]
				}
				if vals := params["version"]; len(vals) > 0 {
					in.Version = vals[0]
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListGalleries("GET", "/api/marketplace/galleries", srv.ListGalleries)
	add_CreateGallery("POST", "/api/marketplace/galleries", srv.CreateGallery)
	add_GetGallery("GET", "/api/marketplace/galleries/{name}", srv.GetGallery)
	add_DeleteGallery("DELETE", "/api/marketplace/galleries/{name}", srv.DeleteGallery)
}
