// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: dingtalk_test.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DingTalkTestServiceClient is the client API for DingTalkTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DingTalkTestServiceClient interface {
	SendTestMessage(ctx context.Context, in *DingTalkTestRequest, opts ...grpc.CallOption) (*DingTalkTestResponse, error)
}

type dingTalkTestServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDingTalkTestServiceClient(cc grpc1.ClientConnInterface) DingTalkTestServiceClient {
	return &dingTalkTestServiceClient{cc}
}

func (c *dingTalkTestServiceClient) SendTestMessage(ctx context.Context, in *DingTalkTestRequest, opts ...grpc.CallOption) (*DingTalkTestResponse, error) {
	out := new(DingTalkTestResponse)
	err := c.cc.Invoke(ctx, "/erda.admin.DingTalkTestService/SendTestMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DingTalkTestServiceServer is the server API for DingTalkTestService service.
// All implementations should embed UnimplementedDingTalkTestServiceServer
// for forward compatibility
type DingTalkTestServiceServer interface {
	SendTestMessage(context.Context, *DingTalkTestRequest) (*DingTalkTestResponse, error)
}

// UnimplementedDingTalkTestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDingTalkTestServiceServer struct {
}

func (*UnimplementedDingTalkTestServiceServer) SendTestMessage(context.Context, *DingTalkTestRequest) (*DingTalkTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTestMessage not implemented")
}

func RegisterDingTalkTestServiceServer(s grpc1.ServiceRegistrar, srv DingTalkTestServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DingTalkTestService_serviceDesc(srv, opts...), srv)
}

var _DingTalkTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.admin.DingTalkTestService",
	HandlerType: (*DingTalkTestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "dingtalk_test.proto",
}

func _get_DingTalkTestService_serviceDesc(srv DingTalkTestServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DingTalkTestService_SendTestMessage_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SendTestMessage(ctx, req.(*DingTalkTestRequest))
	}
	var _DingTalkTestService_SendTestMessage_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DingTalkTestService_SendTestMessage_info = transport.NewServiceInfo("erda.admin.DingTalkTestService", "SendTestMessage", srv)
		_DingTalkTestService_SendTestMessage_Handler = h.Interceptor(_DingTalkTestService_SendTestMessage_Handler)
	}

	var serviceDesc = _DingTalkTestService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "SendTestMessage",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DingTalkTestRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DingTalkTestServiceServer).SendTestMessage(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DingTalkTestService_SendTestMessage_info)
				}
				if interceptor == nil {
					return _DingTalkTestService_SendTestMessage_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.admin.DingTalkTestService/SendTestMessage",
				}
				return interceptor(ctx, in, info, _DingTalkTestService_SendTestMessage_Handler)
			},
		},
	}
	return &serviceDesc
}
