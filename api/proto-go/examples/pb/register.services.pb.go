// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: greeter.proto, user.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterGreeterServiceImp greeter.proto
func RegisterGreeterServiceImp(regester transport.Register, srv GreeterServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterGreeterServiceHandler(regester, GreeterServiceHandler(srv), _ops.HTTP...)
	RegisterGreeterServiceServer(regester, srv, _ops.GRPC...)
}

// RegisterUserServiceImp user.proto
func RegisterUserServiceImp(regester transport.Register, srv UserServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterUserServiceHandler(regester, UserServiceHandler(srv), _ops.HTTP...)
	RegisterUserServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.examples.GreeterService",
		"erda.examples.UserService",
	)
}

var (
	greeterServiceClientType  = reflect.TypeOf((*GreeterServiceClient)(nil)).Elem()
	greeterServiceServerType  = reflect.TypeOf((*GreeterServiceServer)(nil)).Elem()
	greeterServiceHandlerType = reflect.TypeOf((*GreeterServiceHandler)(nil)).Elem()

	userServiceClientType  = reflect.TypeOf((*UserServiceClient)(nil)).Elem()
	userServiceServerType  = reflect.TypeOf((*UserServiceServer)(nil)).Elem()
	userServiceHandlerType = reflect.TypeOf((*UserServiceHandler)(nil)).Elem()
)

// GreeterServiceClientType .
func GreeterServiceClientType() reflect.Type { return greeterServiceClientType }

// GreeterServiceServerType .
func GreeterServiceServerType() reflect.Type { return greeterServiceServerType }

// GreeterServiceHandlerType .
func GreeterServiceHandlerType() reflect.Type { return greeterServiceHandlerType }

// UserServiceClientType .
func UserServiceClientType() reflect.Type { return userServiceClientType }

// UserServiceServerType .
func UserServiceServerType() reflect.Type { return userServiceServerType }

// UserServiceHandlerType .
func UserServiceHandlerType() reflect.Type { return userServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		greeterServiceClientType,
		userServiceClientType,
		// server types
		greeterServiceServerType,
		userServiceServerType,
		// handler types
		greeterServiceHandlerType,
		userServiceHandlerType,
	}
}
