// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: user.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*User)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetUserRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetUserResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateUserRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateUserResponse)(nil)

// User implement urlenc.URLValuesUnmarshaler.
func (m *User) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "age":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Age = int32(val)
			}
		}
	}
	return nil
}

// GetUserRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetUserRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// GetUserResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetUserResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "data":
				if m.Data == nil {
					m.Data = &User{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &User{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Id = val
			case "data.name":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.Name = vals[0]
			case "data.age":
				if m.Data == nil {
					m.Data = &User{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.Age = int32(val)
			}
		}
	}
	return nil
}

// UpdateUserRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateUserRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &User{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &User{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Id = val
			case "data.name":
				if m.Data == nil {
					m.Data = &User{}
				}
				m.Data.Name = vals[0]
			case "data.age":
				if m.Data == nil {
					m.Data = &User{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.Age = int32(val)
			}
		}
	}
	return nil
}

// UpdateUserResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateUserResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			}
		}
	}
	return nil
}
