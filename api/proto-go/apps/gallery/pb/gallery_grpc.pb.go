// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: gallery.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/common/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// GalleryClient is the client API for Gallery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GalleryClient interface {
	// ListOpusTypes:
	// en: list opus types
	// zh_CN: 查询所有 opus 类型
	ListOpusTypes(ctx context.Context, in *pb.VoidRequest, opts ...grpc.CallOption) (*ListOpusTypesRespData, error)
	// ListOpus:
	// en: list Opus in the org.
	// zh_CN: 查询 org 下所有的 Opus.
	ListOpus(ctx context.Context, in *ListOpusReq, opts ...grpc.CallOption) (*ListOpusResp, error)
	ListOpusVersions(ctx context.Context, in *ListOpusVersionsReq, opts ...grpc.CallOption) (*ListOpusVersionsResp, error)
	PutOnArtifacts(ctx context.Context, in *PutOnArtifactsReq, opts ...grpc.CallOption) (*PutOnOpusResp, error)
	PutOffArtifacts(ctx context.Context, in *PutOffArtifactsReq, opts ...grpc.CallOption) (*pb.VoidResponse, error)
	PutOnExtensions(ctx context.Context, in *PutOnExtensionsReq, opts ...grpc.CallOption) (*PutOnOpusResp, error)
}

type galleryClient struct {
	cc grpc1.ClientConnInterface
}

func NewGalleryClient(cc grpc1.ClientConnInterface) GalleryClient {
	return &galleryClient{cc}
}

func (c *galleryClient) ListOpusTypes(ctx context.Context, in *pb.VoidRequest, opts ...grpc.CallOption) (*ListOpusTypesRespData, error) {
	out := new(ListOpusTypesRespData)
	err := c.cc.Invoke(ctx, "/erda.apps.gallery.Gallery/ListOpusTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) ListOpus(ctx context.Context, in *ListOpusReq, opts ...grpc.CallOption) (*ListOpusResp, error) {
	out := new(ListOpusResp)
	err := c.cc.Invoke(ctx, "/erda.apps.gallery.Gallery/ListOpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) ListOpusVersions(ctx context.Context, in *ListOpusVersionsReq, opts ...grpc.CallOption) (*ListOpusVersionsResp, error) {
	out := new(ListOpusVersionsResp)
	err := c.cc.Invoke(ctx, "/erda.apps.gallery.Gallery/ListOpusVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) PutOnArtifacts(ctx context.Context, in *PutOnArtifactsReq, opts ...grpc.CallOption) (*PutOnOpusResp, error) {
	out := new(PutOnOpusResp)
	err := c.cc.Invoke(ctx, "/erda.apps.gallery.Gallery/PutOnArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) PutOffArtifacts(ctx context.Context, in *PutOffArtifactsReq, opts ...grpc.CallOption) (*pb.VoidResponse, error) {
	out := new(pb.VoidResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.gallery.Gallery/PutOffArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) PutOnExtensions(ctx context.Context, in *PutOnExtensionsReq, opts ...grpc.CallOption) (*PutOnOpusResp, error) {
	out := new(PutOnOpusResp)
	err := c.cc.Invoke(ctx, "/erda.apps.gallery.Gallery/PutOnExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GalleryServer is the server API for Gallery service.
// All implementations should embed UnimplementedGalleryServer
// for forward compatibility
type GalleryServer interface {
	// ListOpusTypes:
	// en: list opus types
	// zh_CN: 查询所有 opus 类型
	ListOpusTypes(context.Context, *pb.VoidRequest) (*ListOpusTypesRespData, error)
	// ListOpus:
	// en: list Opus in the org.
	// zh_CN: 查询 org 下所有的 Opus.
	ListOpus(context.Context, *ListOpusReq) (*ListOpusResp, error)
	ListOpusVersions(context.Context, *ListOpusVersionsReq) (*ListOpusVersionsResp, error)
	PutOnArtifacts(context.Context, *PutOnArtifactsReq) (*PutOnOpusResp, error)
	PutOffArtifacts(context.Context, *PutOffArtifactsReq) (*pb.VoidResponse, error)
	PutOnExtensions(context.Context, *PutOnExtensionsReq) (*PutOnOpusResp, error)
}

// UnimplementedGalleryServer should be embedded to have forward compatible implementations.
type UnimplementedGalleryServer struct {
}

func (*UnimplementedGalleryServer) ListOpusTypes(context.Context, *pb.VoidRequest) (*ListOpusTypesRespData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpusTypes not implemented")
}
func (*UnimplementedGalleryServer) ListOpus(context.Context, *ListOpusReq) (*ListOpusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpus not implemented")
}
func (*UnimplementedGalleryServer) ListOpusVersions(context.Context, *ListOpusVersionsReq) (*ListOpusVersionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpusVersions not implemented")
}
func (*UnimplementedGalleryServer) PutOnArtifacts(context.Context, *PutOnArtifactsReq) (*PutOnOpusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOnArtifacts not implemented")
}
func (*UnimplementedGalleryServer) PutOffArtifacts(context.Context, *PutOffArtifactsReq) (*pb.VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOffArtifacts not implemented")
}
func (*UnimplementedGalleryServer) PutOnExtensions(context.Context, *PutOnExtensionsReq) (*PutOnOpusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOnExtensions not implemented")
}

func RegisterGalleryServer(s grpc1.ServiceRegistrar, srv GalleryServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Gallery_serviceDesc(srv, opts...), srv)
}

var _Gallery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.apps.gallery.Gallery",
	HandlerType: (*GalleryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "gallery.proto",
}

func _get_Gallery_serviceDesc(srv GalleryServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Gallery_ListOpusTypes_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListOpusTypes(ctx, req.(*pb.VoidRequest))
	}
	var _Gallery_ListOpusTypes_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Gallery_ListOpusTypes_info = transport.NewServiceInfo("erda.apps.gallery.Gallery", "ListOpusTypes", srv)
		_Gallery_ListOpusTypes_Handler = h.Interceptor(_Gallery_ListOpusTypes_Handler)
	}

	_Gallery_ListOpus_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListOpus(ctx, req.(*ListOpusReq))
	}
	var _Gallery_ListOpus_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Gallery_ListOpus_info = transport.NewServiceInfo("erda.apps.gallery.Gallery", "ListOpus", srv)
		_Gallery_ListOpus_Handler = h.Interceptor(_Gallery_ListOpus_Handler)
	}

	_Gallery_ListOpusVersions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListOpusVersions(ctx, req.(*ListOpusVersionsReq))
	}
	var _Gallery_ListOpusVersions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Gallery_ListOpusVersions_info = transport.NewServiceInfo("erda.apps.gallery.Gallery", "ListOpusVersions", srv)
		_Gallery_ListOpusVersions_Handler = h.Interceptor(_Gallery_ListOpusVersions_Handler)
	}

	_Gallery_PutOnArtifacts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PutOnArtifacts(ctx, req.(*PutOnArtifactsReq))
	}
	var _Gallery_PutOnArtifacts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Gallery_PutOnArtifacts_info = transport.NewServiceInfo("erda.apps.gallery.Gallery", "PutOnArtifacts", srv)
		_Gallery_PutOnArtifacts_Handler = h.Interceptor(_Gallery_PutOnArtifacts_Handler)
	}

	_Gallery_PutOffArtifacts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PutOffArtifacts(ctx, req.(*PutOffArtifactsReq))
	}
	var _Gallery_PutOffArtifacts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Gallery_PutOffArtifacts_info = transport.NewServiceInfo("erda.apps.gallery.Gallery", "PutOffArtifacts", srv)
		_Gallery_PutOffArtifacts_Handler = h.Interceptor(_Gallery_PutOffArtifacts_Handler)
	}

	_Gallery_PutOnExtensions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PutOnExtensions(ctx, req.(*PutOnExtensionsReq))
	}
	var _Gallery_PutOnExtensions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Gallery_PutOnExtensions_info = transport.NewServiceInfo("erda.apps.gallery.Gallery", "PutOnExtensions", srv)
		_Gallery_PutOnExtensions_Handler = h.Interceptor(_Gallery_PutOnExtensions_Handler)
	}

	var serviceDesc = _Gallery_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListOpusTypes",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(pb.VoidRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GalleryServer).ListOpusTypes(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Gallery_ListOpusTypes_info)
				}
				if interceptor == nil {
					return _Gallery_ListOpusTypes_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.gallery.Gallery/ListOpusTypes",
				}
				return interceptor(ctx, in, info, _Gallery_ListOpusTypes_Handler)
			},
		},
		{
			MethodName: "ListOpus",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListOpusReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GalleryServer).ListOpus(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Gallery_ListOpus_info)
				}
				if interceptor == nil {
					return _Gallery_ListOpus_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.gallery.Gallery/ListOpus",
				}
				return interceptor(ctx, in, info, _Gallery_ListOpus_Handler)
			},
		},
		{
			MethodName: "ListOpusVersions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListOpusVersionsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GalleryServer).ListOpusVersions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Gallery_ListOpusVersions_info)
				}
				if interceptor == nil {
					return _Gallery_ListOpusVersions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.gallery.Gallery/ListOpusVersions",
				}
				return interceptor(ctx, in, info, _Gallery_ListOpusVersions_Handler)
			},
		},
		{
			MethodName: "PutOnArtifacts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PutOnArtifactsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GalleryServer).PutOnArtifacts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Gallery_PutOnArtifacts_info)
				}
				if interceptor == nil {
					return _Gallery_PutOnArtifacts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.gallery.Gallery/PutOnArtifacts",
				}
				return interceptor(ctx, in, info, _Gallery_PutOnArtifacts_Handler)
			},
		},
		{
			MethodName: "PutOffArtifacts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PutOffArtifactsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GalleryServer).PutOffArtifacts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Gallery_PutOffArtifacts_info)
				}
				if interceptor == nil {
					return _Gallery_PutOffArtifacts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.gallery.Gallery/PutOffArtifacts",
				}
				return interceptor(ctx, in, info, _Gallery_PutOffArtifacts_Handler)
			},
		},
		{
			MethodName: "PutOnExtensions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PutOnExtensionsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GalleryServer).PutOnExtensions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Gallery_PutOnExtensions_info)
				}
				if interceptor == nil {
					return _Gallery_PutOnExtensions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.gallery.Gallery/PutOnExtensions",
				}
				return interceptor(ctx, in, info, _Gallery_PutOnExtensions_Handler)
			},
		},
	}
	return &serviceDesc
}
