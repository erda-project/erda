// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: gallery.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	pb "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListOpusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Keyword  string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
	PageNo   int32  `protobuf:"varint,10,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int32  `protobuf:"varint,11,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListOpusReq) Reset() {
	*x = ListOpusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusReq) ProtoMessage() {}

func (x *ListOpusReq) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusReq.ProtoReflect.Descriptor instead.
func (*ListOpusReq) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{0}
}

func (x *ListOpusReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListOpusReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListOpusReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListOpusReq) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListOpusReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListOpusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ListOpusRespData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string          `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *ListOpusResp) Reset() {
	*x = ListOpusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusResp) ProtoMessage() {}

func (x *ListOpusResp) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusResp.ProtoReflect.Descriptor instead.
func (*ListOpusResp) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{1}
}

func (x *ListOpusResp) GetData() *ListOpusRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListOpusResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type ListOpusRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ListOpusRespDataItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOpusRespData) Reset() {
	*x = ListOpusRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusRespData) ProtoMessage() {}

func (x *ListOpusRespData) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusRespData.ProtoReflect.Descriptor instead.
func (*ListOpusRespData) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{2}
}

func (x *ListOpusRespData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListOpusRespData) GetList() []*ListOpusRespDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ListOpusRespDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OrgID       uint32                 `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName     string                 `protobuf:"bytes,5,opt,name=orgName,proto3" json:"orgName,omitempty"`
	CreatorID   string                 `protobuf:"bytes,6,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID   string                 `protobuf:"bytes,7,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	Type        string                 `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	TypeName    string                 `protobuf:"bytes,11,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Name        string                 `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string                 `protobuf:"bytes,13,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Summary     string                 `protobuf:"bytes,14,opt,name=summary,proto3" json:"summary,omitempty"`
	Catalog     string                 `protobuf:"bytes,16,opt,name=catalog,proto3" json:"catalog,omitempty"`
	CatalogName string                 `protobuf:"bytes,17,opt,name=catalogName,proto3" json:"catalogName,omitempty"`
	LogoURL     string                 `protobuf:"bytes,18,opt,name=logoURL,proto3" json:"logoURL,omitempty"`
}

func (x *ListOpusRespDataItem) Reset() {
	*x = ListOpusRespDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusRespDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusRespDataItem) ProtoMessage() {}

func (x *ListOpusRespDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusRespDataItem.ProtoReflect.Descriptor instead.
func (*ListOpusRespDataItem) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{3}
}

func (x *ListOpusRespDataItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListOpusRespDataItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListOpusRespDataItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListOpusRespDataItem) GetOrgID() uint32 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListOpusRespDataItem) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ListOpusRespDataItem) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *ListOpusRespDataItem) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *ListOpusRespDataItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListOpusRespDataItem) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListOpusRespDataItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListOpusRespDataItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ListOpusRespDataItem) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ListOpusRespDataItem) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *ListOpusRespDataItem) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *ListOpusRespDataItem) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

// +SKIP_GO-FORM
type Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc            string      `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	ContactName     string      `protobuf:"bytes,2,opt,name=contactName,proto3" json:"contactName,omitempty"`
	ContactURL      string      `protobuf:"bytes,3,opt,name=contactURL,proto3" json:"contactURL,omitempty"`
	ContactEmail    string      `protobuf:"bytes,4,opt,name=contactEmail,proto3" json:"contactEmail,omitempty"`
	IsOpenSourced   bool        `protobuf:"varint,5,opt,name=isOpenSourced,proto3" json:"isOpenSourced,omitempty"`
	OpensourceURL   string      `protobuf:"bytes,6,opt,name=opensourceURL,proto3" json:"opensourceURL,omitempty"`
	LicenseName     string      `protobuf:"bytes,7,opt,name=licenseName,proto3" json:"licenseName,omitempty"`
	LicenseURL      string      `protobuf:"bytes,8,opt,name=licenseURL,proto3" json:"licenseURL,omitempty"`
	HomepageName    string      `protobuf:"bytes,9,opt,name=homepageName,proto3" json:"homepageName,omitempty"`
	HomepageURL     string      `protobuf:"bytes,10,opt,name=homepageURL,proto3" json:"homepageURL,omitempty"`
	HomepageLogoURL string      `protobuf:"bytes,11,opt,name=homepageLogoURL,proto3" json:"homepageLogoURL,omitempty"`
	IsDownloadable  bool        `protobuf:"varint,12,opt,name=isDownloadable,proto3" json:"isDownloadable,omitempty"`
	DownloadURL     string      `protobuf:"bytes,13,opt,name=downloadURL,proto3" json:"downloadURL,omitempty"`
	Readme          string      `protobuf:"bytes,14,opt,name=readme,proto3" json:"readme,omitempty"`
	Parameters      *Parameters `protobuf:"bytes,15,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Forms           []*Form     `protobuf:"bytes,16,rep,name=forms,proto3" json:"forms,omitempty"`
	Ref             string      `protobuf:"bytes,100,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *Presentation) Reset() {
	*x = Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation) ProtoMessage() {}

func (x *Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation.ProtoReflect.Descriptor instead.
func (*Presentation) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{4}
}

func (x *Presentation) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Presentation) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Presentation) GetContactURL() string {
	if x != nil {
		return x.ContactURL
	}
	return ""
}

func (x *Presentation) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Presentation) GetIsOpenSourced() bool {
	if x != nil {
		return x.IsOpenSourced
	}
	return false
}

func (x *Presentation) GetOpensourceURL() string {
	if x != nil {
		return x.OpensourceURL
	}
	return ""
}

func (x *Presentation) GetLicenseName() string {
	if x != nil {
		return x.LicenseName
	}
	return ""
}

func (x *Presentation) GetLicenseURL() string {
	if x != nil {
		return x.LicenseURL
	}
	return ""
}

func (x *Presentation) GetHomepageName() string {
	if x != nil {
		return x.HomepageName
	}
	return ""
}

func (x *Presentation) GetHomepageURL() string {
	if x != nil {
		return x.HomepageURL
	}
	return ""
}

func (x *Presentation) GetHomepageLogoURL() string {
	if x != nil {
		return x.HomepageLogoURL
	}
	return ""
}

func (x *Presentation) GetIsDownloadable() bool {
	if x != nil {
		return x.IsDownloadable
	}
	return false
}

func (x *Presentation) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

func (x *Presentation) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *Presentation) GetParameters() *Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Presentation) GetForms() []*Form {
	if x != nil {
		return x.Forms
	}
	return nil
}

func (x *Presentation) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type Readme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang     string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	LangName string `protobuf:"bytes,2,opt,name=langName,proto3" json:"langName,omitempty"`
	Source   string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Text     string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Readme) Reset() {
	*x = Readme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Readme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Readme) ProtoMessage() {}

func (x *Readme) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Readme.ProtoReflect.Descriptor instead.
func (*Readme) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{5}
}

func (x *Readme) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Readme) GetLangName() string {
	if x != nil {
		return x.LangName
	}
	return ""
}

func (x *Readme) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Readme) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Installation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Installer string `protobuf:"bytes,1,opt,name=installer,proto3" json:"installer,omitempty"`
	Spec      string `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Installation) Reset() {
	*x = Installation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Installation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Installation) ProtoMessage() {}

func (x *Installation) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Installation.ProtoReflect.Descriptor instead.
func (*Installation) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{6}
}

func (x *Installation) GetInstaller() string {
	if x != nil {
		return x.Installer
	}
	return ""
}

func (x *Installation) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

// +SKIP_GO-FORM
type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ins        []string     `protobuf:"bytes,1,rep,name=ins,proto3" json:"ins,omitempty"`
	Parameters []*Parameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"` // parameter 是 Openapi3.ParameterObject
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{7}
}

func (x *Parameters) GetIns() []string {
	if x != nil {
		return x.Ins
	}
	return nil
}

func (x *Parameters) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// +SKIP_GO-FORM
type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	In              string  `protobuf:"bytes,2,opt,name=in,proto3" json:"in,omitempty"`
	Description     string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Style           string  `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"`
	Explode         bool    `protobuf:"varint,5,opt,name=explode,proto3" json:"explode,omitempty"`
	AllowEmptyValue bool    `protobuf:"varint,6,opt,name=allowEmptyValue,proto3" json:"allowEmptyValue,omitempty"`
	AllowReserved   bool    `protobuf:"varint,7,opt,name=allowReserved,proto3" json:"allowReserved,omitempty"`
	Deprecated      bool    `protobuf:"varint,8,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Required        bool    `protobuf:"varint,9,opt,name=required,proto3" json:"required,omitempty"`
	Schema          *Schema `protobuf:"bytes,10,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{8}
}

func (x *Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parameter) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

func (x *Parameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Parameter) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Parameter) GetExplode() bool {
	if x != nil {
		return x.Explode
	}
	return false
}

func (x *Parameter) GetAllowEmptyValue() bool {
	if x != nil {
		return x.AllowEmptyValue
	}
	return false
}

func (x *Parameter) GetAllowReserved() bool {
	if x != nil {
		return x.AllowReserved
	}
	return false
}

func (x *Parameter) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Parameter) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Parameter) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type Form struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Headers []string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Line    []*Line  `protobuf:"bytes,3,rep,name=line,proto3" json:"line,omitempty"`
}

func (x *Form) Reset() {
	*x = Form{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Form) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Form) ProtoMessage() {}

func (x *Form) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Form.ProtoReflect.Descriptor instead.
func (*Form) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{9}
}

func (x *Form) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Form) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Form) GetLine() []*Line {
	if x != nil {
		return x.Line
	}
	return nil
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{10}
}

func (x *Line) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

// +SKIP_GO-FORM
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string             `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Title       string             `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Format      string             `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	Description string             `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Deprecated  bool               `protobuf:"varint,20,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Items       *Schema            `protobuf:"bytes,30,opt,name=items,proto3" json:"items,omitempty"`
	Required    []string           `protobuf:"bytes,31,rep,name=required,proto3" json:"required,omitempty"`
	Properties  map[string]*Schema `protobuf:"bytes,32,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{11}
}

func (x *Schema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Schema) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Schema) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Schema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Schema) GetItems() *Schema {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Schema) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Schema) GetProperties() map[string]*Schema {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ListOpusTypesRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*OpusType `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOpusTypesRespData) Reset() {
	*x = ListOpusTypesRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusTypesRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusTypesRespData) ProtoMessage() {}

func (x *ListOpusTypesRespData) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusTypesRespData.ProtoReflect.Descriptor instead.
func (*ListOpusTypesRespData) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{12}
}

func (x *ListOpusTypesRespData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListOpusTypesRespData) GetList() []*OpusType {
	if x != nil {
		return x.List
	}
	return nil
}

type OpusType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
}

func (x *OpusType) Reset() {
	*x = OpusType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpusType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpusType) ProtoMessage() {}

func (x *OpusType) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpusType.ProtoReflect.Descriptor instead.
func (*OpusType) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{13}
}

func (x *OpusType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpusType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpusType) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type PutOnArtifactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint32   `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	UserID      string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Version     string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	DisplayName string   `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Summary     string   `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	Labels      []string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
	Catalog     string   `protobuf:"bytes,9,opt,name=catalog,proto3" json:"catalog,omitempty"`
	LogoURL     string   `protobuf:"bytes,10,opt,name=logoURL,proto3" json:"logoURL,omitempty"`
	// presentation
	Desc            string    `protobuf:"bytes,21,opt,name=desc,proto3" json:"desc,omitempty"`
	ContactName     string    `protobuf:"bytes,22,opt,name=contactName,proto3" json:"contactName,omitempty"`
	ContactURL      string    `protobuf:"bytes,23,opt,name=contactURL,proto3" json:"contactURL,omitempty"`
	ContactEmail    string    `protobuf:"bytes,24,opt,name=contactEmail,proto3" json:"contactEmail,omitempty"`
	IsOpenSourced   bool      `protobuf:"varint,25,opt,name=isOpenSourced,proto3" json:"isOpenSourced,omitempty"`
	OpensourceURL   string    `protobuf:"bytes,26,opt,name=opensourceURL,proto3" json:"opensourceURL,omitempty"`
	LicenseName     string    `protobuf:"bytes,27,opt,name=licenseName,proto3" json:"licenseName,omitempty"`
	LicenseURL      string    `protobuf:"bytes,28,opt,name=licenseURL,proto3" json:"licenseURL,omitempty"`
	HomepageName    string    `protobuf:"bytes,29,opt,name=homepageName,proto3" json:"homepageName,omitempty"`
	HomepageURL     string    `protobuf:"bytes,30,opt,name=homepageURL,proto3" json:"homepageURL,omitempty"`
	HomepageLogoURL string    `protobuf:"bytes,31,opt,name=homepageLogoURL,proto3" json:"homepageLogoURL,omitempty"`
	IsDownloadable  bool      `protobuf:"varint,32,opt,name=isDownloadable,proto3" json:"isDownloadable,omitempty"`
	DownloadURL     string    `protobuf:"bytes,33,opt,name=downloadURL,proto3" json:"downloadURL,omitempty"`
	Readme          []*Readme `protobuf:"bytes,34,rep,name=readme,proto3" json:"readme,omitempty"`
	// installation
	Installation *ArtifactsInstallation `protobuf:"bytes,41,opt,name=installation,proto3" json:"installation,omitempty"`
}

func (x *PutOnArtifactsReq) Reset() {
	*x = PutOnArtifactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOnArtifactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOnArtifactsReq) ProtoMessage() {}

func (x *PutOnArtifactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOnArtifactsReq.ProtoReflect.Descriptor instead.
func (*PutOnArtifactsReq) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{14}
}

func (x *PutOnArtifactsReq) GetOrgID() uint32 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PutOnArtifactsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PutOnArtifactsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutOnArtifactsReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PutOnArtifactsReq) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PutOnArtifactsReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *PutOnArtifactsReq) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PutOnArtifactsReq) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *PutOnArtifactsReq) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PutOnArtifactsReq) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *PutOnArtifactsReq) GetContactURL() string {
	if x != nil {
		return x.ContactURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *PutOnArtifactsReq) GetIsOpenSourced() bool {
	if x != nil {
		return x.IsOpenSourced
	}
	return false
}

func (x *PutOnArtifactsReq) GetOpensourceURL() string {
	if x != nil {
		return x.OpensourceURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetLicenseName() string {
	if x != nil {
		return x.LicenseName
	}
	return ""
}

func (x *PutOnArtifactsReq) GetLicenseURL() string {
	if x != nil {
		return x.LicenseURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetHomepageName() string {
	if x != nil {
		return x.HomepageName
	}
	return ""
}

func (x *PutOnArtifactsReq) GetHomepageURL() string {
	if x != nil {
		return x.HomepageURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetHomepageLogoURL() string {
	if x != nil {
		return x.HomepageLogoURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetIsDownloadable() bool {
	if x != nil {
		return x.IsDownloadable
	}
	return false
}

func (x *PutOnArtifactsReq) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

func (x *PutOnArtifactsReq) GetReadme() []*Readme {
	if x != nil {
		return x.Readme
	}
	return nil
}

func (x *PutOnArtifactsReq) GetInstallation() *ArtifactsInstallation {
	if x != nil {
		return x.Installation
	}
	return nil
}

type ArtifactsInstallation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
}

func (x *ArtifactsInstallation) Reset() {
	*x = ArtifactsInstallation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsInstallation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsInstallation) ProtoMessage() {}

func (x *ArtifactsInstallation) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsInstallation.ProtoReflect.Descriptor instead.
func (*ArtifactsInstallation) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{15}
}

func (x *ArtifactsInstallation) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

type PutOffArtifactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint32 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	OpusID    string `protobuf:"bytes,3,opt,name=opusID,proto3" json:"opusID,omitempty"`
	VersionID string `protobuf:"bytes,4,opt,name=versionID,proto3" json:"versionID,omitempty"`
}

func (x *PutOffArtifactsReq) Reset() {
	*x = PutOffArtifactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOffArtifactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOffArtifactsReq) ProtoMessage() {}

func (x *PutOffArtifactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOffArtifactsReq.ProtoReflect.Descriptor instead.
func (*PutOffArtifactsReq) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{16}
}

func (x *PutOffArtifactsReq) GetOrgID() uint32 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PutOffArtifactsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PutOffArtifactsReq) GetOpusID() string {
	if x != nil {
		return x.OpusID
	}
	return ""
}

func (x *PutOffArtifactsReq) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type PutOnExtensionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID           uint32   `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	UserID          string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Type            string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name            string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Version         string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	DisplayName     string   `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	DisplayNameI18N string   `protobuf:"bytes,7,opt,name=displayNameI18n,proto3" json:"displayNameI18n,omitempty"`
	Summary         string   `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
	SummaryI18N     string   `protobuf:"bytes,9,opt,name=summaryI18n,proto3" json:"summaryI18n,omitempty"`
	Labels          []string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty"`
	Catalog         string   `protobuf:"bytes,11,opt,name=catalog,proto3" json:"catalog,omitempty"`
	LogoURL         string   `protobuf:"bytes,12,opt,name=logoURL,proto3" json:"logoURL,omitempty"`
	Level           string   `protobuf:"bytes,13,opt,name=level,proto3" json:"level,omitempty"`
	Mode            string   `protobuf:"bytes,14,opt,name=mode,proto3" json:"mode,omitempty"` // append, override
	// presentation
	Desc            string    `protobuf:"bytes,21,opt,name=desc,proto3" json:"desc,omitempty"`
	DescI18N        string    `protobuf:"bytes,22,opt,name=descI18n,proto3" json:"descI18n,omitempty"`
	ContactName     string    `protobuf:"bytes,23,opt,name=contactName,proto3" json:"contactName,omitempty"`
	ContactURL      string    `protobuf:"bytes,24,opt,name=contactURL,proto3" json:"contactURL,omitempty"`
	ContactEmail    string    `protobuf:"bytes,25,opt,name=contactEmail,proto3" json:"contactEmail,omitempty"`
	IsOpenSourced   bool      `protobuf:"varint,26,opt,name=isOpenSourced,proto3" json:"isOpenSourced,omitempty"`
	OpensourceURL   string    `protobuf:"bytes,27,opt,name=opensourceURL,proto3" json:"opensourceURL,omitempty"`
	LicenseName     string    `protobuf:"bytes,28,opt,name=licenseName,proto3" json:"licenseName,omitempty"`
	LicenseURL      string    `protobuf:"bytes,29,opt,name=licenseURL,proto3" json:"licenseURL,omitempty"`
	HomepageName    string    `protobuf:"bytes,30,opt,name=homepageName,proto3" json:"homepageName,omitempty"`
	HomepageURL     string    `protobuf:"bytes,31,opt,name=homepageURL,proto3" json:"homepageURL,omitempty"`
	HomepageLogoURL string    `protobuf:"bytes,32,opt,name=homepageLogoURL,proto3" json:"homepageLogoURL,omitempty"`
	IsDownloadable  bool      `protobuf:"varint,33,opt,name=isDownloadable,proto3" json:"isDownloadable,omitempty"`
	DownloadURL     string    `protobuf:"bytes,34,opt,name=downloadURL,proto3" json:"downloadURL,omitempty"`
	Readme          []*Readme `protobuf:"bytes,35,rep,name=readme,proto3" json:"readme,omitempty"`
	I18N            string    `protobuf:"bytes,36,opt,name=i18n,proto3" json:"i18n,omitempty"` // map[string]map[string]string
	IsDefault       bool      `protobuf:"varint,40,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
}

func (x *PutOnExtensionsReq) Reset() {
	*x = PutOnExtensionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOnExtensionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOnExtensionsReq) ProtoMessage() {}

func (x *PutOnExtensionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOnExtensionsReq.ProtoReflect.Descriptor instead.
func (*PutOnExtensionsReq) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{17}
}

func (x *PutOnExtensionsReq) GetOrgID() uint32 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PutOnExtensionsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PutOnExtensionsReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PutOnExtensionsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutOnExtensionsReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PutOnExtensionsReq) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PutOnExtensionsReq) GetDisplayNameI18N() string {
	if x != nil {
		return x.DisplayNameI18N
	}
	return ""
}

func (x *PutOnExtensionsReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *PutOnExtensionsReq) GetSummaryI18N() string {
	if x != nil {
		return x.SummaryI18N
	}
	return ""
}

func (x *PutOnExtensionsReq) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PutOnExtensionsReq) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *PutOnExtensionsReq) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *PutOnExtensionsReq) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PutOnExtensionsReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PutOnExtensionsReq) GetDescI18N() string {
	if x != nil {
		return x.DescI18N
	}
	return ""
}

func (x *PutOnExtensionsReq) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *PutOnExtensionsReq) GetContactURL() string {
	if x != nil {
		return x.ContactURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *PutOnExtensionsReq) GetIsOpenSourced() bool {
	if x != nil {
		return x.IsOpenSourced
	}
	return false
}

func (x *PutOnExtensionsReq) GetOpensourceURL() string {
	if x != nil {
		return x.OpensourceURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetLicenseName() string {
	if x != nil {
		return x.LicenseName
	}
	return ""
}

func (x *PutOnExtensionsReq) GetLicenseURL() string {
	if x != nil {
		return x.LicenseURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetHomepageName() string {
	if x != nil {
		return x.HomepageName
	}
	return ""
}

func (x *PutOnExtensionsReq) GetHomepageURL() string {
	if x != nil {
		return x.HomepageURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetHomepageLogoURL() string {
	if x != nil {
		return x.HomepageLogoURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetIsDownloadable() bool {
	if x != nil {
		return x.IsDownloadable
	}
	return false
}

func (x *PutOnExtensionsReq) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

func (x *PutOnExtensionsReq) GetReadme() []*Readme {
	if x != nil {
		return x.Readme
	}
	return nil
}

func (x *PutOnExtensionsReq) GetI18N() string {
	if x != nil {
		return x.I18N
	}
	return ""
}

func (x *PutOnExtensionsReq) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type ListOpusVersionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpusID string `protobuf:"bytes,1,opt,name=opusID,proto3" json:"opusID,omitempty"`
}

func (x *ListOpusVersionsReq) Reset() {
	*x = ListOpusVersionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusVersionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusVersionsReq) ProtoMessage() {}

func (x *ListOpusVersionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusVersionsReq.ProtoReflect.Descriptor instead.
func (*ListOpusVersionsReq) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{18}
}

func (x *ListOpusVersionsReq) GetOpusID() string {
	if x != nil {
		return x.OpusID
	}
	return ""
}

type ListOpusVersionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ListOpusVersionsRespData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string                  `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *ListOpusVersionsResp) Reset() {
	*x = ListOpusVersionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusVersionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusVersionsResp) ProtoMessage() {}

func (x *ListOpusVersionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusVersionsResp.ProtoReflect.Descriptor instead.
func (*ListOpusVersionsResp) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{19}
}

func (x *ListOpusVersionsResp) GetData() *ListOpusVersionsRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListOpusVersionsResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type ListOpusVersionsRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt        *timestamppb.Timestamp            `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp            `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OrgID            uint32                            `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName          string                            `protobuf:"bytes,5,opt,name=orgName,proto3" json:"orgName,omitempty"`
	CreatorID        string                            `protobuf:"bytes,6,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID        string                            `protobuf:"bytes,7,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	Level            string                            `protobuf:"bytes,8,opt,name=level,proto3" json:"level,omitempty"`
	Type             string                            `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Name             string                            `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName      string                            `protobuf:"bytes,11,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Catalog          string                            `protobuf:"bytes,12,opt,name=catalog,proto3" json:"catalog,omitempty"`
	DefaultVersionID string                            `protobuf:"bytes,13,opt,name=defaultVersionID,proto3" json:"defaultVersionID,omitempty"`
	LatestVersionID  string                            `protobuf:"bytes,14,opt,name=latestVersionID,proto3" json:"latestVersionID,omitempty"`
	Versions         []*ListOpusVersionRespDataVersion `protobuf:"bytes,15,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ListOpusVersionsRespData) Reset() {
	*x = ListOpusVersionsRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusVersionsRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusVersionsRespData) ProtoMessage() {}

func (x *ListOpusVersionsRespData) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusVersionsRespData.ProtoReflect.Descriptor instead.
func (*ListOpusVersionsRespData) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{20}
}

func (x *ListOpusVersionsRespData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListOpusVersionsRespData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListOpusVersionsRespData) GetOrgID() uint32 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ListOpusVersionsRespData) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetDefaultVersionID() string {
	if x != nil {
		return x.DefaultVersionID
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetLatestVersionID() string {
	if x != nil {
		return x.LatestVersionID
	}
	return ""
}

func (x *ListOpusVersionsRespData) GetVersions() []*ListOpusVersionRespDataVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type ListOpusVersionRespDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	CreatorID       string                 `protobuf:"bytes,4,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID       string                 `protobuf:"bytes,5,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	Version         string                 `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	Summary         string                 `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`
	Labels          []string               `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty"`
	LogoURL         string                 `protobuf:"bytes,13,opt,name=logoURL,proto3" json:"logoURL,omitempty"`
	IsValid         bool                   `protobuf:"varint,14,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Ref             string                 `protobuf:"bytes,20,opt,name=ref,proto3" json:"ref,omitempty"` // reserved
	Desc            string                 `protobuf:"bytes,21,opt,name=desc,proto3" json:"desc,omitempty"`
	ContactName     string                 `protobuf:"bytes,22,opt,name=contactName,proto3" json:"contactName,omitempty"`
	ContactURL      string                 `protobuf:"bytes,23,opt,name=contactURL,proto3" json:"contactURL,omitempty"`
	ContactEmail    string                 `protobuf:"bytes,24,opt,name=contactEmail,proto3" json:"contactEmail,omitempty"`
	IsOpenSourced   bool                   `protobuf:"varint,25,opt,name=isOpenSourced,proto3" json:"isOpenSourced,omitempty"`
	OpensourceURL   string                 `protobuf:"bytes,26,opt,name=opensourceURL,proto3" json:"opensourceURL,omitempty"`
	LicenceName     string                 `protobuf:"bytes,27,opt,name=licenceName,proto3" json:"licenceName,omitempty"`
	LicenceURL      string                 `protobuf:"bytes,28,opt,name=licenceURL,proto3" json:"licenceURL,omitempty"`
	HomepageName    string                 `protobuf:"bytes,29,opt,name=homepageName,proto3" json:"homepageName,omitempty"`
	HomepageURL     string                 `protobuf:"bytes,30,opt,name=homepageURL,proto3" json:"homepageURL,omitempty"`
	HomepageLogoURL string                 `protobuf:"bytes,31,opt,name=homepageLogoURL,proto3" json:"homepageLogoURL,omitempty"`
	IsDownloadable  bool                   `protobuf:"varint,32,opt,name=isDownloadable,proto3" json:"isDownloadable,omitempty"`
	DownloadURL     string                 `protobuf:"bytes,33,opt,name=downloadURL,proto3" json:"downloadURL,omitempty"`
	ReadmeLang      string                 `protobuf:"bytes,40,opt,name=readmeLang,proto3" json:"readmeLang,omitempty"`
	ReadmeLangName  string                 `protobuf:"bytes,41,opt,name=readmeLangName,proto3" json:"readmeLangName,omitempty"`
	Readme          string                 `protobuf:"bytes,42,opt,name=readme,proto3" json:"readme,omitempty"`
}

func (x *ListOpusVersionRespDataVersion) Reset() {
	*x = ListOpusVersionRespDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpusVersionRespDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpusVersionRespDataVersion) ProtoMessage() {}

func (x *ListOpusVersionRespDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpusVersionRespDataVersion.ProtoReflect.Descriptor instead.
func (*ListOpusVersionRespDataVersion) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{21}
}

func (x *ListOpusVersionRespDataVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListOpusVersionRespDataVersion) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListOpusVersionRespDataVersion) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListOpusVersionRespDataVersion) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ListOpusVersionRespDataVersion) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetContactURL() string {
	if x != nil {
		return x.ContactURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetIsOpenSourced() bool {
	if x != nil {
		return x.IsOpenSourced
	}
	return false
}

func (x *ListOpusVersionRespDataVersion) GetOpensourceURL() string {
	if x != nil {
		return x.OpensourceURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetLicenceName() string {
	if x != nil {
		return x.LicenceName
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetLicenceURL() string {
	if x != nil {
		return x.LicenceURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetHomepageName() string {
	if x != nil {
		return x.HomepageName
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetHomepageURL() string {
	if x != nil {
		return x.HomepageURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetHomepageLogoURL() string {
	if x != nil {
		return x.HomepageLogoURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetIsDownloadable() bool {
	if x != nil {
		return x.IsDownloadable
	}
	return false
}

func (x *ListOpusVersionRespDataVersion) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetReadmeLang() string {
	if x != nil {
		return x.ReadmeLang
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetReadmeLangName() string {
	if x != nil {
		return x.ReadmeLangName
	}
	return ""
}

func (x *ListOpusVersionRespDataVersion) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

type PutOnOpusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpusID    string `protobuf:"bytes,1,opt,name=opusID,proto3" json:"opusID,omitempty"`
	VersionID string `protobuf:"bytes,2,opt,name=versionID,proto3" json:"versionID,omitempty"`
}

func (x *PutOnOpusResp) Reset() {
	*x = PutOnOpusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOnOpusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOnOpusResp) ProtoMessage() {}

func (x *PutOnOpusResp) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOnOpusResp.ProtoReflect.Descriptor instead.
func (*PutOnOpusResp) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{22}
}

func (x *PutOnOpusResp) GetOpusID() string {
	if x != nil {
		return x.OpusID
	}
	return ""
}

func (x *PutOnOpusResp) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type I18N struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang map[string]string `protobuf:"bytes,1,rep,name=lang,proto3" json:"lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *I18N) Reset() {
	*x = I18N{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gallery_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I18N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18N) ProtoMessage() {}

func (x *I18N) ProtoReflect() protoreflect.Message {
	mi := &file_gallery_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18N.ProtoReflect.Descriptor instead.
func (*I18N) Descriptor() ([]byte, []int) {
	return file_gallery_proto_rawDescGZIP(), []int{23}
}

func (x *I18N) GetLang() map[string]string {
	if x != nil {
		return x.Lang
	}
	return nil
}

var File_gallery_proto protoreflect.FileDescriptor

var file_gallery_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x61,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x22, 0x65, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdc, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x22, 0xe8, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x64, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x22, 0x64, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x5c, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x63, 0x0a, 0x04, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x1c, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xfe,
	0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x5e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x4f, 0x70, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x54, 0x0a, 0x08, 0x4f, 0x70, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x06, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x55, 0x52, 0x4c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52,
	0x4c, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x64, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x22, 0x78, 0x0a, 0x12, 0x50, 0x75, 0x74,
	0x4f, 0x66, 0x66, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x75, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x75, 0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0xc5, 0x07, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x31, 0x38, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x31, 0x38, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x31, 0x38, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x31,
	0x38, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x49, 0x31, 0x38, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x49, 0x31, 0x38, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x52, 0x4c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6d,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x31, 0x38,
	0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x31, 0x38, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x75, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x75, 0x73, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xa9, 0x04,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x07, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f,
	0x55, 0x52, 0x4c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55,
	0x52, 0x4c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f,
	0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f,
	0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65,
	0x22, 0x45, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x75, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x75, 0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x04, 0x49, 0x31, 0x38, 0x6e, 0x12,
	0x35, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xd6, 0x05, 0x0a, 0x07, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x70, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x11, 0x0a,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x6e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x75, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x0b, 0x0a, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x75, 0x73,
	0x12, 0xaa, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x75, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x75, 0x73, 0x49,
	0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x1d,
	0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x75, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x75,
	0x73, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a,
	0x0e, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x4f,
	0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x50, 0x75, 0x74,
	0x4f, 0x66, 0x66, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x2e, 0x50, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x75, 0x74, 0x4f, 0x6e, 0x4f, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x1a, 0x18,
	0xc2, 0xc4, 0xcb, 0x1c, 0x13, 0x22, 0x0b, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gallery_proto_rawDescOnce sync.Once
	file_gallery_proto_rawDescData = file_gallery_proto_rawDesc
)

func file_gallery_proto_rawDescGZIP() []byte {
	file_gallery_proto_rawDescOnce.Do(func() {
		file_gallery_proto_rawDescData = protoimpl.X.CompressGZIP(file_gallery_proto_rawDescData)
	})
	return file_gallery_proto_rawDescData
}

var file_gallery_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_gallery_proto_goTypes = []interface{}{
	(*ListOpusReq)(nil),                    // 0: erda.apps.gallery.ListOpusReq
	(*ListOpusResp)(nil),                   // 1: erda.apps.gallery.ListOpusResp
	(*ListOpusRespData)(nil),               // 2: erda.apps.gallery.ListOpusRespData
	(*ListOpusRespDataItem)(nil),           // 3: erda.apps.gallery.ListOpusRespDataItem
	(*Presentation)(nil),                   // 4: erda.apps.gallery.Presentation
	(*Readme)(nil),                         // 5: erda.apps.gallery.Readme
	(*Installation)(nil),                   // 6: erda.apps.gallery.Installation
	(*Parameters)(nil),                     // 7: erda.apps.gallery.Parameters
	(*Parameter)(nil),                      // 8: erda.apps.gallery.Parameter
	(*Form)(nil),                           // 9: erda.apps.gallery.Form
	(*Line)(nil),                           // 10: erda.apps.gallery.Line
	(*Schema)(nil),                         // 11: erda.apps.gallery.Schema
	(*ListOpusTypesRespData)(nil),          // 12: erda.apps.gallery.ListOpusTypesRespData
	(*OpusType)(nil),                       // 13: erda.apps.gallery.OpusType
	(*PutOnArtifactsReq)(nil),              // 14: erda.apps.gallery.PutOnArtifactsReq
	(*ArtifactsInstallation)(nil),          // 15: erda.apps.gallery.ArtifactsInstallation
	(*PutOffArtifactsReq)(nil),             // 16: erda.apps.gallery.PutOffArtifactsReq
	(*PutOnExtensionsReq)(nil),             // 17: erda.apps.gallery.PutOnExtensionsReq
	(*ListOpusVersionsReq)(nil),            // 18: erda.apps.gallery.ListOpusVersionsReq
	(*ListOpusVersionsResp)(nil),           // 19: erda.apps.gallery.ListOpusVersionsResp
	(*ListOpusVersionsRespData)(nil),       // 20: erda.apps.gallery.ListOpusVersionsRespData
	(*ListOpusVersionRespDataVersion)(nil), // 21: erda.apps.gallery.ListOpusVersionRespDataVersion
	(*PutOnOpusResp)(nil),                  // 22: erda.apps.gallery.PutOnOpusResp
	(*I18N)(nil),                           // 23: erda.apps.gallery.I18n
	nil,                                    // 24: erda.apps.gallery.Schema.PropertiesEntry
	nil,                                    // 25: erda.apps.gallery.I18n.LangEntry
	(*timestamppb.Timestamp)(nil),          // 26: google.protobuf.Timestamp
	(*pb.VoidRequest)(nil),                 // 27: erda.common.VoidRequest
	(*pb.VoidResponse)(nil),                // 28: erda.common.VoidResponse
}
var file_gallery_proto_depIdxs = []int32{
	2,  // 0: erda.apps.gallery.ListOpusResp.data:type_name -> erda.apps.gallery.ListOpusRespData
	3,  // 1: erda.apps.gallery.ListOpusRespData.list:type_name -> erda.apps.gallery.ListOpusRespDataItem
	26, // 2: erda.apps.gallery.ListOpusRespDataItem.createdAt:type_name -> google.protobuf.Timestamp
	26, // 3: erda.apps.gallery.ListOpusRespDataItem.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 4: erda.apps.gallery.Presentation.parameters:type_name -> erda.apps.gallery.Parameters
	9,  // 5: erda.apps.gallery.Presentation.forms:type_name -> erda.apps.gallery.Form
	8,  // 6: erda.apps.gallery.Parameters.parameters:type_name -> erda.apps.gallery.Parameter
	11, // 7: erda.apps.gallery.Parameter.schema:type_name -> erda.apps.gallery.Schema
	10, // 8: erda.apps.gallery.Form.line:type_name -> erda.apps.gallery.Line
	11, // 9: erda.apps.gallery.Schema.items:type_name -> erda.apps.gallery.Schema
	24, // 10: erda.apps.gallery.Schema.properties:type_name -> erda.apps.gallery.Schema.PropertiesEntry
	13, // 11: erda.apps.gallery.ListOpusTypesRespData.list:type_name -> erda.apps.gallery.OpusType
	5,  // 12: erda.apps.gallery.PutOnArtifactsReq.readme:type_name -> erda.apps.gallery.Readme
	15, // 13: erda.apps.gallery.PutOnArtifactsReq.installation:type_name -> erda.apps.gallery.ArtifactsInstallation
	5,  // 14: erda.apps.gallery.PutOnExtensionsReq.readme:type_name -> erda.apps.gallery.Readme
	20, // 15: erda.apps.gallery.ListOpusVersionsResp.data:type_name -> erda.apps.gallery.ListOpusVersionsRespData
	26, // 16: erda.apps.gallery.ListOpusVersionsRespData.createdAt:type_name -> google.protobuf.Timestamp
	26, // 17: erda.apps.gallery.ListOpusVersionsRespData.updatedAt:type_name -> google.protobuf.Timestamp
	21, // 18: erda.apps.gallery.ListOpusVersionsRespData.versions:type_name -> erda.apps.gallery.ListOpusVersionRespDataVersion
	26, // 19: erda.apps.gallery.ListOpusVersionRespDataVersion.createdAt:type_name -> google.protobuf.Timestamp
	26, // 20: erda.apps.gallery.ListOpusVersionRespDataVersion.updatedAt:type_name -> google.protobuf.Timestamp
	25, // 21: erda.apps.gallery.I18n.lang:type_name -> erda.apps.gallery.I18n.LangEntry
	11, // 22: erda.apps.gallery.Schema.PropertiesEntry.value:type_name -> erda.apps.gallery.Schema
	27, // 23: erda.apps.gallery.Gallery.ListOpusTypes:input_type -> erda.common.VoidRequest
	0,  // 24: erda.apps.gallery.Gallery.ListOpus:input_type -> erda.apps.gallery.ListOpusReq
	18, // 25: erda.apps.gallery.Gallery.ListOpusVersions:input_type -> erda.apps.gallery.ListOpusVersionsReq
	14, // 26: erda.apps.gallery.Gallery.PutOnArtifacts:input_type -> erda.apps.gallery.PutOnArtifactsReq
	16, // 27: erda.apps.gallery.Gallery.PutOffArtifacts:input_type -> erda.apps.gallery.PutOffArtifactsReq
	17, // 28: erda.apps.gallery.Gallery.PutOnExtensions:input_type -> erda.apps.gallery.PutOnExtensionsReq
	12, // 29: erda.apps.gallery.Gallery.ListOpusTypes:output_type -> erda.apps.gallery.ListOpusTypesRespData
	1,  // 30: erda.apps.gallery.Gallery.ListOpus:output_type -> erda.apps.gallery.ListOpusResp
	19, // 31: erda.apps.gallery.Gallery.ListOpusVersions:output_type -> erda.apps.gallery.ListOpusVersionsResp
	22, // 32: erda.apps.gallery.Gallery.PutOnArtifacts:output_type -> erda.apps.gallery.PutOnOpusResp
	28, // 33: erda.apps.gallery.Gallery.PutOffArtifacts:output_type -> erda.common.VoidResponse
	22, // 34: erda.apps.gallery.Gallery.PutOnExtensions:output_type -> erda.apps.gallery.PutOnOpusResp
	29, // [29:35] is the sub-list for method output_type
	23, // [23:29] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_gallery_proto_init() }
func file_gallery_proto_init() {
	if File_gallery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gallery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusRespDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Readme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Installation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Form); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusTypesRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpusType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOnArtifactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsInstallation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOffArtifactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOnExtensionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusVersionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusVersionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusVersionsRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpusVersionRespDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOnOpusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gallery_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I18N); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gallery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gallery_proto_goTypes,
		DependencyIndexes: file_gallery_proto_depIdxs,
		MessageInfos:      file_gallery_proto_msgTypes,
	}.Build()
	File_gallery_proto = out.File
	file_gallery_proto_rawDesc = nil
	file_gallery_proto_goTypes = nil
	file_gallery_proto_depIdxs = nil
}
