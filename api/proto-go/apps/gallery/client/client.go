// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: gallery.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/apps/gallery/pb"
	pb1 "github.com/erda-project/erda-proto-go/common/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// Gallery gallery.proto
	Gallery() pb.GalleryClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		gallery: pb.NewGalleryClient(cc),
	}
}

type serviceClients struct {
	gallery pb.GalleryClient
}

func (c *serviceClients) Gallery() pb.GalleryClient {
	return c.gallery
}

type galleryWrapper struct {
	client pb.GalleryClient
	opts   []grpc1.CallOption
}

func (s *galleryWrapper) ListOpusTypes(ctx context.Context, req *pb1.VoidRequest) (*pb.ListOpusTypesRespData, error) {
	return s.client.ListOpusTypes(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *galleryWrapper) ListOpus(ctx context.Context, req *pb.ListOpusReq) (*pb.ListOpusResp, error) {
	return s.client.ListOpus(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *galleryWrapper) ListOpusVersions(ctx context.Context, req *pb.ListOpusVersionsReq) (*pb.ListOpusVersionsResp, error) {
	return s.client.ListOpusVersions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *galleryWrapper) PutOnArtifacts(ctx context.Context, req *pb.PutOnArtifactsReq) (*pb.PutOnOpusResp, error) {
	return s.client.PutOnArtifacts(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *galleryWrapper) PutOffArtifacts(ctx context.Context, req *pb.PutOffArtifactsReq) (*pb1.VoidResponse, error) {
	return s.client.PutOffArtifacts(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *galleryWrapper) PutOnExtensions(ctx context.Context, req *pb.PutOnExtensionsReq) (*pb.PutOnOpusResp, error) {
	return s.client.PutOnExtensions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
