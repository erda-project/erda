// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: flow.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// FlowServiceHandler is the server API for FlowService service.
type FlowServiceHandler interface {
	// POST /api/devflow
	CreateFlowNode(context.Context, *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error)
	// PUT /api/devflow/{mergeID}/actions/operation-deploy
	OperationDeploy(context.Context, *OperationDeployRequest) (*OperationDeployResponse, error)
	// DELETE /api/devflow/{mergeID}
	DeleteFlowNode(context.Context, *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error)
	// POST /api/devflow/actions/reconstruction
	Reconstruction(context.Context, *ReconstructionRequest) (*ReconstructionResponse, error)
	// GET /api/devflow/actions/info
	GetDevFlowInfo(context.Context, *GetDevFlowInfoRequest) (*GetDevFlowInfoResponse, error)
}

// RegisterFlowServiceHandler register FlowServiceHandler to http.Router.
func RegisterFlowServiceHandler(r http.Router, srv FlowServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CreateFlowNode := func(method, path string, fn func(context.Context, *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateFlowNodeRequest))
		}
		var CreateFlowNode_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateFlowNode_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "CreateFlowNode", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateFlowNode_info)
				}
				r = r.WithContext(ctx)
				var in CreateFlowNodeRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_OperationDeploy := func(method, path string, fn func(context.Context, *OperationDeployRequest) (*OperationDeployResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*OperationDeployRequest))
		}
		var OperationDeploy_info transport.ServiceInfo
		if h.Interceptor != nil {
			OperationDeploy_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "OperationDeploy", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, OperationDeploy_info)
				}
				r = r.WithContext(ctx)
				var in OperationDeployRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "mergeID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.MergeID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteFlowNode := func(method, path string, fn func(context.Context, *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteFlowNodeRequest))
		}
		var DeleteFlowNode_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteFlowNode_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "DeleteFlowNode", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteFlowNode_info)
				}
				r = r.WithContext(ctx)
				var in DeleteFlowNodeRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "mergeID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.MergeID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_Reconstruction := func(method, path string, fn func(context.Context, *ReconstructionRequest) (*ReconstructionResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ReconstructionRequest))
		}
		var Reconstruction_info transport.ServiceInfo
		if h.Interceptor != nil {
			Reconstruction_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "Reconstruction", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, Reconstruction_info)
				}
				r = r.WithContext(ctx)
				var in ReconstructionRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetDevFlowInfo := func(method, path string, fn func(context.Context, *GetDevFlowInfoRequest) (*GetDevFlowInfoResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetDevFlowInfoRequest))
		}
		var GetDevFlowInfo_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetDevFlowInfo_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "GetDevFlowInfo", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetDevFlowInfo_info)
				}
				r = r.WithContext(ctx)
				var in GetDevFlowInfoRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateFlowNode("POST", "/api/devflow", srv.CreateFlowNode)
	add_OperationDeploy("PUT", "/api/devflow/{mergeID}/actions/operation-deploy", srv.OperationDeploy)
	add_DeleteFlowNode("DELETE", "/api/devflow/{mergeID}", srv.DeleteFlowNode)
	add_Reconstruction("POST", "/api/devflow/actions/reconstruction", srv.Reconstruction)
	add_GetDevFlowInfo("GET", "/api/devflow/actions/info", srv.GetDevFlowInfo)
}
