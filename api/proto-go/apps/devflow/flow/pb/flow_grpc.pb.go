// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: flow.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowServiceClient interface {
	CreateFlowNode(ctx context.Context, in *CreateFlowNodeRequest, opts ...grpc.CallOption) (*CreateFlowNodeResponse, error)
	OperationDeploy(ctx context.Context, in *OperationDeployRequest, opts ...grpc.CallOption) (*OperationDeployResponse, error)
	DeleteFlowNode(ctx context.Context, in *DeleteFlowNodeRequest, opts ...grpc.CallOption) (*DeleteFlowNodeResponse, error)
	Reconstruction(ctx context.Context, in *ReconstructionRequest, opts ...grpc.CallOption) (*ReconstructionResponse, error)
	GetDevFlowInfo(ctx context.Context, in *GetDevFlowInfoRequest, opts ...grpc.CallOption) (*GetDevFlowInfoResponse, error)
}

type flowServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewFlowServiceClient(cc grpc1.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) CreateFlowNode(ctx context.Context, in *CreateFlowNodeRequest, opts ...grpc.CallOption) (*CreateFlowNodeResponse, error) {
	out := new(CreateFlowNodeResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.flow.FlowService/CreateFlowNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) OperationDeploy(ctx context.Context, in *OperationDeployRequest, opts ...grpc.CallOption) (*OperationDeployResponse, error) {
	out := new(OperationDeployResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.flow.FlowService/operationDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) DeleteFlowNode(ctx context.Context, in *DeleteFlowNodeRequest, opts ...grpc.CallOption) (*DeleteFlowNodeResponse, error) {
	out := new(DeleteFlowNodeResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.flow.FlowService/DeleteFlowNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) Reconstruction(ctx context.Context, in *ReconstructionRequest, opts ...grpc.CallOption) (*ReconstructionResponse, error) {
	out := new(ReconstructionResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.flow.FlowService/Reconstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetDevFlowInfo(ctx context.Context, in *GetDevFlowInfoRequest, opts ...grpc.CallOption) (*GetDevFlowInfoResponse, error) {
	out := new(GetDevFlowInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.flow.FlowService/GetDevFlowInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServiceServer is the server API for FlowService service.
// All implementations should embed UnimplementedFlowServiceServer
// for forward compatibility
type FlowServiceServer interface {
	CreateFlowNode(context.Context, *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error)
	OperationDeploy(context.Context, *OperationDeployRequest) (*OperationDeployResponse, error)
	DeleteFlowNode(context.Context, *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error)
	Reconstruction(context.Context, *ReconstructionRequest) (*ReconstructionResponse, error)
	GetDevFlowInfo(context.Context, *GetDevFlowInfoRequest) (*GetDevFlowInfoResponse, error)
}

// UnimplementedFlowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlowServiceServer struct {
}

func (*UnimplementedFlowServiceServer) CreateFlowNode(context.Context, *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlowNode not implemented")
}
func (*UnimplementedFlowServiceServer) OperationDeploy(context.Context, *OperationDeployRequest) (*OperationDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationDeploy not implemented")
}
func (*UnimplementedFlowServiceServer) DeleteFlowNode(context.Context, *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlowNode not implemented")
}
func (*UnimplementedFlowServiceServer) Reconstruction(context.Context, *ReconstructionRequest) (*ReconstructionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconstruction not implemented")
}
func (*UnimplementedFlowServiceServer) GetDevFlowInfo(context.Context, *GetDevFlowInfoRequest) (*GetDevFlowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevFlowInfo not implemented")
}

func RegisterFlowServiceServer(s grpc1.ServiceRegistrar, srv FlowServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_FlowService_serviceDesc(srv, opts...), srv)
}

var _FlowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.apps.devflow.flow.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "flow.proto",
}

func _get_FlowService_serviceDesc(srv FlowServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_FlowService_CreateFlowNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateFlowNode(ctx, req.(*CreateFlowNodeRequest))
	}
	var _FlowService_CreateFlowNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FlowService_CreateFlowNode_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "CreateFlowNode", srv)
		_FlowService_CreateFlowNode_Handler = h.Interceptor(_FlowService_CreateFlowNode_Handler)
	}

	_FlowService_OperationDeploy_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.OperationDeploy(ctx, req.(*OperationDeployRequest))
	}
	var _FlowService_OperationDeploy_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FlowService_OperationDeploy_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "OperationDeploy", srv)
		_FlowService_OperationDeploy_Handler = h.Interceptor(_FlowService_OperationDeploy_Handler)
	}

	_FlowService_DeleteFlowNode_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteFlowNode(ctx, req.(*DeleteFlowNodeRequest))
	}
	var _FlowService_DeleteFlowNode_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FlowService_DeleteFlowNode_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "DeleteFlowNode", srv)
		_FlowService_DeleteFlowNode_Handler = h.Interceptor(_FlowService_DeleteFlowNode_Handler)
	}

	_FlowService_Reconstruction_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Reconstruction(ctx, req.(*ReconstructionRequest))
	}
	var _FlowService_Reconstruction_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FlowService_Reconstruction_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "Reconstruction", srv)
		_FlowService_Reconstruction_Handler = h.Interceptor(_FlowService_Reconstruction_Handler)
	}

	_FlowService_GetDevFlowInfo_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDevFlowInfo(ctx, req.(*GetDevFlowInfoRequest))
	}
	var _FlowService_GetDevFlowInfo_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FlowService_GetDevFlowInfo_info = transport.NewServiceInfo("erda.apps.devflow.flow.FlowService", "GetDevFlowInfo", srv)
		_FlowService_GetDevFlowInfo_Handler = h.Interceptor(_FlowService_GetDevFlowInfo_Handler)
	}

	var serviceDesc = _FlowService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateFlowNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateFlowNodeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FlowServiceServer).CreateFlowNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FlowService_CreateFlowNode_info)
				}
				if interceptor == nil {
					return _FlowService_CreateFlowNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.flow.FlowService/CreateFlowNode",
				}
				return interceptor(ctx, in, info, _FlowService_CreateFlowNode_Handler)
			},
		},
		{
			MethodName: "operationDeploy",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OperationDeployRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FlowServiceServer).OperationDeploy(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FlowService_OperationDeploy_info)
				}
				if interceptor == nil {
					return _FlowService_OperationDeploy_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.flow.FlowService/OperationDeploy",
				}
				return interceptor(ctx, in, info, _FlowService_OperationDeploy_Handler)
			},
		},
		{
			MethodName: "DeleteFlowNode",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteFlowNodeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FlowServiceServer).DeleteFlowNode(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FlowService_DeleteFlowNode_info)
				}
				if interceptor == nil {
					return _FlowService_DeleteFlowNode_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.flow.FlowService/DeleteFlowNode",
				}
				return interceptor(ctx, in, info, _FlowService_DeleteFlowNode_Handler)
			},
		},
		{
			MethodName: "Reconstruction",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReconstructionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FlowServiceServer).Reconstruction(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FlowService_Reconstruction_info)
				}
				if interceptor == nil {
					return _FlowService_Reconstruction_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.flow.FlowService/Reconstruction",
				}
				return interceptor(ctx, in, info, _FlowService_Reconstruction_Handler)
			},
		},
		{
			MethodName: "GetDevFlowInfo",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDevFlowInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FlowServiceServer).GetDevFlowInfo(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FlowService_GetDevFlowInfo_info)
				}
				if interceptor == nil {
					return _FlowService_GetDevFlowInfo_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.flow.FlowService/GetDevFlowInfo",
				}
				return interceptor(ctx, in, info, _FlowService_GetDevFlowInfo_Handler)
			},
		},
	}
	return &serviceDesc
}
