// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	proto "github.com/golang/protobuf/proto"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *IssueRelationExtra) Validate() error {
	return nil
}
func (this *DevFlowNode) Validate() error {
	return nil
}
func (this *CreateFlowNodeRequest) Validate() error {
	return nil
}
func (this *CreateFlowNodeResponse) Validate() error {
	return nil
}
func (this *OperationDeployRequest) Validate() error {
	if this.Enable != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Enable); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Enable", err)
		}
	}
	return nil
}
func (this *OperationDeployResponse) Validate() error {
	return nil
}
func (this *DeleteFlowNodeRequest) Validate() error {
	return nil
}
func (this *DeleteFlowNodeResponse) Validate() error {
	return nil
}
func (this *ReconstructionRequest) Validate() error {
	return nil
}
func (this *ReconstructionResponse) Validate() error {
	return nil
}
func (this *PipelineStepInfo) Validate() error {
	return nil
}
func (this *GetDevFlowInfoRequest) Validate() error {
	return nil
}
func (this *ChangeBranch) Validate() error {
	return nil
}
func (this *DevFlowInfo) Validate() error {
	if this.DevFlowNode != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DevFlowNode); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DevFlowNode", err)
		}
	}
	for _, item := range this.ChangeBranch {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("ChangeBranch", err)
			}
		}
	}
	for _, item := range this.PipelineStepInfos {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PipelineStepInfos", err)
			}
		}
	}
	return nil
}
func (this *GetDevFlowInfoResponse) Validate() error {
	for _, item := range this.DevFlowInfos {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("DevFlowInfos", err)
			}
		}
	}
	return nil
}
