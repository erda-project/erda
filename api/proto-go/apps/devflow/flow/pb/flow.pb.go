// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: flow.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueRelationExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID       uint64 `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	RepoMergeID uint64 `protobuf:"varint,2,opt,name=repoMergeID,proto3" json:"repoMergeID,omitempty"`
}

func (x *IssueRelationExtra) Reset() {
	*x = IssueRelationExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueRelationExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueRelationExtra) ProtoMessage() {}

func (x *IssueRelationExtra) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueRelationExtra.ProtoReflect.Descriptor instead.
func (*IssueRelationExtra) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0}
}

func (x *IssueRelationExtra) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *IssueRelationExtra) GetRepoMergeID() uint64 {
	if x != nil {
		return x.RepoMergeID
	}
	return 0
}

type DevFlowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoMergeID          uint64 `protobuf:"varint,1,opt,name=repoMergeID,proto3" json:"repoMergeID,omitempty"`
	AppID                uint64 `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	TargetBranch         string `protobuf:"bytes,3,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	SourceBranch         string `protobuf:"bytes,4,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	IsJoinTempBranch     bool   `protobuf:"varint,5,opt,name=isJoinTempBranch,proto3" json:"isJoinTempBranch,omitempty"`
	JoinTempBranchStatus string `protobuf:"bytes,6,opt,name=joinTempBranchStatus,proto3" json:"joinTempBranchStatus,omitempty"`
	TempBranch           string `protobuf:"bytes,7,opt,name=tempBranch,proto3" json:"tempBranch,omitempty"`
	IssueID              uint64 `protobuf:"varint,8,opt,name=issueID,proto3" json:"issueID,omitempty"`
	MergeID              uint64 `protobuf:"varint,9,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
	AppName              string `protobuf:"bytes,10,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (x *DevFlowNode) Reset() {
	*x = DevFlowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevFlowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevFlowNode) ProtoMessage() {}

func (x *DevFlowNode) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevFlowNode.ProtoReflect.Descriptor instead.
func (*DevFlowNode) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{1}
}

func (x *DevFlowNode) GetRepoMergeID() uint64 {
	if x != nil {
		return x.RepoMergeID
	}
	return 0
}

func (x *DevFlowNode) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *DevFlowNode) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *DevFlowNode) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *DevFlowNode) GetIsJoinTempBranch() bool {
	if x != nil {
		return x.IsJoinTempBranch
	}
	return false
}

func (x *DevFlowNode) GetJoinTempBranchStatus() string {
	if x != nil {
		return x.JoinTempBranchStatus
	}
	return ""
}

func (x *DevFlowNode) GetTempBranch() string {
	if x != nil {
		return x.TempBranch
	}
	return ""
}

func (x *DevFlowNode) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *DevFlowNode) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

func (x *DevFlowNode) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// CreateFlow
type CreateFlowNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueID      uint64 `protobuf:"varint,1,opt,name=issueID,proto3" json:"issueID,omitempty"`
	AppID        uint64 `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	SourceBranch string `protobuf:"bytes,3,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,4,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
}

func (x *CreateFlowNodeRequest) Reset() {
	*x = CreateFlowNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowNodeRequest) ProtoMessage() {}

func (x *CreateFlowNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowNodeRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFlowNodeRequest) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *CreateFlowNodeRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CreateFlowNodeRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *CreateFlowNodeRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

type CreateFlowNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoMergeID uint64 `protobuf:"varint,1,opt,name=repoMergeID,proto3" json:"repoMergeID,omitempty"`
	MergeID     uint64 `protobuf:"varint,2,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
}

func (x *CreateFlowNodeResponse) Reset() {
	*x = CreateFlowNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowNodeResponse) ProtoMessage() {}

func (x *CreateFlowNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateFlowNodeResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFlowNodeResponse) GetRepoMergeID() uint64 {
	if x != nil {
		return x.RepoMergeID
	}
	return 0
}

func (x *CreateFlowNodeResponse) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

// operationDeploy
type OperationDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeID uint64                `protobuf:"varint,1,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
	Enable  *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *OperationDeployRequest) Reset() {
	*x = OperationDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDeployRequest) ProtoMessage() {}

func (x *OperationDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDeployRequest.ProtoReflect.Descriptor instead.
func (*OperationDeployRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{4}
}

func (x *OperationDeployRequest) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

func (x *OperationDeployRequest) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

type OperationDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationDeployResponse) Reset() {
	*x = OperationDeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDeployResponse) ProtoMessage() {}

func (x *OperationDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDeployResponse.ProtoReflect.Descriptor instead.
func (*OperationDeployResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{5}
}

// DeleteFlowNode
type DeleteFlowNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeID uint64 `protobuf:"varint,1,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
	IssueID uint64 `protobuf:"varint,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
}

func (x *DeleteFlowNodeRequest) Reset() {
	*x = DeleteFlowNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowNodeRequest) ProtoMessage() {}

func (x *DeleteFlowNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlowNodeRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteFlowNodeRequest) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

func (x *DeleteFlowNodeRequest) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

type DeleteFlowNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFlowNodeResponse) Reset() {
	*x = DeleteFlowNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowNodeResponse) ProtoMessage() {}

func (x *DeleteFlowNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlowNodeResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{7}
}

// reconstruction
type ReconstructionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeID uint64 `protobuf:"varint,1,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
}

func (x *ReconstructionRequest) Reset() {
	*x = ReconstructionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconstructionRequest) ProtoMessage() {}

func (x *ReconstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconstructionRequest.ProtoReflect.Descriptor instead.
func (*ReconstructionRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{8}
}

func (x *ReconstructionRequest) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

type ReconstructionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconstructionResponse) Reset() {
	*x = ReconstructionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconstructionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconstructionResponse) ProtoMessage() {}

func (x *ReconstructionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconstructionResponse.ProtoReflect.Descriptor instead.
func (*ReconstructionResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{9}
}

type PipelineStepInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PipelineID uint64 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	YmlName    string `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
}

func (x *PipelineStepInfo) Reset() {
	*x = PipelineStepInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStepInfo) ProtoMessage() {}

func (x *PipelineStepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStepInfo.ProtoReflect.Descriptor instead.
func (*PipelineStepInfo) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{10}
}

func (x *PipelineStepInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineStepInfo) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineStepInfo) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

type GetDevFlowInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueID   uint64 `protobuf:"varint,1,opt,name=issueID,proto3" json:"issueID,omitempty"`
	ProjectID uint64 `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	MergeID   uint64 `protobuf:"varint,3,opt,name=mergeID,proto3" json:"mergeID,omitempty"`
}

func (x *GetDevFlowInfoRequest) Reset() {
	*x = GetDevFlowInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevFlowInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevFlowInfoRequest) ProtoMessage() {}

func (x *GetDevFlowInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevFlowInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDevFlowInfoRequest) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{11}
}

func (x *GetDevFlowInfoRequest) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *GetDevFlowInfoRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *GetDevFlowInfoRequest) GetMergeID() uint64 {
	if x != nil {
		return x.MergeID
	}
	return 0
}

type ChangeBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit      string `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	BranchName  string `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	RepoMergeID uint64 `protobuf:"varint,4,opt,name=repoMergeID,proto3" json:"repoMergeID,omitempty"`
}

func (x *ChangeBranch) Reset() {
	*x = ChangeBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBranch) ProtoMessage() {}

func (x *ChangeBranch) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBranch.ProtoReflect.Descriptor instead.
func (*ChangeBranch) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{12}
}

func (x *ChangeBranch) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *ChangeBranch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ChangeBranch) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChangeBranch) GetRepoMergeID() uint64 {
	if x != nil {
		return x.RepoMergeID
	}
	return 0
}

type DevFlowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevFlowNode       *DevFlowNode        `protobuf:"bytes,1,opt,name=devFlowNode,proto3" json:"devFlowNode,omitempty"`
	ChangeBranch      []*ChangeBranch     `protobuf:"bytes,2,rep,name=changeBranch,proto3" json:"changeBranch,omitempty"`
	PipelineStepInfos []*PipelineStepInfo `protobuf:"bytes,3,rep,name=pipelineStepInfos,proto3" json:"pipelineStepInfos,omitempty"`
	Commit            string              `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	HasPermission     bool                `protobuf:"varint,5,opt,name=hasPermission,proto3" json:"hasPermission,omitempty"`
}

func (x *DevFlowInfo) Reset() {
	*x = DevFlowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevFlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevFlowInfo) ProtoMessage() {}

func (x *DevFlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevFlowInfo.ProtoReflect.Descriptor instead.
func (*DevFlowInfo) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{13}
}

func (x *DevFlowInfo) GetDevFlowNode() *DevFlowNode {
	if x != nil {
		return x.DevFlowNode
	}
	return nil
}

func (x *DevFlowInfo) GetChangeBranch() []*ChangeBranch {
	if x != nil {
		return x.ChangeBranch
	}
	return nil
}

func (x *DevFlowInfo) GetPipelineStepInfos() []*PipelineStepInfo {
	if x != nil {
		return x.PipelineStepInfos
	}
	return nil
}

func (x *DevFlowInfo) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *DevFlowInfo) GetHasPermission() bool {
	if x != nil {
		return x.HasPermission
	}
	return false
}

type GetDevFlowInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DevFlowInfos []*DevFlowInfo `protobuf:"bytes,2,rep,name=devFlowInfos,proto3" json:"devFlowInfos,omitempty"`
}

func (x *GetDevFlowInfoResponse) Reset() {
	*x = GetDevFlowInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevFlowInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevFlowInfoResponse) ProtoMessage() {}

func (x *GetDevFlowInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevFlowInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDevFlowInfoResponse) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{14}
}

func (x *GetDevFlowInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDevFlowInfoResponse) GetDevFlowInfos() []*DevFlowInfo {
	if x != nil {
		return x.DevFlowInfos
	}
	return nil
}

var File_flow_proto protoreflect.FileDescriptor

var file_flow_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0xdb, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x46,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x54, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0x66, 0x0a,
	0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x22, 0xb4, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x46,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x48, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0xcb, 0x07, 0x0a, 0x0b, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c,
	0x6f, 0x77, 0xfa, 0x81, 0xf9, 0x1b, 0x0e, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0xe1, 0x01, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x1a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x7b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0xac, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x7b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x18,
	0x0a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xc6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0xfa, 0x81, 0xf9, 0x1b, 0x1b, 0x0a, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c, 0x0b, 0x22, 0x03, 0x64,
	0x6f, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flow_proto_rawDescOnce sync.Once
	file_flow_proto_rawDescData = file_flow_proto_rawDesc
)

func file_flow_proto_rawDescGZIP() []byte {
	file_flow_proto_rawDescOnce.Do(func() {
		file_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_proto_rawDescData)
	})
	return file_flow_proto_rawDescData
}

var file_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_flow_proto_goTypes = []interface{}{
	(*IssueRelationExtra)(nil),      // 0: erda.apps.devflow.flow.IssueRelationExtra
	(*DevFlowNode)(nil),             // 1: erda.apps.devflow.flow.DevFlowNode
	(*CreateFlowNodeRequest)(nil),   // 2: erda.apps.devflow.flow.CreateFlowNodeRequest
	(*CreateFlowNodeResponse)(nil),  // 3: erda.apps.devflow.flow.CreateFlowNodeResponse
	(*OperationDeployRequest)(nil),  // 4: erda.apps.devflow.flow.OperationDeployRequest
	(*OperationDeployResponse)(nil), // 5: erda.apps.devflow.flow.OperationDeployResponse
	(*DeleteFlowNodeRequest)(nil),   // 6: erda.apps.devflow.flow.DeleteFlowNodeRequest
	(*DeleteFlowNodeResponse)(nil),  // 7: erda.apps.devflow.flow.DeleteFlowNodeResponse
	(*ReconstructionRequest)(nil),   // 8: erda.apps.devflow.flow.ReconstructionRequest
	(*ReconstructionResponse)(nil),  // 9: erda.apps.devflow.flow.ReconstructionResponse
	(*PipelineStepInfo)(nil),        // 10: erda.apps.devflow.flow.PipelineStepInfo
	(*GetDevFlowInfoRequest)(nil),   // 11: erda.apps.devflow.flow.GetDevFlowInfoRequest
	(*ChangeBranch)(nil),            // 12: erda.apps.devflow.flow.ChangeBranch
	(*DevFlowInfo)(nil),             // 13: erda.apps.devflow.flow.DevFlowInfo
	(*GetDevFlowInfoResponse)(nil),  // 14: erda.apps.devflow.flow.GetDevFlowInfoResponse
	(*wrapperspb.BoolValue)(nil),    // 15: google.protobuf.BoolValue
}
var file_flow_proto_depIdxs = []int32{
	15, // 0: erda.apps.devflow.flow.OperationDeployRequest.enable:type_name -> google.protobuf.BoolValue
	1,  // 1: erda.apps.devflow.flow.DevFlowInfo.devFlowNode:type_name -> erda.apps.devflow.flow.DevFlowNode
	12, // 2: erda.apps.devflow.flow.DevFlowInfo.changeBranch:type_name -> erda.apps.devflow.flow.ChangeBranch
	10, // 3: erda.apps.devflow.flow.DevFlowInfo.pipelineStepInfos:type_name -> erda.apps.devflow.flow.PipelineStepInfo
	13, // 4: erda.apps.devflow.flow.GetDevFlowInfoResponse.devFlowInfos:type_name -> erda.apps.devflow.flow.DevFlowInfo
	2,  // 5: erda.apps.devflow.flow.FlowService.CreateFlowNode:input_type -> erda.apps.devflow.flow.CreateFlowNodeRequest
	4,  // 6: erda.apps.devflow.flow.FlowService.operationDeploy:input_type -> erda.apps.devflow.flow.OperationDeployRequest
	6,  // 7: erda.apps.devflow.flow.FlowService.DeleteFlowNode:input_type -> erda.apps.devflow.flow.DeleteFlowNodeRequest
	8,  // 8: erda.apps.devflow.flow.FlowService.Reconstruction:input_type -> erda.apps.devflow.flow.ReconstructionRequest
	11, // 9: erda.apps.devflow.flow.FlowService.GetDevFlowInfo:input_type -> erda.apps.devflow.flow.GetDevFlowInfoRequest
	3,  // 10: erda.apps.devflow.flow.FlowService.CreateFlowNode:output_type -> erda.apps.devflow.flow.CreateFlowNodeResponse
	5,  // 11: erda.apps.devflow.flow.FlowService.operationDeploy:output_type -> erda.apps.devflow.flow.OperationDeployResponse
	7,  // 12: erda.apps.devflow.flow.FlowService.DeleteFlowNode:output_type -> erda.apps.devflow.flow.DeleteFlowNodeResponse
	9,  // 13: erda.apps.devflow.flow.FlowService.Reconstruction:output_type -> erda.apps.devflow.flow.ReconstructionResponse
	14, // 14: erda.apps.devflow.flow.FlowService.GetDevFlowInfo:output_type -> erda.apps.devflow.flow.GetDevFlowInfoResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_flow_proto_init() }
func file_flow_proto_init() {
	if File_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueRelationExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevFlowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconstructionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconstructionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStepInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevFlowInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevFlowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevFlowInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flow_proto_goTypes,
		DependencyIndexes: file_flow_proto_depIdxs,
		MessageInfos:      file_flow_proto_msgTypes,
	}.Build()
	File_flow_proto = out.File
	file_flow_proto_rawDesc = nil
	file_flow_proto_goTypes = nil
	file_flow_proto_depIdxs = nil
}
