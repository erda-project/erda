// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: issuerelation.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// IssueRelationServiceClient is the client API for IssueRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueRelationServiceClient interface {
	Create(ctx context.Context, in *CreateIssueRelationRequest, opts ...grpc.CallOption) (*CreateIssueRelationResponse, error)
	Delete(ctx context.Context, in *DeleteIssueRelationRequest, opts ...grpc.CallOption) (*DeleteIssueRelationResponse, error)
	List(ctx context.Context, in *ListIssueRelationRequest, opts ...grpc.CallOption) (*ListIssueRelationResponse, error)
}

type issueRelationServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewIssueRelationServiceClient(cc grpc1.ClientConnInterface) IssueRelationServiceClient {
	return &issueRelationServiceClient{cc}
}

func (c *issueRelationServiceClient) Create(ctx context.Context, in *CreateIssueRelationRequest, opts ...grpc.CallOption) (*CreateIssueRelationResponse, error) {
	out := new(CreateIssueRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.issuerelation.IssueRelationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRelationServiceClient) Delete(ctx context.Context, in *DeleteIssueRelationRequest, opts ...grpc.CallOption) (*DeleteIssueRelationResponse, error) {
	out := new(DeleteIssueRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.issuerelation.IssueRelationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRelationServiceClient) List(ctx context.Context, in *ListIssueRelationRequest, opts ...grpc.CallOption) (*ListIssueRelationResponse, error) {
	out := new(ListIssueRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.apps.devflow.issuerelation.IssueRelationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueRelationServiceServer is the server API for IssueRelationService service.
// All implementations should embed UnimplementedIssueRelationServiceServer
// for forward compatibility
type IssueRelationServiceServer interface {
	Create(context.Context, *CreateIssueRelationRequest) (*CreateIssueRelationResponse, error)
	Delete(context.Context, *DeleteIssueRelationRequest) (*DeleteIssueRelationResponse, error)
	List(context.Context, *ListIssueRelationRequest) (*ListIssueRelationResponse, error)
}

// UnimplementedIssueRelationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIssueRelationServiceServer struct {
}

func (*UnimplementedIssueRelationServiceServer) Create(context.Context, *CreateIssueRelationRequest) (*CreateIssueRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedIssueRelationServiceServer) Delete(context.Context, *DeleteIssueRelationRequest) (*DeleteIssueRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedIssueRelationServiceServer) List(context.Context, *ListIssueRelationRequest) (*ListIssueRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterIssueRelationServiceServer(s grpc1.ServiceRegistrar, srv IssueRelationServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_IssueRelationService_serviceDesc(srv, opts...), srv)
}

var _IssueRelationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.apps.devflow.issuerelation.IssueRelationService",
	HandlerType: (*IssueRelationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "issuerelation.proto",
}

func _get_IssueRelationService_serviceDesc(srv IssueRelationServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_IssueRelationService_Create_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Create(ctx, req.(*CreateIssueRelationRequest))
	}
	var _IssueRelationService_Create_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueRelationService_Create_info = transport.NewServiceInfo("erda.apps.devflow.issuerelation.IssueRelationService", "Create", srv)
		_IssueRelationService_Create_Handler = h.Interceptor(_IssueRelationService_Create_Handler)
	}

	_IssueRelationService_Delete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Delete(ctx, req.(*DeleteIssueRelationRequest))
	}
	var _IssueRelationService_Delete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueRelationService_Delete_info = transport.NewServiceInfo("erda.apps.devflow.issuerelation.IssueRelationService", "Delete", srv)
		_IssueRelationService_Delete_Handler = h.Interceptor(_IssueRelationService_Delete_Handler)
	}

	_IssueRelationService_List_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.List(ctx, req.(*ListIssueRelationRequest))
	}
	var _IssueRelationService_List_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueRelationService_List_info = transport.NewServiceInfo("erda.apps.devflow.issuerelation.IssueRelationService", "List", srv)
		_IssueRelationService_List_Handler = h.Interceptor(_IssueRelationService_List_Handler)
	}

	var serviceDesc = _IssueRelationService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateIssueRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueRelationServiceServer).Create(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueRelationService_Create_info)
				}
				if interceptor == nil {
					return _IssueRelationService_Create_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.issuerelation.IssueRelationService/Create",
				}
				return interceptor(ctx, in, info, _IssueRelationService_Create_Handler)
			},
		},
		{
			MethodName: "Delete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteIssueRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueRelationServiceServer).Delete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueRelationService_Delete_info)
				}
				if interceptor == nil {
					return _IssueRelationService_Delete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.issuerelation.IssueRelationService/Delete",
				}
				return interceptor(ctx, in, info, _IssueRelationService_Delete_Handler)
			},
		},
		{
			MethodName: "List",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListIssueRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueRelationServiceServer).List(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueRelationService_List_info)
				}
				if interceptor == nil {
					return _IssueRelationService_List_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.apps.devflow.issuerelation.IssueRelationService/List",
				}
				return interceptor(ctx, in, info, _IssueRelationService_List_Handler)
			},
		},
	}
	return &serviceDesc
}
