// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: issuerelation.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/apps/devflow/issuerelation/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// IssueRelationService issuerelation.proto
	IssueRelationService() pb.IssueRelationServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		issueRelationService: pb.NewIssueRelationServiceClient(cc),
	}
}

type serviceClients struct {
	issueRelationService pb.IssueRelationServiceClient
}

func (c *serviceClients) IssueRelationService() pb.IssueRelationServiceClient {
	return c.issueRelationService
}

type issueRelationServiceWrapper struct {
	client pb.IssueRelationServiceClient
	opts   []grpc1.CallOption
}

func (s *issueRelationServiceWrapper) Create(ctx context.Context, req *pb.CreateIssueRelationRequest) (*pb.CreateIssueRelationResponse, error) {
	return s.client.Create(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *issueRelationServiceWrapper) Delete(ctx context.Context, req *pb.DeleteIssueRelationRequest) (*pb.DeleteIssueRelationResponse, error) {
	return s.client.Delete(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *issueRelationServiceWrapper) List(ctx context.Context, req *pb.ListIssueRelationRequest) (*pb.ListIssueRelationResponse, error) {
	return s.client.List(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
