// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: notify.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateNotifyHistoryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyTarget)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Target)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifySource)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateNotifyHistoryResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryNotifyHistoriesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryNotifyHistoriesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryNotifyHistoryData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyHistory)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyStatusRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyStatusResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyHistogramRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyHistogramResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyHistogramData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*StatisticValue)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryAlertNotifyHistoriesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryAlertNotifyHistoriesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertNotifyHistories)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertNotifyIndex)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAlertNotifyDetailRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAlertNotifyDetailResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertNotifyDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTypeNotifyHistogramRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTypeNotifyHistogramResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TypeNotifyHistogram)(nil)

// CreateNotifyHistoryRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateNotifyHistoryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "notifyName":
				m.NotifyName = vals[0]
			case "notifyItemDisplayName":
				m.NotifyItemDisplayName = vals[0]
			case "channel":
				m.Channel = vals[0]
			case "notifySource":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
			case "notifySource.id":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifySource.Id = val
			case "notifySource.name":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				m.NotifySource.Name = vals[0]
			case "notifySource.sourceType":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				m.NotifySource.SourceType = vals[0]
			case "notifySource.sourceID":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				m.NotifySource.SourceID = vals[0]
			case "notifySource.params":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.null_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.number_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.string_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.bool_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.struct_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.list_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "status":
				m.Status = vals[0]
			case "errorMsg":
				m.ErrorMsg = vals[0]
			case "orgID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "label":
				m.Label = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// NotifyTarget implement urlenc.URLValuesUnmarshaler.
func (m *NotifyTarget) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// Target implement urlenc.URLValuesUnmarshaler.
func (m *Target) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "receiver":
				m.Receiver = vals[0]
			case "secret":
				m.Secret = vals[0]
			}
		}
	}
	return nil
}

// NotifySource implement urlenc.URLValuesUnmarshaler.
func (m *NotifySource) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "sourceType":
				m.SourceType = vals[0]
			case "sourceID":
				m.SourceID = vals[0]
			case "params":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Params = val
					} else {
						m.Params = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateNotifyHistoryResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateNotifyHistoryResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// QueryNotifyHistoriesRequest implement urlenc.URLValuesUnmarshaler.
func (m *QueryNotifyHistoriesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "channel":
				m.Channel = vals[0]
			case "notifyName":
				m.NotifyName = vals[0]
			case "startTime":
				m.StartTime = vals[0]
			case "endTime":
				m.EndTime = vals[0]
			case "label":
				m.Label = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			}
		}
	}
	return nil
}

// QueryNotifyHistoriesResponse implement urlenc.URLValuesUnmarshaler.
func (m *QueryNotifyHistoriesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &QueryNotifyHistoryData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &QueryNotifyHistoryData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// QueryNotifyHistoryData implement urlenc.URLValuesUnmarshaler.
func (m *QueryNotifyHistoryData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// NotifyHistory implement urlenc.URLValuesUnmarshaler.
func (m *NotifyHistory) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "notifyName":
				m.NotifyName = vals[0]
			case "notifyItemDisplayName":
				m.NotifyItemDisplayName = vals[0]
			case "channel":
				m.Channel = vals[0]
			case "notifySource":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
			case "notifySource.id":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifySource.Id = val
			case "notifySource.name":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				m.NotifySource.Name = vals[0]
			case "notifySource.sourceType":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				m.NotifySource.SourceType = vals[0]
			case "notifySource.sourceID":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				m.NotifySource.SourceID = vals[0]
			case "notifySource.params":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.null_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.number_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.string_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.bool_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.struct_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "notifySource.params.list_value":
				if m.NotifySource == nil {
					m.NotifySource = &NotifySource{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.NotifySource.Params = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.NotifySource.Params = val
					} else {
						m.NotifySource.Params = structpb.NewStringValue(vals[0])
					}
				}
			case "status":
				m.Status = vals[0]
			case "errorMsg":
				m.ErrorMsg = vals[0]
			case "label":
				m.Label = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// GetNotifyStatusRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyStatusRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "startTime":
				m.StartTime = vals[0]
			case "endTime":
				m.EndTime = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			}
		}
	}
	return nil
}

// GetNotifyStatusResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyStatusResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetNotifyHistogramRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyHistogramRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "startTime":
				m.StartTime = vals[0]
			case "endTime":
				m.EndTime = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "points":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Points = val
			case "statistic":
				m.Statistic = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			}
		}
	}
	return nil
}

// GetNotifyHistogramResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyHistogramResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &NotifyHistogramData{}
				}
			case "data.timestamp":
				if m.Data == nil {
					m.Data = &NotifyHistogramData{}
				}
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Data.Timestamp = list
			}
		}
	}
	return nil
}

// NotifyHistogramData implement urlenc.URLValuesUnmarshaler.
func (m *NotifyHistogramData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "timestamp":
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Timestamp = list
			}
		}
	}
	return nil
}

// StatisticValue implement urlenc.URLValuesUnmarshaler.
func (m *StatisticValue) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "value":
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Value = list
			}
		}
	}
	return nil
}

// QueryAlertNotifyHistoriesRequest implement urlenc.URLValuesUnmarshaler.
func (m *QueryAlertNotifyHistoriesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "notifyName":
				m.NotifyName = vals[0]
			case "status":
				m.Status = vals[0]
			case "channel":
				m.Channel = vals[0]
			case "alertID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AlertID = val
			case "sendTime":
				m.SendTime = vals
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "timeOrder":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.TimeOrder = val
			}
		}
	}
	return nil
}

// QueryAlertNotifyHistoriesResponse implement urlenc.URLValuesUnmarshaler.
func (m *QueryAlertNotifyHistoriesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &AlertNotifyHistories{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &AlertNotifyHistories{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// AlertNotifyHistories implement urlenc.URLValuesUnmarshaler.
func (m *AlertNotifyHistories) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// AlertNotifyIndex implement urlenc.URLValuesUnmarshaler.
func (m *AlertNotifyIndex) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "notifyID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyID = val
			case "notifyName":
				m.NotifyName = vals[0]
			case "status":
				m.Status = vals[0]
			case "channel":
				m.Channel = vals[0]
			case "attributes":
				m.Attributes = vals[0]
			case "sendTime":
				if m.SendTime == nil {
					m.SendTime = &timestamppb.Timestamp{}
				}
			case "sendTime.seconds":
				if m.SendTime == nil {
					m.SendTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SendTime.Seconds = val
			case "sendTime.nanos":
				if m.SendTime == nil {
					m.SendTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SendTime.Nanos = int32(val)
			}
		}
	}
	return nil
}

// GetAlertNotifyDetailRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAlertNotifyDetailRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// GetAlertNotifyDetailResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAlertNotifyDetailResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
			case "data.channel":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				m.Data.Channel = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				m.Data.Status = vals[0]
			case "data.notifyGroup":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				m.Data.NotifyGroup = vals[0]
			case "data.notifyRule":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				m.Data.NotifyRule = vals[0]
			case "data.notifyContent":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				m.Data.NotifyContent = vals[0]
			case "data.sendTime":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				if m.Data.SendTime == nil {
					m.Data.SendTime = &timestamppb.Timestamp{}
				}
			case "data.sendTime.seconds":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				if m.Data.SendTime == nil {
					m.Data.SendTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.SendTime.Seconds = val
			case "data.sendTime.nanos":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				if m.Data.SendTime == nil {
					m.Data.SendTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.SendTime.Nanos = int32(val)
			case "data.alertName":
				if m.Data == nil {
					m.Data = &AlertNotifyDetail{}
				}
				m.Data.AlertName = vals[0]
			}
		}
	}
	return nil
}

// AlertNotifyDetail implement urlenc.URLValuesUnmarshaler.
func (m *AlertNotifyDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "channel":
				m.Channel = vals[0]
			case "status":
				m.Status = vals[0]
			case "notifyGroup":
				m.NotifyGroup = vals[0]
			case "notifyRule":
				m.NotifyRule = vals[0]
			case "notifyContent":
				m.NotifyContent = vals[0]
			case "sendTime":
				if m.SendTime == nil {
					m.SendTime = &timestamppb.Timestamp{}
				}
			case "sendTime.seconds":
				if m.SendTime == nil {
					m.SendTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SendTime.Seconds = val
			case "sendTime.nanos":
				if m.SendTime == nil {
					m.SendTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SendTime.Nanos = int32(val)
			case "alertName":
				m.AlertName = vals[0]
			}
		}
	}
	return nil
}

// GetTypeNotifyHistogramRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetTypeNotifyHistogramRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "startTime":
				m.StartTime = vals[0]
			case "endTime":
				m.EndTime = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "statistic":
				m.Statistic = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			}
		}
	}
	return nil
}

// GetTypeNotifyHistogramResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetTypeNotifyHistogramResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &TypeNotifyHistogram{}
				}
			}
		}
	}
	return nil
}

// TypeNotifyHistogram implement urlenc.URLValuesUnmarshaler.
func (m *TypeNotifyHistogram) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
