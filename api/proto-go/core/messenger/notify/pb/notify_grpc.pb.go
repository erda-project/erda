// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: notify.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// NotifyServiceClient is the client API for NotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyServiceClient interface {
	CreateNotifyHistory(ctx context.Context, in *CreateNotifyHistoryRequest, opts ...grpc.CallOption) (*CreateNotifyHistoryResponse, error)
	QueryNotifyHistories(ctx context.Context, in *QueryNotifyHistoriesRequest, opts ...grpc.CallOption) (*QueryNotifyHistoriesResponse, error)
	GetNotifyStatus(ctx context.Context, in *GetNotifyStatusRequest, opts ...grpc.CallOption) (*GetNotifyStatusResponse, error)
	GetNotifyHistogram(ctx context.Context, in *GetNotifyHistogramRequest, opts ...grpc.CallOption) (*GetNotifyHistogramResponse, error)
	QueryAlertNotifyHistories(ctx context.Context, in *QueryAlertNotifyHistoriesRequest, opts ...grpc.CallOption) (*QueryAlertNotifyHistoriesResponse, error)
	GetAlertNotifyDetail(ctx context.Context, in *GetAlertNotifyDetailRequest, opts ...grpc.CallOption) (*GetAlertNotifyDetailResponse, error)
	GetTypeNotifyHistogram(ctx context.Context, in *GetTypeNotifyHistogramRequest, opts ...grpc.CallOption) (*GetTypeNotifyHistogramResponse, error)
}

type notifyServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewNotifyServiceClient(cc grpc1.ClientConnInterface) NotifyServiceClient {
	return &notifyServiceClient{cc}
}

func (c *notifyServiceClient) CreateNotifyHistory(ctx context.Context, in *CreateNotifyHistoryRequest, opts ...grpc.CallOption) (*CreateNotifyHistoryResponse, error) {
	out := new(CreateNotifyHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/CreateNotifyHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryNotifyHistories(ctx context.Context, in *QueryNotifyHistoriesRequest, opts ...grpc.CallOption) (*QueryNotifyHistoriesResponse, error) {
	out := new(QueryNotifyHistoriesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/QueryNotifyHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetNotifyStatus(ctx context.Context, in *GetNotifyStatusRequest, opts ...grpc.CallOption) (*GetNotifyStatusResponse, error) {
	out := new(GetNotifyStatusResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/GetNotifyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetNotifyHistogram(ctx context.Context, in *GetNotifyHistogramRequest, opts ...grpc.CallOption) (*GetNotifyHistogramResponse, error) {
	out := new(GetNotifyHistogramResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/GetNotifyHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryAlertNotifyHistories(ctx context.Context, in *QueryAlertNotifyHistoriesRequest, opts ...grpc.CallOption) (*QueryAlertNotifyHistoriesResponse, error) {
	out := new(QueryAlertNotifyHistoriesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/QueryAlertNotifyHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetAlertNotifyDetail(ctx context.Context, in *GetAlertNotifyDetailRequest, opts ...grpc.CallOption) (*GetAlertNotifyDetailResponse, error) {
	out := new(GetAlertNotifyDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/GetAlertNotifyDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) GetTypeNotifyHistogram(ctx context.Context, in *GetTypeNotifyHistogramRequest, opts ...grpc.CallOption) (*GetTypeNotifyHistogramResponse, error) {
	out := new(GetTypeNotifyHistogramResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.notify.NotifyService/GetTypeNotifyHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServiceServer is the server API for NotifyService service.
// All implementations should embed UnimplementedNotifyServiceServer
// for forward compatibility
type NotifyServiceServer interface {
	CreateNotifyHistory(context.Context, *CreateNotifyHistoryRequest) (*CreateNotifyHistoryResponse, error)
	QueryNotifyHistories(context.Context, *QueryNotifyHistoriesRequest) (*QueryNotifyHistoriesResponse, error)
	GetNotifyStatus(context.Context, *GetNotifyStatusRequest) (*GetNotifyStatusResponse, error)
	GetNotifyHistogram(context.Context, *GetNotifyHistogramRequest) (*GetNotifyHistogramResponse, error)
	QueryAlertNotifyHistories(context.Context, *QueryAlertNotifyHistoriesRequest) (*QueryAlertNotifyHistoriesResponse, error)
	GetAlertNotifyDetail(context.Context, *GetAlertNotifyDetailRequest) (*GetAlertNotifyDetailResponse, error)
	GetTypeNotifyHistogram(context.Context, *GetTypeNotifyHistogramRequest) (*GetTypeNotifyHistogramResponse, error)
}

// UnimplementedNotifyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotifyServiceServer struct {
}

func (*UnimplementedNotifyServiceServer) CreateNotifyHistory(context.Context, *CreateNotifyHistoryRequest) (*CreateNotifyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyHistory not implemented")
}
func (*UnimplementedNotifyServiceServer) QueryNotifyHistories(context.Context, *QueryNotifyHistoriesRequest) (*QueryNotifyHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNotifyHistories not implemented")
}
func (*UnimplementedNotifyServiceServer) GetNotifyStatus(context.Context, *GetNotifyStatusRequest) (*GetNotifyStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyStatus not implemented")
}
func (*UnimplementedNotifyServiceServer) GetNotifyHistogram(context.Context, *GetNotifyHistogramRequest) (*GetNotifyHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyHistogram not implemented")
}
func (*UnimplementedNotifyServiceServer) QueryAlertNotifyHistories(context.Context, *QueryAlertNotifyHistoriesRequest) (*QueryAlertNotifyHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertNotifyHistories not implemented")
}
func (*UnimplementedNotifyServiceServer) GetAlertNotifyDetail(context.Context, *GetAlertNotifyDetailRequest) (*GetAlertNotifyDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertNotifyDetail not implemented")
}
func (*UnimplementedNotifyServiceServer) GetTypeNotifyHistogram(context.Context, *GetTypeNotifyHistogramRequest) (*GetTypeNotifyHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeNotifyHistogram not implemented")
}

func RegisterNotifyServiceServer(s grpc1.ServiceRegistrar, srv NotifyServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_NotifyService_serviceDesc(srv, opts...), srv)
}

var _NotifyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.messenger.notify.NotifyService",
	HandlerType: (*NotifyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "notify.proto",
}

func _get_NotifyService_serviceDesc(srv NotifyServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_NotifyService_CreateNotifyHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateNotifyHistory(ctx, req.(*CreateNotifyHistoryRequest))
	}
	var _NotifyService_CreateNotifyHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_CreateNotifyHistory_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "CreateNotifyHistory", srv)
		_NotifyService_CreateNotifyHistory_Handler = h.Interceptor(_NotifyService_CreateNotifyHistory_Handler)
	}

	_NotifyService_QueryNotifyHistories_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryNotifyHistories(ctx, req.(*QueryNotifyHistoriesRequest))
	}
	var _NotifyService_QueryNotifyHistories_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_QueryNotifyHistories_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "QueryNotifyHistories", srv)
		_NotifyService_QueryNotifyHistories_Handler = h.Interceptor(_NotifyService_QueryNotifyHistories_Handler)
	}

	_NotifyService_GetNotifyStatus_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetNotifyStatus(ctx, req.(*GetNotifyStatusRequest))
	}
	var _NotifyService_GetNotifyStatus_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetNotifyStatus_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "GetNotifyStatus", srv)
		_NotifyService_GetNotifyStatus_Handler = h.Interceptor(_NotifyService_GetNotifyStatus_Handler)
	}

	_NotifyService_GetNotifyHistogram_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetNotifyHistogram(ctx, req.(*GetNotifyHistogramRequest))
	}
	var _NotifyService_GetNotifyHistogram_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetNotifyHistogram_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "GetNotifyHistogram", srv)
		_NotifyService_GetNotifyHistogram_Handler = h.Interceptor(_NotifyService_GetNotifyHistogram_Handler)
	}

	_NotifyService_QueryAlertNotifyHistories_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertNotifyHistories(ctx, req.(*QueryAlertNotifyHistoriesRequest))
	}
	var _NotifyService_QueryAlertNotifyHistories_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_QueryAlertNotifyHistories_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "QueryAlertNotifyHistories", srv)
		_NotifyService_QueryAlertNotifyHistories_Handler = h.Interceptor(_NotifyService_QueryAlertNotifyHistories_Handler)
	}

	_NotifyService_GetAlertNotifyDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertNotifyDetail(ctx, req.(*GetAlertNotifyDetailRequest))
	}
	var _NotifyService_GetAlertNotifyDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetAlertNotifyDetail_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "GetAlertNotifyDetail", srv)
		_NotifyService_GetAlertNotifyDetail_Handler = h.Interceptor(_NotifyService_GetAlertNotifyDetail_Handler)
	}

	_NotifyService_GetTypeNotifyHistogram_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetTypeNotifyHistogram(ctx, req.(*GetTypeNotifyHistogramRequest))
	}
	var _NotifyService_GetTypeNotifyHistogram_info transport.ServiceInfo
	if h.Interceptor != nil {
		_NotifyService_GetTypeNotifyHistogram_info = transport.NewServiceInfo("erda.core.messenger.notify.NotifyService", "GetTypeNotifyHistogram", srv)
		_NotifyService_GetTypeNotifyHistogram_Handler = h.Interceptor(_NotifyService_GetTypeNotifyHistogram_Handler)
	}

	var serviceDesc = _NotifyService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateNotifyHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateNotifyHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).CreateNotifyHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_CreateNotifyHistory_info)
				}
				if interceptor == nil {
					return _NotifyService_CreateNotifyHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/CreateNotifyHistory",
				}
				return interceptor(ctx, in, info, _NotifyService_CreateNotifyHistory_Handler)
			},
		},
		{
			MethodName: "QueryNotifyHistories",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryNotifyHistoriesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).QueryNotifyHistories(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_QueryNotifyHistories_info)
				}
				if interceptor == nil {
					return _NotifyService_QueryNotifyHistories_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/QueryNotifyHistories",
				}
				return interceptor(ctx, in, info, _NotifyService_QueryNotifyHistories_Handler)
			},
		},
		{
			MethodName: "GetNotifyStatus",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetNotifyStatusRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetNotifyStatus(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetNotifyStatus_info)
				}
				if interceptor == nil {
					return _NotifyService_GetNotifyStatus_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/GetNotifyStatus",
				}
				return interceptor(ctx, in, info, _NotifyService_GetNotifyStatus_Handler)
			},
		},
		{
			MethodName: "GetNotifyHistogram",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetNotifyHistogramRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetNotifyHistogram(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetNotifyHistogram_info)
				}
				if interceptor == nil {
					return _NotifyService_GetNotifyHistogram_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/GetNotifyHistogram",
				}
				return interceptor(ctx, in, info, _NotifyService_GetNotifyHistogram_Handler)
			},
		},
		{
			MethodName: "QueryAlertNotifyHistories",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertNotifyHistoriesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).QueryAlertNotifyHistories(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_QueryAlertNotifyHistories_info)
				}
				if interceptor == nil {
					return _NotifyService_QueryAlertNotifyHistories_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/QueryAlertNotifyHistories",
				}
				return interceptor(ctx, in, info, _NotifyService_QueryAlertNotifyHistories_Handler)
			},
		},
		{
			MethodName: "GetAlertNotifyDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertNotifyDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetAlertNotifyDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetAlertNotifyDetail_info)
				}
				if interceptor == nil {
					return _NotifyService_GetAlertNotifyDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/GetAlertNotifyDetail",
				}
				return interceptor(ctx, in, info, _NotifyService_GetAlertNotifyDetail_Handler)
			},
		},
		{
			MethodName: "GetTypeNotifyHistogram",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetTypeNotifyHistogramRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(NotifyServiceServer).GetTypeNotifyHistogram(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _NotifyService_GetTypeNotifyHistogram_info)
				}
				if interceptor == nil {
					return _NotifyService_GetTypeNotifyHistogram_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.notify.NotifyService/GetTypeNotifyHistogram",
				}
				return interceptor(ctx, in, info, _NotifyService_GetTypeNotifyHistogram_Handler)
			},
		},
	}
	return &serviceDesc
}
