// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: eventbox.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// EventBoxServiceClient is the client API for EventBoxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventBoxServiceClient interface {
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	PrefixGet(ctx context.Context, in *PrefixGetRequest, opts ...grpc.CallOption) (*PrefixGetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetSMTPInfo(ctx context.Context, in *GetSMTPInfoRequest, opts ...grpc.CallOption) (*GetSMTPInfoResponse, error)
	ListHooks(ctx context.Context, in *ListHooksRequest, opts ...grpc.CallOption) (*ListHooksResponse, error)
	InspectHook(ctx context.Context, in *InspectHookRequest, opts ...grpc.CallOption) (*InspectHookResponse, error)
	CreateHook(ctx context.Context, in *CreateHookRequest, opts ...grpc.CallOption) (*CreateHookResponse, error)
	EditHook(ctx context.Context, in *EditHookRequest, opts ...grpc.CallOption) (*EditHookResponse, error)
	PingHook(ctx context.Context, in *PingHookRequest, opts ...grpc.CallOption) (*PingHookResponse, error)
	DeleteHook(ctx context.Context, in *DeleteHookRequest, opts ...grpc.CallOption) (*DeleteHookResponse, error)
	ListHookEvents(ctx context.Context, in *ListHookEventsRequest, opts ...grpc.CallOption) (*ListHookEventsResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type eventBoxServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewEventBoxServiceClient(cc grpc1.ClientConnInterface) EventBoxServiceClient {
	return &eventBoxServiceClient{cc}
}

func (c *eventBoxServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) PrefixGet(ctx context.Context, in *PrefixGetRequest, opts ...grpc.CallOption) (*PrefixGetResponse, error) {
	out := new(PrefixGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/PrefixGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) GetSMTPInfo(ctx context.Context, in *GetSMTPInfoRequest, opts ...grpc.CallOption) (*GetSMTPInfoResponse, error) {
	out := new(GetSMTPInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/GetSMTPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) ListHooks(ctx context.Context, in *ListHooksRequest, opts ...grpc.CallOption) (*ListHooksResponse, error) {
	out := new(ListHooksResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/ListHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) InspectHook(ctx context.Context, in *InspectHookRequest, opts ...grpc.CallOption) (*InspectHookResponse, error) {
	out := new(InspectHookResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/InspectHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) CreateHook(ctx context.Context, in *CreateHookRequest, opts ...grpc.CallOption) (*CreateHookResponse, error) {
	out := new(CreateHookResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/CreateHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) EditHook(ctx context.Context, in *EditHookRequest, opts ...grpc.CallOption) (*EditHookResponse, error) {
	out := new(EditHookResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/EditHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) PingHook(ctx context.Context, in *PingHookRequest, opts ...grpc.CallOption) (*PingHookResponse, error) {
	out := new(PingHookResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/PingHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) DeleteHook(ctx context.Context, in *DeleteHookRequest, opts ...grpc.CallOption) (*DeleteHookResponse, error) {
	out := new(DeleteHookResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/DeleteHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) ListHookEvents(ctx context.Context, in *ListHookEventsRequest, opts ...grpc.CallOption) (*ListHookEventsResponse, error) {
	out := new(ListHookEventsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/ListHookEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBoxServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/erda.core.messenger.eventbox.EventBoxService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventBoxServiceServer is the server API for EventBoxService service.
// All implementations should embed UnimplementedEventBoxServiceServer
// for forward compatibility
type EventBoxServiceServer interface {
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	PrefixGet(context.Context, *PrefixGetRequest) (*PrefixGetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	GetSMTPInfo(context.Context, *GetSMTPInfoRequest) (*GetSMTPInfoResponse, error)
	ListHooks(context.Context, *ListHooksRequest) (*ListHooksResponse, error)
	InspectHook(context.Context, *InspectHookRequest) (*InspectHookResponse, error)
	CreateHook(context.Context, *CreateHookRequest) (*CreateHookResponse, error)
	EditHook(context.Context, *EditHookRequest) (*EditHookResponse, error)
	PingHook(context.Context, *PingHookRequest) (*PingHookResponse, error)
	DeleteHook(context.Context, *DeleteHookRequest) (*DeleteHookResponse, error)
	ListHookEvents(context.Context, *ListHookEventsRequest) (*ListHookEventsResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
}

// UnimplementedEventBoxServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventBoxServiceServer struct {
}

func (*UnimplementedEventBoxServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (*UnimplementedEventBoxServiceServer) PrefixGet(context.Context, *PrefixGetRequest) (*PrefixGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrefixGet not implemented")
}
func (*UnimplementedEventBoxServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedEventBoxServiceServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedEventBoxServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedEventBoxServiceServer) GetSMTPInfo(context.Context, *GetSMTPInfoRequest) (*GetSMTPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMTPInfo not implemented")
}
func (*UnimplementedEventBoxServiceServer) ListHooks(context.Context, *ListHooksRequest) (*ListHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (*UnimplementedEventBoxServiceServer) InspectHook(context.Context, *InspectHookRequest) (*InspectHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectHook not implemented")
}
func (*UnimplementedEventBoxServiceServer) CreateHook(context.Context, *CreateHookRequest) (*CreateHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (*UnimplementedEventBoxServiceServer) EditHook(context.Context, *EditHookRequest) (*EditHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditHook not implemented")
}
func (*UnimplementedEventBoxServiceServer) PingHook(context.Context, *PingHookRequest) (*PingHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingHook not implemented")
}
func (*UnimplementedEventBoxServiceServer) DeleteHook(context.Context, *DeleteHookRequest) (*DeleteHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (*UnimplementedEventBoxServiceServer) ListHookEvents(context.Context, *ListHookEventsRequest) (*ListHookEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookEvents not implemented")
}
func (*UnimplementedEventBoxServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}

func RegisterEventBoxServiceServer(s grpc1.ServiceRegistrar, srv EventBoxServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_EventBoxService_serviceDesc(srv, opts...), srv)
}

var _EventBoxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.messenger.eventbox.EventBoxService",
	HandlerType: (*EventBoxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "eventbox.proto",
}

func _get_EventBoxService_serviceDesc(srv EventBoxServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_EventBoxService_CreateMessage_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	var _EventBoxService_CreateMessage_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_CreateMessage_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "CreateMessage", srv)
		_EventBoxService_CreateMessage_Handler = h.Interceptor(_EventBoxService_CreateMessage_Handler)
	}

	_EventBoxService_PrefixGet_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PrefixGet(ctx, req.(*PrefixGetRequest))
	}
	var _EventBoxService_PrefixGet_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_PrefixGet_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "PrefixGet", srv)
		_EventBoxService_PrefixGet_Handler = h.Interceptor(_EventBoxService_PrefixGet_Handler)
	}

	_EventBoxService_Put_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Put(ctx, req.(*PutRequest))
	}
	var _EventBoxService_Put_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_Put_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "Put", srv)
		_EventBoxService_Put_Handler = h.Interceptor(_EventBoxService_Put_Handler)
	}

	_EventBoxService_Del_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Del(ctx, req.(*DelRequest))
	}
	var _EventBoxService_Del_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_Del_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "Del", srv)
		_EventBoxService_Del_Handler = h.Interceptor(_EventBoxService_Del_Handler)
	}

	_EventBoxService_GetVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetVersion(ctx, req.(*GetVersionRequest))
	}
	var _EventBoxService_GetVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_GetVersion_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "GetVersion", srv)
		_EventBoxService_GetVersion_Handler = h.Interceptor(_EventBoxService_GetVersion_Handler)
	}

	_EventBoxService_GetSMTPInfo_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetSMTPInfo(ctx, req.(*GetSMTPInfoRequest))
	}
	var _EventBoxService_GetSMTPInfo_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_GetSMTPInfo_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "GetSMTPInfo", srv)
		_EventBoxService_GetSMTPInfo_Handler = h.Interceptor(_EventBoxService_GetSMTPInfo_Handler)
	}

	_EventBoxService_ListHooks_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListHooks(ctx, req.(*ListHooksRequest))
	}
	var _EventBoxService_ListHooks_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_ListHooks_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "ListHooks", srv)
		_EventBoxService_ListHooks_Handler = h.Interceptor(_EventBoxService_ListHooks_Handler)
	}

	_EventBoxService_InspectHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.InspectHook(ctx, req.(*InspectHookRequest))
	}
	var _EventBoxService_InspectHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_InspectHook_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "InspectHook", srv)
		_EventBoxService_InspectHook_Handler = h.Interceptor(_EventBoxService_InspectHook_Handler)
	}

	_EventBoxService_CreateHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateHook(ctx, req.(*CreateHookRequest))
	}
	var _EventBoxService_CreateHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_CreateHook_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "CreateHook", srv)
		_EventBoxService_CreateHook_Handler = h.Interceptor(_EventBoxService_CreateHook_Handler)
	}

	_EventBoxService_EditHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EditHook(ctx, req.(*EditHookRequest))
	}
	var _EventBoxService_EditHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_EditHook_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "EditHook", srv)
		_EventBoxService_EditHook_Handler = h.Interceptor(_EventBoxService_EditHook_Handler)
	}

	_EventBoxService_PingHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PingHook(ctx, req.(*PingHookRequest))
	}
	var _EventBoxService_PingHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_PingHook_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "PingHook", srv)
		_EventBoxService_PingHook_Handler = h.Interceptor(_EventBoxService_PingHook_Handler)
	}

	_EventBoxService_DeleteHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteHook(ctx, req.(*DeleteHookRequest))
	}
	var _EventBoxService_DeleteHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_DeleteHook_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "DeleteHook", srv)
		_EventBoxService_DeleteHook_Handler = h.Interceptor(_EventBoxService_DeleteHook_Handler)
	}

	_EventBoxService_ListHookEvents_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListHookEvents(ctx, req.(*ListHookEventsRequest))
	}
	var _EventBoxService_ListHookEvents_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_ListHookEvents_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "ListHookEvents", srv)
		_EventBoxService_ListHookEvents_Handler = h.Interceptor(_EventBoxService_ListHookEvents_Handler)
	}

	_EventBoxService_Stat_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Stat(ctx, req.(*StatRequest))
	}
	var _EventBoxService_Stat_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EventBoxService_Stat_info = transport.NewServiceInfo("erda.core.messenger.eventbox.EventBoxService", "Stat", srv)
		_EventBoxService_Stat_Handler = h.Interceptor(_EventBoxService_Stat_Handler)
	}

	var serviceDesc = _EventBoxService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateMessageRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).CreateMessage(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_CreateMessage_info)
				}
				if interceptor == nil {
					return _EventBoxService_CreateMessage_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/CreateMessage",
				}
				return interceptor(ctx, in, info, _EventBoxService_CreateMessage_Handler)
			},
		},
		{
			MethodName: "PrefixGet",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PrefixGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).PrefixGet(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_PrefixGet_info)
				}
				if interceptor == nil {
					return _EventBoxService_PrefixGet_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/PrefixGet",
				}
				return interceptor(ctx, in, info, _EventBoxService_PrefixGet_Handler)
			},
		},
		{
			MethodName: "Put",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PutRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).Put(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_Put_info)
				}
				if interceptor == nil {
					return _EventBoxService_Put_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/Put",
				}
				return interceptor(ctx, in, info, _EventBoxService_Put_Handler)
			},
		},
		{
			MethodName: "Del",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DelRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).Del(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_Del_info)
				}
				if interceptor == nil {
					return _EventBoxService_Del_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/Del",
				}
				return interceptor(ctx, in, info, _EventBoxService_Del_Handler)
			},
		},
		{
			MethodName: "GetVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetVersionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).GetVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_GetVersion_info)
				}
				if interceptor == nil {
					return _EventBoxService_GetVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/GetVersion",
				}
				return interceptor(ctx, in, info, _EventBoxService_GetVersion_Handler)
			},
		},
		{
			MethodName: "GetSMTPInfo",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetSMTPInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).GetSMTPInfo(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_GetSMTPInfo_info)
				}
				if interceptor == nil {
					return _EventBoxService_GetSMTPInfo_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/GetSMTPInfo",
				}
				return interceptor(ctx, in, info, _EventBoxService_GetSMTPInfo_Handler)
			},
		},
		{
			MethodName: "ListHooks",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListHooksRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).ListHooks(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_ListHooks_info)
				}
				if interceptor == nil {
					return _EventBoxService_ListHooks_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/ListHooks",
				}
				return interceptor(ctx, in, info, _EventBoxService_ListHooks_Handler)
			},
		},
		{
			MethodName: "InspectHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(InspectHookRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).InspectHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_InspectHook_info)
				}
				if interceptor == nil {
					return _EventBoxService_InspectHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/InspectHook",
				}
				return interceptor(ctx, in, info, _EventBoxService_InspectHook_Handler)
			},
		},
		{
			MethodName: "CreateHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateHookRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).CreateHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_CreateHook_info)
				}
				if interceptor == nil {
					return _EventBoxService_CreateHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/CreateHook",
				}
				return interceptor(ctx, in, info, _EventBoxService_CreateHook_Handler)
			},
		},
		{
			MethodName: "EditHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EditHookRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).EditHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_EditHook_info)
				}
				if interceptor == nil {
					return _EventBoxService_EditHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/EditHook",
				}
				return interceptor(ctx, in, info, _EventBoxService_EditHook_Handler)
			},
		},
		{
			MethodName: "PingHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PingHookRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).PingHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_PingHook_info)
				}
				if interceptor == nil {
					return _EventBoxService_PingHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/PingHook",
				}
				return interceptor(ctx, in, info, _EventBoxService_PingHook_Handler)
			},
		},
		{
			MethodName: "DeleteHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteHookRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).DeleteHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_DeleteHook_info)
				}
				if interceptor == nil {
					return _EventBoxService_DeleteHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/DeleteHook",
				}
				return interceptor(ctx, in, info, _EventBoxService_DeleteHook_Handler)
			},
		},
		{
			MethodName: "ListHookEvents",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListHookEventsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).ListHookEvents(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_ListHookEvents_info)
				}
				if interceptor == nil {
					return _EventBoxService_ListHookEvents_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/ListHookEvents",
				}
				return interceptor(ctx, in, info, _EventBoxService_ListHookEvents_Handler)
			},
		},
		{
			MethodName: "Stat",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(StatRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EventBoxServiceServer).Stat(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EventBoxService_Stat_info)
				}
				if interceptor == nil {
					return _EventBoxService_Stat_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.messenger.eventbox.EventBoxService/Stat",
				}
				return interceptor(ctx, in, info, _EventBoxService_Stat_Handler)
			},
		},
	}
	return &serviceDesc
}
