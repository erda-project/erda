// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: eventbox.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterEventBoxServiceImp eventbox.proto
func RegisterEventBoxServiceImp(regester transport.Register, srv EventBoxServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterEventBoxServiceHandler(regester, EventBoxServiceHandler(srv), _ops.HTTP...)
	RegisterEventBoxServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.messenger.eventbox.EventBoxService",
	)
}

var (
	eventBoxServiceClientType  = reflect.TypeOf((*EventBoxServiceClient)(nil)).Elem()
	eventBoxServiceServerType  = reflect.TypeOf((*EventBoxServiceServer)(nil)).Elem()
	eventBoxServiceHandlerType = reflect.TypeOf((*EventBoxServiceHandler)(nil)).Elem()
)

// EventBoxServiceClientType .
func EventBoxServiceClientType() reflect.Type { return eventBoxServiceClientType }

// EventBoxServiceServerType .
func EventBoxServiceServerType() reflect.Type { return eventBoxServiceServerType }

// EventBoxServiceHandlerType .
func EventBoxServiceHandlerType() reflect.Type { return eventBoxServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		eventBoxServiceClientType,
		// server types
		eventBoxServiceServerType,
		// handler types
		eventBoxServiceHandlerType,
	}
}
