// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: notify_group.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateNotifyGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyTarget)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Target)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateNotifyGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyGroup)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryNotifyGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryNotifyGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryNotifyGroupData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateNotifyGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateNotifyGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyGroupDetailRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetNotifyGroupDetailResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyGroupDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyUser)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteNotifyGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteNotifyGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BatchGetNotifyGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BatchGetNotifyGroupResponse)(nil)

// CreateNotifyGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateNotifyGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "label":
				m.Label = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "autoCreate":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AutoCreate = val
			case "orgId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgId = val
			}
		}
	}
	return nil
}

// NotifyTarget implement urlenc.URLValuesUnmarshaler.
func (m *NotifyTarget) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// Target implement urlenc.URLValuesUnmarshaler.
func (m *Target) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "receiver":
				m.Receiver = vals[0]
			case "secret":
				m.Secret = vals[0]
			}
		}
	}
	return nil
}

// CreateNotifyGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateNotifyGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// NotifyGroup implement urlenc.URLValuesUnmarshaler.
func (m *NotifyGroup) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "creator":
				m.Creator = vals[0]
			case "label":
				m.Label = vals[0]
			}
		}
	}
	return nil
}

// QueryNotifyGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *QueryNotifyGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "label":
				m.Label = vals[0]
			case "name":
				m.Name = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// QueryNotifyGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *QueryNotifyGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &QueryNotifyGroupData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &QueryNotifyGroupData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// QueryNotifyGroupData implement urlenc.URLValuesUnmarshaler.
func (m *QueryNotifyGroupData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// GetNotifyGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "groupID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupID = val
			}
		}
	}
	return nil
}

// GetNotifyGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Id = val
			case "data.name":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				m.Data.Name = vals[0]
			case "data.scopeType":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				m.Data.ScopeType = vals[0]
			case "data.scopeId":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				m.Data.ScopeId = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.creator":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				m.Data.Creator = vals[0]
			case "data.label":
				if m.Data == nil {
					m.Data = &NotifyGroup{}
				}
				m.Data.Label = vals[0]
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// UpdateNotifyGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateNotifyGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "groupID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupID = val
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// UpdateNotifyGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateNotifyGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// GetNotifyGroupDetailRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyGroupDetailRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "groupID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupID = val
			}
		}
	}
	return nil
}

// GetNotifyGroupDetailResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetNotifyGroupDetailResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &NotifyGroupDetail{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &NotifyGroupDetail{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Id = val
			case "data.name":
				if m.Data == nil {
					m.Data = &NotifyGroupDetail{}
				}
				m.Data.Name = vals[0]
			case "data.scopeType":
				if m.Data == nil {
					m.Data = &NotifyGroupDetail{}
				}
				m.Data.ScopeType = vals[0]
			case "data.scopeId":
				if m.Data == nil {
					m.Data = &NotifyGroupDetail{}
				}
				m.Data.ScopeId = vals[0]
			case "data.webhookList":
				if m.Data == nil {
					m.Data = &NotifyGroupDetail{}
				}
				m.Data.WebhookList = vals
			}
		}
	}
	return nil
}

// NotifyGroupDetail implement urlenc.URLValuesUnmarshaler.
func (m *NotifyGroupDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "webhookList":
				m.WebhookList = vals
			}
		}
	}
	return nil
}

// NotifyUser implement urlenc.URLValuesUnmarshaler.
func (m *NotifyUser) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "username":
				m.Username = vals[0]
			case "email":
				m.Email = vals[0]
			case "mobile":
				m.Mobile = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// DeleteNotifyGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteNotifyGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "groupID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupID = val
			}
		}
	}
	return nil
}

// DeleteNotifyGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteNotifyGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// BatchGetNotifyGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *BatchGetNotifyGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ids":
				m.Ids = vals[0]
			}
		}
	}
	return nil
}

// BatchGetNotifyGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *BatchGetNotifyGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
