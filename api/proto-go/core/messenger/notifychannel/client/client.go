// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: channel.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/messenger/notifychannel/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// NotifyChannelService channel.proto
	NotifyChannelService() pb.NotifyChannelServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		notifyChannelService: pb.NewNotifyChannelServiceClient(cc),
	}
}

type serviceClients struct {
	notifyChannelService pb.NotifyChannelServiceClient
}

func (c *serviceClients) NotifyChannelService() pb.NotifyChannelServiceClient {
	return c.notifyChannelService
}

type notifyChannelServiceWrapper struct {
	client pb.NotifyChannelServiceClient
	opts   []grpc1.CallOption
}

func (s *notifyChannelServiceWrapper) CreateNotifyChannel(ctx context.Context, req *pb.CreateNotifyChannelRequest) (*pb.CreateNotifyChannelResponse, error) {
	return s.client.CreateNotifyChannel(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) GetNotifyChannels(ctx context.Context, req *pb.GetNotifyChannelsRequest) (*pb.GetNotifyChannelsResponse, error) {
	return s.client.GetNotifyChannels(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) UpdateNotifyChannel(ctx context.Context, req *pb.UpdateNotifyChannelRequest) (*pb.UpdateNotifyChannelResponse, error) {
	return s.client.UpdateNotifyChannel(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) GetNotifyChannel(ctx context.Context, req *pb.GetNotifyChannelRequest) (*pb.GetNotifyChannelResponse, error) {
	return s.client.GetNotifyChannel(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) DeleteNotifyChannel(ctx context.Context, req *pb.DeleteNotifyChannelRequest) (*pb.DeleteNotifyChannelResponse, error) {
	return s.client.DeleteNotifyChannel(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) GetNotifyChannelTypes(ctx context.Context, req *pb.GetNotifyChannelTypesRequest) (*pb.GetNotifyChannelTypesResponse, error) {
	return s.client.GetNotifyChannelTypes(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) GetNotifyChannelEnabled(ctx context.Context, req *pb.GetNotifyChannelEnabledRequest) (*pb.GetNotifyChannelEnabledResponse, error) {
	return s.client.GetNotifyChannelEnabled(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) UpdateNotifyChannelEnabled(ctx context.Context, req *pb.UpdateNotifyChannelEnabledRequest) (*pb.UpdateNotifyChannelEnabledResponse, error) {
	return s.client.UpdateNotifyChannelEnabled(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) GetNotifyChannelEnabledStatus(ctx context.Context, req *pb.GetNotifyChannelEnabledStatusRequest) (*pb.GetNotifyChannelEnabledStatusResponse, error) {
	return s.client.GetNotifyChannelEnabledStatus(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *notifyChannelServiceWrapper) GetNotifyChannelsEnabled(ctx context.Context, req *pb.GetNotifyChannelsEnabledRequest) (*pb.GetNotifyChannelsEnabledResponse, error) {
	return s.client.GetNotifyChannelsEnabled(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
