// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: channel.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterNotifyChannelServiceImp channel.proto
func RegisterNotifyChannelServiceImp(regester transport.Register, srv NotifyChannelServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterNotifyChannelServiceHandler(regester, NotifyChannelServiceHandler(srv), _ops.HTTP...)
	RegisterNotifyChannelServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.messenger.notifychannel.NotifyChannelService",
	)
}

var (
	notifyChannelServiceClientType  = reflect.TypeOf((*NotifyChannelServiceClient)(nil)).Elem()
	notifyChannelServiceServerType  = reflect.TypeOf((*NotifyChannelServiceServer)(nil)).Elem()
	notifyChannelServiceHandlerType = reflect.TypeOf((*NotifyChannelServiceHandler)(nil)).Elem()
)

// NotifyChannelServiceClientType .
func NotifyChannelServiceClientType() reflect.Type { return notifyChannelServiceClientType }

// NotifyChannelServiceServerType .
func NotifyChannelServiceServerType() reflect.Type { return notifyChannelServiceServerType }

// NotifyChannelServiceHandlerType .
func NotifyChannelServiceHandlerType() reflect.Type { return notifyChannelServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		notifyChannelServiceClientType,
		// server types
		notifyChannelServiceServerType,
		// handler types
		notifyChannelServiceHandlerType,
	}
}
