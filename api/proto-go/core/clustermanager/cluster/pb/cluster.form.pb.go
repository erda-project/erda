// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: cluster.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ErrResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PatchClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PatchClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ClusterInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ClusterSchedConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OpsConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SysConf)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Cluster)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SSH)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FPS)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Storage)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Gluster)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Docker)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Node)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MySQL)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OpenVPN)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Platform)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ManageConfig)(nil)

// ErrResponse implement urlenc.URLValuesUnmarshaler.
func (m *ErrResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "code":
				m.Code = vals[0]
			case "msg":
				m.Msg = vals[0]
			}
		}
	}
	return nil
}

// ListClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterType":
				m.ClusterType = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = uint32(val)
			}
		}
	}
	return nil
}

// ListClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "err":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
			case "err.code":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Code = vals[0]
			case "err.msg":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Msg = vals[0]
			}
		}
	}
	return nil
}

// GetClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "idOrName":
				m.IdOrName = vals[0]
			}
		}
	}
	return nil
}

// GetClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.Id = int32(val)
			case "data.name":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.Name = vals[0]
			case "data.displayName":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.DisplayName = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.Type = vals[0]
			case "data.cloudVendor":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.CloudVendor = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.Logo = vals[0]
			case "data.description":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.Description = vals[0]
			case "data.wildcardDomain":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.WildcardDomain = vals[0]
			case "data.schedConfig":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
			case "data.schedConfig.masterURL":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.MasterURL = vals[0]
			case "data.schedConfig.authType":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.AuthType = vals[0]
			case "data.schedConfig.authUsername":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.AuthUsername = vals[0]
			case "data.schedConfig.authPassword":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.AuthPassword = vals[0]
			case "data.schedConfig.caCrt":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.CaCrt = vals[0]
			case "data.schedConfig.clientCrt":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.ClientCrt = vals[0]
			case "data.schedConfig.clientKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.ClientKey = vals[0]
			case "data.schedConfig.enableTag":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.SchedConfig.EnableTag = val
			case "data.schedConfig.enableWorkspace":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.SchedConfig.EnableWorkspace = val
			case "data.schedConfig.edasConsoleAddr":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.EdasConsoleAddr = vals[0]
			case "data.schedConfig.accessKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.AccessKey = vals[0]
			case "data.schedConfig.accessSecret":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.AccessSecret = vals[0]
			case "data.schedConfig.clusterID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.ClusterID = vals[0]
			case "data.schedConfig.regionID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.RegionID = vals[0]
			case "data.schedConfig.logicalRegionID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.LogicalRegionID = vals[0]
			case "data.schedConfig.k8sAddr":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.K8SAddr = vals[0]
			case "data.schedConfig.regAddr":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.RegAddr = vals[0]
			case "data.schedConfig.cpuSubscribeRatio":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.CpuSubscribeRatio = vals[0]
			case "data.schedConfig.devCPUSubscribeRatio":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.DevCPUSubscribeRatio = vals[0]
			case "data.schedConfig.testCPUSubscribeRatio":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.TestCPUSubscribeRatio = vals[0]
			case "data.schedConfig.stagingCPUSubscribeRatio":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.SchedConfig == nil {
					m.Data.SchedConfig = &ClusterSchedConfig{}
				}
				m.Data.SchedConfig.StagingCPUSubscribeRatio = vals[0]
			case "data.opsConfig":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
			case "data.opsConfig.status":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.Status = vals[0]
			case "data.opsConfig.accessKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.AccessKey = vals[0]
			case "data.opsConfig.secretKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.SecretKey = vals[0]
			case "data.opsConfig.ecsPassword":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.EcsPassword = vals[0]
			case "data.opsConfig.availabilityZones":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.AvailabilityZones = vals[0]
			case "data.opsConfig.vpcID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.VpcID = vals[0]
			case "data.opsConfig.vSwitchIDs":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.VSwitchIDs = vals[0]
			case "data.opsConfig.sgIDs":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.SgIDs = vals[0]
			case "data.opsConfig.chargeType":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.ChargeType = vals[0]
			case "data.opsConfig.chargePeriod":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.OpsConfig.ChargePeriod = int32(val)
			case "data.opsConfig.region":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.Region = vals[0]
			case "data.opsConfig.scaleMode":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.ScaleMode = vals[0]
			case "data.opsConfig.essGroupID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.EssGroupID = vals[0]
			case "data.opsConfig.essScaleRule":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.EssScaleRule = vals[0]
			case "data.opsConfig.scheduledTaskId":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.ScheduledTaskId = vals[0]
			case "data.opsConfig.scaleNumber":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.OpsConfig.ScaleNumber = int32(val)
			case "data.opsConfig.scaleDuration":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.OpsConfig.ScaleDuration = int32(val)
			case "data.opsConfig.launchTime":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.LaunchTime = vals[0]
			case "data.opsConfig.repeatMode":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.RepeatMode = vals[0]
			case "data.opsConfig.repeatValue":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				m.Data.OpsConfig.RepeatValue = vals[0]
			case "data.opsConfig.scalePipeLineID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.OpsConfig == nil {
					m.Data.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.OpsConfig.ScalePipeLineID = uint32(val)
			case "data.system":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
			case "data.system.cluster":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
			case "data.system.cluster.name":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				m.Data.System.Cluster.Name = vals[0]
			case "data.system.cluster.type":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				m.Data.System.Cluster.Type = vals[0]
			case "data.system.cluster.nameservers":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				m.Data.System.Cluster.Nameservers = vals
			case "data.system.cluster.containerSubnet":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				m.Data.System.Cluster.ContainerSubnet = vals[0]
			case "data.system.cluster.virtualSubnet":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				m.Data.System.Cluster.VirtualSubnet = vals[0]
			case "data.system.cluster.masterVIP":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				m.Data.System.Cluster.MasterVIP = vals[0]
			case "data.system.cluster.offline":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Cluster == nil {
					m.Data.System.Cluster = &Cluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.Cluster.Offline = val
			case "data.system.ssh":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
			case "data.system.ssh.port":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.Ssh.Port = int32(val)
			case "data.system.ssh.user":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
				m.Data.System.Ssh.User = vals[0]
			case "data.system.ssh.password":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
				m.Data.System.Ssh.Password = vals[0]
			case "data.system.ssh.account":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
				m.Data.System.Ssh.Account = vals[0]
			case "data.system.ssh.privateKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
				m.Data.System.Ssh.PrivateKey = vals[0]
			case "data.system.ssh.publicKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Ssh == nil {
					m.Data.System.Ssh = &SSH{}
				}
				m.Data.System.Ssh.PublicKey = vals[0]
			case "data.system.fps":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Fps == nil {
					m.Data.System.Fps = &FPS{}
				}
			case "data.system.fps.host":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Fps == nil {
					m.Data.System.Fps = &FPS{}
				}
				m.Data.System.Fps.Host = vals[0]
			case "data.system.fps.port":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Fps == nil {
					m.Data.System.Fps = &FPS{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.Fps.Port = int32(val)
			case "data.system.fps.proxy":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Fps == nil {
					m.Data.System.Fps = &FPS{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.Fps.Proxy = val
			case "data.system.storage":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
			case "data.system.storage.mountPoint":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				m.Data.System.Storage.MountPoint = vals[0]
			case "data.system.storage.nas":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				m.Data.System.Storage.Nas = vals[0]
			case "data.system.storage.gluster":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				if m.Data.System.Storage.Gluster == nil {
					m.Data.System.Storage.Gluster = &Gluster{}
				}
			case "data.system.storage.gluster.version":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				if m.Data.System.Storage.Gluster == nil {
					m.Data.System.Storage.Gluster = &Gluster{}
				}
				m.Data.System.Storage.Gluster.Version = vals[0]
			case "data.system.storage.gluster.hosts":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				if m.Data.System.Storage.Gluster == nil {
					m.Data.System.Storage.Gluster = &Gluster{}
				}
				m.Data.System.Storage.Gluster.Hosts = vals
			case "data.system.storage.gluster.server":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				if m.Data.System.Storage.Gluster == nil {
					m.Data.System.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.Storage.Gluster.Server = val
			case "data.system.storage.gluster.replica":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				if m.Data.System.Storage.Gluster == nil {
					m.Data.System.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.Storage.Gluster.Replica = int32(val)
			case "data.system.storage.gluster.brick":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Storage == nil {
					m.Data.System.Storage = &Storage{}
				}
				if m.Data.System.Storage.Gluster == nil {
					m.Data.System.Storage.Gluster = &Gluster{}
				}
				m.Data.System.Storage.Gluster.Brick = vals[0]
			case "data.system.docker":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Docker == nil {
					m.Data.System.Docker = &Docker{}
				}
			case "data.system.docker.dataRoot":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Docker == nil {
					m.Data.System.Docker = &Docker{}
				}
				m.Data.System.Docker.DataRoot = vals[0]
			case "data.system.docker.execRoot":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Docker == nil {
					m.Data.System.Docker = &Docker{}
				}
				m.Data.System.Docker.ExecRoot = vals[0]
			case "data.system.docker.bip":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Docker == nil {
					m.Data.System.Docker = &Docker{}
				}
				m.Data.System.Docker.Bip = vals[0]
			case "data.system.docker.fixedCIDR":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Docker == nil {
					m.Data.System.Docker = &Docker{}
				}
				m.Data.System.Docker.FixedCIDR = vals[0]
			case "data.system.platform":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
			case "data.system.platform.environment":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				m.Data.System.Platform.Environment = vals[0]
			case "data.system.platform.wildcardDomain":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				m.Data.System.Platform.WildcardDomain = vals[0]
			case "data.system.platform.mySQL":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
			case "data.system.platform.mySQL.host":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				m.Data.System.Platform.MySQL.Host = vals[0]
			case "data.system.platform.mySQL.port":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.Platform.MySQL.Port = int32(val)
			case "data.system.platform.mySQL.username":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				m.Data.System.Platform.MySQL.Username = vals[0]
			case "data.system.platform.mySQL.password":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				m.Data.System.Platform.MySQL.Password = vals[0]
			case "data.system.platform.mySQL.diceDB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				m.Data.System.Platform.MySQL.DiceDB = vals[0]
			case "data.system.platform.mySQL.pandoraDB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				m.Data.System.Platform.MySQL.PandoraDB = vals[0]
			case "data.system.platform.mySQL.sonarDB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.MySQL == nil {
					m.Data.System.Platform.MySQL = &MySQL{}
				}
				m.Data.System.Platform.MySQL.SonarDB = vals[0]
			case "data.system.platform.acceptMaster":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.Platform.AcceptMaster = val
			case "data.system.platform.acceptLB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.Platform.AcceptLB = val
			case "data.system.platform.dataDiskDevice":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				m.Data.System.Platform.DataDiskDevice = vals[0]
			case "data.system.platform.dataRoot":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				m.Data.System.Platform.DataRoot = vals[0]
			case "data.system.platform.scheme":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				m.Data.System.Platform.Scheme = vals[0]
			case "data.system.platform.port":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.Platform.Port = int32(val)
			case "data.system.platform.registryHost":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				m.Data.System.Platform.RegistryHost = vals[0]
			case "data.system.platform.openVPN":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.OpenVPN == nil {
					m.Data.System.Platform.OpenVPN = &OpenVPN{}
				}
			case "data.system.platform.openVPN.peerSubnet":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.OpenVPN == nil {
					m.Data.System.Platform.OpenVPN = &OpenVPN{}
				}
				m.Data.System.Platform.OpenVPN.PeerSubnet = vals[0]
			case "data.system.platform.openVPN.subnets":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.OpenVPN == nil {
					m.Data.System.Platform.OpenVPN = &OpenVPN{}
				}
				m.Data.System.Platform.OpenVPN.Subnets = vals
			case "data.system.platform.openVPN.configOPVN":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.Platform == nil {
					m.Data.System.Platform = &Platform{}
				}
				if m.Data.System.Platform.OpenVPN == nil {
					m.Data.System.Platform.OpenVPN = &OpenVPN{}
				}
				m.Data.System.Platform.OpenVPN.ConfigOPVN = vals[0]
			case "data.system.mainPlatform":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
			case "data.system.mainPlatform.environment":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				m.Data.System.MainPlatform.Environment = vals[0]
			case "data.system.mainPlatform.wildcardDomain":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				m.Data.System.MainPlatform.WildcardDomain = vals[0]
			case "data.system.mainPlatform.mySQL":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
			case "data.system.mainPlatform.mySQL.host":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				m.Data.System.MainPlatform.MySQL.Host = vals[0]
			case "data.system.mainPlatform.mySQL.port":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.MainPlatform.MySQL.Port = int32(val)
			case "data.system.mainPlatform.mySQL.username":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				m.Data.System.MainPlatform.MySQL.Username = vals[0]
			case "data.system.mainPlatform.mySQL.password":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				m.Data.System.MainPlatform.MySQL.Password = vals[0]
			case "data.system.mainPlatform.mySQL.diceDB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				m.Data.System.MainPlatform.MySQL.DiceDB = vals[0]
			case "data.system.mainPlatform.mySQL.pandoraDB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				m.Data.System.MainPlatform.MySQL.PandoraDB = vals[0]
			case "data.system.mainPlatform.mySQL.sonarDB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.MySQL == nil {
					m.Data.System.MainPlatform.MySQL = &MySQL{}
				}
				m.Data.System.MainPlatform.MySQL.SonarDB = vals[0]
			case "data.system.mainPlatform.acceptMaster":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.MainPlatform.AcceptMaster = val
			case "data.system.mainPlatform.acceptLB":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.System.MainPlatform.AcceptLB = val
			case "data.system.mainPlatform.dataDiskDevice":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				m.Data.System.MainPlatform.DataDiskDevice = vals[0]
			case "data.system.mainPlatform.dataRoot":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				m.Data.System.MainPlatform.DataRoot = vals[0]
			case "data.system.mainPlatform.scheme":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				m.Data.System.MainPlatform.Scheme = vals[0]
			case "data.system.mainPlatform.port":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.MainPlatform.Port = int32(val)
			case "data.system.mainPlatform.registryHost":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				m.Data.System.MainPlatform.RegistryHost = vals[0]
			case "data.system.mainPlatform.openVPN":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.OpenVPN == nil {
					m.Data.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
			case "data.system.mainPlatform.openVPN.peerSubnet":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.OpenVPN == nil {
					m.Data.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.Data.System.MainPlatform.OpenVPN.PeerSubnet = vals[0]
			case "data.system.mainPlatform.openVPN.subnets":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.OpenVPN == nil {
					m.Data.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.Data.System.MainPlatform.OpenVPN.Subnets = vals
			case "data.system.mainPlatform.openVPN.configOPVN":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				if m.Data.System.MainPlatform == nil {
					m.Data.System.MainPlatform = &Platform{}
				}
				if m.Data.System.MainPlatform.OpenVPN == nil {
					m.Data.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.Data.System.MainPlatform.OpenVPN.ConfigOPVN = vals[0]
			case "data.system.orgID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.System == nil {
					m.Data.System = &SysConf{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.System.OrgID = int32(val)
			case "data.manageConfig":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
			case "data.manageConfig.type":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.Type = vals[0]
			case "data.manageConfig.address":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.Address = vals[0]
			case "data.manageConfig.caData":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.CaData = vals[0]
			case "data.manageConfig.certData":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.CertData = vals[0]
			case "data.manageConfig.keyData":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.KeyData = vals[0]
			case "data.manageConfig.token":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.Token = vals[0]
			case "data.manageConfig.accessKey":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.AccessKey = vals[0]
			case "data.manageConfig.credentialSource":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.ManageConfig == nil {
					m.Data.ManageConfig = &ManageConfig{}
				}
				m.Data.ManageConfig.CredentialSource = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "data.updatedAt.seconds":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Seconds = val
			case "data.updatedAt.nanos":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				if m.Data.UpdatedAt == nil {
					m.Data.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt.Nanos = int32(val)
			case "data.orgID":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.OrgID = int32(val)
			case "data.isRelation":
				if m.Data == nil {
					m.Data = &ClusterInfo{}
				}
				m.Data.IsRelation = vals[0]
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "err":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
			case "err.code":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Code = vals[0]
			case "err.msg":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Msg = vals[0]
			}
		}
	}
	return nil
}

// UpdateClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "cloudVendor":
				m.CloudVendor = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "description":
				m.Description = vals[0]
			case "type":
				m.Type = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "wildcardDomain":
				m.WildcardDomain = vals[0]
			case "schedulerConfig":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
			case "schedulerConfig.masterURL":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.MasterURL = vals[0]
			case "schedulerConfig.authType":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AuthType = vals[0]
			case "schedulerConfig.authUsername":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AuthUsername = vals[0]
			case "schedulerConfig.authPassword":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AuthPassword = vals[0]
			case "schedulerConfig.caCrt":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.CaCrt = vals[0]
			case "schedulerConfig.clientCrt":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.ClientCrt = vals[0]
			case "schedulerConfig.clientKey":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.ClientKey = vals[0]
			case "schedulerConfig.enableTag":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SchedulerConfig.EnableTag = val
			case "schedulerConfig.enableWorkspace":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SchedulerConfig.EnableWorkspace = val
			case "schedulerConfig.edasConsoleAddr":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.EdasConsoleAddr = vals[0]
			case "schedulerConfig.accessKey":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AccessKey = vals[0]
			case "schedulerConfig.accessSecret":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AccessSecret = vals[0]
			case "schedulerConfig.clusterID":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.ClusterID = vals[0]
			case "schedulerConfig.regionID":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.RegionID = vals[0]
			case "schedulerConfig.logicalRegionID":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.LogicalRegionID = vals[0]
			case "schedulerConfig.k8sAddr":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.K8SAddr = vals[0]
			case "schedulerConfig.regAddr":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.RegAddr = vals[0]
			case "schedulerConfig.cpuSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.CpuSubscribeRatio = vals[0]
			case "schedulerConfig.devCPUSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.DevCPUSubscribeRatio = vals[0]
			case "schedulerConfig.testCPUSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.TestCPUSubscribeRatio = vals[0]
			case "schedulerConfig.stagingCPUSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.StagingCPUSubscribeRatio = vals[0]
			case "opsConfig":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
			case "opsConfig.status":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.Status = vals[0]
			case "opsConfig.accessKey":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.AccessKey = vals[0]
			case "opsConfig.secretKey":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.SecretKey = vals[0]
			case "opsConfig.ecsPassword":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EcsPassword = vals[0]
			case "opsConfig.availabilityZones":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.AvailabilityZones = vals[0]
			case "opsConfig.vpcID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.VpcID = vals[0]
			case "opsConfig.vSwitchIDs":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.VSwitchIDs = vals[0]
			case "opsConfig.sgIDs":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.SgIDs = vals[0]
			case "opsConfig.chargeType":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ChargeType = vals[0]
			case "opsConfig.chargePeriod":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ChargePeriod = int32(val)
			case "opsConfig.region":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.Region = vals[0]
			case "opsConfig.scaleMode":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ScaleMode = vals[0]
			case "opsConfig.essGroupID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EssGroupID = vals[0]
			case "opsConfig.essScaleRule":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EssScaleRule = vals[0]
			case "opsConfig.scheduledTaskId":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ScheduledTaskId = vals[0]
			case "opsConfig.scaleNumber":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScaleNumber = int32(val)
			case "opsConfig.scaleDuration":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScaleDuration = int32(val)
			case "opsConfig.launchTime":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.LaunchTime = vals[0]
			case "opsConfig.repeatMode":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.RepeatMode = vals[0]
			case "opsConfig.repeatValue":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.RepeatValue = vals[0]
			case "opsConfig.scalePipeLineID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScalePipeLineID = uint32(val)
			case "sysConfig":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
			case "sysConfig.cluster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
			case "sysConfig.cluster.name":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.Name = vals[0]
			case "sysConfig.cluster.type":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.Type = vals[0]
			case "sysConfig.cluster.nameservers":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.Nameservers = vals
			case "sysConfig.cluster.containerSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.ContainerSubnet = vals[0]
			case "sysConfig.cluster.virtualSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.VirtualSubnet = vals[0]
			case "sysConfig.cluster.masterVIP":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.MasterVIP = vals[0]
			case "sysConfig.cluster.offline":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Cluster.Offline = val
			case "sysConfig.ssh":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
			case "sysConfig.ssh.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Ssh.Port = int32(val)
			case "sysConfig.ssh.user":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.User = vals[0]
			case "sysConfig.ssh.password":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.Password = vals[0]
			case "sysConfig.ssh.account":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.Account = vals[0]
			case "sysConfig.ssh.privateKey":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.PrivateKey = vals[0]
			case "sysConfig.ssh.publicKey":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.PublicKey = vals[0]
			case "sysConfig.fps":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
			case "sysConfig.fps.host":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
				m.SysConfig.Fps.Host = vals[0]
			case "sysConfig.fps.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Fps.Port = int32(val)
			case "sysConfig.fps.proxy":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Fps.Proxy = val
			case "sysConfig.storage":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
			case "sysConfig.storage.mountPoint":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				m.SysConfig.Storage.MountPoint = vals[0]
			case "sysConfig.storage.nas":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				m.SysConfig.Storage.Nas = vals[0]
			case "sysConfig.storage.gluster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
			case "sysConfig.storage.gluster.version":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				m.SysConfig.Storage.Gluster.Version = vals[0]
			case "sysConfig.storage.gluster.hosts":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				m.SysConfig.Storage.Gluster.Hosts = vals
			case "sysConfig.storage.gluster.server":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Storage.Gluster.Server = val
			case "sysConfig.storage.gluster.replica":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Storage.Gluster.Replica = int32(val)
			case "sysConfig.storage.gluster.brick":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				m.SysConfig.Storage.Gluster.Brick = vals[0]
			case "sysConfig.docker":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
			case "sysConfig.docker.dataRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.DataRoot = vals[0]
			case "sysConfig.docker.execRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.ExecRoot = vals[0]
			case "sysConfig.docker.bip":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.Bip = vals[0]
			case "sysConfig.docker.fixedCIDR":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.FixedCIDR = vals[0]
			case "sysConfig.platform":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
			case "sysConfig.platform.environment":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.Environment = vals[0]
			case "sysConfig.platform.wildcardDomain":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.WildcardDomain = vals[0]
			case "sysConfig.platform.mySQL":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
			case "sysConfig.platform.mySQL.host":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.Host = vals[0]
			case "sysConfig.platform.mySQL.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Platform.MySQL.Port = int32(val)
			case "sysConfig.platform.mySQL.username":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.Username = vals[0]
			case "sysConfig.platform.mySQL.password":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.Password = vals[0]
			case "sysConfig.platform.mySQL.diceDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.DiceDB = vals[0]
			case "sysConfig.platform.mySQL.pandoraDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.PandoraDB = vals[0]
			case "sysConfig.platform.mySQL.sonarDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.SonarDB = vals[0]
			case "sysConfig.platform.acceptMaster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Platform.AcceptMaster = val
			case "sysConfig.platform.acceptLB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Platform.AcceptLB = val
			case "sysConfig.platform.dataDiskDevice":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.DataDiskDevice = vals[0]
			case "sysConfig.platform.dataRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.DataRoot = vals[0]
			case "sysConfig.platform.scheme":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.Scheme = vals[0]
			case "sysConfig.platform.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Platform.Port = int32(val)
			case "sysConfig.platform.registryHost":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.RegistryHost = vals[0]
			case "sysConfig.platform.openVPN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
			case "sysConfig.platform.openVPN.peerSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.Platform.OpenVPN.PeerSubnet = vals[0]
			case "sysConfig.platform.openVPN.subnets":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.Platform.OpenVPN.Subnets = vals
			case "sysConfig.platform.openVPN.configOPVN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.Platform.OpenVPN.ConfigOPVN = vals[0]
			case "sysConfig.mainPlatform":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
			case "sysConfig.mainPlatform.environment":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.Environment = vals[0]
			case "sysConfig.mainPlatform.wildcardDomain":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.WildcardDomain = vals[0]
			case "sysConfig.mainPlatform.mySQL":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
			case "sysConfig.mainPlatform.mySQL.host":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.Host = vals[0]
			case "sysConfig.mainPlatform.mySQL.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.MySQL.Port = int32(val)
			case "sysConfig.mainPlatform.mySQL.username":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.Username = vals[0]
			case "sysConfig.mainPlatform.mySQL.password":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.Password = vals[0]
			case "sysConfig.mainPlatform.mySQL.diceDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.DiceDB = vals[0]
			case "sysConfig.mainPlatform.mySQL.pandoraDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.PandoraDB = vals[0]
			case "sysConfig.mainPlatform.mySQL.sonarDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.SonarDB = vals[0]
			case "sysConfig.mainPlatform.acceptMaster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.AcceptMaster = val
			case "sysConfig.mainPlatform.acceptLB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.AcceptLB = val
			case "sysConfig.mainPlatform.dataDiskDevice":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.DataDiskDevice = vals[0]
			case "sysConfig.mainPlatform.dataRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.DataRoot = vals[0]
			case "sysConfig.mainPlatform.scheme":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.Scheme = vals[0]
			case "sysConfig.mainPlatform.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.Port = int32(val)
			case "sysConfig.mainPlatform.registryHost":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.RegistryHost = vals[0]
			case "sysConfig.mainPlatform.openVPN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
			case "sysConfig.mainPlatform.openVPN.peerSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.MainPlatform.OpenVPN.PeerSubnet = vals[0]
			case "sysConfig.mainPlatform.openVPN.subnets":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.MainPlatform.OpenVPN.Subnets = vals
			case "sysConfig.mainPlatform.openVPN.configOPVN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.MainPlatform.OpenVPN.ConfigOPVN = vals[0]
			case "sysConfig.orgID":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.OrgID = int32(val)
			case "manageConfig":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
			case "manageConfig.type":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Type = vals[0]
			case "manageConfig.address":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Address = vals[0]
			case "manageConfig.caData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CaData = vals[0]
			case "manageConfig.certData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CertData = vals[0]
			case "manageConfig.keyData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.KeyData = vals[0]
			case "manageConfig.token":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Token = vals[0]
			case "manageConfig.accessKey":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.AccessKey = vals[0]
			case "manageConfig.credentialSource":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CredentialSource = vals[0]
			case "orgID":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = int32(val)
			}
		}
	}
	return nil
}

// UpdateClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "err":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
			case "err.code":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Code = vals[0]
			case "err.msg":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Msg = vals[0]
			}
		}
	}
	return nil
}

// CreateClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "cloudVendor":
				m.CloudVendor = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "description":
				m.Description = vals[0]
			case "type":
				m.Type = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "wildcardDomain":
				m.WildcardDomain = vals[0]
			case "schedulerConfig":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
			case "schedulerConfig.masterURL":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.MasterURL = vals[0]
			case "schedulerConfig.authType":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AuthType = vals[0]
			case "schedulerConfig.authUsername":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AuthUsername = vals[0]
			case "schedulerConfig.authPassword":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AuthPassword = vals[0]
			case "schedulerConfig.caCrt":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.CaCrt = vals[0]
			case "schedulerConfig.clientCrt":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.ClientCrt = vals[0]
			case "schedulerConfig.clientKey":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.ClientKey = vals[0]
			case "schedulerConfig.enableTag":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SchedulerConfig.EnableTag = val
			case "schedulerConfig.enableWorkspace":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SchedulerConfig.EnableWorkspace = val
			case "schedulerConfig.edasConsoleAddr":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.EdasConsoleAddr = vals[0]
			case "schedulerConfig.accessKey":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AccessKey = vals[0]
			case "schedulerConfig.accessSecret":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.AccessSecret = vals[0]
			case "schedulerConfig.clusterID":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.ClusterID = vals[0]
			case "schedulerConfig.regionID":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.RegionID = vals[0]
			case "schedulerConfig.logicalRegionID":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.LogicalRegionID = vals[0]
			case "schedulerConfig.k8sAddr":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.K8SAddr = vals[0]
			case "schedulerConfig.regAddr":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.RegAddr = vals[0]
			case "schedulerConfig.cpuSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.CpuSubscribeRatio = vals[0]
			case "schedulerConfig.devCPUSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.DevCPUSubscribeRatio = vals[0]
			case "schedulerConfig.testCPUSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.TestCPUSubscribeRatio = vals[0]
			case "schedulerConfig.stagingCPUSubscribeRatio":
				if m.SchedulerConfig == nil {
					m.SchedulerConfig = &ClusterSchedConfig{}
				}
				m.SchedulerConfig.StagingCPUSubscribeRatio = vals[0]
			case "opsConfig":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
			case "opsConfig.status":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.Status = vals[0]
			case "opsConfig.accessKey":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.AccessKey = vals[0]
			case "opsConfig.secretKey":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.SecretKey = vals[0]
			case "opsConfig.ecsPassword":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EcsPassword = vals[0]
			case "opsConfig.availabilityZones":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.AvailabilityZones = vals[0]
			case "opsConfig.vpcID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.VpcID = vals[0]
			case "opsConfig.vSwitchIDs":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.VSwitchIDs = vals[0]
			case "opsConfig.sgIDs":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.SgIDs = vals[0]
			case "opsConfig.chargeType":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ChargeType = vals[0]
			case "opsConfig.chargePeriod":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ChargePeriod = int32(val)
			case "opsConfig.region":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.Region = vals[0]
			case "opsConfig.scaleMode":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ScaleMode = vals[0]
			case "opsConfig.essGroupID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EssGroupID = vals[0]
			case "opsConfig.essScaleRule":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EssScaleRule = vals[0]
			case "opsConfig.scheduledTaskId":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ScheduledTaskId = vals[0]
			case "opsConfig.scaleNumber":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScaleNumber = int32(val)
			case "opsConfig.scaleDuration":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScaleDuration = int32(val)
			case "opsConfig.launchTime":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.LaunchTime = vals[0]
			case "opsConfig.repeatMode":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.RepeatMode = vals[0]
			case "opsConfig.repeatValue":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.RepeatValue = vals[0]
			case "opsConfig.scalePipeLineID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScalePipeLineID = uint32(val)
			case "sysConfig":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
			case "sysConfig.cluster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
			case "sysConfig.cluster.name":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.Name = vals[0]
			case "sysConfig.cluster.type":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.Type = vals[0]
			case "sysConfig.cluster.nameservers":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.Nameservers = vals
			case "sysConfig.cluster.containerSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.ContainerSubnet = vals[0]
			case "sysConfig.cluster.virtualSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.VirtualSubnet = vals[0]
			case "sysConfig.cluster.masterVIP":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				m.SysConfig.Cluster.MasterVIP = vals[0]
			case "sysConfig.cluster.offline":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Cluster == nil {
					m.SysConfig.Cluster = &Cluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Cluster.Offline = val
			case "sysConfig.ssh":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
			case "sysConfig.ssh.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Ssh.Port = int32(val)
			case "sysConfig.ssh.user":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.User = vals[0]
			case "sysConfig.ssh.password":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.Password = vals[0]
			case "sysConfig.ssh.account":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.Account = vals[0]
			case "sysConfig.ssh.privateKey":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.PrivateKey = vals[0]
			case "sysConfig.ssh.publicKey":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Ssh == nil {
					m.SysConfig.Ssh = &SSH{}
				}
				m.SysConfig.Ssh.PublicKey = vals[0]
			case "sysConfig.fps":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
			case "sysConfig.fps.host":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
				m.SysConfig.Fps.Host = vals[0]
			case "sysConfig.fps.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Fps.Port = int32(val)
			case "sysConfig.fps.proxy":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Fps == nil {
					m.SysConfig.Fps = &FPS{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Fps.Proxy = val
			case "sysConfig.storage":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
			case "sysConfig.storage.mountPoint":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				m.SysConfig.Storage.MountPoint = vals[0]
			case "sysConfig.storage.nas":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				m.SysConfig.Storage.Nas = vals[0]
			case "sysConfig.storage.gluster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
			case "sysConfig.storage.gluster.version":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				m.SysConfig.Storage.Gluster.Version = vals[0]
			case "sysConfig.storage.gluster.hosts":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				m.SysConfig.Storage.Gluster.Hosts = vals
			case "sysConfig.storage.gluster.server":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Storage.Gluster.Server = val
			case "sysConfig.storage.gluster.replica":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Storage.Gluster.Replica = int32(val)
			case "sysConfig.storage.gluster.brick":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Storage == nil {
					m.SysConfig.Storage = &Storage{}
				}
				if m.SysConfig.Storage.Gluster == nil {
					m.SysConfig.Storage.Gluster = &Gluster{}
				}
				m.SysConfig.Storage.Gluster.Brick = vals[0]
			case "sysConfig.docker":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
			case "sysConfig.docker.dataRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.DataRoot = vals[0]
			case "sysConfig.docker.execRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.ExecRoot = vals[0]
			case "sysConfig.docker.bip":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.Bip = vals[0]
			case "sysConfig.docker.fixedCIDR":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Docker == nil {
					m.SysConfig.Docker = &Docker{}
				}
				m.SysConfig.Docker.FixedCIDR = vals[0]
			case "sysConfig.platform":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
			case "sysConfig.platform.environment":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.Environment = vals[0]
			case "sysConfig.platform.wildcardDomain":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.WildcardDomain = vals[0]
			case "sysConfig.platform.mySQL":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
			case "sysConfig.platform.mySQL.host":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.Host = vals[0]
			case "sysConfig.platform.mySQL.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Platform.MySQL.Port = int32(val)
			case "sysConfig.platform.mySQL.username":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.Username = vals[0]
			case "sysConfig.platform.mySQL.password":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.Password = vals[0]
			case "sysConfig.platform.mySQL.diceDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.DiceDB = vals[0]
			case "sysConfig.platform.mySQL.pandoraDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.PandoraDB = vals[0]
			case "sysConfig.platform.mySQL.sonarDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.MySQL == nil {
					m.SysConfig.Platform.MySQL = &MySQL{}
				}
				m.SysConfig.Platform.MySQL.SonarDB = vals[0]
			case "sysConfig.platform.acceptMaster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Platform.AcceptMaster = val
			case "sysConfig.platform.acceptLB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.Platform.AcceptLB = val
			case "sysConfig.platform.dataDiskDevice":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.DataDiskDevice = vals[0]
			case "sysConfig.platform.dataRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.DataRoot = vals[0]
			case "sysConfig.platform.scheme":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.Scheme = vals[0]
			case "sysConfig.platform.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.Platform.Port = int32(val)
			case "sysConfig.platform.registryHost":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				m.SysConfig.Platform.RegistryHost = vals[0]
			case "sysConfig.platform.openVPN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
			case "sysConfig.platform.openVPN.peerSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.Platform.OpenVPN.PeerSubnet = vals[0]
			case "sysConfig.platform.openVPN.subnets":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.Platform.OpenVPN.Subnets = vals
			case "sysConfig.platform.openVPN.configOPVN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.Platform == nil {
					m.SysConfig.Platform = &Platform{}
				}
				if m.SysConfig.Platform.OpenVPN == nil {
					m.SysConfig.Platform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.Platform.OpenVPN.ConfigOPVN = vals[0]
			case "sysConfig.mainPlatform":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
			case "sysConfig.mainPlatform.environment":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.Environment = vals[0]
			case "sysConfig.mainPlatform.wildcardDomain":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.WildcardDomain = vals[0]
			case "sysConfig.mainPlatform.mySQL":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
			case "sysConfig.mainPlatform.mySQL.host":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.Host = vals[0]
			case "sysConfig.mainPlatform.mySQL.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.MySQL.Port = int32(val)
			case "sysConfig.mainPlatform.mySQL.username":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.Username = vals[0]
			case "sysConfig.mainPlatform.mySQL.password":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.Password = vals[0]
			case "sysConfig.mainPlatform.mySQL.diceDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.DiceDB = vals[0]
			case "sysConfig.mainPlatform.mySQL.pandoraDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.PandoraDB = vals[0]
			case "sysConfig.mainPlatform.mySQL.sonarDB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.MySQL == nil {
					m.SysConfig.MainPlatform.MySQL = &MySQL{}
				}
				m.SysConfig.MainPlatform.MySQL.SonarDB = vals[0]
			case "sysConfig.mainPlatform.acceptMaster":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.AcceptMaster = val
			case "sysConfig.mainPlatform.acceptLB":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.AcceptLB = val
			case "sysConfig.mainPlatform.dataDiskDevice":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.DataDiskDevice = vals[0]
			case "sysConfig.mainPlatform.dataRoot":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.DataRoot = vals[0]
			case "sysConfig.mainPlatform.scheme":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.Scheme = vals[0]
			case "sysConfig.mainPlatform.port":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.MainPlatform.Port = int32(val)
			case "sysConfig.mainPlatform.registryHost":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				m.SysConfig.MainPlatform.RegistryHost = vals[0]
			case "sysConfig.mainPlatform.openVPN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
			case "sysConfig.mainPlatform.openVPN.peerSubnet":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.MainPlatform.OpenVPN.PeerSubnet = vals[0]
			case "sysConfig.mainPlatform.openVPN.subnets":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.MainPlatform.OpenVPN.Subnets = vals
			case "sysConfig.mainPlatform.openVPN.configOPVN":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				if m.SysConfig.MainPlatform == nil {
					m.SysConfig.MainPlatform = &Platform{}
				}
				if m.SysConfig.MainPlatform.OpenVPN == nil {
					m.SysConfig.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.SysConfig.MainPlatform.OpenVPN.ConfigOPVN = vals[0]
			case "sysConfig.orgID":
				if m.SysConfig == nil {
					m.SysConfig = &SysConf{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.SysConfig.OrgID = int32(val)
			case "manageConfig":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
			case "manageConfig.type":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Type = vals[0]
			case "manageConfig.address":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Address = vals[0]
			case "manageConfig.caData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CaData = vals[0]
			case "manageConfig.certData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CertData = vals[0]
			case "manageConfig.keyData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.KeyData = vals[0]
			case "manageConfig.token":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Token = vals[0]
			case "manageConfig.accessKey":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.AccessKey = vals[0]
			case "manageConfig.credentialSource":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CredentialSource = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = uint32(val)
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// CreateClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "err":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
			case "err.code":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Code = vals[0]
			case "err.msg":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Msg = vals[0]
			}
		}
	}
	return nil
}

// DeleteClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// DeleteClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "err":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
			case "err.code":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Code = vals[0]
			case "err.msg":
				if m.Err == nil {
					m.Err = &ErrResponse{}
				}
				m.Err.Msg = vals[0]
			}
		}
	}
	return nil
}

// PatchClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *PatchClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "manageConfig":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
			case "manageConfig.type":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Type = vals[0]
			case "manageConfig.address":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Address = vals[0]
			case "manageConfig.caData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CaData = vals[0]
			case "manageConfig.certData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CertData = vals[0]
			case "manageConfig.keyData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.KeyData = vals[0]
			case "manageConfig.token":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Token = vals[0]
			case "manageConfig.accessKey":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.AccessKey = vals[0]
			case "manageConfig.credentialSource":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CredentialSource = vals[0]
			}
		}
	}
	return nil
}

// PatchClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *PatchClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ClusterInfo implement urlenc.URLValuesUnmarshaler.
func (m *ClusterInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Id = int32(val)
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "type":
				m.Type = vals[0]
			case "cloudVendor":
				m.CloudVendor = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "description":
				m.Description = vals[0]
			case "wildcardDomain":
				m.WildcardDomain = vals[0]
			case "schedConfig":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
			case "schedConfig.masterURL":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.MasterURL = vals[0]
			case "schedConfig.authType":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.AuthType = vals[0]
			case "schedConfig.authUsername":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.AuthUsername = vals[0]
			case "schedConfig.authPassword":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.AuthPassword = vals[0]
			case "schedConfig.caCrt":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.CaCrt = vals[0]
			case "schedConfig.clientCrt":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.ClientCrt = vals[0]
			case "schedConfig.clientKey":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.ClientKey = vals[0]
			case "schedConfig.enableTag":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SchedConfig.EnableTag = val
			case "schedConfig.enableWorkspace":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.SchedConfig.EnableWorkspace = val
			case "schedConfig.edasConsoleAddr":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.EdasConsoleAddr = vals[0]
			case "schedConfig.accessKey":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.AccessKey = vals[0]
			case "schedConfig.accessSecret":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.AccessSecret = vals[0]
			case "schedConfig.clusterID":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.ClusterID = vals[0]
			case "schedConfig.regionID":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.RegionID = vals[0]
			case "schedConfig.logicalRegionID":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.LogicalRegionID = vals[0]
			case "schedConfig.k8sAddr":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.K8SAddr = vals[0]
			case "schedConfig.regAddr":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.RegAddr = vals[0]
			case "schedConfig.cpuSubscribeRatio":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.CpuSubscribeRatio = vals[0]
			case "schedConfig.devCPUSubscribeRatio":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.DevCPUSubscribeRatio = vals[0]
			case "schedConfig.testCPUSubscribeRatio":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.TestCPUSubscribeRatio = vals[0]
			case "schedConfig.stagingCPUSubscribeRatio":
				if m.SchedConfig == nil {
					m.SchedConfig = &ClusterSchedConfig{}
				}
				m.SchedConfig.StagingCPUSubscribeRatio = vals[0]
			case "opsConfig":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
			case "opsConfig.status":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.Status = vals[0]
			case "opsConfig.accessKey":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.AccessKey = vals[0]
			case "opsConfig.secretKey":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.SecretKey = vals[0]
			case "opsConfig.ecsPassword":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EcsPassword = vals[0]
			case "opsConfig.availabilityZones":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.AvailabilityZones = vals[0]
			case "opsConfig.vpcID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.VpcID = vals[0]
			case "opsConfig.vSwitchIDs":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.VSwitchIDs = vals[0]
			case "opsConfig.sgIDs":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.SgIDs = vals[0]
			case "opsConfig.chargeType":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ChargeType = vals[0]
			case "opsConfig.chargePeriod":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ChargePeriod = int32(val)
			case "opsConfig.region":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.Region = vals[0]
			case "opsConfig.scaleMode":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ScaleMode = vals[0]
			case "opsConfig.essGroupID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EssGroupID = vals[0]
			case "opsConfig.essScaleRule":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.EssScaleRule = vals[0]
			case "opsConfig.scheduledTaskId":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.ScheduledTaskId = vals[0]
			case "opsConfig.scaleNumber":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScaleNumber = int32(val)
			case "opsConfig.scaleDuration":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScaleDuration = int32(val)
			case "opsConfig.launchTime":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.LaunchTime = vals[0]
			case "opsConfig.repeatMode":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.RepeatMode = vals[0]
			case "opsConfig.repeatValue":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				m.OpsConfig.RepeatValue = vals[0]
			case "opsConfig.scalePipeLineID":
				if m.OpsConfig == nil {
					m.OpsConfig = &OpsConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OpsConfig.ScalePipeLineID = uint32(val)
			case "system":
				if m.System == nil {
					m.System = &SysConf{}
				}
			case "system.cluster":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
			case "system.cluster.name":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				m.System.Cluster.Name = vals[0]
			case "system.cluster.type":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				m.System.Cluster.Type = vals[0]
			case "system.cluster.nameservers":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				m.System.Cluster.Nameservers = vals
			case "system.cluster.containerSubnet":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				m.System.Cluster.ContainerSubnet = vals[0]
			case "system.cluster.virtualSubnet":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				m.System.Cluster.VirtualSubnet = vals[0]
			case "system.cluster.masterVIP":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				m.System.Cluster.MasterVIP = vals[0]
			case "system.cluster.offline":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Cluster == nil {
					m.System.Cluster = &Cluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.Cluster.Offline = val
			case "system.ssh":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
			case "system.ssh.port":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.Ssh.Port = int32(val)
			case "system.ssh.user":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
				m.System.Ssh.User = vals[0]
			case "system.ssh.password":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
				m.System.Ssh.Password = vals[0]
			case "system.ssh.account":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
				m.System.Ssh.Account = vals[0]
			case "system.ssh.privateKey":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
				m.System.Ssh.PrivateKey = vals[0]
			case "system.ssh.publicKey":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Ssh == nil {
					m.System.Ssh = &SSH{}
				}
				m.System.Ssh.PublicKey = vals[0]
			case "system.fps":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Fps == nil {
					m.System.Fps = &FPS{}
				}
			case "system.fps.host":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Fps == nil {
					m.System.Fps = &FPS{}
				}
				m.System.Fps.Host = vals[0]
			case "system.fps.port":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Fps == nil {
					m.System.Fps = &FPS{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.Fps.Port = int32(val)
			case "system.fps.proxy":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Fps == nil {
					m.System.Fps = &FPS{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.Fps.Proxy = val
			case "system.storage":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
			case "system.storage.mountPoint":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				m.System.Storage.MountPoint = vals[0]
			case "system.storage.nas":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				m.System.Storage.Nas = vals[0]
			case "system.storage.gluster":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				if m.System.Storage.Gluster == nil {
					m.System.Storage.Gluster = &Gluster{}
				}
			case "system.storage.gluster.version":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				if m.System.Storage.Gluster == nil {
					m.System.Storage.Gluster = &Gluster{}
				}
				m.System.Storage.Gluster.Version = vals[0]
			case "system.storage.gluster.hosts":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				if m.System.Storage.Gluster == nil {
					m.System.Storage.Gluster = &Gluster{}
				}
				m.System.Storage.Gluster.Hosts = vals
			case "system.storage.gluster.server":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				if m.System.Storage.Gluster == nil {
					m.System.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.Storage.Gluster.Server = val
			case "system.storage.gluster.replica":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				if m.System.Storage.Gluster == nil {
					m.System.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.Storage.Gluster.Replica = int32(val)
			case "system.storage.gluster.brick":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Storage == nil {
					m.System.Storage = &Storage{}
				}
				if m.System.Storage.Gluster == nil {
					m.System.Storage.Gluster = &Gluster{}
				}
				m.System.Storage.Gluster.Brick = vals[0]
			case "system.docker":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Docker == nil {
					m.System.Docker = &Docker{}
				}
			case "system.docker.dataRoot":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Docker == nil {
					m.System.Docker = &Docker{}
				}
				m.System.Docker.DataRoot = vals[0]
			case "system.docker.execRoot":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Docker == nil {
					m.System.Docker = &Docker{}
				}
				m.System.Docker.ExecRoot = vals[0]
			case "system.docker.bip":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Docker == nil {
					m.System.Docker = &Docker{}
				}
				m.System.Docker.Bip = vals[0]
			case "system.docker.fixedCIDR":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Docker == nil {
					m.System.Docker = &Docker{}
				}
				m.System.Docker.FixedCIDR = vals[0]
			case "system.platform":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
			case "system.platform.environment":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				m.System.Platform.Environment = vals[0]
			case "system.platform.wildcardDomain":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				m.System.Platform.WildcardDomain = vals[0]
			case "system.platform.mySQL":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
			case "system.platform.mySQL.host":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				m.System.Platform.MySQL.Host = vals[0]
			case "system.platform.mySQL.port":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.Platform.MySQL.Port = int32(val)
			case "system.platform.mySQL.username":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				m.System.Platform.MySQL.Username = vals[0]
			case "system.platform.mySQL.password":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				m.System.Platform.MySQL.Password = vals[0]
			case "system.platform.mySQL.diceDB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				m.System.Platform.MySQL.DiceDB = vals[0]
			case "system.platform.mySQL.pandoraDB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				m.System.Platform.MySQL.PandoraDB = vals[0]
			case "system.platform.mySQL.sonarDB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.MySQL == nil {
					m.System.Platform.MySQL = &MySQL{}
				}
				m.System.Platform.MySQL.SonarDB = vals[0]
			case "system.platform.acceptMaster":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.Platform.AcceptMaster = val
			case "system.platform.acceptLB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.Platform.AcceptLB = val
			case "system.platform.dataDiskDevice":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				m.System.Platform.DataDiskDevice = vals[0]
			case "system.platform.dataRoot":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				m.System.Platform.DataRoot = vals[0]
			case "system.platform.scheme":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				m.System.Platform.Scheme = vals[0]
			case "system.platform.port":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.Platform.Port = int32(val)
			case "system.platform.registryHost":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				m.System.Platform.RegistryHost = vals[0]
			case "system.platform.openVPN":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.OpenVPN == nil {
					m.System.Platform.OpenVPN = &OpenVPN{}
				}
			case "system.platform.openVPN.peerSubnet":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.OpenVPN == nil {
					m.System.Platform.OpenVPN = &OpenVPN{}
				}
				m.System.Platform.OpenVPN.PeerSubnet = vals[0]
			case "system.platform.openVPN.subnets":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.OpenVPN == nil {
					m.System.Platform.OpenVPN = &OpenVPN{}
				}
				m.System.Platform.OpenVPN.Subnets = vals
			case "system.platform.openVPN.configOPVN":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.Platform == nil {
					m.System.Platform = &Platform{}
				}
				if m.System.Platform.OpenVPN == nil {
					m.System.Platform.OpenVPN = &OpenVPN{}
				}
				m.System.Platform.OpenVPN.ConfigOPVN = vals[0]
			case "system.mainPlatform":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
			case "system.mainPlatform.environment":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				m.System.MainPlatform.Environment = vals[0]
			case "system.mainPlatform.wildcardDomain":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				m.System.MainPlatform.WildcardDomain = vals[0]
			case "system.mainPlatform.mySQL":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
			case "system.mainPlatform.mySQL.host":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				m.System.MainPlatform.MySQL.Host = vals[0]
			case "system.mainPlatform.mySQL.port":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.MainPlatform.MySQL.Port = int32(val)
			case "system.mainPlatform.mySQL.username":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				m.System.MainPlatform.MySQL.Username = vals[0]
			case "system.mainPlatform.mySQL.password":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				m.System.MainPlatform.MySQL.Password = vals[0]
			case "system.mainPlatform.mySQL.diceDB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				m.System.MainPlatform.MySQL.DiceDB = vals[0]
			case "system.mainPlatform.mySQL.pandoraDB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				m.System.MainPlatform.MySQL.PandoraDB = vals[0]
			case "system.mainPlatform.mySQL.sonarDB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.MySQL == nil {
					m.System.MainPlatform.MySQL = &MySQL{}
				}
				m.System.MainPlatform.MySQL.SonarDB = vals[0]
			case "system.mainPlatform.acceptMaster":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.MainPlatform.AcceptMaster = val
			case "system.mainPlatform.acceptLB":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.System.MainPlatform.AcceptLB = val
			case "system.mainPlatform.dataDiskDevice":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				m.System.MainPlatform.DataDiskDevice = vals[0]
			case "system.mainPlatform.dataRoot":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				m.System.MainPlatform.DataRoot = vals[0]
			case "system.mainPlatform.scheme":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				m.System.MainPlatform.Scheme = vals[0]
			case "system.mainPlatform.port":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.MainPlatform.Port = int32(val)
			case "system.mainPlatform.registryHost":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				m.System.MainPlatform.RegistryHost = vals[0]
			case "system.mainPlatform.openVPN":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.OpenVPN == nil {
					m.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
			case "system.mainPlatform.openVPN.peerSubnet":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.OpenVPN == nil {
					m.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.System.MainPlatform.OpenVPN.PeerSubnet = vals[0]
			case "system.mainPlatform.openVPN.subnets":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.OpenVPN == nil {
					m.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.System.MainPlatform.OpenVPN.Subnets = vals
			case "system.mainPlatform.openVPN.configOPVN":
				if m.System == nil {
					m.System = &SysConf{}
				}
				if m.System.MainPlatform == nil {
					m.System.MainPlatform = &Platform{}
				}
				if m.System.MainPlatform.OpenVPN == nil {
					m.System.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.System.MainPlatform.OpenVPN.ConfigOPVN = vals[0]
			case "system.orgID":
				if m.System == nil {
					m.System = &SysConf{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.System.OrgID = int32(val)
			case "manageConfig":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
			case "manageConfig.type":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Type = vals[0]
			case "manageConfig.address":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Address = vals[0]
			case "manageConfig.caData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CaData = vals[0]
			case "manageConfig.certData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CertData = vals[0]
			case "manageConfig.keyData":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.KeyData = vals[0]
			case "manageConfig.token":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.Token = vals[0]
			case "manageConfig.accessKey":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.AccessKey = vals[0]
			case "manageConfig.credentialSource":
				if m.ManageConfig == nil {
					m.ManageConfig = &ManageConfig{}
				}
				m.ManageConfig.CredentialSource = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "orgID":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = int32(val)
			case "isRelation":
				m.IsRelation = vals[0]
			}
		}
	}
	return nil
}

// ClusterSchedConfig implement urlenc.URLValuesUnmarshaler.
func (m *ClusterSchedConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "masterURL":
				m.MasterURL = vals[0]
			case "authType":
				m.AuthType = vals[0]
			case "authUsername":
				m.AuthUsername = vals[0]
			case "authPassword":
				m.AuthPassword = vals[0]
			case "caCrt":
				m.CaCrt = vals[0]
			case "clientCrt":
				m.ClientCrt = vals[0]
			case "clientKey":
				m.ClientKey = vals[0]
			case "enableTag":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableTag = val
			case "enableWorkspace":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableWorkspace = val
			case "edasConsoleAddr":
				m.EdasConsoleAddr = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "accessSecret":
				m.AccessSecret = vals[0]
			case "clusterID":
				m.ClusterID = vals[0]
			case "regionID":
				m.RegionID = vals[0]
			case "logicalRegionID":
				m.LogicalRegionID = vals[0]
			case "k8sAddr":
				m.K8SAddr = vals[0]
			case "regAddr":
				m.RegAddr = vals[0]
			case "cpuSubscribeRatio":
				m.CpuSubscribeRatio = vals[0]
			case "devCPUSubscribeRatio":
				m.DevCPUSubscribeRatio = vals[0]
			case "testCPUSubscribeRatio":
				m.TestCPUSubscribeRatio = vals[0]
			case "stagingCPUSubscribeRatio":
				m.StagingCPUSubscribeRatio = vals[0]
			}
		}
	}
	return nil
}

// OpsConfig implement urlenc.URLValuesUnmarshaler.
func (m *OpsConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "status":
				m.Status = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "secretKey":
				m.SecretKey = vals[0]
			case "ecsPassword":
				m.EcsPassword = vals[0]
			case "availabilityZones":
				m.AvailabilityZones = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "vSwitchIDs":
				m.VSwitchIDs = vals[0]
			case "sgIDs":
				m.SgIDs = vals[0]
			case "chargeType":
				m.ChargeType = vals[0]
			case "chargePeriod":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ChargePeriod = int32(val)
			case "region":
				m.Region = vals[0]
			case "scaleMode":
				m.ScaleMode = vals[0]
			case "essGroupID":
				m.EssGroupID = vals[0]
			case "essScaleRule":
				m.EssScaleRule = vals[0]
			case "scheduledTaskId":
				m.ScheduledTaskId = vals[0]
			case "scaleNumber":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaleNumber = int32(val)
			case "scaleDuration":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaleDuration = int32(val)
			case "launchTime":
				m.LaunchTime = vals[0]
			case "repeatMode":
				m.RepeatMode = vals[0]
			case "repeatValue":
				m.RepeatValue = vals[0]
			case "scalePipeLineID":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScalePipeLineID = uint32(val)
			}
		}
	}
	return nil
}

// SysConf implement urlenc.URLValuesUnmarshaler.
func (m *SysConf) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cluster":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
			case "cluster.name":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				m.Cluster.Name = vals[0]
			case "cluster.type":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				m.Cluster.Type = vals[0]
			case "cluster.nameservers":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				m.Cluster.Nameservers = vals
			case "cluster.containerSubnet":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				m.Cluster.ContainerSubnet = vals[0]
			case "cluster.virtualSubnet":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				m.Cluster.VirtualSubnet = vals[0]
			case "cluster.masterVIP":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				m.Cluster.MasterVIP = vals[0]
			case "cluster.offline":
				if m.Cluster == nil {
					m.Cluster = &Cluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Cluster.Offline = val
			case "ssh":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
			case "ssh.port":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Ssh.Port = int32(val)
			case "ssh.user":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
				m.Ssh.User = vals[0]
			case "ssh.password":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
				m.Ssh.Password = vals[0]
			case "ssh.account":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
				m.Ssh.Account = vals[0]
			case "ssh.privateKey":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
				m.Ssh.PrivateKey = vals[0]
			case "ssh.publicKey":
				if m.Ssh == nil {
					m.Ssh = &SSH{}
				}
				m.Ssh.PublicKey = vals[0]
			case "fps":
				if m.Fps == nil {
					m.Fps = &FPS{}
				}
			case "fps.host":
				if m.Fps == nil {
					m.Fps = &FPS{}
				}
				m.Fps.Host = vals[0]
			case "fps.port":
				if m.Fps == nil {
					m.Fps = &FPS{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Fps.Port = int32(val)
			case "fps.proxy":
				if m.Fps == nil {
					m.Fps = &FPS{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Fps.Proxy = val
			case "storage":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
			case "storage.mountPoint":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				m.Storage.MountPoint = vals[0]
			case "storage.nas":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				m.Storage.Nas = vals[0]
			case "storage.gluster":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				if m.Storage.Gluster == nil {
					m.Storage.Gluster = &Gluster{}
				}
			case "storage.gluster.version":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				if m.Storage.Gluster == nil {
					m.Storage.Gluster = &Gluster{}
				}
				m.Storage.Gluster.Version = vals[0]
			case "storage.gluster.hosts":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				if m.Storage.Gluster == nil {
					m.Storage.Gluster = &Gluster{}
				}
				m.Storage.Gluster.Hosts = vals
			case "storage.gluster.server":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				if m.Storage.Gluster == nil {
					m.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Storage.Gluster.Server = val
			case "storage.gluster.replica":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				if m.Storage.Gluster == nil {
					m.Storage.Gluster = &Gluster{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Storage.Gluster.Replica = int32(val)
			case "storage.gluster.brick":
				if m.Storage == nil {
					m.Storage = &Storage{}
				}
				if m.Storage.Gluster == nil {
					m.Storage.Gluster = &Gluster{}
				}
				m.Storage.Gluster.Brick = vals[0]
			case "docker":
				if m.Docker == nil {
					m.Docker = &Docker{}
				}
			case "docker.dataRoot":
				if m.Docker == nil {
					m.Docker = &Docker{}
				}
				m.Docker.DataRoot = vals[0]
			case "docker.execRoot":
				if m.Docker == nil {
					m.Docker = &Docker{}
				}
				m.Docker.ExecRoot = vals[0]
			case "docker.bip":
				if m.Docker == nil {
					m.Docker = &Docker{}
				}
				m.Docker.Bip = vals[0]
			case "docker.fixedCIDR":
				if m.Docker == nil {
					m.Docker = &Docker{}
				}
				m.Docker.FixedCIDR = vals[0]
			case "platform":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
			case "platform.environment":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				m.Platform.Environment = vals[0]
			case "platform.wildcardDomain":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				m.Platform.WildcardDomain = vals[0]
			case "platform.mySQL":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
			case "platform.mySQL.host":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				m.Platform.MySQL.Host = vals[0]
			case "platform.mySQL.port":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Platform.MySQL.Port = int32(val)
			case "platform.mySQL.username":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				m.Platform.MySQL.Username = vals[0]
			case "platform.mySQL.password":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				m.Platform.MySQL.Password = vals[0]
			case "platform.mySQL.diceDB":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				m.Platform.MySQL.DiceDB = vals[0]
			case "platform.mySQL.pandoraDB":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				m.Platform.MySQL.PandoraDB = vals[0]
			case "platform.mySQL.sonarDB":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.MySQL == nil {
					m.Platform.MySQL = &MySQL{}
				}
				m.Platform.MySQL.SonarDB = vals[0]
			case "platform.acceptMaster":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Platform.AcceptMaster = val
			case "platform.acceptLB":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Platform.AcceptLB = val
			case "platform.dataDiskDevice":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				m.Platform.DataDiskDevice = vals[0]
			case "platform.dataRoot":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				m.Platform.DataRoot = vals[0]
			case "platform.scheme":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				m.Platform.Scheme = vals[0]
			case "platform.port":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Platform.Port = int32(val)
			case "platform.registryHost":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				m.Platform.RegistryHost = vals[0]
			case "platform.openVPN":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.OpenVPN == nil {
					m.Platform.OpenVPN = &OpenVPN{}
				}
			case "platform.openVPN.peerSubnet":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.OpenVPN == nil {
					m.Platform.OpenVPN = &OpenVPN{}
				}
				m.Platform.OpenVPN.PeerSubnet = vals[0]
			case "platform.openVPN.subnets":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.OpenVPN == nil {
					m.Platform.OpenVPN = &OpenVPN{}
				}
				m.Platform.OpenVPN.Subnets = vals
			case "platform.openVPN.configOPVN":
				if m.Platform == nil {
					m.Platform = &Platform{}
				}
				if m.Platform.OpenVPN == nil {
					m.Platform.OpenVPN = &OpenVPN{}
				}
				m.Platform.OpenVPN.ConfigOPVN = vals[0]
			case "mainPlatform":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
			case "mainPlatform.environment":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				m.MainPlatform.Environment = vals[0]
			case "mainPlatform.wildcardDomain":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				m.MainPlatform.WildcardDomain = vals[0]
			case "mainPlatform.mySQL":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
			case "mainPlatform.mySQL.host":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				m.MainPlatform.MySQL.Host = vals[0]
			case "mainPlatform.mySQL.port":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.MainPlatform.MySQL.Port = int32(val)
			case "mainPlatform.mySQL.username":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				m.MainPlatform.MySQL.Username = vals[0]
			case "mainPlatform.mySQL.password":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				m.MainPlatform.MySQL.Password = vals[0]
			case "mainPlatform.mySQL.diceDB":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				m.MainPlatform.MySQL.DiceDB = vals[0]
			case "mainPlatform.mySQL.pandoraDB":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				m.MainPlatform.MySQL.PandoraDB = vals[0]
			case "mainPlatform.mySQL.sonarDB":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.MySQL == nil {
					m.MainPlatform.MySQL = &MySQL{}
				}
				m.MainPlatform.MySQL.SonarDB = vals[0]
			case "mainPlatform.acceptMaster":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.MainPlatform.AcceptMaster = val
			case "mainPlatform.acceptLB":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.MainPlatform.AcceptLB = val
			case "mainPlatform.dataDiskDevice":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				m.MainPlatform.DataDiskDevice = vals[0]
			case "mainPlatform.dataRoot":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				m.MainPlatform.DataRoot = vals[0]
			case "mainPlatform.scheme":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				m.MainPlatform.Scheme = vals[0]
			case "mainPlatform.port":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.MainPlatform.Port = int32(val)
			case "mainPlatform.registryHost":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				m.MainPlatform.RegistryHost = vals[0]
			case "mainPlatform.openVPN":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.OpenVPN == nil {
					m.MainPlatform.OpenVPN = &OpenVPN{}
				}
			case "mainPlatform.openVPN.peerSubnet":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.OpenVPN == nil {
					m.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.MainPlatform.OpenVPN.PeerSubnet = vals[0]
			case "mainPlatform.openVPN.subnets":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.OpenVPN == nil {
					m.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.MainPlatform.OpenVPN.Subnets = vals
			case "mainPlatform.openVPN.configOPVN":
				if m.MainPlatform == nil {
					m.MainPlatform = &Platform{}
				}
				if m.MainPlatform.OpenVPN == nil {
					m.MainPlatform.OpenVPN = &OpenVPN{}
				}
				m.MainPlatform.OpenVPN.ConfigOPVN = vals[0]
			case "orgID":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = int32(val)
			}
		}
	}
	return nil
}

// Cluster implement urlenc.URLValuesUnmarshaler.
func (m *Cluster) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "nameservers":
				m.Nameservers = vals
			case "containerSubnet":
				m.ContainerSubnet = vals[0]
			case "virtualSubnet":
				m.VirtualSubnet = vals[0]
			case "masterVIP":
				m.MasterVIP = vals[0]
			case "offline":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Offline = val
			}
		}
	}
	return nil
}

// SSH implement urlenc.URLValuesUnmarshaler.
func (m *SSH) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "port":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Port = int32(val)
			case "user":
				m.User = vals[0]
			case "password":
				m.Password = vals[0]
			case "account":
				m.Account = vals[0]
			case "privateKey":
				m.PrivateKey = vals[0]
			case "publicKey":
				m.PublicKey = vals[0]
			}
		}
	}
	return nil
}

// FPS implement urlenc.URLValuesUnmarshaler.
func (m *FPS) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "host":
				m.Host = vals[0]
			case "port":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Port = int32(val)
			case "proxy":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Proxy = val
			}
		}
	}
	return nil
}

// Storage implement urlenc.URLValuesUnmarshaler.
func (m *Storage) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "mountPoint":
				m.MountPoint = vals[0]
			case "nas":
				m.Nas = vals[0]
			case "gluster":
				if m.Gluster == nil {
					m.Gluster = &Gluster{}
				}
			case "gluster.version":
				if m.Gluster == nil {
					m.Gluster = &Gluster{}
				}
				m.Gluster.Version = vals[0]
			case "gluster.hosts":
				if m.Gluster == nil {
					m.Gluster = &Gluster{}
				}
				m.Gluster.Hosts = vals
			case "gluster.server":
				if m.Gluster == nil {
					m.Gluster = &Gluster{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Gluster.Server = val
			case "gluster.replica":
				if m.Gluster == nil {
					m.Gluster = &Gluster{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Gluster.Replica = int32(val)
			case "gluster.brick":
				if m.Gluster == nil {
					m.Gluster = &Gluster{}
				}
				m.Gluster.Brick = vals[0]
			}
		}
	}
	return nil
}

// Gluster implement urlenc.URLValuesUnmarshaler.
func (m *Gluster) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "version":
				m.Version = vals[0]
			case "hosts":
				m.Hosts = vals
			case "server":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Server = val
			case "replica":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Replica = int32(val)
			case "brick":
				m.Brick = vals[0]
			}
		}
	}
	return nil
}

// Docker implement urlenc.URLValuesUnmarshaler.
func (m *Docker) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dataRoot":
				m.DataRoot = vals[0]
			case "execRoot":
				m.ExecRoot = vals[0]
			case "bip":
				m.Bip = vals[0]
			case "fixedCIDR":
				m.FixedCIDR = vals[0]
			}
		}
	}
	return nil
}

// Node implement urlenc.URLValuesUnmarshaler.
func (m *Node) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ip":
				m.Ip = vals[0]
			case "type":
				m.Type = vals[0]
			case "tag":
				m.Tag = vals[0]
			}
		}
	}
	return nil
}

// MySQL implement urlenc.URLValuesUnmarshaler.
func (m *MySQL) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "host":
				m.Host = vals[0]
			case "port":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Port = int32(val)
			case "username":
				m.Username = vals[0]
			case "password":
				m.Password = vals[0]
			case "diceDB":
				m.DiceDB = vals[0]
			case "pandoraDB":
				m.PandoraDB = vals[0]
			case "sonarDB":
				m.SonarDB = vals[0]
			}
		}
	}
	return nil
}

// OpenVPN implement urlenc.URLValuesUnmarshaler.
func (m *OpenVPN) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "peerSubnet":
				m.PeerSubnet = vals[0]
			case "subnets":
				m.Subnets = vals
			case "configOPVN":
				m.ConfigOPVN = vals[0]
			}
		}
	}
	return nil
}

// Platform implement urlenc.URLValuesUnmarshaler.
func (m *Platform) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "environment":
				m.Environment = vals[0]
			case "wildcardDomain":
				m.WildcardDomain = vals[0]
			case "mySQL":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
			case "mySQL.host":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				m.MySQL.Host = vals[0]
			case "mySQL.port":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.MySQL.Port = int32(val)
			case "mySQL.username":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				m.MySQL.Username = vals[0]
			case "mySQL.password":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				m.MySQL.Password = vals[0]
			case "mySQL.diceDB":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				m.MySQL.DiceDB = vals[0]
			case "mySQL.pandoraDB":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				m.MySQL.PandoraDB = vals[0]
			case "mySQL.sonarDB":
				if m.MySQL == nil {
					m.MySQL = &MySQL{}
				}
				m.MySQL.SonarDB = vals[0]
			case "acceptMaster":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AcceptMaster = val
			case "acceptLB":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AcceptLB = val
			case "dataDiskDevice":
				m.DataDiskDevice = vals[0]
			case "dataRoot":
				m.DataRoot = vals[0]
			case "scheme":
				m.Scheme = vals[0]
			case "port":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Port = int32(val)
			case "registryHost":
				m.RegistryHost = vals[0]
			case "openVPN":
				if m.OpenVPN == nil {
					m.OpenVPN = &OpenVPN{}
				}
			case "openVPN.peerSubnet":
				if m.OpenVPN == nil {
					m.OpenVPN = &OpenVPN{}
				}
				m.OpenVPN.PeerSubnet = vals[0]
			case "openVPN.subnets":
				if m.OpenVPN == nil {
					m.OpenVPN = &OpenVPN{}
				}
				m.OpenVPN.Subnets = vals
			case "openVPN.configOPVN":
				if m.OpenVPN == nil {
					m.OpenVPN = &OpenVPN{}
				}
				m.OpenVPN.ConfigOPVN = vals[0]
			}
		}
	}
	return nil
}

// ManageConfig implement urlenc.URLValuesUnmarshaler.
func (m *ManageConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "address":
				m.Address = vals[0]
			case "caData":
				m.CaData = vals[0]
			case "certData":
				m.CertData = vals[0]
			case "keyData":
				m.KeyData = vals[0]
			case "token":
				m.Token = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "credentialSource":
				m.CredentialSource = vals[0]
			}
		}
	}
	return nil
}
