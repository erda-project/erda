// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: cluster.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// ClusterServiceHandler is the server API for ClusterService service.
type ClusterServiceHandler interface {
	// GET /api/clusters
	ListCluster(context.Context, *ListClusterRequest) (*ListClusterResponse, error)
	// GET /api/clusters/{idOrName}
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	// POST /api/clusters
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	// PUT /api/clusters
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
	// DELETE /api/clusters/{clusterName}
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	// PATCH /api/clusters
	PatchCluster(context.Context, *PatchClusterRequest) (*PatchClusterResponse, error)
}

// RegisterClusterServiceHandler register ClusterServiceHandler to http.Router.
func RegisterClusterServiceHandler(r http.Router, srv ClusterServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ListCluster := func(method, path string, fn func(context.Context, *ListClusterRequest) (*ListClusterResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListClusterRequest))
		}
		var ListCluster_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListCluster_info = transport.NewServiceInfo("erda.core.clustermanager.cluster.ClusterService", "ListCluster", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListCluster_info)
				}
				r = r.WithContext(ctx)
				var in ListClusterRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["clusterType"]; len(vals) > 0 {
					in.ClusterType = vals[0]
				}
				if vals := params["orgID"]; len(vals) > 0 {
					val, err := strconv.ParseUint(vals[0], 10, 32)
					if err != nil {
						return nil, err
					}
					in.OrgID = uint32(val)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetCluster := func(method, path string, fn func(context.Context, *GetClusterRequest) (*GetClusterResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetClusterRequest))
		}
		var GetCluster_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetCluster_info = transport.NewServiceInfo("erda.core.clustermanager.cluster.ClusterService", "GetCluster", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetCluster_info)
				}
				r = r.WithContext(ctx)
				var in GetClusterRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "idOrName":
							in.IdOrName = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateCluster := func(method, path string, fn func(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateClusterRequest))
		}
		var CreateCluster_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateCluster_info = transport.NewServiceInfo("erda.core.clustermanager.cluster.ClusterService", "CreateCluster", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateCluster_info)
				}
				r = r.WithContext(ctx)
				var in CreateClusterRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateCluster := func(method, path string, fn func(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateClusterRequest))
		}
		var UpdateCluster_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateCluster_info = transport.NewServiceInfo("erda.core.clustermanager.cluster.ClusterService", "UpdateCluster", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateCluster_info)
				}
				r = r.WithContext(ctx)
				var in UpdateClusterRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteCluster := func(method, path string, fn func(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteClusterRequest))
		}
		var DeleteCluster_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteCluster_info = transport.NewServiceInfo("erda.core.clustermanager.cluster.ClusterService", "DeleteCluster", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteCluster_info)
				}
				r = r.WithContext(ctx)
				var in DeleteClusterRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "clusterName":
							in.ClusterName = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PatchCluster := func(method, path string, fn func(context.Context, *PatchClusterRequest) (*PatchClusterResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PatchClusterRequest))
		}
		var PatchCluster_info transport.ServiceInfo
		if h.Interceptor != nil {
			PatchCluster_info = transport.NewServiceInfo("erda.core.clustermanager.cluster.ClusterService", "PatchCluster", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PatchCluster_info)
				}
				r = r.WithContext(ctx)
				var in PatchClusterRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListCluster("GET", "/api/clusters", srv.ListCluster)
	add_GetCluster("GET", "/api/clusters/{idOrName}", srv.GetCluster)
	add_CreateCluster("POST", "/api/clusters", srv.CreateCluster)
	add_UpdateCluster("PUT", "/api/clusters", srv.UpdateCluster)
	add_DeleteCluster("DELETE", "/api/clusters/{clusterName}", srv.DeleteCluster)
	add_PatchCluster("PATCH", "/api/clusters", srv.PatchCluster)
}
