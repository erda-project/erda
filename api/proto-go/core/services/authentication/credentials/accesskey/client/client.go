// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: accesskey.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/services/authentication/credentials/accesskey/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// AccessKeyService accesskey.proto
	AccessKeyService() pb.AccessKeyServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		accessKeyService: pb.NewAccessKeyServiceClient(cc),
	}
}

type serviceClients struct {
	accessKeyService pb.AccessKeyServiceClient
}

func (c *serviceClients) AccessKeyService() pb.AccessKeyServiceClient {
	return c.accessKeyService
}

type accessKeyServiceWrapper struct {
	client pb.AccessKeyServiceClient
	opts   []grpc1.CallOption
}

func (s *accessKeyServiceWrapper) QueryAccessKeys(ctx context.Context, req *pb.QueryAccessKeysRequest) (*pb.QueryAccessKeysResponse, error) {
	return s.client.QueryAccessKeys(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *accessKeyServiceWrapper) GetAccessKey(ctx context.Context, req *pb.GetAccessKeyRequest) (*pb.GetAccessKeyResponse, error) {
	return s.client.GetAccessKey(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *accessKeyServiceWrapper) CreateAccessKey(ctx context.Context, req *pb.CreateAccessKeyRequest) (*pb.CreateAccessKeyResponse, error) {
	return s.client.CreateAccessKey(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *accessKeyServiceWrapper) UpdateAccessKey(ctx context.Context, req *pb.UpdateAccessKeyRequest) (*pb.UpdateAccessKeyResponse, error) {
	return s.client.UpdateAccessKey(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *accessKeyServiceWrapper) DeleteAccessKey(ctx context.Context, req *pb.DeleteAccessKeyRequest) (*pb.DeleteAccessKeyResponse, error) {
	return s.client.DeleteAccessKey(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
