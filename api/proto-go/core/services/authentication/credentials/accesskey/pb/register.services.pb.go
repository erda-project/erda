// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: accesskey.proto

package pb

import (
	transport "github.com/erda-project/erda-infra/pkg/transport"
	reflect "reflect"
)

// RegisterAccessKeyServiceImp accesskey.proto
func RegisterAccessKeyServiceImp(regester transport.Register, srv AccessKeyServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterAccessKeyServiceHandler(regester, AccessKeyServiceHandler(srv), _ops.HTTP...)
	RegisterAccessKeyServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.services.authentication.credentials.accesskey.AccessKeyService",
	)
}

var (
	accessKeyServiceClientType  = reflect.TypeOf((*AccessKeyServiceClient)(nil)).Elem()
	accessKeyServiceServerType  = reflect.TypeOf((*AccessKeyServiceServer)(nil)).Elem()
	accessKeyServiceHandlerType = reflect.TypeOf((*AccessKeyServiceHandler)(nil)).Elem()
)

// AccessKeyServiceClientType .
func AccessKeyServiceClientType() reflect.Type { return accessKeyServiceClientType }

// AccessKeyServiceServerType .
func AccessKeyServiceServerType() reflect.Type { return accessKeyServiceServerType }

// AccessKeyServiceHandlerType .
func AccessKeyServiceHandlerType() reflect.Type { return accessKeyServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		accessKeyServiceClientType,
		// server types
		accessKeyServiceServerType,
		// handler types
		accessKeyServiceHandlerType,
	}
}
