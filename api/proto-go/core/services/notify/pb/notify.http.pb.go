// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: notify.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// NotifyServiceHandler is the server API for NotifyService service.
type NotifyServiceHandler interface {
	// +private
	// GET /api/notify/all-templates
	GetAllNotifyTemplates(context.Context, *GetAllNotifyTemplatesRequest) (*GetAllNotifyTemplatesResponse, error)
	// GET /api/notify/templates
	GetNotifyTemplate(context.Context, *GetNotifyTemplateRequest) (*GetNotifyTemplateResponse, error)
	// POST /api/notify
	CreateNotify(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error)
	// DELETE /api/notify/{id}
	DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyResponse, error)
	// PUT /api/notify/{id}
	UpdateNotify(context.Context, *UpdateNotifyRequest) (*UpdateNotifyResponse, error)
	// GET /api/notify
	GetUserNotifyList(context.Context, *GetUserNotifyListRequest) (*GetUserNotifyListResponse, error)
	// PUT /api/notify/{id}/switch
	NotifyEnable(context.Context, *NotifyEnableRequest) (*NotifyEnableResponse, error)
	// POST /api/notify/user-define/templates
	CreateUserDefineNotifyTemplate(context.Context, *CreateUserDefineNotifyTemplateRequest) (*CreateUserDefineNotifyTemplateResponse, error)
	// GET /api/notify/{id}/detail
	GetNotifyDetail(context.Context, *GetNotifyDetailRequest) (*GetNotifyDetailResponse, error)
	// GET /api/notify/all-group
	GetAllGroups(context.Context, *GetAllGroupsRequest) (*GetAllGroupsResponse, error)
}

// RegisterNotifyServiceHandler register NotifyServiceHandler to http.Router.
func RegisterNotifyServiceHandler(r http.Router, srv NotifyServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GetAllNotifyTemplates := func(method, path string, fn func(context.Context, *GetAllNotifyTemplatesRequest) (*GetAllNotifyTemplatesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetAllNotifyTemplatesRequest))
		}
		var GetAllNotifyTemplates_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetAllNotifyTemplates_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetAllNotifyTemplates", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetAllNotifyTemplates_info)
				}
				r = r.WithContext(ctx)
				var in GetAllNotifyTemplatesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetNotifyTemplate := func(method, path string, fn func(context.Context, *GetNotifyTemplateRequest) (*GetNotifyTemplateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetNotifyTemplateRequest))
		}
		var GetNotifyTemplate_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetNotifyTemplate_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetNotifyTemplate", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetNotifyTemplate_info)
				}
				r = r.WithContext(ctx)
				var in GetNotifyTemplateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateNotify := func(method, path string, fn func(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateNotifyRequest))
		}
		var CreateNotify_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateNotify_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "CreateNotify", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateNotify_info)
				}
				r = r.WithContext(ctx)
				var in CreateNotifyRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteNotify := func(method, path string, fn func(context.Context, *DeleteNotifyRequest) (*DeleteNotifyResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteNotifyRequest))
		}
		var DeleteNotify_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteNotify_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "DeleteNotify", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteNotify_info)
				}
				r = r.WithContext(ctx)
				var in DeleteNotifyRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateNotify := func(method, path string, fn func(context.Context, *UpdateNotifyRequest) (*UpdateNotifyResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateNotifyRequest))
		}
		var UpdateNotify_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateNotify_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "UpdateNotify", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateNotify_info)
				}
				r = r.WithContext(ctx)
				var in UpdateNotifyRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetUserNotifyList := func(method, path string, fn func(context.Context, *GetUserNotifyListRequest) (*GetUserNotifyListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetUserNotifyListRequest))
		}
		var GetUserNotifyList_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetUserNotifyList_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetUserNotifyList", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetUserNotifyList_info)
				}
				r = r.WithContext(ctx)
				var in GetUserNotifyListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_NotifyEnable := func(method, path string, fn func(context.Context, *NotifyEnableRequest) (*NotifyEnableResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*NotifyEnableRequest))
		}
		var NotifyEnable_info transport.ServiceInfo
		if h.Interceptor != nil {
			NotifyEnable_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "NotifyEnable", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, NotifyEnable_info)
				}
				r = r.WithContext(ctx)
				var in NotifyEnableRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateUserDefineNotifyTemplate := func(method, path string, fn func(context.Context, *CreateUserDefineNotifyTemplateRequest) (*CreateUserDefineNotifyTemplateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateUserDefineNotifyTemplateRequest))
		}
		var CreateUserDefineNotifyTemplate_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateUserDefineNotifyTemplate_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "CreateUserDefineNotifyTemplate", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateUserDefineNotifyTemplate_info)
				}
				r = r.WithContext(ctx)
				var in CreateUserDefineNotifyTemplateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetNotifyDetail := func(method, path string, fn func(context.Context, *GetNotifyDetailRequest) (*GetNotifyDetailResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetNotifyDetailRequest))
		}
		var GetNotifyDetail_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetNotifyDetail_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetNotifyDetail", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetNotifyDetail_info)
				}
				r = r.WithContext(ctx)
				var in GetNotifyDetailRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetAllGroups := func(method, path string, fn func(context.Context, *GetAllGroupsRequest) (*GetAllGroupsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetAllGroupsRequest))
		}
		var GetAllGroups_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetAllGroups_info = transport.NewServiceInfo("erda.core.services.notify.NotifyService", "GetAllGroups", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetAllGroups_info)
				}
				r = r.WithContext(ctx)
				var in GetAllGroupsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetAllNotifyTemplates("GET", "/api/notify/all-templates", srv.GetAllNotifyTemplates)
	add_GetNotifyTemplate("GET", "/api/notify/templates", srv.GetNotifyTemplate)
	add_CreateNotify("POST", "/api/notify", srv.CreateNotify)
	add_DeleteNotify("DELETE", "/api/notify/{id}", srv.DeleteNotify)
	add_UpdateNotify("PUT", "/api/notify/{id}", srv.UpdateNotify)
	add_GetUserNotifyList("GET", "/api/notify", srv.GetUserNotifyList)
	add_NotifyEnable("PUT", "/api/notify/{id}/switch", srv.NotifyEnable)
	add_CreateUserDefineNotifyTemplate("POST", "/api/notify/user-define/templates", srv.CreateUserDefineNotifyTemplate)
	add_GetNotifyDetail("GET", "/api/notify/{id}/detail", srv.GetNotifyDetail)
	add_GetAllGroups("GET", "/api/notify/all-group", srv.GetAllGroups)
}
