// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: filemanager.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/services/filemanager/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// FileManagerService filemanager.proto
	FileManagerService() pb.FileManagerServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		fileManagerService: pb.NewFileManagerServiceClient(cc),
	}
}

type serviceClients struct {
	fileManagerService pb.FileManagerServiceClient
}

func (c *serviceClients) FileManagerService() pb.FileManagerServiceClient {
	return c.fileManagerService
}

type fileManagerServiceWrapper struct {
	client pb.FileManagerServiceClient
	opts   []grpc1.CallOption
}

func (s *fileManagerServiceWrapper) ListFiles(ctx context.Context, req *pb.ListFilesRequest) (*pb.ListFilesResponse, error) {
	return s.client.ListFiles(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *fileManagerServiceWrapper) ReadFile(ctx context.Context, req *pb.ReadFileRequest) (*pb.ReadFileResponse, error) {
	return s.client.ReadFile(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *fileManagerServiceWrapper) WriteFile(ctx context.Context, req *pb.WriteFileRequest) (*pb.WriteFileResponse, error) {
	return s.client.WriteFile(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *fileManagerServiceWrapper) MakeDirectory(ctx context.Context, req *pb.MakeDirectoryRequest) (*pb.MakeDirectoryResponse, error) {
	return s.client.MakeDirectory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *fileManagerServiceWrapper) MoveFile(ctx context.Context, req *pb.MoveFileRequest) (*pb.MoveFileResponse, error) {
	return s.client.MoveFile(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *fileManagerServiceWrapper) DeleteFile(ctx context.Context, req *pb.DeleteFileRequest) (*pb.DeleteFileResponse, error) {
	return s.client.DeleteFile(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
