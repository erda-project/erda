// Code generated by protoc-gen-go-json. DO NOT EDIT.
// Source: filemanager.proto

package pb

import (
	bytes "bytes"
	json "encoding/json"

	jsonpb "github.com/erda-project/erda-infra/pkg/transport/http/encoding/jsonpb"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "encoding/json" package it is being compiled against.
var _ json.Marshaler = (*ListFilesRequest)(nil)
var _ json.Unmarshaler = (*ListFilesRequest)(nil)
var _ json.Marshaler = (*ListFilesResponse)(nil)
var _ json.Unmarshaler = (*ListFilesResponse)(nil)
var _ json.Marshaler = (*FileDirectory)(nil)
var _ json.Unmarshaler = (*FileDirectory)(nil)
var _ json.Marshaler = (*FileInfo)(nil)
var _ json.Unmarshaler = (*FileInfo)(nil)
var _ json.Marshaler = (*ReadFileRequest)(nil)
var _ json.Unmarshaler = (*ReadFileRequest)(nil)
var _ json.Marshaler = (*ReadFileResponse)(nil)
var _ json.Unmarshaler = (*ReadFileResponse)(nil)
var _ json.Marshaler = (*FileData)(nil)
var _ json.Unmarshaler = (*FileData)(nil)
var _ json.Marshaler = (*WriteFileRequest)(nil)
var _ json.Unmarshaler = (*WriteFileRequest)(nil)
var _ json.Marshaler = (*WriteFileResponse)(nil)
var _ json.Unmarshaler = (*WriteFileResponse)(nil)
var _ json.Marshaler = (*MakeDirectoryRequest)(nil)
var _ json.Unmarshaler = (*MakeDirectoryRequest)(nil)
var _ json.Marshaler = (*MakeDirectoryResponse)(nil)
var _ json.Unmarshaler = (*MakeDirectoryResponse)(nil)
var _ json.Marshaler = (*MoveFileRequest)(nil)
var _ json.Unmarshaler = (*MoveFileRequest)(nil)
var _ json.Marshaler = (*MoveFileResponse)(nil)
var _ json.Unmarshaler = (*MoveFileResponse)(nil)
var _ json.Marshaler = (*DeleteFileRequest)(nil)
var _ json.Unmarshaler = (*DeleteFileRequest)(nil)
var _ json.Marshaler = (*DeleteFileResponse)(nil)
var _ json.Unmarshaler = (*DeleteFileResponse)(nil)

// ListFilesRequest implement json.Marshaler.
func (m *ListFilesRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// ListFilesRequest implement json.Marshaler.
func (m *ListFilesRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// ListFilesResponse implement json.Marshaler.
func (m *ListFilesResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// ListFilesResponse implement json.Marshaler.
func (m *ListFilesResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// FileDirectory implement json.Marshaler.
func (m *FileDirectory) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// FileDirectory implement json.Marshaler.
func (m *FileDirectory) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// FileInfo implement json.Marshaler.
func (m *FileInfo) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// FileInfo implement json.Marshaler.
func (m *FileInfo) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// ReadFileRequest implement json.Marshaler.
func (m *ReadFileRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// ReadFileRequest implement json.Marshaler.
func (m *ReadFileRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// ReadFileResponse implement json.Marshaler.
func (m *ReadFileResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// ReadFileResponse implement json.Marshaler.
func (m *ReadFileResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// FileData implement json.Marshaler.
func (m *FileData) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// FileData implement json.Marshaler.
func (m *FileData) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// WriteFileRequest implement json.Marshaler.
func (m *WriteFileRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// WriteFileRequest implement json.Marshaler.
func (m *WriteFileRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// WriteFileResponse implement json.Marshaler.
func (m *WriteFileResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// WriteFileResponse implement json.Marshaler.
func (m *WriteFileResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// MakeDirectoryRequest implement json.Marshaler.
func (m *MakeDirectoryRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// MakeDirectoryRequest implement json.Marshaler.
func (m *MakeDirectoryRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// MakeDirectoryResponse implement json.Marshaler.
func (m *MakeDirectoryResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// MakeDirectoryResponse implement json.Marshaler.
func (m *MakeDirectoryResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// MoveFileRequest implement json.Marshaler.
func (m *MoveFileRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// MoveFileRequest implement json.Marshaler.
func (m *MoveFileRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// MoveFileResponse implement json.Marshaler.
func (m *MoveFileResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// MoveFileResponse implement json.Marshaler.
func (m *MoveFileResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// DeleteFileRequest implement json.Marshaler.
func (m *DeleteFileRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// DeleteFileRequest implement json.Marshaler.
func (m *DeleteFileRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// DeleteFileResponse implement json.Marshaler.
func (m *DeleteFileResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// DeleteFileResponse implement json.Marshaler.
func (m *DeleteFileResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}
