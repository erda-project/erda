// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: filemanager.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// FileManagerServiceClient is the client API for FileManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagerServiceClient interface {
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	MakeDirectory(ctx context.Context, in *MakeDirectoryRequest, opts ...grpc.CallOption) (*MakeDirectoryResponse, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
}

type fileManagerServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewFileManagerServiceClient(cc grpc1.ClientConnInterface) FileManagerServiceClient {
	return &fileManagerServiceClient{cc}
}

func (c *fileManagerServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.filemanager.FileManagerService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.filemanager.FileManagerService/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.filemanager.FileManagerService/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) MakeDirectory(ctx context.Context, in *MakeDirectoryRequest, opts ...grpc.CallOption) (*MakeDirectoryResponse, error) {
	out := new(MakeDirectoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.filemanager.FileManagerService/MakeDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error) {
	out := new(MoveFileResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.filemanager.FileManagerService/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/erda.core.services.filemanager.FileManagerService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagerServiceServer is the server API for FileManagerService service.
// All implementations should embed UnimplementedFileManagerServiceServer
// for forward compatibility
type FileManagerServiceServer interface {
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	MakeDirectory(context.Context, *MakeDirectoryRequest) (*MakeDirectoryResponse, error)
	MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
}

// UnimplementedFileManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFileManagerServiceServer struct {
}

func (*UnimplementedFileManagerServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (*UnimplementedFileManagerServiceServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (*UnimplementedFileManagerServiceServer) WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (*UnimplementedFileManagerServiceServer) MakeDirectory(context.Context, *MakeDirectoryRequest) (*MakeDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDirectory not implemented")
}
func (*UnimplementedFileManagerServiceServer) MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (*UnimplementedFileManagerServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}

func RegisterFileManagerServiceServer(s grpc1.ServiceRegistrar, srv FileManagerServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_FileManagerService_serviceDesc(srv, opts...), srv)
}

var _FileManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.services.filemanager.FileManagerService",
	HandlerType: (*FileManagerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "filemanager.proto",
}

func _get_FileManagerService_serviceDesc(srv FileManagerServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_FileManagerService_ListFiles_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListFiles(ctx, req.(*ListFilesRequest))
	}
	var _FileManagerService_ListFiles_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FileManagerService_ListFiles_info = transport.NewServiceInfo("erda.core.services.filemanager.FileManagerService", "ListFiles", srv)
		_FileManagerService_ListFiles_Handler = h.Interceptor(_FileManagerService_ListFiles_Handler)
	}

	_FileManagerService_ReadFile_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ReadFile(ctx, req.(*ReadFileRequest))
	}
	var _FileManagerService_ReadFile_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FileManagerService_ReadFile_info = transport.NewServiceInfo("erda.core.services.filemanager.FileManagerService", "ReadFile", srv)
		_FileManagerService_ReadFile_Handler = h.Interceptor(_FileManagerService_ReadFile_Handler)
	}

	_FileManagerService_WriteFile_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.WriteFile(ctx, req.(*WriteFileRequest))
	}
	var _FileManagerService_WriteFile_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FileManagerService_WriteFile_info = transport.NewServiceInfo("erda.core.services.filemanager.FileManagerService", "WriteFile", srv)
		_FileManagerService_WriteFile_Handler = h.Interceptor(_FileManagerService_WriteFile_Handler)
	}

	_FileManagerService_MakeDirectory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MakeDirectory(ctx, req.(*MakeDirectoryRequest))
	}
	var _FileManagerService_MakeDirectory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FileManagerService_MakeDirectory_info = transport.NewServiceInfo("erda.core.services.filemanager.FileManagerService", "MakeDirectory", srv)
		_FileManagerService_MakeDirectory_Handler = h.Interceptor(_FileManagerService_MakeDirectory_Handler)
	}

	_FileManagerService_MoveFile_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MoveFile(ctx, req.(*MoveFileRequest))
	}
	var _FileManagerService_MoveFile_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FileManagerService_MoveFile_info = transport.NewServiceInfo("erda.core.services.filemanager.FileManagerService", "MoveFile", srv)
		_FileManagerService_MoveFile_Handler = h.Interceptor(_FileManagerService_MoveFile_Handler)
	}

	_FileManagerService_DeleteFile_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	var _FileManagerService_DeleteFile_info transport.ServiceInfo
	if h.Interceptor != nil {
		_FileManagerService_DeleteFile_info = transport.NewServiceInfo("erda.core.services.filemanager.FileManagerService", "DeleteFile", srv)
		_FileManagerService_DeleteFile_Handler = h.Interceptor(_FileManagerService_DeleteFile_Handler)
	}

	var serviceDesc = _FileManagerService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListFilesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FileManagerServiceServer).ListFiles(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FileManagerService_ListFiles_info)
				}
				if interceptor == nil {
					return _FileManagerService_ListFiles_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.filemanager.FileManagerService/ListFiles",
				}
				return interceptor(ctx, in, info, _FileManagerService_ListFiles_Handler)
			},
		},
		{
			MethodName: "ReadFile",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReadFileRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FileManagerServiceServer).ReadFile(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FileManagerService_ReadFile_info)
				}
				if interceptor == nil {
					return _FileManagerService_ReadFile_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.filemanager.FileManagerService/ReadFile",
				}
				return interceptor(ctx, in, info, _FileManagerService_ReadFile_Handler)
			},
		},
		{
			MethodName: "WriteFile",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(WriteFileRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FileManagerServiceServer).WriteFile(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FileManagerService_WriteFile_info)
				}
				if interceptor == nil {
					return _FileManagerService_WriteFile_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.filemanager.FileManagerService/WriteFile",
				}
				return interceptor(ctx, in, info, _FileManagerService_WriteFile_Handler)
			},
		},
		{
			MethodName: "MakeDirectory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MakeDirectoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FileManagerServiceServer).MakeDirectory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FileManagerService_MakeDirectory_info)
				}
				if interceptor == nil {
					return _FileManagerService_MakeDirectory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.filemanager.FileManagerService/MakeDirectory",
				}
				return interceptor(ctx, in, info, _FileManagerService_MakeDirectory_Handler)
			},
		},
		{
			MethodName: "MoveFile",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MoveFileRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FileManagerServiceServer).MoveFile(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FileManagerService_MoveFile_info)
				}
				if interceptor == nil {
					return _FileManagerService_MoveFile_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.filemanager.FileManagerService/MoveFile",
				}
				return interceptor(ctx, in, info, _FileManagerService_MoveFile_Handler)
			},
		},
		{
			MethodName: "DeleteFile",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteFileRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(FileManagerServiceServer).DeleteFile(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _FileManagerService_DeleteFile_info)
				}
				if interceptor == nil {
					return _FileManagerService_DeleteFile_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.services.filemanager.FileManagerService/DeleteFile",
				}
				return interceptor(ctx, in, info, _FileManagerService_DeleteFile_Handler)
			},
		},
	}
	return &serviceDesc
}
