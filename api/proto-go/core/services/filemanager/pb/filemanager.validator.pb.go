// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filemanager.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ListFilesRequest) Validate() error {
	if this.ContainerID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContainerID", fmt.Errorf(`value '%v' must not be an empty string`, this.ContainerID))
	}
	if this.HostIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HostIP", fmt.Errorf(`value '%v' must not be an empty string`, this.HostIP))
	}
	if this.Scope == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Scope", fmt.Errorf(`value '%v' must not be an empty string`, this.Scope))
	}
	return nil
}
func (this *ListFilesResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *FileDirectory) Validate() error {
	for _, item := range this.Files {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Files", err)
			}
		}
	}
	return nil
}
func (this *FileInfo) Validate() error {
	return nil
}
func (this *ReadFileRequest) Validate() error {
	if this.ContainerID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContainerID", fmt.Errorf(`value '%v' must not be an empty string`, this.ContainerID))
	}
	if this.HostIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HostIP", fmt.Errorf(`value '%v' must not be an empty string`, this.HostIP))
	}
	if this.Scope == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Scope", fmt.Errorf(`value '%v' must not be an empty string`, this.Scope))
	}
	if this.Path == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Path", fmt.Errorf(`value '%v' must not be an empty string`, this.Path))
	}
	return nil
}
func (this *ReadFileResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *FileData) Validate() error {
	return nil
}
func (this *WriteFileRequest) Validate() error {
	if this.ContainerID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContainerID", fmt.Errorf(`value '%v' must not be an empty string`, this.ContainerID))
	}
	if this.HostIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HostIP", fmt.Errorf(`value '%v' must not be an empty string`, this.HostIP))
	}
	if this.Scope == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Scope", fmt.Errorf(`value '%v' must not be an empty string`, this.Scope))
	}
	return nil
}
func (this *WriteFileResponse) Validate() error {
	return nil
}
func (this *MakeDirectoryRequest) Validate() error {
	if this.ContainerID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContainerID", fmt.Errorf(`value '%v' must not be an empty string`, this.ContainerID))
	}
	if this.HostIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HostIP", fmt.Errorf(`value '%v' must not be an empty string`, this.HostIP))
	}
	if this.Scope == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Scope", fmt.Errorf(`value '%v' must not be an empty string`, this.Scope))
	}
	return nil
}
func (this *MakeDirectoryResponse) Validate() error {
	return nil
}
func (this *MoveFileRequest) Validate() error {
	if this.ContainerID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContainerID", fmt.Errorf(`value '%v' must not be an empty string`, this.ContainerID))
	}
	if this.HostIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HostIP", fmt.Errorf(`value '%v' must not be an empty string`, this.HostIP))
	}
	if this.Scope == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Scope", fmt.Errorf(`value '%v' must not be an empty string`, this.Scope))
	}
	return nil
}
func (this *MoveFileResponse) Validate() error {
	return nil
}
func (this *DeleteFileRequest) Validate() error {
	if this.ContainerID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContainerID", fmt.Errorf(`value '%v' must not be an empty string`, this.ContainerID))
	}
	if this.HostIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HostIP", fmt.Errorf(`value '%v' must not be an empty string`, this.HostIP))
	}
	if this.Scope == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Scope", fmt.Errorf(`value '%v' must not be an empty string`, this.Scope))
	}
	return nil
}
func (this *DeleteFileResponse) Validate() error {
	return nil
}
