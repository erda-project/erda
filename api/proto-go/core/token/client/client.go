// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: token.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/token/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// TokenService token.proto
	TokenService() pb.TokenServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		tokenService: pb.NewTokenServiceClient(cc),
	}
}

type serviceClients struct {
	tokenService pb.TokenServiceClient
}

func (c *serviceClients) TokenService() pb.TokenServiceClient {
	return c.tokenService
}

type tokenServiceWrapper struct {
	client pb.TokenServiceClient
	opts   []grpc1.CallOption
}

func (s *tokenServiceWrapper) GetToken(ctx context.Context, req *pb.GetTokenRequest) (*pb.GetTokenResponse, error) {
	return s.client.GetToken(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *tokenServiceWrapper) QueryTokens(ctx context.Context, req *pb.QueryTokensRequest) (*pb.QueryTokensResponse, error) {
	return s.client.QueryTokens(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *tokenServiceWrapper) CreateToken(ctx context.Context, req *pb.CreateTokenRequest) (*pb.CreateTokenResponse, error) {
	return s.client.CreateToken(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *tokenServiceWrapper) UpdateToken(ctx context.Context, req *pb.UpdateTokenRequest) (*pb.UpdateTokenResponse, error) {
	return s.client.UpdateToken(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *tokenServiceWrapper) DeleteToken(ctx context.Context, req *pb.DeleteTokenRequest) (*pb.DeleteTokenResponse, error) {
	return s.client.DeleteToken(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
