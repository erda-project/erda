// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: token.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	QueryTokens(ctx context.Context, in *QueryTokensRequest, opts ...grpc.CallOption) (*QueryTokensResponse, error)
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResponse, error)
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error)
}

type tokenServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewTokenServiceClient(cc grpc1.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/erda.core.token.TokenService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) QueryTokens(ctx context.Context, in *QueryTokensRequest, opts ...grpc.CallOption) (*QueryTokensResponse, error) {
	out := new(QueryTokensResponse)
	err := c.cc.Invoke(ctx, "/erda.core.token.TokenService/QueryTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/erda.core.token.TokenService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResponse, error) {
	out := new(UpdateTokenResponse)
	err := c.cc.Invoke(ctx, "/erda.core.token.TokenService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	err := c.cc.Invoke(ctx, "/erda.core.token.TokenService/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations should embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	QueryTokens(context.Context, *QueryTokensRequest) (*QueryTokensResponse, error)
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResponse, error)
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
}

// UnimplementedTokenServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (*UnimplementedTokenServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedTokenServiceServer) QueryTokens(context.Context, *QueryTokensRequest) (*QueryTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokens not implemented")
}
func (*UnimplementedTokenServiceServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedTokenServiceServer) UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedTokenServiceServer) DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}

func RegisterTokenServiceServer(s grpc1.ServiceRegistrar, srv TokenServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_TokenService_serviceDesc(srv, opts...), srv)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.token.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "token.proto",
}

func _get_TokenService_serviceDesc(srv TokenServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_TokenService_GetToken_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetToken(ctx, req.(*GetTokenRequest))
	}
	var _TokenService_GetToken_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TokenService_GetToken_info = transport.NewServiceInfo("erda.core.token.TokenService", "GetToken", srv)
		_TokenService_GetToken_Handler = h.Interceptor(_TokenService_GetToken_Handler)
	}

	_TokenService_QueryTokens_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryTokens(ctx, req.(*QueryTokensRequest))
	}
	var _TokenService_QueryTokens_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TokenService_QueryTokens_info = transport.NewServiceInfo("erda.core.token.TokenService", "QueryTokens", srv)
		_TokenService_QueryTokens_Handler = h.Interceptor(_TokenService_QueryTokens_Handler)
	}

	_TokenService_CreateToken_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateToken(ctx, req.(*CreateTokenRequest))
	}
	var _TokenService_CreateToken_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TokenService_CreateToken_info = transport.NewServiceInfo("erda.core.token.TokenService", "CreateToken", srv)
		_TokenService_CreateToken_Handler = h.Interceptor(_TokenService_CreateToken_Handler)
	}

	_TokenService_UpdateToken_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	var _TokenService_UpdateToken_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TokenService_UpdateToken_info = transport.NewServiceInfo("erda.core.token.TokenService", "UpdateToken", srv)
		_TokenService_UpdateToken_Handler = h.Interceptor(_TokenService_UpdateToken_Handler)
	}

	_TokenService_DeleteToken_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	var _TokenService_DeleteToken_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TokenService_DeleteToken_info = transport.NewServiceInfo("erda.core.token.TokenService", "DeleteToken", srv)
		_TokenService_DeleteToken_Handler = h.Interceptor(_TokenService_DeleteToken_Handler)
	}

	var serviceDesc = _TokenService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetTokenRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TokenServiceServer).GetToken(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TokenService_GetToken_info)
				}
				if interceptor == nil {
					return _TokenService_GetToken_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.token.TokenService/GetToken",
				}
				return interceptor(ctx, in, info, _TokenService_GetToken_Handler)
			},
		},
		{
			MethodName: "QueryTokens",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryTokensRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TokenServiceServer).QueryTokens(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TokenService_QueryTokens_info)
				}
				if interceptor == nil {
					return _TokenService_QueryTokens_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.token.TokenService/QueryTokens",
				}
				return interceptor(ctx, in, info, _TokenService_QueryTokens_Handler)
			},
		},
		{
			MethodName: "CreateToken",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateTokenRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TokenServiceServer).CreateToken(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TokenService_CreateToken_info)
				}
				if interceptor == nil {
					return _TokenService_CreateToken_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.token.TokenService/CreateToken",
				}
				return interceptor(ctx, in, info, _TokenService_CreateToken_Handler)
			},
		},
		{
			MethodName: "UpdateToken",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateTokenRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TokenServiceServer).UpdateToken(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TokenService_UpdateToken_info)
				}
				if interceptor == nil {
					return _TokenService_UpdateToken_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.token.TokenService/UpdateToken",
				}
				return interceptor(ctx, in, info, _TokenService_UpdateToken_Handler)
			},
		},
		{
			MethodName: "DeleteToken",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteTokenRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TokenServiceServer).DeleteToken(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TokenService_DeleteToken_info)
				}
				if interceptor == nil {
					return _TokenService_DeleteToken_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.token.TokenService/DeleteToken",
				}
				return interceptor(ctx, in, info, _TokenService_DeleteToken_Handler)
			},
		},
	}
	return &serviceDesc
}
