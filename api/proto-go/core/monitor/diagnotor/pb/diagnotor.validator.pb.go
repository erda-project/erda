// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: diagnotor.proto

package pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *StartDiagnosisRequest) Validate() error {
	if this.ClusterName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ClusterName", fmt.Errorf(`value '%v' must not be an empty string`, this.ClusterName))
	}
	if this.Namespace == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Namespace", fmt.Errorf(`value '%v' must not be an empty string`, this.Namespace))
	}
	if this.PodName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PodName", fmt.Errorf(`value '%v' must not be an empty string`, this.PodName))
	}
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *StartDiagnosisResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *QueryDiagnosisStatusRequest) Validate() error {
	if this.ClusterName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ClusterName", fmt.Errorf(`value '%v' must not be an empty string`, this.ClusterName))
	}
	if this.Namespace == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Namespace", fmt.Errorf(`value '%v' must not be an empty string`, this.Namespace))
	}
	if this.PodName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PodName", fmt.Errorf(`value '%v' must not be an empty string`, this.PodName))
	}
	return nil
}
func (this *QueryDiagnosisStatusResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DiagnosisInstance) Validate() error {
	return nil
}
func (this *StopDiagnosisRequest) Validate() error {
	if this.ClusterName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ClusterName", fmt.Errorf(`value '%v' must not be an empty string`, this.ClusterName))
	}
	if this.Namespace == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Namespace", fmt.Errorf(`value '%v' must not be an empty string`, this.Namespace))
	}
	if this.PodName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PodName", fmt.Errorf(`value '%v' must not be an empty string`, this.PodName))
	}
	return nil
}
func (this *StopDiagnosisResponse) Validate() error {
	return nil
}
func (this *ListProcessesRequest) Validate() error {
	if this.ClusterName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ClusterName", fmt.Errorf(`value '%v' must not be an empty string`, this.ClusterName))
	}
	if this.Namespace == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Namespace", fmt.Errorf(`value '%v' must not be an empty string`, this.Namespace))
	}
	if this.PodName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PodName", fmt.Errorf(`value '%v' must not be an empty string`, this.PodName))
	}
	if this.PodIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PodIP", fmt.Errorf(`value '%v' must not be an empty string`, this.PodIP))
	}
	return nil
}
func (this *ListProcessesResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *HostProcessStatus) Validate() error {
	for _, item := range this.Processes {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Processes", err)
			}
		}
	}
	return nil
}
func (this *Process) Validate() error {
	if this.Cpu != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Cpu); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Cpu", err)
		}
	}
	if this.Memory != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Memory); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Memory", err)
		}
	}
	if this.Io != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Io); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Io", err)
		}
	}
	if this.ContextSwitches != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ContextSwitches); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ContextSwitches", err)
		}
	}
	if this.Rlimit != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Rlimit); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Rlimit", err)
		}
	}
	return nil
}
func (this *ProcessRLimit) Validate() error {
	if this.CpuTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CpuTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CpuTime", err)
		}
	}
	if this.MemoryData != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MemoryData); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MemoryData", err)
		}
	}
	if this.MemoryStack != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MemoryStack); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MemoryStack", err)
		}
	}
	if this.MemoryRss != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MemoryRss); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MemoryRss", err)
		}
	}
	if this.MemoryLocked != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MemoryLocked); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MemoryLocked", err)
		}
	}
	if this.MemoryVms != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MemoryVms); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MemoryVms", err)
		}
	}
	if this.NumFDs != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NumFDs); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NumFDs", err)
		}
	}
	if this.FileLocks != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.FileLocks); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("FileLocks", err)
		}
	}
	if this.SignalsPending != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.SignalsPending); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("SignalsPending", err)
		}
	}
	if this.NicePriority != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NicePriority); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NicePriority", err)
		}
	}
	if this.RealtimePriority != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RealtimePriority); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RealtimePriority", err)
		}
	}
	return nil
}
func (this *ProcessRLimitStatus) Validate() error {
	return nil
}
func (this *ProcessMemoryStatus) Validate() error {
	return nil
}
func (this *ProcessCPUStatus) Validate() error {
	return nil
}
func (this *ProcessIOStatus) Validate() error {
	return nil
}
func (this *ProcessContextSwitches) Validate() error {
	return nil
}
