// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: diagnotor_agent.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ListTargetProcessesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListTargetProcessesResponse)(nil)

// ListTargetProcessesRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListTargetProcessesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ListTargetProcessesResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListTargetProcessesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
			case "data.totalMemory":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TotalMemory = val
			case "data.memoryUsed":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.MemoryUsed = val
			case "data.memoryUsedPercent":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.MemoryUsedPercent = val
			case "data.totalCpuCores":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.TotalCpuCores = val
			case "data.cpuUsedCores":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.CpuUsedCores = val
			case "data.cpuUsedPercent":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Data.CpuUsedPercent = val
			case "data.connections":
				if m.Data == nil {
					m.Data = &HostProcessStatus{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Connections = val
			}
		}
	}
	return nil
}
