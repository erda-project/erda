// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: diagnotor.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string            `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace   string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName     string            `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartDiagnosisRequest) Reset() {
	*x = StartDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDiagnosisRequest) ProtoMessage() {}

func (x *StartDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*StartDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{0}
}

func (x *StartDiagnosisRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *StartDiagnosisRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartDiagnosisRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *StartDiagnosisRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type StartDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DiagnosisInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StartDiagnosisResponse) Reset() {
	*x = StartDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDiagnosisResponse) ProtoMessage() {}

func (x *StartDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*StartDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{1}
}

func (x *StartDiagnosisResponse) GetData() *DiagnosisInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDiagnosisStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName     string `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
}

func (x *QueryDiagnosisStatusRequest) Reset() {
	*x = QueryDiagnosisStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiagnosisStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiagnosisStatusRequest) ProtoMessage() {}

func (x *QueryDiagnosisStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiagnosisStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryDiagnosisStatusRequest) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{2}
}

func (x *QueryDiagnosisStatusRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *QueryDiagnosisStatusRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryDiagnosisStatusRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

type QueryDiagnosisStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DiagnosisInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDiagnosisStatusResponse) Reset() {
	*x = QueryDiagnosisStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiagnosisStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiagnosisStatusResponse) ProtoMessage() {}

func (x *QueryDiagnosisStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiagnosisStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryDiagnosisStatusResponse) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{3}
}

func (x *QueryDiagnosisStatusResponse) GetData() *DiagnosisInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type DiagnosisInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName     string `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	HostIP      string `protobuf:"bytes,5,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	PodIP       string `protobuf:"bytes,6,opt,name=podIP,proto3" json:"podIP,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Message     string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DiagnosisInstance) Reset() {
	*x = DiagnosisInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosisInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosisInstance) ProtoMessage() {}

func (x *DiagnosisInstance) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosisInstance.ProtoReflect.Descriptor instead.
func (*DiagnosisInstance) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{4}
}

func (x *DiagnosisInstance) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DiagnosisInstance) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DiagnosisInstance) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *DiagnosisInstance) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *DiagnosisInstance) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

func (x *DiagnosisInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiagnosisInstance) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StopDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName     string `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
}

func (x *StopDiagnosisRequest) Reset() {
	*x = StopDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDiagnosisRequest) ProtoMessage() {}

func (x *StopDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*StopDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{5}
}

func (x *StopDiagnosisRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *StopDiagnosisRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StopDiagnosisRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

type StopDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StopDiagnosisResponse) Reset() {
	*x = StopDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDiagnosisResponse) ProtoMessage() {}

func (x *StopDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*StopDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{6}
}

func (x *StopDiagnosisResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ListProcessesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName     string `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	PodIP       string `protobuf:"bytes,4,opt,name=podIP,proto3" json:"podIP,omitempty"`
}

func (x *ListProcessesRequest) Reset() {
	*x = ListProcessesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesRequest) ProtoMessage() {}

func (x *ListProcessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesRequest.ProtoReflect.Descriptor instead.
func (*ListProcessesRequest) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{7}
}

func (x *ListProcessesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListProcessesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListProcessesRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ListProcessesRequest) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

type ListProcessesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostProcessStatus `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListProcessesResponse) Reset() {
	*x = ListProcessesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesResponse) ProtoMessage() {}

func (x *ListProcessesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesResponse.ProtoReflect.Descriptor instead.
func (*ListProcessesResponse) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{8}
}

func (x *ListProcessesResponse) GetData() *HostProcessStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type HostProcessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes         []*Process `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	TotalMemory       int64      `protobuf:"varint,2,opt,name=totalMemory,proto3" json:"totalMemory,omitempty"`
	MemoryUsed        int64      `protobuf:"varint,3,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`
	MemoryUsedPercent float64    `protobuf:"fixed64,4,opt,name=memoryUsedPercent,proto3" json:"memoryUsedPercent,omitempty"`
	TotalCpuCores     float64    `protobuf:"fixed64,5,opt,name=totalCpuCores,proto3" json:"totalCpuCores,omitempty"`
	CpuUsedCores      float64    `protobuf:"fixed64,6,opt,name=cpuUsedCores,proto3" json:"cpuUsedCores,omitempty"`
	CpuUsedPercent    float64    `protobuf:"fixed64,7,opt,name=cpuUsedPercent,proto3" json:"cpuUsedPercent,omitempty"`
	Connections       int64      `protobuf:"varint,8,opt,name=connections,proto3" json:"connections,omitempty"`
}

func (x *HostProcessStatus) Reset() {
	*x = HostProcessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostProcessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostProcessStatus) ProtoMessage() {}

func (x *HostProcessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostProcessStatus.ProtoReflect.Descriptor instead.
func (*HostProcessStatus) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{9}
}

func (x *HostProcessStatus) GetProcesses() []*Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *HostProcessStatus) GetTotalMemory() int64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *HostProcessStatus) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *HostProcessStatus) GetMemoryUsedPercent() float64 {
	if x != nil {
		return x.MemoryUsedPercent
	}
	return 0
}

func (x *HostProcessStatus) GetTotalCpuCores() float64 {
	if x != nil {
		return x.TotalCpuCores
	}
	return 0
}

func (x *HostProcessStatus) GetCpuUsedCores() float64 {
	if x != nil {
		return x.CpuUsedCores
	}
	return 0
}

func (x *HostProcessStatus) GetCpuUsedPercent() float64 {
	if x != nil {
		return x.CpuUsedPercent
	}
	return 0
}

func (x *HostProcessStatus) GetConnections() int64 {
	if x != nil {
		return x.Connections
	}
	return 0
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid             string                  `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Name            string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cmdline         string                  `protobuf:"bytes,3,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	User            string                  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	CreateTime      int64                   `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	NumThreads      int64                   `protobuf:"varint,6,opt,name=numThreads,proto3" json:"numThreads,omitempty"`
	NumFDs          int64                   `protobuf:"varint,7,opt,name=numFDs,proto3" json:"numFDs,omitempty"`
	Connections     int64                   `protobuf:"varint,8,opt,name=connections,proto3" json:"connections,omitempty"`
	Cpu             *ProcessCPUStatus       `protobuf:"bytes,9,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory          *ProcessMemoryStatus    `protobuf:"bytes,10,opt,name=memory,proto3" json:"memory,omitempty"`
	Io              *ProcessIOStatus        `protobuf:"bytes,11,opt,name=io,proto3" json:"io,omitempty"`
	ContextSwitches *ProcessContextSwitches `protobuf:"bytes,12,opt,name=contextSwitches,proto3" json:"contextSwitches,omitempty"`
	Rlimit          *ProcessRLimit          `protobuf:"bytes,13,opt,name=rlimit,proto3" json:"rlimit,omitempty"`
	AppType         string                  `protobuf:"bytes,20,opt,name=appType,proto3" json:"appType,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{10}
}

func (x *Process) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetCmdline() string {
	if x != nil {
		return x.Cmdline
	}
	return ""
}

func (x *Process) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Process) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Process) GetNumThreads() int64 {
	if x != nil {
		return x.NumThreads
	}
	return 0
}

func (x *Process) GetNumFDs() int64 {
	if x != nil {
		return x.NumFDs
	}
	return 0
}

func (x *Process) GetConnections() int64 {
	if x != nil {
		return x.Connections
	}
	return 0
}

func (x *Process) GetCpu() *ProcessCPUStatus {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Process) GetMemory() *ProcessMemoryStatus {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Process) GetIo() *ProcessIOStatus {
	if x != nil {
		return x.Io
	}
	return nil
}

func (x *Process) GetContextSwitches() *ProcessContextSwitches {
	if x != nil {
		return x.ContextSwitches
	}
	return nil
}

func (x *Process) GetRlimit() *ProcessRLimit {
	if x != nil {
		return x.Rlimit
	}
	return nil
}

func (x *Process) GetAppType() string {
	if x != nil {
		return x.AppType
	}
	return ""
}

type ProcessRLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuTime          *ProcessRLimitStatus `protobuf:"bytes,1,opt,name=cpuTime,proto3" json:"cpuTime,omitempty"`
	MemoryData       *ProcessRLimitStatus `protobuf:"bytes,2,opt,name=memoryData,proto3" json:"memoryData,omitempty"`
	MemoryStack      *ProcessRLimitStatus `protobuf:"bytes,3,opt,name=memoryStack,proto3" json:"memoryStack,omitempty"`
	MemoryRss        *ProcessRLimitStatus `protobuf:"bytes,4,opt,name=memoryRss,proto3" json:"memoryRss,omitempty"`
	MemoryLocked     *ProcessRLimitStatus `protobuf:"bytes,5,opt,name=memoryLocked,proto3" json:"memoryLocked,omitempty"`
	MemoryVms        *ProcessRLimitStatus `protobuf:"bytes,6,opt,name=memoryVms,proto3" json:"memoryVms,omitempty"`
	NumFDs           *ProcessRLimitStatus `protobuf:"bytes,7,opt,name=numFDs,proto3" json:"numFDs,omitempty"`
	FileLocks        *ProcessRLimitStatus `protobuf:"bytes,8,opt,name=fileLocks,proto3" json:"fileLocks,omitempty"`
	SignalsPending   *ProcessRLimitStatus `protobuf:"bytes,9,opt,name=signalsPending,proto3" json:"signalsPending,omitempty"`
	NicePriority     *ProcessRLimitStatus `protobuf:"bytes,10,opt,name=nicePriority,proto3" json:"nicePriority,omitempty"`
	RealtimePriority *ProcessRLimitStatus `protobuf:"bytes,11,opt,name=realtimePriority,proto3" json:"realtimePriority,omitempty"`
}

func (x *ProcessRLimit) Reset() {
	*x = ProcessRLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRLimit) ProtoMessage() {}

func (x *ProcessRLimit) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRLimit.ProtoReflect.Descriptor instead.
func (*ProcessRLimit) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{11}
}

func (x *ProcessRLimit) GetCpuTime() *ProcessRLimitStatus {
	if x != nil {
		return x.CpuTime
	}
	return nil
}

func (x *ProcessRLimit) GetMemoryData() *ProcessRLimitStatus {
	if x != nil {
		return x.MemoryData
	}
	return nil
}

func (x *ProcessRLimit) GetMemoryStack() *ProcessRLimitStatus {
	if x != nil {
		return x.MemoryStack
	}
	return nil
}

func (x *ProcessRLimit) GetMemoryRss() *ProcessRLimitStatus {
	if x != nil {
		return x.MemoryRss
	}
	return nil
}

func (x *ProcessRLimit) GetMemoryLocked() *ProcessRLimitStatus {
	if x != nil {
		return x.MemoryLocked
	}
	return nil
}

func (x *ProcessRLimit) GetMemoryVms() *ProcessRLimitStatus {
	if x != nil {
		return x.MemoryVms
	}
	return nil
}

func (x *ProcessRLimit) GetNumFDs() *ProcessRLimitStatus {
	if x != nil {
		return x.NumFDs
	}
	return nil
}

func (x *ProcessRLimit) GetFileLocks() *ProcessRLimitStatus {
	if x != nil {
		return x.FileLocks
	}
	return nil
}

func (x *ProcessRLimit) GetSignalsPending() *ProcessRLimitStatus {
	if x != nil {
		return x.SignalsPending
	}
	return nil
}

func (x *ProcessRLimit) GetNicePriority() *ProcessRLimitStatus {
	if x != nil {
		return x.NicePriority
	}
	return nil
}

func (x *ProcessRLimit) GetRealtimePriority() *ProcessRLimitStatus {
	if x != nil {
		return x.RealtimePriority
	}
	return nil
}

type ProcessRLimitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Soft int64 `protobuf:"varint,1,opt,name=soft,proto3" json:"soft,omitempty"`
	Hard int64 `protobuf:"varint,2,opt,name=Hard,proto3" json:"Hard,omitempty"`
	Used int64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *ProcessRLimitStatus) Reset() {
	*x = ProcessRLimitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRLimitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRLimitStatus) ProtoMessage() {}

func (x *ProcessRLimitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRLimitStatus.ProtoReflect.Descriptor instead.
func (*ProcessRLimitStatus) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessRLimitStatus) GetSoft() int64 {
	if x != nil {
		return x.Soft
	}
	return 0
}

func (x *ProcessRLimitStatus) GetHard() int64 {
	if x != nil {
		return x.Hard
	}
	return 0
}

func (x *ProcessRLimitStatus) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type ProcessMemoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rss         int64   `protobuf:"varint,1,opt,name=rss,proto3" json:"rss,omitempty"`
	Vms         int64   `protobuf:"varint,2,opt,name=vms,proto3" json:"vms,omitempty"`
	Swap        int64   `protobuf:"varint,3,opt,name=swap,proto3" json:"swap,omitempty"`
	Data        int64   `protobuf:"varint,4,opt,name=data,proto3" json:"data,omitempty"`
	Stack       int64   `protobuf:"varint,5,opt,name=stack,proto3" json:"stack,omitempty"`
	Locked      int64   `protobuf:"varint,6,opt,name=locked,proto3" json:"locked,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,7,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
}

func (x *ProcessMemoryStatus) Reset() {
	*x = ProcessMemoryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMemoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMemoryStatus) ProtoMessage() {}

func (x *ProcessMemoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMemoryStatus.ProtoReflect.Descriptor instead.
func (*ProcessMemoryStatus) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{13}
}

func (x *ProcessMemoryStatus) GetRss() int64 {
	if x != nil {
		return x.Rss
	}
	return 0
}

func (x *ProcessMemoryStatus) GetVms() int64 {
	if x != nil {
		return x.Vms
	}
	return 0
}

func (x *ProcessMemoryStatus) GetSwap() int64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *ProcessMemoryStatus) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *ProcessMemoryStatus) GetStack() int64 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *ProcessMemoryStatus) GetLocked() int64 {
	if x != nil {
		return x.Locked
	}
	return 0
}

func (x *ProcessMemoryStatus) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

type ProcessCPUStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   float64 `protobuf:"fixed64,1,opt,name=user,proto3" json:"user,omitempty"`
	System float64 `protobuf:"fixed64,2,opt,name=system,proto3" json:"system,omitempty"`
	// double idle = 3;
	// double nice = 4;
	IoWait float64 `protobuf:"fixed64,5,opt,name=ioWait,proto3" json:"ioWait,omitempty"`
	// double irq = 6;
	// double softIrq = 7;
	// double steal = 8;
	// double stolen = 9;
	// double guest = 10;
	// double guestNice = 11;
	UsedCores         float64 `protobuf:"fixed64,12,opt,name=usedCores,proto3" json:"usedCores,omitempty"`
	UsedPercent       float64 `protobuf:"fixed64,13,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	UsedPercentInHost float64 `protobuf:"fixed64,14,opt,name=usedPercentInHost,proto3" json:"usedPercentInHost,omitempty"`
}

func (x *ProcessCPUStatus) Reset() {
	*x = ProcessCPUStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessCPUStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessCPUStatus) ProtoMessage() {}

func (x *ProcessCPUStatus) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessCPUStatus.ProtoReflect.Descriptor instead.
func (*ProcessCPUStatus) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{14}
}

func (x *ProcessCPUStatus) GetUser() float64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *ProcessCPUStatus) GetSystem() float64 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *ProcessCPUStatus) GetIoWait() float64 {
	if x != nil {
		return x.IoWait
	}
	return 0
}

func (x *ProcessCPUStatus) GetUsedCores() float64 {
	if x != nil {
		return x.UsedCores
	}
	return 0
}

func (x *ProcessCPUStatus) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *ProcessCPUStatus) GetUsedPercentInHost() float64 {
	if x != nil {
		return x.UsedPercentInHost
	}
	return 0
}

type ProcessIOStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadCount  int64   `protobuf:"varint,8,opt,name=readCount,proto3" json:"readCount,omitempty"`
	ReadBytes  int64   `protobuf:"varint,9,opt,name=readBytes,proto3" json:"readBytes,omitempty"`
	ReadRate   float64 `protobuf:"fixed64,10,opt,name=readRate,proto3" json:"readRate,omitempty"`
	WriteCount int64   `protobuf:"varint,11,opt,name=writeCount,proto3" json:"writeCount,omitempty"`
	WriteBytes int64   `protobuf:"varint,12,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"`
	WriteRate  float64 `protobuf:"fixed64,13,opt,name=writeRate,proto3" json:"writeRate,omitempty"`
}

func (x *ProcessIOStatus) Reset() {
	*x = ProcessIOStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessIOStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIOStatus) ProtoMessage() {}

func (x *ProcessIOStatus) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIOStatus.ProtoReflect.Descriptor instead.
func (*ProcessIOStatus) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessIOStatus) GetReadCount() int64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *ProcessIOStatus) GetReadBytes() int64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *ProcessIOStatus) GetReadRate() float64 {
	if x != nil {
		return x.ReadRate
	}
	return 0
}

func (x *ProcessIOStatus) GetWriteCount() int64 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

func (x *ProcessIOStatus) GetWriteBytes() int64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *ProcessIOStatus) GetWriteRate() float64 {
	if x != nil {
		return x.WriteRate
	}
	return 0
}

type ProcessContextSwitches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voluntary   int64 `protobuf:"varint,1,opt,name=voluntary,proto3" json:"voluntary,omitempty"`
	Involuntary int64 `protobuf:"varint,2,opt,name=involuntary,proto3" json:"involuntary,omitempty"`
}

func (x *ProcessContextSwitches) Reset() {
	*x = ProcessContextSwitches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnotor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessContextSwitches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessContextSwitches) ProtoMessage() {}

func (x *ProcessContextSwitches) ProtoReflect() protoreflect.Message {
	mi := &file_diagnotor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessContextSwitches.ProtoReflect.Descriptor instead.
func (*ProcessContextSwitches) Descriptor() ([]byte, []int) {
	return file_diagnotor_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessContextSwitches) GetVoluntary() int64 {
	if x != nil {
		return x.Voluntary
	}
	return 0
}

func (x *ProcessContextSwitches) GetInvoluntary() int64 {
	if x != nil {
		return x.Involuntary
	}
	return 0
}

var File_diagnotor_proto protoreflect.FileDescriptor

var file_diagnotor_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b,
	0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f,
	0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x50, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x53, 0x74,
	0x6f, 0x70, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x05,
	0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x22, 0x5b, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x55, 0x73,
	0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x46, 0x44, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x46, 0x44, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x48, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x4f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x02, 0x69, 0x6f, 0x12, 0x5d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x06, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x07, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x4e, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x6d, 0x73, 0x12,
	0x48, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x46, 0x44, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x46, 0x44, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x0c, 0x6e, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6e, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x51, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x48, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x72, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x76, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xc4,
	0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x50, 0x55, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x58, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x6c,
	0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x32, 0xf1, 0x05, 0x0a, 0x10, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x91,
	0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x6f,
	0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xbe, 0x01, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x41, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diagnotor_proto_rawDescOnce sync.Once
	file_diagnotor_proto_rawDescData = file_diagnotor_proto_rawDesc
)

func file_diagnotor_proto_rawDescGZIP() []byte {
	file_diagnotor_proto_rawDescOnce.Do(func() {
		file_diagnotor_proto_rawDescData = protoimpl.X.CompressGZIP(file_diagnotor_proto_rawDescData)
	})
	return file_diagnotor_proto_rawDescData
}

var file_diagnotor_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_diagnotor_proto_goTypes = []interface{}{
	(*StartDiagnosisRequest)(nil),        // 0: erda.core.monitor.diagnotor.StartDiagnosisRequest
	(*StartDiagnosisResponse)(nil),       // 1: erda.core.monitor.diagnotor.StartDiagnosisResponse
	(*QueryDiagnosisStatusRequest)(nil),  // 2: erda.core.monitor.diagnotor.QueryDiagnosisStatusRequest
	(*QueryDiagnosisStatusResponse)(nil), // 3: erda.core.monitor.diagnotor.QueryDiagnosisStatusResponse
	(*DiagnosisInstance)(nil),            // 4: erda.core.monitor.diagnotor.DiagnosisInstance
	(*StopDiagnosisRequest)(nil),         // 5: erda.core.monitor.diagnotor.StopDiagnosisRequest
	(*StopDiagnosisResponse)(nil),        // 6: erda.core.monitor.diagnotor.StopDiagnosisResponse
	(*ListProcessesRequest)(nil),         // 7: erda.core.monitor.diagnotor.ListProcessesRequest
	(*ListProcessesResponse)(nil),        // 8: erda.core.monitor.diagnotor.ListProcessesResponse
	(*HostProcessStatus)(nil),            // 9: erda.core.monitor.diagnotor.HostProcessStatus
	(*Process)(nil),                      // 10: erda.core.monitor.diagnotor.Process
	(*ProcessRLimit)(nil),                // 11: erda.core.monitor.diagnotor.ProcessRLimit
	(*ProcessRLimitStatus)(nil),          // 12: erda.core.monitor.diagnotor.ProcessRLimitStatus
	(*ProcessMemoryStatus)(nil),          // 13: erda.core.monitor.diagnotor.ProcessMemoryStatus
	(*ProcessCPUStatus)(nil),             // 14: erda.core.monitor.diagnotor.ProcessCPUStatus
	(*ProcessIOStatus)(nil),              // 15: erda.core.monitor.diagnotor.ProcessIOStatus
	(*ProcessContextSwitches)(nil),       // 16: erda.core.monitor.diagnotor.ProcessContextSwitches
	nil,                                  // 17: erda.core.monitor.diagnotor.StartDiagnosisRequest.LabelsEntry
}
var file_diagnotor_proto_depIdxs = []int32{
	17, // 0: erda.core.monitor.diagnotor.StartDiagnosisRequest.labels:type_name -> erda.core.monitor.diagnotor.StartDiagnosisRequest.LabelsEntry
	4,  // 1: erda.core.monitor.diagnotor.StartDiagnosisResponse.data:type_name -> erda.core.monitor.diagnotor.DiagnosisInstance
	4,  // 2: erda.core.monitor.diagnotor.QueryDiagnosisStatusResponse.data:type_name -> erda.core.monitor.diagnotor.DiagnosisInstance
	9,  // 3: erda.core.monitor.diagnotor.ListProcessesResponse.data:type_name -> erda.core.monitor.diagnotor.HostProcessStatus
	10, // 4: erda.core.monitor.diagnotor.HostProcessStatus.processes:type_name -> erda.core.monitor.diagnotor.Process
	14, // 5: erda.core.monitor.diagnotor.Process.cpu:type_name -> erda.core.monitor.diagnotor.ProcessCPUStatus
	13, // 6: erda.core.monitor.diagnotor.Process.memory:type_name -> erda.core.monitor.diagnotor.ProcessMemoryStatus
	15, // 7: erda.core.monitor.diagnotor.Process.io:type_name -> erda.core.monitor.diagnotor.ProcessIOStatus
	16, // 8: erda.core.monitor.diagnotor.Process.contextSwitches:type_name -> erda.core.monitor.diagnotor.ProcessContextSwitches
	11, // 9: erda.core.monitor.diagnotor.Process.rlimit:type_name -> erda.core.monitor.diagnotor.ProcessRLimit
	12, // 10: erda.core.monitor.diagnotor.ProcessRLimit.cpuTime:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 11: erda.core.monitor.diagnotor.ProcessRLimit.memoryData:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 12: erda.core.monitor.diagnotor.ProcessRLimit.memoryStack:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 13: erda.core.monitor.diagnotor.ProcessRLimit.memoryRss:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 14: erda.core.monitor.diagnotor.ProcessRLimit.memoryLocked:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 15: erda.core.monitor.diagnotor.ProcessRLimit.memoryVms:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 16: erda.core.monitor.diagnotor.ProcessRLimit.numFDs:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 17: erda.core.monitor.diagnotor.ProcessRLimit.fileLocks:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 18: erda.core.monitor.diagnotor.ProcessRLimit.signalsPending:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 19: erda.core.monitor.diagnotor.ProcessRLimit.nicePriority:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	12, // 20: erda.core.monitor.diagnotor.ProcessRLimit.realtimePriority:type_name -> erda.core.monitor.diagnotor.ProcessRLimitStatus
	0,  // 21: erda.core.monitor.diagnotor.DiagnotorService.StartDiagnosis:input_type -> erda.core.monitor.diagnotor.StartDiagnosisRequest
	2,  // 22: erda.core.monitor.diagnotor.DiagnotorService.QueryDiagnosisStatus:input_type -> erda.core.monitor.diagnotor.QueryDiagnosisStatusRequest
	5,  // 23: erda.core.monitor.diagnotor.DiagnotorService.StopDiagnosis:input_type -> erda.core.monitor.diagnotor.StopDiagnosisRequest
	7,  // 24: erda.core.monitor.diagnotor.DiagnotorService.ListProcesses:input_type -> erda.core.monitor.diagnotor.ListProcessesRequest
	1,  // 25: erda.core.monitor.diagnotor.DiagnotorService.StartDiagnosis:output_type -> erda.core.monitor.diagnotor.StartDiagnosisResponse
	3,  // 26: erda.core.monitor.diagnotor.DiagnotorService.QueryDiagnosisStatus:output_type -> erda.core.monitor.diagnotor.QueryDiagnosisStatusResponse
	6,  // 27: erda.core.monitor.diagnotor.DiagnotorService.StopDiagnosis:output_type -> erda.core.monitor.diagnotor.StopDiagnosisResponse
	8,  // 28: erda.core.monitor.diagnotor.DiagnotorService.ListProcesses:output_type -> erda.core.monitor.diagnotor.ListProcessesResponse
	25, // [25:29] is the sub-list for method output_type
	21, // [21:25] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_diagnotor_proto_init() }
func file_diagnotor_proto_init() {
	if File_diagnotor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diagnotor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiagnosisStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiagnosisStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosisInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostProcessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRLimitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMemoryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessCPUStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessIOStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnotor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessContextSwitches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diagnotor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diagnotor_proto_goTypes,
		DependencyIndexes: file_diagnotor_proto_depIdxs,
		MessageInfos:      file_diagnotor_proto_msgTypes,
	}.Build()
	File_diagnotor_proto = out.File
	file_diagnotor_proto_rawDesc = nil
	file_diagnotor_proto_goTypes = nil
	file_diagnotor_proto_depIdxs = nil
}
