// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: query.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// LogQueryServiceHandler is the server API for LogQueryService service.
type LogQueryServiceHandler interface {
	// +private
	// GET /api/logs
	GetLog(context.Context, *GetLogRequest) (*GetLogResponse, error)
	// for runtime log
	// GET /api/runtime/logs
	GetLogByRuntime(context.Context, *GetLogByRuntimeRequest) (*GetLogByRuntimeResponse, error)
	// for runtime log
	// GET /api/runtime/realtime/logs
	GetLogByRealtime(context.Context, *GetLogByRuntimeRequest) (*GetLogByRuntimeResponse, error)
	// for organization log
	// GET /api/orgCenter/logs
	GetLogByOrganization(context.Context, *GetLogByOrganizationRequest) (*GetLogByOrganizationResponse, error)
	// GET /api/logs/search
	GetLogByExpression(context.Context, *GetLogByExpressionRequest) (*GetLogByExpressionResponse, error)
	// GET /api/logs/aggregation
	LogAggregation(context.Context, *LogAggregationRequest) (*LogAggregationResponse, error)
}

// RegisterLogQueryServiceHandler register LogQueryServiceHandler to http.Router.
func RegisterLogQueryServiceHandler(r http.Router, srv LogQueryServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GetLog := func(method, path string, fn func(context.Context, *GetLogRequest) (*GetLogResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetLogRequest))
		}
		var GetLog_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetLog_info = transport.NewServiceInfo("erda.core.monitor.log.query.LogQueryService", "GetLog", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetLog_info)
				}
				r = r.WithContext(ctx)
				var in GetLogRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetLogByRuntime := func(method, path string, fn func(context.Context, *GetLogByRuntimeRequest) (*GetLogByRuntimeResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetLogByRuntimeRequest))
		}
		var GetLogByRuntime_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetLogByRuntime_info = transport.NewServiceInfo("erda.core.monitor.log.query.LogQueryService", "GetLogByRuntime", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetLogByRuntime_info)
				}
				r = r.WithContext(ctx)
				var in GetLogByRuntimeRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetLogByRealtime := func(method, path string, fn func(context.Context, *GetLogByRuntimeRequest) (*GetLogByRuntimeResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetLogByRuntimeRequest))
		}
		var GetLogByRealtime_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetLogByRealtime_info = transport.NewServiceInfo("erda.core.monitor.log.query.LogQueryService", "GetLogByRealtime", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetLogByRealtime_info)
				}
				r = r.WithContext(ctx)
				var in GetLogByRuntimeRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetLogByOrganization := func(method, path string, fn func(context.Context, *GetLogByOrganizationRequest) (*GetLogByOrganizationResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetLogByOrganizationRequest))
		}
		var GetLogByOrganization_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetLogByOrganization_info = transport.NewServiceInfo("erda.core.monitor.log.query.LogQueryService", "GetLogByOrganization", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetLogByOrganization_info)
				}
				r = r.WithContext(ctx)
				var in GetLogByOrganizationRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetLogByExpression := func(method, path string, fn func(context.Context, *GetLogByExpressionRequest) (*GetLogByExpressionResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetLogByExpressionRequest))
		}
		var GetLogByExpression_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetLogByExpression_info = transport.NewServiceInfo("erda.core.monitor.log.query.LogQueryService", "GetLogByExpression", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetLogByExpression_info)
				}
				r = r.WithContext(ctx)
				var in GetLogByExpressionRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_LogAggregation := func(method, path string, fn func(context.Context, *LogAggregationRequest) (*LogAggregationResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*LogAggregationRequest))
		}
		var LogAggregation_info transport.ServiceInfo
		if h.Interceptor != nil {
			LogAggregation_info = transport.NewServiceInfo("erda.core.monitor.log.query.LogQueryService", "LogAggregation", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, LogAggregation_info)
				}
				r = r.WithContext(ctx)
				var in LogAggregationRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetLog("GET", "/api/logs", srv.GetLog)
	add_GetLogByRuntime("GET", "/api/runtime/logs", srv.GetLogByRuntime)
	add_GetLogByRealtime("GET", "/api/runtime/realtime/logs", srv.GetLogByRealtime)
	add_GetLogByOrganization("GET", "/api/orgCenter/logs", srv.GetLogByOrganization)
	add_GetLogByExpression("GET", "/api/logs/search", srv.GetLogByExpression)
	add_LogAggregation("GET", "/api/logs/aggregation", srv.LogAggregation)
}
