// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: dataview.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DataViewServiceClient is the client API for DataViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataViewServiceClient interface {
	ListSystemViews(ctx context.Context, in *ListSystemViewsRequest, opts ...grpc.CallOption) (*ListSystemViewsResponse, error)
	GetSystemView(ctx context.Context, in *GetSystemViewRequest, opts ...grpc.CallOption) (*GetSystemViewResponse, error)
	ListCustomViews(ctx context.Context, in *ListCustomViewsRequest, opts ...grpc.CallOption) (*ListCustomViewsResponse, error)
	GetCustomViewsCreator(ctx context.Context, in *GetCustomViewsCreatorRequest, opts ...grpc.CallOption) (*GetCustomViewsCreatorResponse, error)
	ListCustomDashboardHistory(ctx context.Context, in *ListCustomDashboardHistoryRequest, opts ...grpc.CallOption) (*ListCustomDashboardHistoryResponse, error)
	GetCustomView(ctx context.Context, in *GetCustomViewRequest, opts ...grpc.CallOption) (*GetCustomViewResponse, error)
	CreateCustomView(ctx context.Context, in *CreateCustomViewRequest, opts ...grpc.CallOption) (*CreateCustomViewResponse, error)
	UpdateCustomView(ctx context.Context, in *UpdateCustomViewRequest, opts ...grpc.CallOption) (*UpdateCustomViewResponse, error)
	DeleteCustomView(ctx context.Context, in *DeleteCustomViewRequest, opts ...grpc.CallOption) (*DeleteCustomViewResponse, error)
}

type dataViewServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDataViewServiceClient(cc grpc1.ClientConnInterface) DataViewServiceClient {
	return &dataViewServiceClient{cc}
}

func (c *dataViewServiceClient) ListSystemViews(ctx context.Context, in *ListSystemViewsRequest, opts ...grpc.CallOption) (*ListSystemViewsResponse, error) {
	out := new(ListSystemViewsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/ListSystemViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) GetSystemView(ctx context.Context, in *GetSystemViewRequest, opts ...grpc.CallOption) (*GetSystemViewResponse, error) {
	out := new(GetSystemViewResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/GetSystemView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) ListCustomViews(ctx context.Context, in *ListCustomViewsRequest, opts ...grpc.CallOption) (*ListCustomViewsResponse, error) {
	out := new(ListCustomViewsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/ListCustomViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) GetCustomViewsCreator(ctx context.Context, in *GetCustomViewsCreatorRequest, opts ...grpc.CallOption) (*GetCustomViewsCreatorResponse, error) {
	out := new(GetCustomViewsCreatorResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/GetCustomViewsCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) ListCustomDashboardHistory(ctx context.Context, in *ListCustomDashboardHistoryRequest, opts ...grpc.CallOption) (*ListCustomDashboardHistoryResponse, error) {
	out := new(ListCustomDashboardHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/ListCustomDashboardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) GetCustomView(ctx context.Context, in *GetCustomViewRequest, opts ...grpc.CallOption) (*GetCustomViewResponse, error) {
	out := new(GetCustomViewResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/GetCustomView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) CreateCustomView(ctx context.Context, in *CreateCustomViewRequest, opts ...grpc.CallOption) (*CreateCustomViewResponse, error) {
	out := new(CreateCustomViewResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/CreateCustomView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) UpdateCustomView(ctx context.Context, in *UpdateCustomViewRequest, opts ...grpc.CallOption) (*UpdateCustomViewResponse, error) {
	out := new(UpdateCustomViewResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/UpdateCustomView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataViewServiceClient) DeleteCustomView(ctx context.Context, in *DeleteCustomViewRequest, opts ...grpc.CallOption) (*DeleteCustomViewResponse, error) {
	out := new(DeleteCustomViewResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dataview.DataViewService/DeleteCustomView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataViewServiceServer is the server API for DataViewService service.
// All implementations should embed UnimplementedDataViewServiceServer
// for forward compatibility
type DataViewServiceServer interface {
	ListSystemViews(context.Context, *ListSystemViewsRequest) (*ListSystemViewsResponse, error)
	GetSystemView(context.Context, *GetSystemViewRequest) (*GetSystemViewResponse, error)
	ListCustomViews(context.Context, *ListCustomViewsRequest) (*ListCustomViewsResponse, error)
	GetCustomViewsCreator(context.Context, *GetCustomViewsCreatorRequest) (*GetCustomViewsCreatorResponse, error)
	ListCustomDashboardHistory(context.Context, *ListCustomDashboardHistoryRequest) (*ListCustomDashboardHistoryResponse, error)
	GetCustomView(context.Context, *GetCustomViewRequest) (*GetCustomViewResponse, error)
	CreateCustomView(context.Context, *CreateCustomViewRequest) (*CreateCustomViewResponse, error)
	UpdateCustomView(context.Context, *UpdateCustomViewRequest) (*UpdateCustomViewResponse, error)
	DeleteCustomView(context.Context, *DeleteCustomViewRequest) (*DeleteCustomViewResponse, error)
}

// UnimplementedDataViewServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataViewServiceServer struct {
}

func (*UnimplementedDataViewServiceServer) ListSystemViews(context.Context, *ListSystemViewsRequest) (*ListSystemViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemViews not implemented")
}
func (*UnimplementedDataViewServiceServer) GetSystemView(context.Context, *GetSystemViewRequest) (*GetSystemViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemView not implemented")
}
func (*UnimplementedDataViewServiceServer) ListCustomViews(context.Context, *ListCustomViewsRequest) (*ListCustomViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomViews not implemented")
}
func (*UnimplementedDataViewServiceServer) GetCustomViewsCreator(context.Context, *GetCustomViewsCreatorRequest) (*GetCustomViewsCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomViewsCreator not implemented")
}
func (*UnimplementedDataViewServiceServer) ListCustomDashboardHistory(context.Context, *ListCustomDashboardHistoryRequest) (*ListCustomDashboardHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomDashboardHistory not implemented")
}
func (*UnimplementedDataViewServiceServer) GetCustomView(context.Context, *GetCustomViewRequest) (*GetCustomViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomView not implemented")
}
func (*UnimplementedDataViewServiceServer) CreateCustomView(context.Context, *CreateCustomViewRequest) (*CreateCustomViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomView not implemented")
}
func (*UnimplementedDataViewServiceServer) UpdateCustomView(context.Context, *UpdateCustomViewRequest) (*UpdateCustomViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomView not implemented")
}
func (*UnimplementedDataViewServiceServer) DeleteCustomView(context.Context, *DeleteCustomViewRequest) (*DeleteCustomViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomView not implemented")
}

func RegisterDataViewServiceServer(s grpc1.ServiceRegistrar, srv DataViewServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DataViewService_serviceDesc(srv, opts...), srv)
}

var _DataViewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.monitor.dataview.DataViewService",
	HandlerType: (*DataViewServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "dataview.proto",
}

func _get_DataViewService_serviceDesc(srv DataViewServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DataViewService_ListSystemViews_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListSystemViews(ctx, req.(*ListSystemViewsRequest))
	}
	var _DataViewService_ListSystemViews_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_ListSystemViews_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "ListSystemViews", srv)
		_DataViewService_ListSystemViews_Handler = h.Interceptor(_DataViewService_ListSystemViews_Handler)
	}

	_DataViewService_GetSystemView_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetSystemView(ctx, req.(*GetSystemViewRequest))
	}
	var _DataViewService_GetSystemView_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_GetSystemView_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "GetSystemView", srv)
		_DataViewService_GetSystemView_Handler = h.Interceptor(_DataViewService_GetSystemView_Handler)
	}

	_DataViewService_ListCustomViews_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListCustomViews(ctx, req.(*ListCustomViewsRequest))
	}
	var _DataViewService_ListCustomViews_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_ListCustomViews_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "ListCustomViews", srv)
		_DataViewService_ListCustomViews_Handler = h.Interceptor(_DataViewService_ListCustomViews_Handler)
	}

	_DataViewService_GetCustomViewsCreator_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomViewsCreator(ctx, req.(*GetCustomViewsCreatorRequest))
	}
	var _DataViewService_GetCustomViewsCreator_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_GetCustomViewsCreator_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "GetCustomViewsCreator", srv)
		_DataViewService_GetCustomViewsCreator_Handler = h.Interceptor(_DataViewService_GetCustomViewsCreator_Handler)
	}

	_DataViewService_ListCustomDashboardHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListCustomDashboardHistory(ctx, req.(*ListCustomDashboardHistoryRequest))
	}
	var _DataViewService_ListCustomDashboardHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_ListCustomDashboardHistory_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "ListCustomDashboardHistory", srv)
		_DataViewService_ListCustomDashboardHistory_Handler = h.Interceptor(_DataViewService_ListCustomDashboardHistory_Handler)
	}

	_DataViewService_GetCustomView_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomView(ctx, req.(*GetCustomViewRequest))
	}
	var _DataViewService_GetCustomView_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_GetCustomView_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "GetCustomView", srv)
		_DataViewService_GetCustomView_Handler = h.Interceptor(_DataViewService_GetCustomView_Handler)
	}

	_DataViewService_CreateCustomView_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateCustomView(ctx, req.(*CreateCustomViewRequest))
	}
	var _DataViewService_CreateCustomView_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_CreateCustomView_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "CreateCustomView", srv)
		_DataViewService_CreateCustomView_Handler = h.Interceptor(_DataViewService_CreateCustomView_Handler)
	}

	_DataViewService_UpdateCustomView_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomView(ctx, req.(*UpdateCustomViewRequest))
	}
	var _DataViewService_UpdateCustomView_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_UpdateCustomView_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "UpdateCustomView", srv)
		_DataViewService_UpdateCustomView_Handler = h.Interceptor(_DataViewService_UpdateCustomView_Handler)
	}

	_DataViewService_DeleteCustomView_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteCustomView(ctx, req.(*DeleteCustomViewRequest))
	}
	var _DataViewService_DeleteCustomView_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DataViewService_DeleteCustomView_info = transport.NewServiceInfo("erda.core.monitor.dataview.DataViewService", "DeleteCustomView", srv)
		_DataViewService_DeleteCustomView_Handler = h.Interceptor(_DataViewService_DeleteCustomView_Handler)
	}

	var serviceDesc = _DataViewService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListSystemViews",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListSystemViewsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).ListSystemViews(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_ListSystemViews_info)
				}
				if interceptor == nil {
					return _DataViewService_ListSystemViews_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/ListSystemViews",
				}
				return interceptor(ctx, in, info, _DataViewService_ListSystemViews_Handler)
			},
		},
		{
			MethodName: "GetSystemView",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetSystemViewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).GetSystemView(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_GetSystemView_info)
				}
				if interceptor == nil {
					return _DataViewService_GetSystemView_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/GetSystemView",
				}
				return interceptor(ctx, in, info, _DataViewService_GetSystemView_Handler)
			},
		},
		{
			MethodName: "ListCustomViews",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCustomViewsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).ListCustomViews(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_ListCustomViews_info)
				}
				if interceptor == nil {
					return _DataViewService_ListCustomViews_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/ListCustomViews",
				}
				return interceptor(ctx, in, info, _DataViewService_ListCustomViews_Handler)
			},
		},
		{
			MethodName: "GetCustomViewsCreator",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomViewsCreatorRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).GetCustomViewsCreator(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_GetCustomViewsCreator_info)
				}
				if interceptor == nil {
					return _DataViewService_GetCustomViewsCreator_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/GetCustomViewsCreator",
				}
				return interceptor(ctx, in, info, _DataViewService_GetCustomViewsCreator_Handler)
			},
		},
		{
			MethodName: "ListCustomDashboardHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCustomDashboardHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).ListCustomDashboardHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_ListCustomDashboardHistory_info)
				}
				if interceptor == nil {
					return _DataViewService_ListCustomDashboardHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/ListCustomDashboardHistory",
				}
				return interceptor(ctx, in, info, _DataViewService_ListCustomDashboardHistory_Handler)
			},
		},
		{
			MethodName: "GetCustomView",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomViewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).GetCustomView(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_GetCustomView_info)
				}
				if interceptor == nil {
					return _DataViewService_GetCustomView_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/GetCustomView",
				}
				return interceptor(ctx, in, info, _DataViewService_GetCustomView_Handler)
			},
		},
		{
			MethodName: "CreateCustomView",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCustomViewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).CreateCustomView(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_CreateCustomView_info)
				}
				if interceptor == nil {
					return _DataViewService_CreateCustomView_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/CreateCustomView",
				}
				return interceptor(ctx, in, info, _DataViewService_CreateCustomView_Handler)
			},
		},
		{
			MethodName: "UpdateCustomView",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomViewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).UpdateCustomView(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_UpdateCustomView_info)
				}
				if interceptor == nil {
					return _DataViewService_UpdateCustomView_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/UpdateCustomView",
				}
				return interceptor(ctx, in, info, _DataViewService_UpdateCustomView_Handler)
			},
		},
		{
			MethodName: "DeleteCustomView",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCustomViewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DataViewServiceServer).DeleteCustomView(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DataViewService_DeleteCustomView_info)
				}
				if interceptor == nil {
					return _DataViewService_DeleteCustomView_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dataview.DataViewService/DeleteCustomView",
				}
				return interceptor(ctx, in, info, _DataViewService_DeleteCustomView_Handler)
			},
		},
	}
	return &serviceDesc
}
