// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: dataview.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CustomDashboardHistory)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCustomDashboardHistoryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCustomDashboardHistoryResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ExportCustomViewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListSystemViewsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListSystemViewsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetSystemViewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetSystemViewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCustomViewsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetCustomViewsCreatorRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCustomViewsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Creator)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetCustomViewsCreatorResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetCustomViewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetCustomViewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCustomViewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCustomViewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateCustomViewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateCustomViewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCustomViewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCustomViewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ViewList)(nil)
var _ urlenc.URLValuesUnmarshaler = (*View)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Block)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Chart)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DataItem)(nil)

// CustomDashboardHistory implement urlenc.URLValuesUnmarshaler.
func (m *CustomDashboardHistory) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "type":
				m.Type = vals[0]
			case "status":
				m.Status = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "operatorId":
				m.OperatorId = vals[0]
			case "createdAt":
				m.CreatedAt = vals[0]
			case "fileUuid":
				m.FileUuid = vals[0]
			case "errorMessage":
				m.ErrorMessage = vals[0]
			case "targetScope":
				m.TargetScope = vals[0]
			case "targetScopeId":
				m.TargetScopeId = vals[0]
			case "orgId":
				m.OrgId = vals[0]
			}
		}
	}
	return nil
}

// ListCustomDashboardHistoryRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCustomDashboardHistoryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			}
		}
	}
	return nil
}

// ListCustomDashboardHistoryResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCustomDashboardHistoryResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ExportCustomViewRequest implement urlenc.URLValuesUnmarshaler.
func (m *ExportCustomViewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "viewIds":
				m.ViewIds = vals
			}
		}
	}
	return nil
}

// ListSystemViewsRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListSystemViewsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			}
		}
	}
	return nil
}

// ListSystemViewsResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListSystemViewsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ViewList{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &ViewList{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// GetSystemViewRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetSystemViewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// GetSystemViewResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetSystemViewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &View{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Id = vals[0]
			case "data.scope":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Scope = vals[0]
			case "data.scopeID":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.ScopeID = vals[0]
			case "data.version":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Version = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Name = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Desc = vals[0]
			case "data.creator":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Creator = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &View{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt = val
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &View{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt = val
			}
		}
	}
	return nil
}

// ListCustomViewsRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCustomViewsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "startTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime = val
			case "endTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime = val
			case "name":
				m.Name = vals[0]
			case "description":
				m.Description = vals[0]
			case "creatorId":
				m.CreatorId = vals
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// GetCustomViewsCreatorRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetCustomViewsCreatorRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			}
		}
	}
	return nil
}

// ListCustomViewsResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCustomViewsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ViewList{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &ViewList{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// Creator implement urlenc.URLValuesUnmarshaler.
func (m *Creator) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "creators":
				m.Creators = vals
			}
		}
	}
	return nil
}

// GetCustomViewsCreatorResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetCustomViewsCreatorResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Creator{}
				}
			case "data.creators":
				if m.Data == nil {
					m.Data = &Creator{}
				}
				m.Data.Creators = vals
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// GetCustomViewRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetCustomViewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// GetCustomViewResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetCustomViewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &View{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Id = vals[0]
			case "data.scope":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Scope = vals[0]
			case "data.scopeID":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.ScopeID = vals[0]
			case "data.version":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Version = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Name = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Desc = vals[0]
			case "data.creator":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Creator = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &View{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt = val
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &View{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt = val
			}
		}
	}
	return nil
}

// CreateCustomViewRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCustomViewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "version":
				m.Version = vals[0]
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			}
		}
	}
	return nil
}

// CreateCustomViewResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCustomViewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &View{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Id = vals[0]
			case "data.scope":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Scope = vals[0]
			case "data.scopeID":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.ScopeID = vals[0]
			case "data.version":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Version = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Name = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Desc = vals[0]
			case "data.creator":
				if m.Data == nil {
					m.Data = &View{}
				}
				m.Data.Creator = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &View{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt = val
			case "data.updatedAt":
				if m.Data == nil {
					m.Data = &View{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdatedAt = val
			}
		}
	}
	return nil
}

// UpdateCustomViewRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateCustomViewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "updateType":
				m.UpdateType = vals[0]
			}
		}
	}
	return nil
}

// UpdateCustomViewResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateCustomViewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// DeleteCustomViewRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCustomViewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// DeleteCustomViewResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCustomViewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// ViewList implement urlenc.URLValuesUnmarshaler.
func (m *ViewList) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// View implement urlenc.URLValuesUnmarshaler.
func (m *View) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "version":
				m.Version = vals[0]
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "createdAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt = val
			case "updatedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt = val
			}
		}
	}
	return nil
}

// Block implement urlenc.URLValuesUnmarshaler.
func (m *Block) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "w":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.W = val
			case "h":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.H = val
			case "x":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.X = val
			case "y":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Y = val
			case "i":
				m.I = vals[0]
			case "chart":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
			case "chart.title":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				m.Chart.Title = vals[0]
			case "chart.description":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				m.Chart.Description = vals[0]
			case "chart.chartType":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				m.Chart.ChartType = vals[0]
			case "chart.dataSourceType":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				m.Chart.DataSourceType = vals[0]
			case "chart.staticData":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.staticData.null_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.staticData.number_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.staticData.string_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.staticData.bool_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.staticData.struct_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.staticData.list_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.StaticData = val
					} else {
						m.Chart.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config.null_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config.number_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config.string_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config.bool_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config.struct_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.config.list_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Config = val
					} else {
						m.Chart.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api.null_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api.number_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api.string_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api.bool_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api.struct_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.api.list_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Api = val
					} else {
						m.Chart.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls.null_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls.number_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls.string_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls.bool_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls.struct_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.controls.list_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.Controls = val
					} else {
						m.Chart.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n.null_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n.number_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n.string_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n.bool_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n.struct_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			case "chart.i18n.list_value":
				if m.Chart == nil {
					m.Chart = &Chart{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Chart.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Chart.I18N = val
					} else {
						m.Chart.I18N = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// Chart implement urlenc.URLValuesUnmarshaler.
func (m *Chart) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "title":
				m.Title = vals[0]
			case "description":
				m.Description = vals[0]
			case "chartType":
				m.ChartType = vals[0]
			case "dataSourceType":
				m.DataSourceType = vals[0]
			case "staticData":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.StaticData = val
					} else {
						m.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			case "config":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Config = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Config = val
					} else {
						m.Config = structpb.NewStringValue(vals[0])
					}
				}
			case "api":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Api = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Api = val
					} else {
						m.Api = structpb.NewStringValue(vals[0])
					}
				}
			case "controls":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Controls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Controls = val
					} else {
						m.Controls = structpb.NewStringValue(vals[0])
					}
				}
			case "i18n":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.I18N = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.I18N = val
					} else {
						m.I18N = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// DataItem implement urlenc.URLValuesUnmarshaler.
func (m *DataItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "i":
				m.I = vals[0]
			case "staticData":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.StaticData = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.StaticData = val
					} else {
						m.StaticData = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}
