// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: alert.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryCustomizeMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	Scope   string   `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeId string   `protobuf:"bytes,3,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
}

func (x *QueryCustomizeMetricRequest) Reset() {
	*x = QueryCustomizeMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeMetricRequest) ProtoMessage() {}

func (x *QueryCustomizeMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeMetricRequest.ProtoReflect.Descriptor instead.
func (*QueryCustomizeMetricRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{0}
}

func (x *QueryCustomizeMetricRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QueryCustomizeMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *QueryCustomizeMetricRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

type QueryCustomizeMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CustomizeMetrics `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryCustomizeMetricResponse) Reset() {
	*x = QueryCustomizeMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeMetricResponse) ProtoMessage() {}

func (x *QueryCustomizeMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeMetricResponse.ProtoReflect.Descriptor instead.
func (*QueryCustomizeMetricResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCustomizeMetricResponse) GetData() *CustomizeMetrics {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomizeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics           []*MetricMeta `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	FunctionOperators []*Operator   `protobuf:"bytes,2,rep,name=functionOperators,proto3" json:"functionOperators,omitempty"`
	FilterOperators   []*Operator   `protobuf:"bytes,3,rep,name=filterOperators,proto3" json:"filterOperators,omitempty"`
	Aggregator        []*DisplayKey `protobuf:"bytes,4,rep,name=aggregator,proto3" json:"aggregator,omitempty"`
	NotifySample      string        `protobuf:"bytes,5,opt,name=notifySample,proto3" json:"notifySample,omitempty"`
}

func (x *CustomizeMetrics) Reset() {
	*x = CustomizeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeMetrics) ProtoMessage() {}

func (x *CustomizeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeMetrics.ProtoReflect.Descriptor instead.
func (*CustomizeMetrics) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{2}
}

func (x *CustomizeMetrics) GetMetrics() []*MetricMeta {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *CustomizeMetrics) GetFunctionOperators() []*Operator {
	if x != nil {
		return x.FunctionOperators
	}
	return nil
}

func (x *CustomizeMetrics) GetFilterOperators() []*Operator {
	if x != nil {
		return x.FilterOperators
	}
	return nil
}

func (x *CustomizeMetrics) GetAggregator() []*DisplayKey {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *CustomizeMetrics) GetNotifySample() string {
	if x != nil {
		return x.NotifySample
	}
	return ""
}

type MetricMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *DisplayKey  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields []*FieldMeta `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Tags   []*TagMeta   `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *MetricMeta) Reset() {
	*x = MetricMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMeta) ProtoMessage() {}

func (x *MetricMeta) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricMeta.ProtoReflect.Descriptor instead.
func (*MetricMeta) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{3}
}

func (x *MetricMeta) GetName() *DisplayKey {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MetricMeta) GetFields() []*FieldMeta {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MetricMeta) GetTags() []*TagMeta {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DisplayKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Display string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
}

func (x *DisplayKey) Reset() {
	*x = DisplayKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayKey) ProtoMessage() {}

func (x *DisplayKey) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayKey.ProtoReflect.Descriptor instead.
func (*DisplayKey) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{4}
}

func (x *DisplayKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DisplayKey) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

type FieldMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    *DisplayKey `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	DataType string      `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
}

func (x *FieldMeta) Reset() {
	*x = FieldMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMeta) ProtoMessage() {}

func (x *FieldMeta) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMeta.ProtoReflect.Descriptor instead.
func (*FieldMeta) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{5}
}

func (x *FieldMeta) GetField() *DisplayKey {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *FieldMeta) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

type TagMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag      *DisplayKey `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	DataType string      `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
}

func (x *TagMeta) Reset() {
	*x = TagMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMeta) ProtoMessage() {}

func (x *TagMeta) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMeta.ProtoReflect.Descriptor instead.
func (*TagMeta) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{6}
}

func (x *TagMeta) GetTag() *DisplayKey {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *TagMeta) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Display string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{7}
}

func (x *Operator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Operator) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *Operator) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryCustomizeNotifyTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryCustomizeNotifyTargetRequest) Reset() {
	*x = QueryCustomizeNotifyTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeNotifyTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeNotifyTargetRequest) ProtoMessage() {}

func (x *QueryCustomizeNotifyTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeNotifyTargetRequest.ProtoReflect.Descriptor instead.
func (*QueryCustomizeNotifyTargetRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{8}
}

type QueryCustomizeNotifyTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryCustomizeNotifyTargetData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryCustomizeNotifyTargetResponse) Reset() {
	*x = QueryCustomizeNotifyTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeNotifyTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeNotifyTargetResponse) ProtoMessage() {}

func (x *QueryCustomizeNotifyTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeNotifyTargetResponse.ProtoReflect.Descriptor instead.
func (*QueryCustomizeNotifyTargetResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{9}
}

func (x *QueryCustomizeNotifyTargetResponse) GetData() *QueryCustomizeNotifyTargetData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryCustomizeNotifyTargetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*DisplayKey `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *QueryCustomizeNotifyTargetData) Reset() {
	*x = QueryCustomizeNotifyTargetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeNotifyTargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeNotifyTargetData) ProtoMessage() {}

func (x *QueryCustomizeNotifyTargetData) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeNotifyTargetData.ProtoReflect.Descriptor instead.
func (*QueryCustomizeNotifyTargetData) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{10}
}

func (x *QueryCustomizeNotifyTargetData) GetTargets() []*DisplayKey {
	if x != nil {
		return x.Targets
	}
	return nil
}

type QueryOrgCustomizeNotifyTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryOrgCustomizeNotifyTargetRequest) Reset() {
	*x = QueryOrgCustomizeNotifyTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeNotifyTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeNotifyTargetRequest) ProtoMessage() {}

func (x *QueryOrgCustomizeNotifyTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeNotifyTargetRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeNotifyTargetRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{11}
}

type QueryOrgCustomizeNotifyTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryCustomizeNotifyTargetData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgCustomizeNotifyTargetResponse) Reset() {
	*x = QueryOrgCustomizeNotifyTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeNotifyTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeNotifyTargetResponse) ProtoMessage() {}

func (x *QueryOrgCustomizeNotifyTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeNotifyTargetResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeNotifyTargetResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{12}
}

func (x *QueryOrgCustomizeNotifyTargetResponse) GetData() *QueryCustomizeNotifyTargetData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope    string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeId  string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	PageNo   int64  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryCustomizeAlertRequest) Reset() {
	*x = QueryCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeAlertRequest) ProtoMessage() {}

func (x *QueryCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*QueryCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{13}
}

func (x *QueryCustomizeAlertRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *QueryCustomizeAlertRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *QueryCustomizeAlertRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryCustomizeAlertRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryCustomizeAlertData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryCustomizeAlertResponse) Reset() {
	*x = QueryCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeAlertResponse) ProtoMessage() {}

func (x *QueryCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*QueryCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{14}
}

func (x *QueryCustomizeAlertResponse) GetData() *QueryCustomizeAlertData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryCustomizeAlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CustomizeAlertOverview `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCustomizeAlertData) Reset() {
	*x = QueryCustomizeAlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomizeAlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomizeAlertData) ProtoMessage() {}

func (x *QueryCustomizeAlertData) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomizeAlertData.ProtoReflect.Descriptor instead.
func (*QueryCustomizeAlertData) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{15}
}

func (x *QueryCustomizeAlertData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCustomizeAlertData) GetList() []*CustomizeAlertOverview {
	if x != nil {
		return x.List
	}
	return nil
}

type CustomizeAlertOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Metric        string   `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Window        uint64   `protobuf:"varint,4,opt,name=window,proto3" json:"window,omitempty"`
	NotifyTargets []string `protobuf:"bytes,5,rep,name=notifyTargets,proto3" json:"notifyTargets,omitempty"`
	DashboardId   string   `protobuf:"bytes,6,opt,name=dashboardId,proto3" json:"dashboardId,omitempty"`
	Enable        bool     `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	CreateTime    int64    `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64    `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CustomizeAlertOverview) Reset() {
	*x = CustomizeAlertOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeAlertOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeAlertOverview) ProtoMessage() {}

func (x *CustomizeAlertOverview) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeAlertOverview.ProtoReflect.Descriptor instead.
func (*CustomizeAlertOverview) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{16}
}

func (x *CustomizeAlertOverview) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomizeAlertOverview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomizeAlertOverview) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *CustomizeAlertOverview) GetWindow() uint64 {
	if x != nil {
		return x.Window
	}
	return 0
}

func (x *CustomizeAlertOverview) GetNotifyTargets() []string {
	if x != nil {
		return x.NotifyTargets
	}
	return nil
}

func (x *CustomizeAlertOverview) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *CustomizeAlertOverview) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CustomizeAlertOverview) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CustomizeAlertOverview) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GetCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomizeAlertRequest) Reset() {
	*x = GetCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomizeAlertRequest) ProtoMessage() {}

func (x *GetCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*GetCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{17}
}

func (x *GetCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CustomizeAlertDetail `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomizeAlertResponse) Reset() {
	*x = GetCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomizeAlertResponse) ProtoMessage() {}

func (x *GetCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*GetCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{18}
}

func (x *GetCustomizeAlertResponse) GetData() *CustomizeAlertDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomizeAlertDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CustomizeAlertDetail) Reset() {
	*x = CustomizeAlertDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeAlertDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeAlertDetail) ProtoMessage() {}

func (x *CustomizeAlertDetail) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeAlertDetail.ProtoReflect.Descriptor instead.
func (*CustomizeAlertDetail) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{19}
}

func (x *CustomizeAlertDetail) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomizeAlertDetail) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CustomizeAlertDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomizeAlertDetail) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *CustomizeAlertDetail) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *CustomizeAlertDetail) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *CustomizeAlertDetail) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CustomizeAlertDetail) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CustomizeAlertDetail) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CustomizeAlertDetail) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *CustomizeAlertDetail) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CustomizeAlertDetail) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CustomizeAlertRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Metric              string                        `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Window              uint64                        `protobuf:"varint,4,opt,name=window,proto3" json:"window,omitempty"`
	Functions           []*CustomizeAlertRuleFunction `protobuf:"bytes,5,rep,name=functions,proto3" json:"functions,omitempty"`
	Filters             []*CustomizeAlertRuleFilter   `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
	Group               []string                      `protobuf:"bytes,7,rep,name=group,proto3" json:"group,omitempty"`
	Outputs             []string                      `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Select              map[string]string             `protobuf:"bytes,9,rep,name=select,proto3" json:"select,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes          map[string]*structpb.Value    `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ActivedMetricGroups []string                      `protobuf:"bytes,11,rep,name=activedMetricGroups,proto3" json:"activedMetricGroups,omitempty"`
	CreateTime          int64                         `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64                         `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CustomizeAlertRule) Reset() {
	*x = CustomizeAlertRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeAlertRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeAlertRule) ProtoMessage() {}

func (x *CustomizeAlertRule) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeAlertRule.ProtoReflect.Descriptor instead.
func (*CustomizeAlertRule) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{20}
}

func (x *CustomizeAlertRule) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomizeAlertRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomizeAlertRule) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *CustomizeAlertRule) GetWindow() uint64 {
	if x != nil {
		return x.Window
	}
	return 0
}

func (x *CustomizeAlertRule) GetFunctions() []*CustomizeAlertRuleFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *CustomizeAlertRule) GetFilters() []*CustomizeAlertRuleFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CustomizeAlertRule) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *CustomizeAlertRule) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CustomizeAlertRule) GetSelect() map[string]string {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *CustomizeAlertRule) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CustomizeAlertRule) GetActivedMetricGroups() []string {
	if x != nil {
		return x.ActivedMetricGroups
	}
	return nil
}

func (x *CustomizeAlertRule) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CustomizeAlertRule) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CustomizeAlertRuleFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Alias      string          `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Aggregator string          `protobuf:"bytes,3,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	Operator   string          `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	Value      *structpb.Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	DataType   string          `protobuf:"bytes,6,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Unit       string          `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *CustomizeAlertRuleFunction) Reset() {
	*x = CustomizeAlertRuleFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeAlertRuleFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeAlertRuleFunction) ProtoMessage() {}

func (x *CustomizeAlertRuleFunction) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeAlertRuleFunction.ProtoReflect.Descriptor instead.
func (*CustomizeAlertRuleFunction) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{21}
}

func (x *CustomizeAlertRuleFunction) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *CustomizeAlertRuleFunction) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *CustomizeAlertRuleFunction) GetAggregator() string {
	if x != nil {
		return x.Aggregator
	}
	return ""
}

func (x *CustomizeAlertRuleFunction) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CustomizeAlertRuleFunction) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CustomizeAlertRuleFunction) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *CustomizeAlertRuleFunction) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type CustomizeAlertRuleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag      string          `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Operator string          `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Value    *structpb.Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	DataType string          `protobuf:"bytes,4,opt,name=dataType,proto3" json:"dataType,omitempty"`
}

func (x *CustomizeAlertRuleFilter) Reset() {
	*x = CustomizeAlertRuleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeAlertRuleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeAlertRuleFilter) ProtoMessage() {}

func (x *CustomizeAlertRuleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeAlertRuleFilter.ProtoReflect.Descriptor instead.
func (*CustomizeAlertRuleFilter) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{22}
}

func (x *CustomizeAlertRuleFilter) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CustomizeAlertRuleFilter) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CustomizeAlertRuleFilter) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CustomizeAlertRuleFilter) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

type CustomizeAlertNotifyTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Targets    []string                   `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty"`
	Title      string                     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content    string                     `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Attributes map[string]*structpb.Value `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime int64                      `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime int64                      `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CustomizeAlertNotifyTemplates) Reset() {
	*x = CustomizeAlertNotifyTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizeAlertNotifyTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizeAlertNotifyTemplates) ProtoMessage() {}

func (x *CustomizeAlertNotifyTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizeAlertNotifyTemplates.ProtoReflect.Descriptor instead.
func (*CustomizeAlertNotifyTemplates) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{23}
}

func (x *CustomizeAlertNotifyTemplates) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomizeAlertNotifyTemplates) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomizeAlertNotifyTemplates) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CustomizeAlertNotifyTemplates) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CustomizeAlertNotifyTemplates) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CustomizeAlertNotifyTemplates) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CustomizeAlertNotifyTemplates) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CustomizeAlertNotifyTemplates) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GetCustomizeAlertDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomizeAlertDetailRequest) Reset() {
	*x = GetCustomizeAlertDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomizeAlertDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomizeAlertDetailRequest) ProtoMessage() {}

func (x *GetCustomizeAlertDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomizeAlertDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCustomizeAlertDetailRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{24}
}

func (x *GetCustomizeAlertDetailRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCustomizeAlertDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CustomizeAlertDetail `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomizeAlertDetailResponse) Reset() {
	*x = GetCustomizeAlertDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomizeAlertDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomizeAlertDetailResponse) ProtoMessage() {}

func (x *GetCustomizeAlertDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomizeAlertDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCustomizeAlertDetailResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{25}
}

func (x *GetCustomizeAlertDetailResponse) GetData() *CustomizeAlertDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CreateCustomizeAlertRequest) Reset() {
	*x = CreateCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomizeAlertRequest) ProtoMessage() {}

func (x *CreateCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{26}
}

func (x *CreateCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCustomizeAlertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateCustomizeAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCustomizeAlertRequest) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *CreateCustomizeAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *CreateCustomizeAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *CreateCustomizeAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CreateCustomizeAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateCustomizeAlertRequest) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateCustomizeAlertRequest) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *CreateCustomizeAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateCustomizeAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CreateCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCustomizeAlertResponse) Reset() {
	*x = CreateCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomizeAlertResponse) ProtoMessage() {}

func (x *CreateCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{27}
}

func (x *CreateCustomizeAlertResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type UpdateCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *UpdateCustomizeAlertRequest) Reset() {
	*x = UpdateCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomizeAlertRequest) ProtoMessage() {}

func (x *UpdateCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCustomizeAlertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateCustomizeAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCustomizeAlertRequest) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *UpdateCustomizeAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *UpdateCustomizeAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *UpdateCustomizeAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateCustomizeAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateCustomizeAlertRequest) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *UpdateCustomizeAlertRequest) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *UpdateCustomizeAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpdateCustomizeAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpdateCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCustomizeAlertResponse) Reset() {
	*x = UpdateCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomizeAlertResponse) ProtoMessage() {}

func (x *UpdateCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{29}
}

type UpdateCustomizeAlertEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateCustomizeAlertEnableRequest) Reset() {
	*x = UpdateCustomizeAlertEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomizeAlertEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomizeAlertEnableRequest) ProtoMessage() {}

func (x *UpdateCustomizeAlertEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomizeAlertEnableRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomizeAlertEnableRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateCustomizeAlertEnableRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCustomizeAlertEnableRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type UpdateCustomizeAlertEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCustomizeAlertEnableResponse) Reset() {
	*x = UpdateCustomizeAlertEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomizeAlertEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomizeAlertEnableResponse) ProtoMessage() {}

func (x *UpdateCustomizeAlertEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomizeAlertEnableResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomizeAlertEnableResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{31}
}

type DeleteCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCustomizeAlertRequest) Reset() {
	*x = DeleteCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomizeAlertRequest) ProtoMessage() {}

func (x *DeleteCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteCustomizeAlertResponse) Reset() {
	*x = DeleteCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomizeAlertResponse) ProtoMessage() {}

func (x *DeleteCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteCustomizeAlertResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryOrgCustomizeMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryOrgCustomizeMetricRequest) Reset() {
	*x = QueryOrgCustomizeMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeMetricRequest) ProtoMessage() {}

func (x *QueryOrgCustomizeMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeMetricRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeMetricRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{34}
}

type QueryOrgCustomizeMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CustomizeMetrics `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgCustomizeMetricResponse) Reset() {
	*x = QueryOrgCustomizeMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeMetricResponse) ProtoMessage() {}

func (x *QueryOrgCustomizeMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeMetricResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeMetricResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{35}
}

func (x *QueryOrgCustomizeMetricResponse) GetData() *CustomizeMetrics {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgCustomizeAlertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo   int64 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryOrgCustomizeAlertsRequest) Reset() {
	*x = QueryOrgCustomizeAlertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeAlertsRequest) ProtoMessage() {}

func (x *QueryOrgCustomizeAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeAlertsRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeAlertsRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{36}
}

func (x *QueryOrgCustomizeAlertsRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryOrgCustomizeAlertsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryOrgCustomizeAlertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryOrgCustomizeAlertsData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgCustomizeAlertsResponse) Reset() {
	*x = QueryOrgCustomizeAlertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeAlertsResponse) ProtoMessage() {}

func (x *QueryOrgCustomizeAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeAlertsResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeAlertsResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{37}
}

func (x *QueryOrgCustomizeAlertsResponse) GetData() *QueryOrgCustomizeAlertsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgCustomizeAlertsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CustomizeAlertOverview `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryOrgCustomizeAlertsData) Reset() {
	*x = QueryOrgCustomizeAlertsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgCustomizeAlertsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgCustomizeAlertsData) ProtoMessage() {}

func (x *QueryOrgCustomizeAlertsData) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgCustomizeAlertsData.ProtoReflect.Descriptor instead.
func (*QueryOrgCustomizeAlertsData) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{38}
}

func (x *QueryOrgCustomizeAlertsData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryOrgCustomizeAlertsData) GetList() []*CustomizeAlertOverview {
	if x != nil {
		return x.List
	}
	return nil
}

type GetOrgCustomizeAlertDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrgCustomizeAlertDetailRequest) Reset() {
	*x = GetOrgCustomizeAlertDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgCustomizeAlertDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgCustomizeAlertDetailRequest) ProtoMessage() {}

func (x *GetOrgCustomizeAlertDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgCustomizeAlertDetailRequest.ProtoReflect.Descriptor instead.
func (*GetOrgCustomizeAlertDetailRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{39}
}

func (x *GetOrgCustomizeAlertDetailRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOrgCustomizeAlertDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CustomizeAlertDetail `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgCustomizeAlertDetailResponse) Reset() {
	*x = GetOrgCustomizeAlertDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgCustomizeAlertDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgCustomizeAlertDetailResponse) ProtoMessage() {}

func (x *GetOrgCustomizeAlertDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgCustomizeAlertDetailResponse.ProtoReflect.Descriptor instead.
func (*GetOrgCustomizeAlertDetailResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{40}
}

func (x *GetOrgCustomizeAlertDetailResponse) GetData() *CustomizeAlertDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateOrgCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CreateOrgCustomizeAlertRequest) Reset() {
	*x = CreateOrgCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgCustomizeAlertRequest) ProtoMessage() {}

func (x *CreateOrgCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{41}
}

func (x *CreateOrgCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateOrgCustomizeAlertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrgCustomizeAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrgCustomizeAlertRequest) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *CreateOrgCustomizeAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *CreateOrgCustomizeAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *CreateOrgCustomizeAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CreateOrgCustomizeAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateOrgCustomizeAlertRequest) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateOrgCustomizeAlertRequest) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *CreateOrgCustomizeAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateOrgCustomizeAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CreateOrgCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateOrgCustomizeAlertResponse) Reset() {
	*x = CreateOrgCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgCustomizeAlertResponse) ProtoMessage() {}

func (x *CreateOrgCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*CreateOrgCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{42}
}

func (x *CreateOrgCustomizeAlertResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateOrgCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *UpdateOrgCustomizeAlertRequest) Reset() {
	*x = UpdateOrgCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgCustomizeAlertRequest) ProtoMessage() {}

func (x *UpdateOrgCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateOrgCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrgCustomizeAlertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateOrgCustomizeAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrgCustomizeAlertRequest) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *UpdateOrgCustomizeAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *UpdateOrgCustomizeAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *UpdateOrgCustomizeAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateOrgCustomizeAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateOrgCustomizeAlertRequest) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *UpdateOrgCustomizeAlertRequest) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *UpdateOrgCustomizeAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpdateOrgCustomizeAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpdateOrgCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data bool `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateOrgCustomizeAlertResponse) Reset() {
	*x = UpdateOrgCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgCustomizeAlertResponse) ProtoMessage() {}

func (x *UpdateOrgCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateOrgCustomizeAlertResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type UpdateOrgCustomizeAlertEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool  `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateOrgCustomizeAlertEnableRequest) Reset() {
	*x = UpdateOrgCustomizeAlertEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgCustomizeAlertEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgCustomizeAlertEnableRequest) ProtoMessage() {}

func (x *UpdateOrgCustomizeAlertEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgCustomizeAlertEnableRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgCustomizeAlertEnableRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateOrgCustomizeAlertEnableRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrgCustomizeAlertEnableRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type UpdateOrgCustomizeAlertEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrgCustomizeAlertEnableResponse) Reset() {
	*x = UpdateOrgCustomizeAlertEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgCustomizeAlertEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgCustomizeAlertEnableResponse) ProtoMessage() {}

func (x *UpdateOrgCustomizeAlertEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgCustomizeAlertEnableResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgCustomizeAlertEnableResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{46}
}

type DeleteOrgCustomizeAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOrgCustomizeAlertRequest) Reset() {
	*x = DeleteOrgCustomizeAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgCustomizeAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgCustomizeAlertRequest) ProtoMessage() {}

func (x *DeleteOrgCustomizeAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgCustomizeAlertRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrgCustomizeAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteOrgCustomizeAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOrgCustomizeAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteOrgCustomizeAlertResponse) Reset() {
	*x = DeleteOrgCustomizeAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgCustomizeAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgCustomizeAlertResponse) ProtoMessage() {}

func (x *DeleteOrgCustomizeAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgCustomizeAlertResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrgCustomizeAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteOrgCustomizeAlertResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDashboardByAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *QueryDashboardByAlertRequest) Reset() {
	*x = QueryDashboardByAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDashboardByAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDashboardByAlertRequest) ProtoMessage() {}

func (x *QueryDashboardByAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDashboardByAlertRequest.ProtoReflect.Descriptor instead.
func (*QueryDashboardByAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{49}
}

func (x *QueryDashboardByAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryDashboardByAlertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *QueryDashboardByAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDashboardByAlertRequest) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *QueryDashboardByAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *QueryDashboardByAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *QueryDashboardByAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *QueryDashboardByAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *QueryDashboardByAlertRequest) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *QueryDashboardByAlertRequest) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *QueryDashboardByAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *QueryDashboardByAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type QueryDashboardByAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *View `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDashboardByAlertResponse) Reset() {
	*x = QueryDashboardByAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDashboardByAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDashboardByAlertResponse) ProtoMessage() {}

func (x *QueryDashboardByAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDashboardByAlertResponse.ProtoReflect.Descriptor instead.
func (*QueryDashboardByAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{50}
}

func (x *QueryDashboardByAlertResponse) GetData() *View {
	if x != nil {
		return x.Data
	}
	return nil
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChartType      string          `protobuf:"bytes,3,opt,name=chartType,proto3" json:"chartType,omitempty"`
	DataSourceType string          `protobuf:"bytes,4,opt,name=dataSourceType,proto3" json:"dataSourceType,omitempty"`
	StaticData     *structpb.Value `protobuf:"bytes,5,opt,name=staticData,proto3" json:"staticData,omitempty"`
	Config         *Config         `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	Api            *API            `protobuf:"bytes,7,opt,name=api,proto3" json:"api,omitempty"`
	Controls       *structpb.Value `protobuf:"bytes,8,opt,name=controls,proto3" json:"controls,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{51}
}

func (x *View) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *View) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *View) GetChartType() string {
	if x != nil {
		return x.ChartType
	}
	return ""
}

func (x *View) GetDataSourceType() string {
	if x != nil {
		return x.DataSourceType
	}
	return ""
}

func (x *View) GetStaticData() *structpb.Value {
	if x != nil {
		return x.StaticData
	}
	return nil
}

func (x *View) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *View) GetApi() *API {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *View) GetControls() *structpb.Value {
	if x != nil {
		return x.Controls
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionProps      map[string]*structpb.Value `protobuf:"bytes,1,rep,name=optionProps,proto3" json:"optionProps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataSourceConfig *structpb.Value            `protobuf:"bytes,2,opt,name=dataSourceConfig,proto3" json:"dataSourceConfig,omitempty"`
	Option           *structpb.Value            `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{52}
}

func (x *Config) GetOptionProps() map[string]*structpb.Value {
	if x != nil {
		return x.OptionProps
	}
	return nil
}

func (x *Config) GetDataSourceConfig() *structpb.Value {
	if x != nil {
		return x.DataSourceConfig
	}
	return nil
}

func (x *Config) GetOption() *structpb.Value {
	if x != nil {
		return x.Option
	}
	return nil
}

type API struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string                     `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Query     map[string]*structpb.Value `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body      map[string]*structpb.Value `protobuf:"bytes,3,rep,name=body,proto3" json:"body,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Header    map[string]*structpb.Value `protobuf:"bytes,4,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraData map[string]*structpb.Value `protobuf:"bytes,5,rep,name=extraData,proto3" json:"extraData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Method    string                     `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *API) Reset() {
	*x = API{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API) ProtoMessage() {}

func (x *API) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API.ProtoReflect.Descriptor instead.
func (*API) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{53}
}

func (x *API) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *API) GetQuery() map[string]*structpb.Value {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *API) GetBody() map[string]*structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *API) GetHeader() map[string]*structpb.Value {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *API) GetExtraData() map[string]*structpb.Value {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *API) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type QueryOrgDashboardByAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName  string                           `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Name         string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertType    string                           `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertScope   string                           `protobuf:"bytes,5,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId string                           `protobuf:"bytes,6,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable       bool                             `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Attributes   map[string]*structpb.Value       `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules        []*CustomizeAlertRule            `protobuf:"bytes,9,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies     []*CustomizeAlertNotifyTemplates `protobuf:"bytes,10,rep,name=notifies,proto3" json:"notifies,omitempty"`
	CreateTime   int64                            `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64                            `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *QueryOrgDashboardByAlertRequest) Reset() {
	*x = QueryOrgDashboardByAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgDashboardByAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgDashboardByAlertRequest) ProtoMessage() {}

func (x *QueryOrgDashboardByAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgDashboardByAlertRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgDashboardByAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{54}
}

func (x *QueryOrgDashboardByAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryOrgDashboardByAlertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *QueryOrgDashboardByAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryOrgDashboardByAlertRequest) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *QueryOrgDashboardByAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *QueryOrgDashboardByAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *QueryOrgDashboardByAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *QueryOrgDashboardByAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *QueryOrgDashboardByAlertRequest) GetRules() []*CustomizeAlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *QueryOrgDashboardByAlertRequest) GetNotifies() []*CustomizeAlertNotifyTemplates {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *QueryOrgDashboardByAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *QueryOrgDashboardByAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type QueryOrgDashboardByAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *View `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgDashboardByAlertResponse) Reset() {
	*x = QueryOrgDashboardByAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgDashboardByAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgDashboardByAlertResponse) ProtoMessage() {}

func (x *QueryOrgDashboardByAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgDashboardByAlertResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgDashboardByAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{55}
}

func (x *QueryOrgDashboardByAlertResponse) GetData() *View {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAlertRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeId string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
}

func (x *QueryAlertRuleRequest) Reset() {
	*x = QueryAlertRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertRuleRequest) ProtoMessage() {}

func (x *QueryAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*QueryAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{56}
}

func (x *QueryAlertRuleRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *QueryAlertRuleRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

type QueryAlertRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AlertTypeRuleResp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAlertRuleResponse) Reset() {
	*x = QueryAlertRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertRuleResponse) ProtoMessage() {}

func (x *QueryAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*QueryAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{57}
}

func (x *QueryAlertRuleResponse) GetData() *AlertTypeRuleResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type AlertTypeRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertTypeRules []*AlertTypeRule `protobuf:"bytes,1,rep,name=alertTypeRules,proto3" json:"alertTypeRules,omitempty"`
	Windows        []int64          `protobuf:"varint,2,rep,packed,name=windows,proto3" json:"windows,omitempty"`
	Operators      []*Operator      `protobuf:"bytes,3,rep,name=operators,proto3" json:"operators,omitempty"`
	Aggregator     []*DisplayKey    `protobuf:"bytes,4,rep,name=aggregator,proto3" json:"aggregator,omitempty"`
	Silence        []*NotifySilence `protobuf:"bytes,5,rep,name=silence,proto3" json:"silence,omitempty"`
}

func (x *AlertTypeRuleResp) Reset() {
	*x = AlertTypeRuleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertTypeRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertTypeRuleResp) ProtoMessage() {}

func (x *AlertTypeRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertTypeRuleResp.ProtoReflect.Descriptor instead.
func (*AlertTypeRuleResp) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{58}
}

func (x *AlertTypeRuleResp) GetAlertTypeRules() []*AlertTypeRule {
	if x != nil {
		return x.AlertTypeRules
	}
	return nil
}

func (x *AlertTypeRuleResp) GetWindows() []int64 {
	if x != nil {
		return x.Windows
	}
	return nil
}

func (x *AlertTypeRuleResp) GetOperators() []*Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *AlertTypeRuleResp) GetAggregator() []*DisplayKey {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *AlertTypeRuleResp) GetSilence() []*NotifySilence {
	if x != nil {
		return x.Silence
	}
	return nil
}

type AlertTypeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertType *DisplayKey  `protobuf:"bytes,1,opt,name=alertType,proto3" json:"alertType,omitempty"`
	Rules     []*AlertRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *AlertTypeRule) Reset() {
	*x = AlertTypeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertTypeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertTypeRule) ProtoMessage() {}

func (x *AlertTypeRule) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertTypeRule.ProtoReflect.Descriptor instead.
func (*AlertTypeRule) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{59}
}

func (x *AlertTypeRule) GetAlertType() *DisplayKey {
	if x != nil {
		return x.AlertType
	}
	return nil
}

func (x *AlertTypeRule) GetRules() []*AlertRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type AlertRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertScope string                     `protobuf:"bytes,3,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertType  string                     `protobuf:"bytes,4,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertIndex *DisplayKey                `protobuf:"bytes,5,opt,name=alertIndex,proto3" json:"alertIndex,omitempty"`
	Template   map[string]*structpb.Value `protobuf:"bytes,6,rep,name=template,proto3" json:"template,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Window     int64                      `protobuf:"varint,7,opt,name=window,proto3" json:"window,omitempty"`
	Functions  []*AlertRuleFunction       `protobuf:"bytes,8,rep,name=functions,proto3" json:"functions,omitempty"`
	IsRecover  bool                       `protobuf:"varint,9,opt,name=isRecover,proto3" json:"isRecover,omitempty"`
	Attributes map[string]*structpb.Value `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version    string                     `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	Enable     bool                       `protobuf:"varint,12,opt,name=enable,proto3" json:"enable,omitempty"`
	CreateTime int64                      `protobuf:"varint,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime int64                      `protobuf:"varint,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *AlertRule) Reset() {
	*x = AlertRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRule) ProtoMessage() {}

func (x *AlertRule) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRule.ProtoReflect.Descriptor instead.
func (*AlertRule) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{60}
}

func (x *AlertRule) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlertRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlertRule) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *AlertRule) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *AlertRule) GetAlertIndex() *DisplayKey {
	if x != nil {
		return x.AlertIndex
	}
	return nil
}

func (x *AlertRule) GetTemplate() map[string]*structpb.Value {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *AlertRule) GetWindow() int64 {
	if x != nil {
		return x.Window
	}
	return 0
}

func (x *AlertRule) GetFunctions() []*AlertRuleFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *AlertRule) GetIsRecover() bool {
	if x != nil {
		return x.IsRecover
	}
	return false
}

func (x *AlertRule) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AlertRule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AlertRule) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AlertRule) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AlertRule) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type AlertRuleFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      *DisplayKey     `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Aggregator string          `protobuf:"bytes,2,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	Operator   string          `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Value      *structpb.Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	DataType   string          `protobuf:"bytes,5,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Unit       string          `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *AlertRuleFunction) Reset() {
	*x = AlertRuleFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRuleFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRuleFunction) ProtoMessage() {}

func (x *AlertRuleFunction) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRuleFunction.ProtoReflect.Descriptor instead.
func (*AlertRuleFunction) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{61}
}

func (x *AlertRuleFunction) GetField() *DisplayKey {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *AlertRuleFunction) GetAggregator() string {
	if x != nil {
		return x.Aggregator
	}
	return ""
}

func (x *AlertRuleFunction) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AlertRuleFunction) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AlertRuleFunction) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *AlertRuleFunction) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type NotifySilence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64       `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  *DisplayKey `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *NotifySilence) Reset() {
	*x = NotifySilence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySilence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySilence) ProtoMessage() {}

func (x *NotifySilence) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySilence.ProtoReflect.Descriptor instead.
func (*NotifySilence) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{62}
}

func (x *NotifySilence) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *NotifySilence) GetUnit() *DisplayKey {
	if x != nil {
		return x.Unit
	}
	return nil
}

type QueryAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope    string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeId  string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	PageNo   int64  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryAlertRequest) Reset() {
	*x = QueryAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertRequest) ProtoMessage() {}

func (x *QueryAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertRequest.ProtoReflect.Descriptor instead.
func (*QueryAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{63}
}

func (x *QueryAlertRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *QueryAlertRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *QueryAlertRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryAlertRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryAlertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryAlertsData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAlertsResponse) Reset() {
	*x = QueryAlertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertsResponse) ProtoMessage() {}

func (x *QueryAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertsResponse.ProtoReflect.Descriptor instead.
func (*QueryAlertsResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{64}
}

func (x *QueryAlertsResponse) GetData() *QueryAlertsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAlertsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*Alert `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryAlertsData) Reset() {
	*x = QueryAlertsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertsData) ProtoMessage() {}

func (x *QueryAlertsData) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertsData.ProtoReflect.Descriptor instead.
func (*QueryAlertsData) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{65}
}

func (x *QueryAlertsData) GetList() []*Alert {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryAlertsData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertScope       string                     `protobuf:"bytes,3,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId     string                     `protobuf:"bytes,4,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable           bool                       `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Rules            []*AlertExpression         `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies         []*AlertNotify             `protobuf:"bytes,7,rep,name=notifies,proto3" json:"notifies,omitempty"`
	Filters          map[string]*structpb.Value `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes       map[string]*structpb.Value `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterNames     []string                   `protobuf:"bytes,10,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	Domain           string                     `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateTime       int64                      `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       int64                      `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TriggerCondition []*TriggerCondition        `protobuf:"bytes,14,rep,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{66}
}

func (x *Alert) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Alert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Alert) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *Alert) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *Alert) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Alert) GetRules() []*AlertExpression {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Alert) GetNotifies() []*AlertNotify {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *Alert) GetFilters() map[string]*structpb.Value {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Alert) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Alert) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *Alert) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Alert) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Alert) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Alert) GetTriggerCondition() []*TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

type AlertExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RuleId     uint64                     `protobuf:"varint,2,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	AlertIndex string                     `protobuf:"bytes,3,opt,name=alertIndex,proto3" json:"alertIndex,omitempty"`
	Window     int64                      `protobuf:"varint,4,opt,name=window,proto3" json:"window,omitempty"`
	Functions  []*AlertExpressionFunction `protobuf:"bytes,5,rep,name=functions,proto3" json:"functions,omitempty"`
	IsRecover  bool                       `protobuf:"varint,6,opt,name=isRecover,proto3" json:"isRecover,omitempty"`
	CreateTime int64                      `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime int64                      `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Level      string                     `protobuf:"bytes,9,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlertExpression) Reset() {
	*x = AlertExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertExpression) ProtoMessage() {}

func (x *AlertExpression) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertExpression.ProtoReflect.Descriptor instead.
func (*AlertExpression) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{67}
}

func (x *AlertExpression) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlertExpression) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *AlertExpression) GetAlertIndex() string {
	if x != nil {
		return x.AlertIndex
	}
	return ""
}

func (x *AlertExpression) GetWindow() int64 {
	if x != nil {
		return x.Window
	}
	return 0
}

func (x *AlertExpression) GetFunctions() []*AlertExpressionFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *AlertExpression) GetIsRecover() bool {
	if x != nil {
		return x.IsRecover
	}
	return false
}

func (x *AlertExpression) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AlertExpression) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AlertExpression) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type AlertExpressionFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Aggregator string          `protobuf:"bytes,2,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	Operator   string          `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Value      *structpb.Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AlertExpressionFunction) Reset() {
	*x = AlertExpressionFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertExpressionFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertExpressionFunction) ProtoMessage() {}

func (x *AlertExpressionFunction) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertExpressionFunction.ProtoReflect.Descriptor instead.
func (*AlertExpressionFunction) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{68}
}

func (x *AlertExpressionFunction) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *AlertExpressionFunction) GetAggregator() string {
	if x != nil {
		return x.Aggregator
	}
	return ""
}

func (x *AlertExpressionFunction) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AlertExpressionFunction) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type AlertNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	GroupId     int64               `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupType   string              `protobuf:"bytes,4,opt,name=groupType,proto3" json:"groupType,omitempty"`
	NotifyGroup *NotifyGroup        `protobuf:"bytes,5,opt,name=notifyGroup,proto3" json:"notifyGroup,omitempty"`
	DingdingUrl string              `protobuf:"bytes,6,opt,name=dingdingUrl,proto3" json:"dingdingUrl,omitempty"`
	Silence     *AlertNotifySilence `protobuf:"bytes,7,opt,name=silence,proto3" json:"silence,omitempty"`
	CreateTime  int64               `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64               `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Level       string              `protobuf:"bytes,10,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AlertNotify) Reset() {
	*x = AlertNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertNotify) ProtoMessage() {}

func (x *AlertNotify) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertNotify.ProtoReflect.Descriptor instead.
func (*AlertNotify) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{69}
}

func (x *AlertNotify) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlertNotify) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AlertNotify) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AlertNotify) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *AlertNotify) GetNotifyGroup() *NotifyGroup {
	if x != nil {
		return x.NotifyGroup
	}
	return nil
}

func (x *AlertNotify) GetDingdingUrl() string {
	if x != nil {
		return x.DingdingUrl
	}
	return ""
}

func (x *AlertNotify) GetSilence() *AlertNotifySilence {
	if x != nil {
		return x.Silence
	}
	return nil
}

func (x *AlertNotify) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AlertNotify) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AlertNotify) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type NotifyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ScopeType string                 `protobuf:"bytes,3,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId   string                 `protobuf:"bytes,4,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	Targets   []*NotifyTarget        `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Creator   string                 `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *NotifyGroup) Reset() {
	*x = NotifyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGroup) ProtoMessage() {}

func (x *NotifyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGroup.ProtoReflect.Descriptor instead.
func (*NotifyGroup) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{70}
}

func (x *NotifyGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NotifyGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotifyGroup) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *NotifyGroup) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *NotifyGroup) GetTargets() []*NotifyTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *NotifyGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NotifyGroup) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type NotifyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Values []*Target `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *NotifyTarget) Reset() {
	*x = NotifyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyTarget) ProtoMessage() {}

func (x *NotifyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyTarget.ProtoReflect.Descriptor instead.
func (*NotifyTarget) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{71}
}

func (x *NotifyTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NotifyTarget) GetValues() []*Target {
	if x != nil {
		return x.Values
	}
	return nil
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Secret   string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{72}
}

func (x *Target) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *Target) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type AlertNotifySilence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit   string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	Policy string `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *AlertNotifySilence) Reset() {
	*x = AlertNotifySilence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertNotifySilence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertNotifySilence) ProtoMessage() {}

func (x *AlertNotifySilence) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertNotifySilence.ProtoReflect.Descriptor instead.
func (*AlertNotifySilence) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{73}
}

func (x *AlertNotifySilence) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AlertNotifySilence) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *AlertNotifySilence) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

type GetAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAlertRequest) Reset() {
	*x = GetAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRequest) ProtoMessage() {}

func (x *GetAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRequest.ProtoReflect.Descriptor instead.
func (*GetAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{74}
}

func (x *GetAlertRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Alert `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAlertResponse) Reset() {
	*x = GetAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertResponse) ProtoMessage() {}

func (x *GetAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertResponse.ProtoReflect.Descriptor instead.
func (*GetAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{75}
}

func (x *GetAlertResponse) GetData() *Alert {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAlertDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAlertDetailRequest) Reset() {
	*x = GetAlertDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertDetailRequest) ProtoMessage() {}

func (x *GetAlertDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAlertDetailRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{76}
}

func (x *GetAlertDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAlertDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Alert `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAlertDetailResponse) Reset() {
	*x = GetAlertDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertDetailResponse) ProtoMessage() {}

func (x *GetAlertDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertDetailResponse.ProtoReflect.Descriptor instead.
func (*GetAlertDetailResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{77}
}

func (x *GetAlertDetailResponse) GetData() *Alert {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertScope       string                     `protobuf:"bytes,3,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId     string                     `protobuf:"bytes,4,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable           bool                       `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Rules            []*AlertExpression         `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies         []*AlertNotify             `protobuf:"bytes,7,rep,name=notifies,proto3" json:"notifies,omitempty"`
	Filters          map[string]*structpb.Value `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes       map[string]*structpb.Value `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterNames     []string                   `protobuf:"bytes,10,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	Domain           string                     `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateTime       int64                      `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       int64                      `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TriggerCondition []*TriggerCondition        `protobuf:"bytes,14,rep,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`
}

func (x *CreateAlertRequest) Reset() {
	*x = CreateAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertRequest) ProtoMessage() {}

func (x *CreateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{78}
}

func (x *CreateAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *CreateAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *CreateAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CreateAlertRequest) GetRules() []*AlertExpression {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateAlertRequest) GetNotifies() []*AlertNotify {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *CreateAlertRequest) GetFilters() map[string]*structpb.Value {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CreateAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateAlertRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *CreateAlertRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CreateAlertRequest) GetTriggerCondition() []*TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

type CreateAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateAlertResponse) Reset() {
	*x = CreateAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertResponse) ProtoMessage() {}

func (x *CreateAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertResponse.ProtoReflect.Descriptor instead.
func (*CreateAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{79}
}

func (x *CreateAlertResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type UpdateAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertScope       string                     `protobuf:"bytes,3,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId     string                     `protobuf:"bytes,4,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable           bool                       `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Rules            []*AlertExpression         `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies         []*AlertNotify             `protobuf:"bytes,7,rep,name=notifies,proto3" json:"notifies,omitempty"`
	Filters          map[string]*structpb.Value `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes       map[string]*structpb.Value `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterNames     []string                   `protobuf:"bytes,10,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	Domain           string                     `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateTime       int64                      `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       int64                      `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TriggerCondition []*TriggerCondition        `protobuf:"bytes,14,rep,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`
}

func (x *UpdateAlertRequest) Reset() {
	*x = UpdateAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertRequest) ProtoMessage() {}

func (x *UpdateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *UpdateAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *UpdateAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateAlertRequest) GetRules() []*AlertExpression {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *UpdateAlertRequest) GetNotifies() []*AlertNotify {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *UpdateAlertRequest) GetFilters() map[string]*structpb.Value {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *UpdateAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateAlertRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *UpdateAlertRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpdateAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpdateAlertRequest) GetTriggerCondition() []*TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

type UpdateAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAlertResponse) Reset() {
	*x = UpdateAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertResponse) ProtoMessage() {}

func (x *UpdateAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertResponse.ProtoReflect.Descriptor instead.
func (*UpdateAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{81}
}

type UpdateAlertEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool  `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateAlertEnableRequest) Reset() {
	*x = UpdateAlertEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertEnableRequest) ProtoMessage() {}

func (x *UpdateAlertEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertEnableRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertEnableRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateAlertEnableRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAlertEnableRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type UpdateAlertEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAlertEnableResponse) Reset() {
	*x = UpdateAlertEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertEnableResponse) ProtoMessage() {}

func (x *UpdateAlertEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertEnableResponse.ProtoReflect.Descriptor instead.
func (*UpdateAlertEnableResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{83}
}

type DeleteAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAlertRequest) Reset() {
	*x = DeleteAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertRequest) ProtoMessage() {}

func (x *DeleteAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertRequest.ProtoReflect.Descriptor instead.
func (*DeleteAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteAlertRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteAlertResponse) Reset() {
	*x = DeleteAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertResponse) ProtoMessage() {}

func (x *DeleteAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertResponse.ProtoReflect.Descriptor instead.
func (*DeleteAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteAlertResponse) GetData() map[string]*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgAlertRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryOrgAlertRuleRequest) Reset() {
	*x = QueryOrgAlertRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertRuleRequest) ProtoMessage() {}

func (x *QueryOrgAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{86}
}

type QueryOrgAlertRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AlertTypeRuleResp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgAlertRuleResponse) Reset() {
	*x = QueryOrgAlertRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertRuleResponse) ProtoMessage() {}

func (x *QueryOrgAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{87}
}

func (x *QueryOrgAlertRuleResponse) GetData() *AlertTypeRuleResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo   int64 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryOrgAlertRequest) Reset() {
	*x = QueryOrgAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertRequest) ProtoMessage() {}

func (x *QueryOrgAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{88}
}

func (x *QueryOrgAlertRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryOrgAlertRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryOrgAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryOrgAlertData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgAlertResponse) Reset() {
	*x = QueryOrgAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertResponse) ProtoMessage() {}

func (x *QueryOrgAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{89}
}

func (x *QueryOrgAlertResponse) GetData() *QueryOrgAlertData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgAlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Alert `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryOrgAlertData) Reset() {
	*x = QueryOrgAlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertData) ProtoMessage() {}

func (x *QueryOrgAlertData) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertData.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertData) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{90}
}

func (x *QueryOrgAlertData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryOrgAlertData) GetList() []*Alert {
	if x != nil {
		return x.List
	}
	return nil
}

type GetOrgAlertDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrgAlertDetailRequest) Reset() {
	*x = GetOrgAlertDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgAlertDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAlertDetailRequest) ProtoMessage() {}

func (x *GetOrgAlertDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAlertDetailRequest.ProtoReflect.Descriptor instead.
func (*GetOrgAlertDetailRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{91}
}

func (x *GetOrgAlertDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOrgAlertDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Alert `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgAlertDetailResponse) Reset() {
	*x = GetOrgAlertDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgAlertDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAlertDetailResponse) ProtoMessage() {}

func (x *GetOrgAlertDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAlertDetailResponse.ProtoReflect.Descriptor instead.
func (*GetOrgAlertDetailResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{92}
}

func (x *GetOrgAlertDetailResponse) GetData() *Alert {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateOrgAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertScope       string                     `protobuf:"bytes,3,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId     string                     `protobuf:"bytes,4,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable           bool                       `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Rules            []*AlertExpression         `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies         []*AlertNotify             `protobuf:"bytes,7,rep,name=notifies,proto3" json:"notifies,omitempty"`
	Filters          map[string]*structpb.Value `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes       map[string]*structpb.Value `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterNames     []string                   `protobuf:"bytes,10,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	Domain           string                     `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateTime       int64                      `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       int64                      `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TriggerCondition []*TriggerCondition        `protobuf:"bytes,14,rep,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`
}

func (x *CreateOrgAlertRequest) Reset() {
	*x = CreateOrgAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgAlertRequest) ProtoMessage() {}

func (x *CreateOrgAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{93}
}

func (x *CreateOrgAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateOrgAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrgAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *CreateOrgAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *CreateOrgAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CreateOrgAlertRequest) GetRules() []*AlertExpression {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateOrgAlertRequest) GetNotifies() []*AlertNotify {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *CreateOrgAlertRequest) GetFilters() map[string]*structpb.Value {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CreateOrgAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateOrgAlertRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *CreateOrgAlertRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateOrgAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateOrgAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CreateOrgAlertRequest) GetTriggerCondition() []*TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

type TriggerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Operator  string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Values    string `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *TriggerCondition) Reset() {
	*x = TriggerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerCondition) ProtoMessage() {}

func (x *TriggerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerCondition.ProtoReflect.Descriptor instead.
func (*TriggerCondition) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{94}
}

func (x *TriggerCondition) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *TriggerCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *TriggerCondition) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

type CreateOrgAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateOrgAlertResponse) Reset() {
	*x = CreateOrgAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgAlertResponse) ProtoMessage() {}

func (x *CreateOrgAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgAlertResponse.ProtoReflect.Descriptor instead.
func (*CreateOrgAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{95}
}

func (x *CreateOrgAlertResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateOrgAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertScope       string                     `protobuf:"bytes,3,opt,name=alertScope,proto3" json:"alertScope,omitempty"`
	AlertScopeId     string                     `protobuf:"bytes,4,opt,name=alertScopeId,proto3" json:"alertScopeId,omitempty"`
	Enable           bool                       `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Rules            []*AlertExpression         `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	Notifies         []*AlertNotify             `protobuf:"bytes,7,rep,name=notifies,proto3" json:"notifies,omitempty"`
	Filters          map[string]*structpb.Value `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes       map[string]*structpb.Value `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterNames     []string                   `protobuf:"bytes,10,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	Domain           string                     `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	CreateTime       int64                      `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       int64                      `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TriggerCondition []*TriggerCondition        `protobuf:"bytes,14,rep,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`
}

func (x *UpdateOrgAlertRequest) Reset() {
	*x = UpdateOrgAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgAlertRequest) ProtoMessage() {}

func (x *UpdateOrgAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateOrgAlertRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrgAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrgAlertRequest) GetAlertScope() string {
	if x != nil {
		return x.AlertScope
	}
	return ""
}

func (x *UpdateOrgAlertRequest) GetAlertScopeId() string {
	if x != nil {
		return x.AlertScopeId
	}
	return ""
}

func (x *UpdateOrgAlertRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateOrgAlertRequest) GetRules() []*AlertExpression {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *UpdateOrgAlertRequest) GetNotifies() []*AlertNotify {
	if x != nil {
		return x.Notifies
	}
	return nil
}

func (x *UpdateOrgAlertRequest) GetFilters() map[string]*structpb.Value {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *UpdateOrgAlertRequest) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateOrgAlertRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *UpdateOrgAlertRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateOrgAlertRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpdateOrgAlertRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpdateOrgAlertRequest) GetTriggerCondition() []*TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

type UpdateOrgAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrgAlertResponse) Reset() {
	*x = UpdateOrgAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgAlertResponse) ProtoMessage() {}

func (x *UpdateOrgAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgAlertResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{97}
}

type UpdateOrgAlertEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool  `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateOrgAlertEnableRequest) Reset() {
	*x = UpdateOrgAlertEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgAlertEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgAlertEnableRequest) ProtoMessage() {}

func (x *UpdateOrgAlertEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgAlertEnableRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgAlertEnableRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateOrgAlertEnableRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrgAlertEnableRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type UpdateOrgAlertEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrgAlertEnableResponse) Reset() {
	*x = UpdateOrgAlertEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgAlertEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgAlertEnableResponse) ProtoMessage() {}

func (x *UpdateOrgAlertEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgAlertEnableResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgAlertEnableResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{99}
}

type DeleteOrgAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOrgAlertRequest) Reset() {
	*x = DeleteOrgAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgAlertRequest) ProtoMessage() {}

func (x *DeleteOrgAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgAlertRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrgAlertRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{100}
}

func (x *DeleteOrgAlertRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOrgAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteOrgAlertResponse) Reset() {
	*x = DeleteOrgAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrgAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrgAlertResponse) ProtoMessage() {}

func (x *DeleteOrgAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrgAlertResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrgAlertResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteOrgAlertResponse) GetData() map[string]*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAlertRecordAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetAlertRecordAttrRequest) Reset() {
	*x = GetAlertRecordAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertRecordAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRecordAttrRequest) ProtoMessage() {}

func (x *GetAlertRecordAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRecordAttrRequest.ProtoReflect.Descriptor instead.
func (*GetAlertRecordAttrRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{102}
}

func (x *GetAlertRecordAttrRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetAlertRecordAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AlertRecordAttr `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAlertRecordAttrResponse) Reset() {
	*x = GetAlertRecordAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertRecordAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRecordAttrResponse) ProtoMessage() {}

func (x *GetAlertRecordAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRecordAttrResponse.ProtoReflect.Descriptor instead.
func (*GetAlertRecordAttrResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{103}
}

func (x *GetAlertRecordAttrResponse) GetData() *AlertRecordAttr {
	if x != nil {
		return x.Data
	}
	return nil
}

type AlertRecordAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertState  []*DisplayKey `protobuf:"bytes,1,rep,name=alertState,proto3" json:"alertState,omitempty"`
	AlertType   []*DisplayKey `protobuf:"bytes,2,rep,name=alertType,proto3" json:"alertType,omitempty"`
	HandleState []*DisplayKey `protobuf:"bytes,3,rep,name=handleState,proto3" json:"handleState,omitempty"`
}

func (x *AlertRecordAttr) Reset() {
	*x = AlertRecordAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRecordAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRecordAttr) ProtoMessage() {}

func (x *AlertRecordAttr) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRecordAttr.ProtoReflect.Descriptor instead.
func (*AlertRecordAttr) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{104}
}

func (x *AlertRecordAttr) GetAlertState() []*DisplayKey {
	if x != nil {
		return x.AlertState
	}
	return nil
}

func (x *AlertRecordAttr) GetAlertType() []*DisplayKey {
	if x != nil {
		return x.AlertType
	}
	return nil
}

func (x *AlertRecordAttr) GetHandleState() []*DisplayKey {
	if x != nil {
		return x.HandleState
	}
	return nil
}

type QueryAlertRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeKey    string   `protobuf:"bytes,2,opt,name=scopeKey,proto3" json:"scopeKey,omitempty"`
	AlertGroup  []string `protobuf:"bytes,3,rep,name=alertGroup,proto3" json:"alertGroup,omitempty"`
	AlertState  []string `protobuf:"bytes,4,rep,name=alertState,proto3" json:"alertState,omitempty"`
	AlertType   []string `protobuf:"bytes,5,rep,name=alertType,proto3" json:"alertType,omitempty"`
	HandleState []string `protobuf:"bytes,6,rep,name=handleState,proto3" json:"handleState,omitempty"`
	HandlerId   []string `protobuf:"bytes,7,rep,name=handlerId,proto3" json:"handlerId,omitempty"`
	PageNo      uint64   `protobuf:"varint,8,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    uint64   `protobuf:"varint,9,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryAlertRecordRequest) Reset() {
	*x = QueryAlertRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertRecordRequest) ProtoMessage() {}

func (x *QueryAlertRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryAlertRecordRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{105}
}

func (x *QueryAlertRecordRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *QueryAlertRecordRequest) GetScopeKey() string {
	if x != nil {
		return x.ScopeKey
	}
	return ""
}

func (x *QueryAlertRecordRequest) GetAlertGroup() []string {
	if x != nil {
		return x.AlertGroup
	}
	return nil
}

func (x *QueryAlertRecordRequest) GetAlertState() []string {
	if x != nil {
		return x.AlertState
	}
	return nil
}

func (x *QueryAlertRecordRequest) GetAlertType() []string {
	if x != nil {
		return x.AlertType
	}
	return nil
}

func (x *QueryAlertRecordRequest) GetHandleState() []string {
	if x != nil {
		return x.HandleState
	}
	return nil
}

func (x *QueryAlertRecordRequest) GetHandlerId() []string {
	if x != nil {
		return x.HandlerId
	}
	return nil
}

func (x *QueryAlertRecordRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryAlertRecordRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryAlertRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListResult `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAlertRecordResponse) Reset() {
	*x = QueryAlertRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertRecordResponse) ProtoMessage() {}

func (x *QueryAlertRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertRecordResponse.ProtoReflect.Descriptor instead.
func (*QueryAlertRecordResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{106}
}

func (x *QueryAlertRecordResponse) GetData() *ListResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*AlertRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListResult) Reset() {
	*x = ListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResult) ProtoMessage() {}

func (x *ListResult) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResult.ProtoReflect.Descriptor instead.
func (*ListResult) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{107}
}

func (x *ListResult) GetList() []*AlertRecord {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AlertRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Scope         string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeKey      string `protobuf:"bytes,3,opt,name=scopeKey,proto3" json:"scopeKey,omitempty"`
	AlertGroup    string `protobuf:"bytes,4,opt,name=alertGroup,proto3" json:"alertGroup,omitempty"`
	Title         string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	AlertState    string `protobuf:"bytes,6,opt,name=alertState,proto3" json:"alertState,omitempty"`
	AlertType     string `protobuf:"bytes,7,opt,name=alertType,proto3" json:"alertType,omitempty"`
	AlertIndex    string `protobuf:"bytes,8,opt,name=alertIndex,proto3" json:"alertIndex,omitempty"`
	ExpressionKey string `protobuf:"bytes,9,opt,name=expressionKey,proto3" json:"expressionKey,omitempty"`
	AlertId       uint64 `protobuf:"varint,10,opt,name=alertId,proto3" json:"alertId,omitempty"`
	AlertName     string `protobuf:"bytes,11,opt,name=alertName,proto3" json:"alertName,omitempty"`
	RuleId        uint64 `protobuf:"varint,12,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	ProjectId     uint64 `protobuf:"varint,13,opt,name=projectId,proto3" json:"projectId,omitempty"`
	IssueId       uint64 `protobuf:"varint,14,opt,name=issueId,proto3" json:"issueId,omitempty"`
	HandleState   string `protobuf:"bytes,15,opt,name=handleState,proto3" json:"handleState,omitempty"`
	HandlerId     string `protobuf:"bytes,16,opt,name=handlerId,proto3" json:"handlerId,omitempty"`
	AlertTime     int64  `protobuf:"varint,17,opt,name=alertTime,proto3" json:"alertTime,omitempty"`
	HandleTime    int64  `protobuf:"varint,18,opt,name=handleTime,proto3" json:"handleTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,19,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64  `protobuf:"varint,20,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *AlertRecord) Reset() {
	*x = AlertRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRecord) ProtoMessage() {}

func (x *AlertRecord) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRecord.ProtoReflect.Descriptor instead.
func (*AlertRecord) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{108}
}

func (x *AlertRecord) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AlertRecord) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AlertRecord) GetScopeKey() string {
	if x != nil {
		return x.ScopeKey
	}
	return ""
}

func (x *AlertRecord) GetAlertGroup() string {
	if x != nil {
		return x.AlertGroup
	}
	return ""
}

func (x *AlertRecord) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlertRecord) GetAlertState() string {
	if x != nil {
		return x.AlertState
	}
	return ""
}

func (x *AlertRecord) GetAlertType() string {
	if x != nil {
		return x.AlertType
	}
	return ""
}

func (x *AlertRecord) GetAlertIndex() string {
	if x != nil {
		return x.AlertIndex
	}
	return ""
}

func (x *AlertRecord) GetExpressionKey() string {
	if x != nil {
		return x.ExpressionKey
	}
	return ""
}

func (x *AlertRecord) GetAlertId() uint64 {
	if x != nil {
		return x.AlertId
	}
	return 0
}

func (x *AlertRecord) GetAlertName() string {
	if x != nil {
		return x.AlertName
	}
	return ""
}

func (x *AlertRecord) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *AlertRecord) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AlertRecord) GetIssueId() uint64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *AlertRecord) GetHandleState() string {
	if x != nil {
		return x.HandleState
	}
	return ""
}

func (x *AlertRecord) GetHandlerId() string {
	if x != nil {
		return x.HandlerId
	}
	return ""
}

func (x *AlertRecord) GetAlertTime() int64 {
	if x != nil {
		return x.AlertTime
	}
	return 0
}

func (x *AlertRecord) GetHandleTime() int64 {
	if x != nil {
		return x.HandleTime
	}
	return 0
}

func (x *AlertRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AlertRecord) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GetAlertRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *GetAlertRecordRequest) Reset() {
	*x = GetAlertRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRecordRequest) ProtoMessage() {}

func (x *GetAlertRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRecordRequest.ProtoReflect.Descriptor instead.
func (*GetAlertRecordRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{109}
}

func (x *GetAlertRecordRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetAlertRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AlertRecord `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAlertRecordResponse) Reset() {
	*x = GetAlertRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRecordResponse) ProtoMessage() {}

func (x *GetAlertRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRecordResponse.ProtoReflect.Descriptor instead.
func (*GetAlertRecordResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{110}
}

func (x *GetAlertRecordResponse) GetData() *AlertRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAlertHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Start   int64  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End     int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Limit   uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryAlertHistoryRequest) Reset() {
	*x = QueryAlertHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertHistoryRequest) ProtoMessage() {}

func (x *QueryAlertHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertHistoryRequest.ProtoReflect.Descriptor instead.
func (*QueryAlertHistoryRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{111}
}

func (x *QueryAlertHistoryRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *QueryAlertHistoryRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QueryAlertHistoryRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *QueryAlertHistoryRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryAlertHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AlertHistory `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAlertHistoryResponse) Reset() {
	*x = QueryAlertHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAlertHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAlertHistoryResponse) ProtoMessage() {}

func (x *QueryAlertHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAlertHistoryResponse.ProtoReflect.Descriptor instead.
func (*QueryAlertHistoryResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{112}
}

func (x *QueryAlertHistoryResponse) GetData() []*AlertHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type AlertHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Timestamp  int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AlertState string `protobuf:"bytes,3,opt,name=alertState,proto3" json:"alertState,omitempty"`
	Title      string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content    string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	DisplayUrl string `protobuf:"bytes,6,opt,name=displayUrl,proto3" json:"displayUrl,omitempty"`
}

func (x *AlertHistory) Reset() {
	*x = AlertHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertHistory) ProtoMessage() {}

func (x *AlertHistory) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertHistory.ProtoReflect.Descriptor instead.
func (*AlertHistory) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{113}
}

func (x *AlertHistory) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AlertHistory) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AlertHistory) GetAlertState() string {
	if x != nil {
		return x.AlertState
	}
	return ""
}

func (x *AlertHistory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlertHistory) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AlertHistory) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

type CreateAlertIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            string                 `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	PlanStartedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=planStartedAt,proto3" json:"planStartedAt,omitempty"`
	PlanFinishedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=planFinishedAt,proto3" json:"planFinishedAt,omitempty"`
	ProjectID          uint64                 `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID        int64                  `protobuf:"varint,5,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	AppID              uint64                 `protobuf:"varint,6,opt,name=appID,proto3" json:"appID,omitempty"`
	TestPlanCaseRelIDs []uint64               `protobuf:"varint,7,rep,packed,name=testPlanCaseRelIDs,proto3" json:"testPlanCaseRelIDs,omitempty"`
	Type               string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Title              string                 `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Content            string                 `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	Priority           string                 `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	Complexity         string                 `protobuf:"bytes,12,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Severity           string                 `protobuf:"bytes,13,opt,name=severity,proto3" json:"severity,omitempty"`
	Assignee           string                 `protobuf:"bytes,14,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Creator            string                 `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	Labels             []string               `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty"`
	Source             string                 `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	IssueManHour       *IssueManHour          `protobuf:"bytes,18,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	TaskType           string                 `protobuf:"bytes,19,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage           string                 `protobuf:"bytes,20,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner              string                 `protobuf:"bytes,21,opt,name=owner,proto3" json:"owner,omitempty"`
	UserID             string                 `protobuf:"bytes,22,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient     string                 `protobuf:"bytes,23,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
	External           bool                   `protobuf:"varint,24,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *CreateAlertIssueRequest) Reset() {
	*x = CreateAlertIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertIssueRequest) ProtoMessage() {}

func (x *CreateAlertIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertIssueRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertIssueRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{114}
}

func (x *CreateAlertIssueRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetPlanStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanStartedAt
	}
	return nil
}

func (x *CreateAlertIssueRequest) GetPlanFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanFinishedAt
	}
	return nil
}

func (x *CreateAlertIssueRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateAlertIssueRequest) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *CreateAlertIssueRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CreateAlertIssueRequest) GetTestPlanCaseRelIDs() []uint64 {
	if x != nil {
		return x.TestPlanCaseRelIDs
	}
	return nil
}

func (x *CreateAlertIssueRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetComplexity() string {
	if x != nil {
		return x.Complexity
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateAlertIssueRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *CreateAlertIssueRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

func (x *CreateAlertIssueRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

type IssueManHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimateTime            int64  `protobuf:"varint,1,opt,name=estimateTime,proto3" json:"estimateTime,omitempty"`
	ThisElapsedTime         int64  `protobuf:"varint,2,opt,name=thisElapsedTime,proto3" json:"thisElapsedTime,omitempty"`
	ElapsedTime             int64  `protobuf:"varint,3,opt,name=elapsedTime,proto3" json:"elapsedTime,omitempty"`
	RemainingTime           int64  `protobuf:"varint,4,opt,name=remainingTime,proto3" json:"remainingTime,omitempty"`
	StartTime               string `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	WorkContent             string `protobuf:"bytes,6,opt,name=workContent,proto3" json:"workContent,omitempty"`
	IsModifiedRemainingTime bool   `protobuf:"varint,7,opt,name=isModifiedRemainingTime,proto3" json:"isModifiedRemainingTime,omitempty"`
}

func (x *IssueManHour) Reset() {
	*x = IssueManHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueManHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueManHour) ProtoMessage() {}

func (x *IssueManHour) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueManHour.ProtoReflect.Descriptor instead.
func (*IssueManHour) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{115}
}

func (x *IssueManHour) GetEstimateTime() int64 {
	if x != nil {
		return x.EstimateTime
	}
	return 0
}

func (x *IssueManHour) GetThisElapsedTime() int64 {
	if x != nil {
		return x.ThisElapsedTime
	}
	return 0
}

func (x *IssueManHour) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *IssueManHour) GetRemainingTime() int64 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

func (x *IssueManHour) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *IssueManHour) GetWorkContent() string {
	if x != nil {
		return x.WorkContent
	}
	return ""
}

func (x *IssueManHour) GetIsModifiedRemainingTime() bool {
	if x != nil {
		return x.IsModifiedRemainingTime
	}
	return false
}

type CreateAlertIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAlertIssueResponse) Reset() {
	*x = CreateAlertIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertIssueResponse) ProtoMessage() {}

func (x *CreateAlertIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertIssueResponse.ProtoReflect.Descriptor instead.
func (*CreateAlertIssueResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{116}
}

type UpdateAlertIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId                  string                 `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Title                    string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content                  string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	State                    int64                  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	Priority                 string                 `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Complexity               string                 `protobuf:"bytes,6,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Severity                 string                 `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	PlanStartedAt            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=planStartedAt,proto3" json:"planStartedAt,omitempty"`
	PlanFinishedAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=planFinishedAt,proto3" json:"planFinishedAt,omitempty"`
	Assignee                 string                 `protobuf:"bytes,10,opt,name=assignee,proto3" json:"assignee,omitempty"`
	IterationID              string                 `protobuf:"bytes,11,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	Source                   string                 `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	Labels                   []string               `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
	RelatedIssues            []int64                `protobuf:"varint,14,rep,packed,name=relatedIssues,proto3" json:"relatedIssues,omitempty"`
	TaskType                 string                 `protobuf:"bytes,15,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage                 string                 `protobuf:"bytes,16,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner                    string                 `protobuf:"bytes,17,opt,name=owner,proto3" json:"owner,omitempty"`
	IssueManHour             *IssueManHour          `protobuf:"bytes,18,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	TestPlanCaseRelIDs       []uint64               `protobuf:"varint,19,rep,packed,name=testPlanCaseRelIDs,proto3" json:"testPlanCaseRelIDs,omitempty"`
	RemoveTestPlanCaseRelIDs bool                   `protobuf:"varint,20,opt,name=removeTestPlanCaseRelIDs,proto3" json:"removeTestPlanCaseRelIDs,omitempty"`
	Id                       uint64                 `protobuf:"varint,21,opt,name=id,proto3" json:"id,omitempty"`
	UserID                   string                 `protobuf:"bytes,22,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient           string                 `protobuf:"bytes,23,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
	IssueId                  uint64                 `protobuf:"varint,24,opt,name=issueId,proto3" json:"issueId,omitempty"`
}

func (x *UpdateAlertIssueRequest) Reset() {
	*x = UpdateAlertIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertIssueRequest) ProtoMessage() {}

func (x *UpdateAlertIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertIssueRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertIssueRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateAlertIssueRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateAlertIssueRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetComplexity() string {
	if x != nil {
		return x.Complexity
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetPlanStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanStartedAt
	}
	return nil
}

func (x *UpdateAlertIssueRequest) GetPlanFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanFinishedAt
	}
	return nil
}

func (x *UpdateAlertIssueRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetIterationID() string {
	if x != nil {
		return x.IterationID
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateAlertIssueRequest) GetRelatedIssues() []int64 {
	if x != nil {
		return x.RelatedIssues
	}
	return nil
}

func (x *UpdateAlertIssueRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *UpdateAlertIssueRequest) GetTestPlanCaseRelIDs() []uint64 {
	if x != nil {
		return x.TestPlanCaseRelIDs
	}
	return nil
}

func (x *UpdateAlertIssueRequest) GetRemoveTestPlanCaseRelIDs() bool {
	if x != nil {
		return x.RemoveTestPlanCaseRelIDs
	}
	return false
}

func (x *UpdateAlertIssueRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAlertIssueRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

func (x *UpdateAlertIssueRequest) GetIssueId() uint64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

type UpdateAlertIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAlertIssueResponse) Reset() {
	*x = UpdateAlertIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertIssueResponse) ProtoMessage() {}

func (x *UpdateAlertIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertIssueResponse.ProtoReflect.Descriptor instead.
func (*UpdateAlertIssueResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{118}
}

type GetOrgAlertRecordAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrgAlertRecordAttrRequest) Reset() {
	*x = GetOrgAlertRecordAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgAlertRecordAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAlertRecordAttrRequest) ProtoMessage() {}

func (x *GetOrgAlertRecordAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAlertRecordAttrRequest.ProtoReflect.Descriptor instead.
func (*GetOrgAlertRecordAttrRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{119}
}

type GetOrgAlertRecordAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AlertRecordAttr `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgAlertRecordAttrResponse) Reset() {
	*x = GetOrgAlertRecordAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgAlertRecordAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAlertRecordAttrResponse) ProtoMessage() {}

func (x *GetOrgAlertRecordAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAlertRecordAttrResponse.ProtoReflect.Descriptor instead.
func (*GetOrgAlertRecordAttrResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{120}
}

func (x *GetOrgAlertRecordAttrResponse) GetData() *AlertRecordAttr {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgAlertRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertGroup  []string `protobuf:"bytes,1,rep,name=alertGroup,proto3" json:"alertGroup,omitempty"`
	AlertState  []string `protobuf:"bytes,2,rep,name=alertState,proto3" json:"alertState,omitempty"`
	AlertType   []string `protobuf:"bytes,3,rep,name=alertType,proto3" json:"alertType,omitempty"`
	HandleState []string `protobuf:"bytes,4,rep,name=handleState,proto3" json:"handleState,omitempty"`
	HandlerId   []string `protobuf:"bytes,5,rep,name=handlerId,proto3" json:"handlerId,omitempty"`
	PageNo      uint64   `protobuf:"varint,6,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    uint64   `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryOrgAlertRecordRequest) Reset() {
	*x = QueryOrgAlertRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertRecordRequest) ProtoMessage() {}

func (x *QueryOrgAlertRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertRecordRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{121}
}

func (x *QueryOrgAlertRecordRequest) GetAlertGroup() []string {
	if x != nil {
		return x.AlertGroup
	}
	return nil
}

func (x *QueryOrgAlertRecordRequest) GetAlertState() []string {
	if x != nil {
		return x.AlertState
	}
	return nil
}

func (x *QueryOrgAlertRecordRequest) GetAlertType() []string {
	if x != nil {
		return x.AlertType
	}
	return nil
}

func (x *QueryOrgAlertRecordRequest) GetHandleState() []string {
	if x != nil {
		return x.HandleState
	}
	return nil
}

func (x *QueryOrgAlertRecordRequest) GetHandlerId() []string {
	if x != nil {
		return x.HandlerId
	}
	return nil
}

func (x *QueryOrgAlertRecordRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryOrgAlertRecordRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryOrgHostsAlertRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters    []*ClusterReq `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	AlertGroup  []string      `protobuf:"bytes,2,rep,name=alertGroup,proto3" json:"alertGroup,omitempty"`
	AlertState  []string      `protobuf:"bytes,3,rep,name=alertState,proto3" json:"alertState,omitempty"`
	AlertType   []string      `protobuf:"bytes,4,rep,name=alertType,proto3" json:"alertType,omitempty"`
	HandleState []string      `protobuf:"bytes,5,rep,name=handleState,proto3" json:"handleState,omitempty"`
	HandlerId   []string      `protobuf:"bytes,6,rep,name=handlerId,proto3" json:"handlerId,omitempty"`
	PageNo      uint64        `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    uint64        `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryOrgHostsAlertRecordRequest) Reset() {
	*x = QueryOrgHostsAlertRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgHostsAlertRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgHostsAlertRecordRequest) ProtoMessage() {}

func (x *QueryOrgHostsAlertRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgHostsAlertRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgHostsAlertRecordRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{122}
}

func (x *QueryOrgHostsAlertRecordRequest) GetClusters() []*ClusterReq {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *QueryOrgHostsAlertRecordRequest) GetAlertGroup() []string {
	if x != nil {
		return x.AlertGroup
	}
	return nil
}

func (x *QueryOrgHostsAlertRecordRequest) GetAlertState() []string {
	if x != nil {
		return x.AlertState
	}
	return nil
}

func (x *QueryOrgHostsAlertRecordRequest) GetAlertType() []string {
	if x != nil {
		return x.AlertType
	}
	return nil
}

func (x *QueryOrgHostsAlertRecordRequest) GetHandleState() []string {
	if x != nil {
		return x.HandleState
	}
	return nil
}

func (x *QueryOrgHostsAlertRecordRequest) GetHandlerId() []string {
	if x != nil {
		return x.HandlerId
	}
	return nil
}

func (x *QueryOrgHostsAlertRecordRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryOrgHostsAlertRecordRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string   `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	HostIPs     []string `protobuf:"bytes,2,rep,name=hostIPs,proto3" json:"hostIPs,omitempty"`
}

func (x *ClusterReq) Reset() {
	*x = ClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterReq) ProtoMessage() {}

func (x *ClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterReq.ProtoReflect.Descriptor instead.
func (*ClusterReq) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{123}
}

func (x *ClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterReq) GetHostIPs() []string {
	if x != nil {
		return x.HostIPs
	}
	return nil
}

type QueryOrgAlertRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListResult `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgAlertRecordResponse) Reset() {
	*x = QueryOrgAlertRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertRecordResponse) ProtoMessage() {}

func (x *QueryOrgAlertRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertRecordResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertRecordResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{124}
}

func (x *QueryOrgAlertRecordResponse) GetData() *ListResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgAlertRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *GetOrgAlertRecordRequest) Reset() {
	*x = GetOrgAlertRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgAlertRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAlertRecordRequest) ProtoMessage() {}

func (x *GetOrgAlertRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAlertRecordRequest.ProtoReflect.Descriptor instead.
func (*GetOrgAlertRecordRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{125}
}

func (x *GetOrgAlertRecordRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetOrgAlertRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AlertRecord `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrgAlertRecordResponse) Reset() {
	*x = GetOrgAlertRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgAlertRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgAlertRecordResponse) ProtoMessage() {}

func (x *GetOrgAlertRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgAlertRecordResponse.ProtoReflect.Descriptor instead.
func (*GetOrgAlertRecordResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{126}
}

func (x *GetOrgAlertRecordResponse) GetData() *AlertRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrgAlertHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Start   int64  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End     int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Limit   uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryOrgAlertHistoryRequest) Reset() {
	*x = QueryOrgAlertHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertHistoryRequest) ProtoMessage() {}

func (x *QueryOrgAlertHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertHistoryRequest.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertHistoryRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{127}
}

func (x *QueryOrgAlertHistoryRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *QueryOrgAlertHistoryRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QueryOrgAlertHistoryRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *QueryOrgAlertHistoryRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryOrgAlertHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AlertHistory `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryOrgAlertHistoryResponse) Reset() {
	*x = QueryOrgAlertHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrgAlertHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrgAlertHistoryResponse) ProtoMessage() {}

func (x *QueryOrgAlertHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrgAlertHistoryResponse.ProtoReflect.Descriptor instead.
func (*QueryOrgAlertHistoryResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{128}
}

func (x *QueryOrgAlertHistoryResponse) GetData() []*AlertHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateOrgAlertIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            string                 `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	PlanStartedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=planStartedAt,proto3" json:"planStartedAt,omitempty"`
	PlanFinishedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=planFinishedAt,proto3" json:"planFinishedAt,omitempty"`
	ProjectID          uint64                 `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID        int64                  `protobuf:"varint,5,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	AppID              uint64                 `protobuf:"varint,6,opt,name=appID,proto3" json:"appID,omitempty"`
	TestPlanCaseRelIDs []uint64               `protobuf:"varint,7,rep,packed,name=testPlanCaseRelIDs,proto3" json:"testPlanCaseRelIDs,omitempty"`
	Type               string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Title              string                 `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Content            string                 `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	Priority           string                 `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	Complexity         string                 `protobuf:"bytes,12,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Severity           string                 `protobuf:"bytes,13,opt,name=severity,proto3" json:"severity,omitempty"`
	Assignee           string                 `protobuf:"bytes,14,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Creator            string                 `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	Labels             []string               `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty"`
	Source             string                 `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	IssueManHour       *IssueManHour          `protobuf:"bytes,18,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	TaskType           string                 `protobuf:"bytes,19,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage           string                 `protobuf:"bytes,20,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner              string                 `protobuf:"bytes,21,opt,name=owner,proto3" json:"owner,omitempty"`
	UserID             string                 `protobuf:"bytes,22,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient     string                 `protobuf:"bytes,23,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
	External           bool                   `protobuf:"varint,24,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *CreateOrgAlertIssueRequest) Reset() {
	*x = CreateOrgAlertIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgAlertIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgAlertIssueRequest) ProtoMessage() {}

func (x *CreateOrgAlertIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgAlertIssueRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgAlertIssueRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{129}
}

func (x *CreateOrgAlertIssueRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetPlanStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanStartedAt
	}
	return nil
}

func (x *CreateOrgAlertIssueRequest) GetPlanFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanFinishedAt
	}
	return nil
}

func (x *CreateOrgAlertIssueRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateOrgAlertIssueRequest) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *CreateOrgAlertIssueRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CreateOrgAlertIssueRequest) GetTestPlanCaseRelIDs() []uint64 {
	if x != nil {
		return x.TestPlanCaseRelIDs
	}
	return nil
}

func (x *CreateOrgAlertIssueRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetComplexity() string {
	if x != nil {
		return x.Complexity
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateOrgAlertIssueRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *CreateOrgAlertIssueRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

func (x *CreateOrgAlertIssueRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

type CreateOrgAlertIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateOrgAlertIssueResponse) Reset() {
	*x = CreateOrgAlertIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgAlertIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgAlertIssueResponse) ProtoMessage() {}

func (x *CreateOrgAlertIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgAlertIssueResponse.ProtoReflect.Descriptor instead.
func (*CreateOrgAlertIssueResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{130}
}

func (x *CreateOrgAlertIssueResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type UpdateOrgAlertIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId                  string                 `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Title                    string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content                  string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	State                    int64                  `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	Priority                 string                 `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Complexity               string                 `protobuf:"bytes,6,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Severity                 string                 `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	PlanStartedAt            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=planStartedAt,proto3" json:"planStartedAt,omitempty"`
	PlanFinishedAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=planFinishedAt,proto3" json:"planFinishedAt,omitempty"`
	Assignee                 string                 `protobuf:"bytes,10,opt,name=assignee,proto3" json:"assignee,omitempty"`
	IterationID              string                 `protobuf:"bytes,11,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	Source                   string                 `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	Labels                   []string               `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
	RelatedIssues            []int64                `protobuf:"varint,14,rep,packed,name=relatedIssues,proto3" json:"relatedIssues,omitempty"`
	TaskType                 string                 `protobuf:"bytes,15,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage                 string                 `protobuf:"bytes,16,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner                    string                 `protobuf:"bytes,17,opt,name=owner,proto3" json:"owner,omitempty"`
	IssueManHour             *IssueManHour          `protobuf:"bytes,18,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	TestPlanCaseRelIDs       []uint64               `protobuf:"varint,19,rep,packed,name=testPlanCaseRelIDs,proto3" json:"testPlanCaseRelIDs,omitempty"`
	RemoveTestPlanCaseRelIDs bool                   `protobuf:"varint,20,opt,name=removeTestPlanCaseRelIDs,proto3" json:"removeTestPlanCaseRelIDs,omitempty"`
	Id                       uint64                 `protobuf:"varint,21,opt,name=id,proto3" json:"id,omitempty"`
	UserID                   string                 `protobuf:"bytes,22,opt,name=userID,proto3" json:"userID,omitempty"`
	InternalClient           string                 `protobuf:"bytes,23,opt,name=internalClient,proto3" json:"internalClient,omitempty"`
}

func (x *UpdateOrgAlertIssueRequest) Reset() {
	*x = UpdateOrgAlertIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgAlertIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgAlertIssueRequest) ProtoMessage() {}

func (x *UpdateOrgAlertIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgAlertIssueRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgAlertIssueRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{131}
}

func (x *UpdateOrgAlertIssueRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateOrgAlertIssueRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetComplexity() string {
	if x != nil {
		return x.Complexity
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetPlanStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanStartedAt
	}
	return nil
}

func (x *UpdateOrgAlertIssueRequest) GetPlanFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanFinishedAt
	}
	return nil
}

func (x *UpdateOrgAlertIssueRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetIterationID() string {
	if x != nil {
		return x.IterationID
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateOrgAlertIssueRequest) GetRelatedIssues() []int64 {
	if x != nil {
		return x.RelatedIssues
	}
	return nil
}

func (x *UpdateOrgAlertIssueRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *UpdateOrgAlertIssueRequest) GetTestPlanCaseRelIDs() []uint64 {
	if x != nil {
		return x.TestPlanCaseRelIDs
	}
	return nil
}

func (x *UpdateOrgAlertIssueRequest) GetRemoveTestPlanCaseRelIDs() bool {
	if x != nil {
		return x.RemoveTestPlanCaseRelIDs
	}
	return false
}

func (x *UpdateOrgAlertIssueRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrgAlertIssueRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateOrgAlertIssueRequest) GetInternalClient() string {
	if x != nil {
		return x.InternalClient
	}
	return ""
}

type UpdateOrgAlertIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrgAlertIssueResponse) Reset() {
	*x = UpdateOrgAlertIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgAlertIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgAlertIssueResponse) ProtoMessage() {}

func (x *UpdateOrgAlertIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgAlertIssueResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgAlertIssueResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{132}
}

type GetAlertConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
}

func (x *GetAlertConditionsRequest) Reset() {
	*x = GetAlertConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertConditionsRequest) ProtoMessage() {}

func (x *GetAlertConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetAlertConditionsRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{133}
}

func (x *GetAlertConditionsRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

type GetAlertConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Conditions `protobuf:"bytes,1,rep,name=data,json=conditions,proto3" json:"data,omitempty"`
}

func (x *GetAlertConditionsResponse) Reset() {
	*x = GetAlertConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertConditionsResponse) ProtoMessage() {}

func (x *GetAlertConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetAlertConditionsResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{134}
}

func (x *GetAlertConditionsResponse) GetData() []*Conditions {
	if x != nil {
		return x.Data
	}
	return nil
}

type Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Filters     []string `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	DisplayName string   `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Index       string   `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Conditions) Reset() {
	*x = Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conditions) ProtoMessage() {}

func (x *Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conditions.ProtoReflect.Descriptor instead.
func (*Conditions) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{135}
}

func (x *Conditions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Conditions) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Conditions) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Conditions) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type GetAlertConditionsValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*ConditionsValueRequest `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *GetAlertConditionsValueRequest) Reset() {
	*x = GetAlertConditionsValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertConditionsValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertConditionsValueRequest) ProtoMessage() {}

func (x *GetAlertConditionsValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertConditionsValueRequest.ProtoReflect.Descriptor instead.
func (*GetAlertConditionsValueRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{136}
}

func (x *GetAlertConditionsValueRequest) GetConditions() []*ConditionsValueRequest {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type ConditionsValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string            `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Filters   map[string]string `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Index     string            `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ConditionsValueRequest) Reset() {
	*x = ConditionsValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionsValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionsValueRequest) ProtoMessage() {}

func (x *ConditionsValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionsValueRequest.ProtoReflect.Descriptor instead.
func (*ConditionsValueRequest) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{137}
}

func (x *ConditionsValueRequest) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *ConditionsValueRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ConditionsValueRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type GetAlertConditionsValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AlertConditionsValue `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAlertConditionsValueResponse) Reset() {
	*x = GetAlertConditionsValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertConditionsValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertConditionsValueResponse) ProtoMessage() {}

func (x *GetAlertConditionsValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertConditionsValueResponse.ProtoReflect.Descriptor instead.
func (*GetAlertConditionsValueResponse) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{138}
}

func (x *GetAlertConditionsValueResponse) GetData() []*AlertConditionsValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type AlertConditionsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Options []*structpb.Value `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlertConditionsValue) Reset() {
	*x = AlertConditionsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alert_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertConditionsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertConditionsValue) ProtoMessage() {}

func (x *AlertConditionsValue) ProtoReflect() protoreflect.Message {
	mi := &file_alert_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertConditionsValue.ProtoReflect.Descriptor instead.
func (*AlertConditionsValue) Descriptor() ([]byte, []int) {
	return file_alert_proto_rawDescGZIP(), []int{139}
}

func (x *AlertConditionsValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AlertConditionsValue) GetOptions() []*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_alert_proto protoreflect.FileDescriptor

var file_alert_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x5d,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x02,
	0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x62, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x5c, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x71, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5f, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x22, 0x26, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x25, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x63, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x04, 0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5d, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x05, 0x0a, 0x12, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x51, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x92, 0x01, 0x0a,
	0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8c, 0x03, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x66, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x38, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf1, 0x04, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x04, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf7, 0x04, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xff, 0x04, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x56, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x04, 0x0a, 0x1c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x52, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x02, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x22, 0xa8, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0b,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x56, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x05, 0x0a,
	0x03, 0x41, 0x50, 0x49, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x50, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf9, 0x04, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55,
	0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x58,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x02, 0x0a, 0x11, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e,
	0x0a, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0xf2, 0x05, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0x5e, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0x89, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5b, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9e, 0x06,
	0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5,
	0x02, 0x0a, 0x0f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x6e,
	0x67, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5b, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x56, 0x0a, 0x12, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x06, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd,
	0x06, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x4f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x1a, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5d, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x06, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x73, 0x12, 0x55, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd6,
	0x06, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0x5a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x01, 0x0a, 0x0f,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x43, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaf,
	0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x53, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xd9, 0x04, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x31, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x56, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x22, 0xb6, 0x06, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x6c, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d,
	0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68,
	0x69, 0x73, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xda, 0x06, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x49,
	0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0c, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x22,
	0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10,
	0x00, 0x18, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc6, 0x02,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x73,
	0x22, 0x56, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x55,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x06, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c,
	0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x49, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x06, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d,
	0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44,
	0x73, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x1d, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x70, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x71, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5a, 0x0a, 0x14, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xd5,
	0x3f, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xaa, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0xc5, 0x01, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb7, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0xa2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0xa7, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0xb0,
	0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x37,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xce, 0x01,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0xb5,
	0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0xc6, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x38,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x67, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x7d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x1a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9b, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9a, 0x01,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12,
	0x90, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x1a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x90,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0xa4, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x30, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x1a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x7d, 0x12, 0xab, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x67, 0x2d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2d, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x67, 0x2d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0xb1, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x1a, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_alert_proto_rawDescOnce sync.Once
	file_alert_proto_rawDescData = file_alert_proto_rawDesc
)

func file_alert_proto_rawDescGZIP() []byte {
	file_alert_proto_rawDescOnce.Do(func() {
		file_alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_alert_proto_rawDescData)
	})
	return file_alert_proto_rawDescData
}

var file_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 170)
var file_alert_proto_goTypes = []interface{}{
	(*QueryCustomizeMetricRequest)(nil),           // 0: erda.core.monitor.alert.QueryCustomizeMetricRequest
	(*QueryCustomizeMetricResponse)(nil),          // 1: erda.core.monitor.alert.QueryCustomizeMetricResponse
	(*CustomizeMetrics)(nil),                      // 2: erda.core.monitor.alert.CustomizeMetrics
	(*MetricMeta)(nil),                            // 3: erda.core.monitor.alert.MetricMeta
	(*DisplayKey)(nil),                            // 4: erda.core.monitor.alert.DisplayKey
	(*FieldMeta)(nil),                             // 5: erda.core.monitor.alert.FieldMeta
	(*TagMeta)(nil),                               // 6: erda.core.monitor.alert.TagMeta
	(*Operator)(nil),                              // 7: erda.core.monitor.alert.Operator
	(*QueryCustomizeNotifyTargetRequest)(nil),     // 8: erda.core.monitor.alert.QueryCustomizeNotifyTargetRequest
	(*QueryCustomizeNotifyTargetResponse)(nil),    // 9: erda.core.monitor.alert.QueryCustomizeNotifyTargetResponse
	(*QueryCustomizeNotifyTargetData)(nil),        // 10: erda.core.monitor.alert.QueryCustomizeNotifyTargetData
	(*QueryOrgCustomizeNotifyTargetRequest)(nil),  // 11: erda.core.monitor.alert.QueryOrgCustomizeNotifyTargetRequest
	(*QueryOrgCustomizeNotifyTargetResponse)(nil), // 12: erda.core.monitor.alert.QueryOrgCustomizeNotifyTargetResponse
	(*QueryCustomizeAlertRequest)(nil),            // 13: erda.core.monitor.alert.QueryCustomizeAlertRequest
	(*QueryCustomizeAlertResponse)(nil),           // 14: erda.core.monitor.alert.QueryCustomizeAlertResponse
	(*QueryCustomizeAlertData)(nil),               // 15: erda.core.monitor.alert.QueryCustomizeAlertData
	(*CustomizeAlertOverview)(nil),                // 16: erda.core.monitor.alert.CustomizeAlertOverview
	(*GetCustomizeAlertRequest)(nil),              // 17: erda.core.monitor.alert.GetCustomizeAlertRequest
	(*GetCustomizeAlertResponse)(nil),             // 18: erda.core.monitor.alert.GetCustomizeAlertResponse
	(*CustomizeAlertDetail)(nil),                  // 19: erda.core.monitor.alert.CustomizeAlertDetail
	(*CustomizeAlertRule)(nil),                    // 20: erda.core.monitor.alert.CustomizeAlertRule
	(*CustomizeAlertRuleFunction)(nil),            // 21: erda.core.monitor.alert.CustomizeAlertRuleFunction
	(*CustomizeAlertRuleFilter)(nil),              // 22: erda.core.monitor.alert.CustomizeAlertRuleFilter
	(*CustomizeAlertNotifyTemplates)(nil),         // 23: erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	(*GetCustomizeAlertDetailRequest)(nil),        // 24: erda.core.monitor.alert.GetCustomizeAlertDetailRequest
	(*GetCustomizeAlertDetailResponse)(nil),       // 25: erda.core.monitor.alert.GetCustomizeAlertDetailResponse
	(*CreateCustomizeAlertRequest)(nil),           // 26: erda.core.monitor.alert.CreateCustomizeAlertRequest
	(*CreateCustomizeAlertResponse)(nil),          // 27: erda.core.monitor.alert.CreateCustomizeAlertResponse
	(*UpdateCustomizeAlertRequest)(nil),           // 28: erda.core.monitor.alert.UpdateCustomizeAlertRequest
	(*UpdateCustomizeAlertResponse)(nil),          // 29: erda.core.monitor.alert.UpdateCustomizeAlertResponse
	(*UpdateCustomizeAlertEnableRequest)(nil),     // 30: erda.core.monitor.alert.UpdateCustomizeAlertEnableRequest
	(*UpdateCustomizeAlertEnableResponse)(nil),    // 31: erda.core.monitor.alert.UpdateCustomizeAlertEnableResponse
	(*DeleteCustomizeAlertRequest)(nil),           // 32: erda.core.monitor.alert.DeleteCustomizeAlertRequest
	(*DeleteCustomizeAlertResponse)(nil),          // 33: erda.core.monitor.alert.DeleteCustomizeAlertResponse
	(*QueryOrgCustomizeMetricRequest)(nil),        // 34: erda.core.monitor.alert.QueryOrgCustomizeMetricRequest
	(*QueryOrgCustomizeMetricResponse)(nil),       // 35: erda.core.monitor.alert.QueryOrgCustomizeMetricResponse
	(*QueryOrgCustomizeAlertsRequest)(nil),        // 36: erda.core.monitor.alert.QueryOrgCustomizeAlertsRequest
	(*QueryOrgCustomizeAlertsResponse)(nil),       // 37: erda.core.monitor.alert.QueryOrgCustomizeAlertsResponse
	(*QueryOrgCustomizeAlertsData)(nil),           // 38: erda.core.monitor.alert.QueryOrgCustomizeAlertsData
	(*GetOrgCustomizeAlertDetailRequest)(nil),     // 39: erda.core.monitor.alert.GetOrgCustomizeAlertDetailRequest
	(*GetOrgCustomizeAlertDetailResponse)(nil),    // 40: erda.core.monitor.alert.GetOrgCustomizeAlertDetailResponse
	(*CreateOrgCustomizeAlertRequest)(nil),        // 41: erda.core.monitor.alert.CreateOrgCustomizeAlertRequest
	(*CreateOrgCustomizeAlertResponse)(nil),       // 42: erda.core.monitor.alert.CreateOrgCustomizeAlertResponse
	(*UpdateOrgCustomizeAlertRequest)(nil),        // 43: erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest
	(*UpdateOrgCustomizeAlertResponse)(nil),       // 44: erda.core.monitor.alert.UpdateOrgCustomizeAlertResponse
	(*UpdateOrgCustomizeAlertEnableRequest)(nil),  // 45: erda.core.monitor.alert.UpdateOrgCustomizeAlertEnableRequest
	(*UpdateOrgCustomizeAlertEnableResponse)(nil), // 46: erda.core.monitor.alert.UpdateOrgCustomizeAlertEnableResponse
	(*DeleteOrgCustomizeAlertRequest)(nil),        // 47: erda.core.monitor.alert.DeleteOrgCustomizeAlertRequest
	(*DeleteOrgCustomizeAlertResponse)(nil),       // 48: erda.core.monitor.alert.DeleteOrgCustomizeAlertResponse
	(*QueryDashboardByAlertRequest)(nil),          // 49: erda.core.monitor.alert.QueryDashboardByAlertRequest
	(*QueryDashboardByAlertResponse)(nil),         // 50: erda.core.monitor.alert.QueryDashboardByAlertResponse
	(*View)(nil),                                  // 51: erda.core.monitor.alert.View
	(*Config)(nil),                                // 52: erda.core.monitor.alert.Config
	(*API)(nil),                                   // 53: erda.core.monitor.alert.API
	(*QueryOrgDashboardByAlertRequest)(nil),       // 54: erda.core.monitor.alert.QueryOrgDashboardByAlertRequest
	(*QueryOrgDashboardByAlertResponse)(nil),      // 55: erda.core.monitor.alert.QueryOrgDashboardByAlertResponse
	(*QueryAlertRuleRequest)(nil),                 // 56: erda.core.monitor.alert.QueryAlertRuleRequest
	(*QueryAlertRuleResponse)(nil),                // 57: erda.core.monitor.alert.QueryAlertRuleResponse
	(*AlertTypeRuleResp)(nil),                     // 58: erda.core.monitor.alert.AlertTypeRuleResp
	(*AlertTypeRule)(nil),                         // 59: erda.core.monitor.alert.AlertTypeRule
	(*AlertRule)(nil),                             // 60: erda.core.monitor.alert.AlertRule
	(*AlertRuleFunction)(nil),                     // 61: erda.core.monitor.alert.AlertRuleFunction
	(*NotifySilence)(nil),                         // 62: erda.core.monitor.alert.NotifySilence
	(*QueryAlertRequest)(nil),                     // 63: erda.core.monitor.alert.QueryAlertRequest
	(*QueryAlertsResponse)(nil),                   // 64: erda.core.monitor.alert.QueryAlertsResponse
	(*QueryAlertsData)(nil),                       // 65: erda.core.monitor.alert.QueryAlertsData
	(*Alert)(nil),                                 // 66: erda.core.monitor.alert.Alert
	(*AlertExpression)(nil),                       // 67: erda.core.monitor.alert.AlertExpression
	(*AlertExpressionFunction)(nil),               // 68: erda.core.monitor.alert.AlertExpressionFunction
	(*AlertNotify)(nil),                           // 69: erda.core.monitor.alert.AlertNotify
	(*NotifyGroup)(nil),                           // 70: erda.core.monitor.alert.NotifyGroup
	(*NotifyTarget)(nil),                          // 71: erda.core.monitor.alert.NotifyTarget
	(*Target)(nil),                                // 72: erda.core.monitor.alert.Target
	(*AlertNotifySilence)(nil),                    // 73: erda.core.monitor.alert.AlertNotifySilence
	(*GetAlertRequest)(nil),                       // 74: erda.core.monitor.alert.GetAlertRequest
	(*GetAlertResponse)(nil),                      // 75: erda.core.monitor.alert.GetAlertResponse
	(*GetAlertDetailRequest)(nil),                 // 76: erda.core.monitor.alert.GetAlertDetailRequest
	(*GetAlertDetailResponse)(nil),                // 77: erda.core.monitor.alert.GetAlertDetailResponse
	(*CreateAlertRequest)(nil),                    // 78: erda.core.monitor.alert.CreateAlertRequest
	(*CreateAlertResponse)(nil),                   // 79: erda.core.monitor.alert.CreateAlertResponse
	(*UpdateAlertRequest)(nil),                    // 80: erda.core.monitor.alert.UpdateAlertRequest
	(*UpdateAlertResponse)(nil),                   // 81: erda.core.monitor.alert.UpdateAlertResponse
	(*UpdateAlertEnableRequest)(nil),              // 82: erda.core.monitor.alert.UpdateAlertEnableRequest
	(*UpdateAlertEnableResponse)(nil),             // 83: erda.core.monitor.alert.UpdateAlertEnableResponse
	(*DeleteAlertRequest)(nil),                    // 84: erda.core.monitor.alert.DeleteAlertRequest
	(*DeleteAlertResponse)(nil),                   // 85: erda.core.monitor.alert.DeleteAlertResponse
	(*QueryOrgAlertRuleRequest)(nil),              // 86: erda.core.monitor.alert.QueryOrgAlertRuleRequest
	(*QueryOrgAlertRuleResponse)(nil),             // 87: erda.core.monitor.alert.QueryOrgAlertRuleResponse
	(*QueryOrgAlertRequest)(nil),                  // 88: erda.core.monitor.alert.QueryOrgAlertRequest
	(*QueryOrgAlertResponse)(nil),                 // 89: erda.core.monitor.alert.QueryOrgAlertResponse
	(*QueryOrgAlertData)(nil),                     // 90: erda.core.monitor.alert.QueryOrgAlertData
	(*GetOrgAlertDetailRequest)(nil),              // 91: erda.core.monitor.alert.GetOrgAlertDetailRequest
	(*GetOrgAlertDetailResponse)(nil),             // 92: erda.core.monitor.alert.GetOrgAlertDetailResponse
	(*CreateOrgAlertRequest)(nil),                 // 93: erda.core.monitor.alert.CreateOrgAlertRequest
	(*TriggerCondition)(nil),                      // 94: erda.core.monitor.alert.TriggerCondition
	(*CreateOrgAlertResponse)(nil),                // 95: erda.core.monitor.alert.CreateOrgAlertResponse
	(*UpdateOrgAlertRequest)(nil),                 // 96: erda.core.monitor.alert.UpdateOrgAlertRequest
	(*UpdateOrgAlertResponse)(nil),                // 97: erda.core.monitor.alert.UpdateOrgAlertResponse
	(*UpdateOrgAlertEnableRequest)(nil),           // 98: erda.core.monitor.alert.UpdateOrgAlertEnableRequest
	(*UpdateOrgAlertEnableResponse)(nil),          // 99: erda.core.monitor.alert.UpdateOrgAlertEnableResponse
	(*DeleteOrgAlertRequest)(nil),                 // 100: erda.core.monitor.alert.DeleteOrgAlertRequest
	(*DeleteOrgAlertResponse)(nil),                // 101: erda.core.monitor.alert.DeleteOrgAlertResponse
	(*GetAlertRecordAttrRequest)(nil),             // 102: erda.core.monitor.alert.GetAlertRecordAttrRequest
	(*GetAlertRecordAttrResponse)(nil),            // 103: erda.core.monitor.alert.GetAlertRecordAttrResponse
	(*AlertRecordAttr)(nil),                       // 104: erda.core.monitor.alert.AlertRecordAttr
	(*QueryAlertRecordRequest)(nil),               // 105: erda.core.monitor.alert.QueryAlertRecordRequest
	(*QueryAlertRecordResponse)(nil),              // 106: erda.core.monitor.alert.QueryAlertRecordResponse
	(*ListResult)(nil),                            // 107: erda.core.monitor.alert.ListResult
	(*AlertRecord)(nil),                           // 108: erda.core.monitor.alert.AlertRecord
	(*GetAlertRecordRequest)(nil),                 // 109: erda.core.monitor.alert.GetAlertRecordRequest
	(*GetAlertRecordResponse)(nil),                // 110: erda.core.monitor.alert.GetAlertRecordResponse
	(*QueryAlertHistoryRequest)(nil),              // 111: erda.core.monitor.alert.QueryAlertHistoryRequest
	(*QueryAlertHistoryResponse)(nil),             // 112: erda.core.monitor.alert.QueryAlertHistoryResponse
	(*AlertHistory)(nil),                          // 113: erda.core.monitor.alert.AlertHistory
	(*CreateAlertIssueRequest)(nil),               // 114: erda.core.monitor.alert.CreateAlertIssueRequest
	(*IssueManHour)(nil),                          // 115: erda.core.monitor.alert.IssueManHour
	(*CreateAlertIssueResponse)(nil),              // 116: erda.core.monitor.alert.CreateAlertIssueResponse
	(*UpdateAlertIssueRequest)(nil),               // 117: erda.core.monitor.alert.UpdateAlertIssueRequest
	(*UpdateAlertIssueResponse)(nil),              // 118: erda.core.monitor.alert.UpdateAlertIssueResponse
	(*GetOrgAlertRecordAttrRequest)(nil),          // 119: erda.core.monitor.alert.GetOrgAlertRecordAttrRequest
	(*GetOrgAlertRecordAttrResponse)(nil),         // 120: erda.core.monitor.alert.GetOrgAlertRecordAttrResponse
	(*QueryOrgAlertRecordRequest)(nil),            // 121: erda.core.monitor.alert.QueryOrgAlertRecordRequest
	(*QueryOrgHostsAlertRecordRequest)(nil),       // 122: erda.core.monitor.alert.QueryOrgHostsAlertRecordRequest
	(*ClusterReq)(nil),                            // 123: erda.core.monitor.alert.ClusterReq
	(*QueryOrgAlertRecordResponse)(nil),           // 124: erda.core.monitor.alert.QueryOrgAlertRecordResponse
	(*GetOrgAlertRecordRequest)(nil),              // 125: erda.core.monitor.alert.GetOrgAlertRecordRequest
	(*GetOrgAlertRecordResponse)(nil),             // 126: erda.core.monitor.alert.GetOrgAlertRecordResponse
	(*QueryOrgAlertHistoryRequest)(nil),           // 127: erda.core.monitor.alert.QueryOrgAlertHistoryRequest
	(*QueryOrgAlertHistoryResponse)(nil),          // 128: erda.core.monitor.alert.QueryOrgAlertHistoryResponse
	(*CreateOrgAlertIssueRequest)(nil),            // 129: erda.core.monitor.alert.CreateOrgAlertIssueRequest
	(*CreateOrgAlertIssueResponse)(nil),           // 130: erda.core.monitor.alert.CreateOrgAlertIssueResponse
	(*UpdateOrgAlertIssueRequest)(nil),            // 131: erda.core.monitor.alert.UpdateOrgAlertIssueRequest
	(*UpdateOrgAlertIssueResponse)(nil),           // 132: erda.core.monitor.alert.UpdateOrgAlertIssueResponse
	(*GetAlertConditionsRequest)(nil),             // 133: erda.core.monitor.alert.GetAlertConditionsRequest
	(*GetAlertConditionsResponse)(nil),            // 134: erda.core.monitor.alert.GetAlertConditionsResponse
	(*Conditions)(nil),                            // 135: erda.core.monitor.alert.Conditions
	(*GetAlertConditionsValueRequest)(nil),        // 136: erda.core.monitor.alert.GetAlertConditionsValueRequest
	(*ConditionsValueRequest)(nil),                // 137: erda.core.monitor.alert.ConditionsValueRequest
	(*GetAlertConditionsValueResponse)(nil),       // 138: erda.core.monitor.alert.GetAlertConditionsValueResponse
	(*AlertConditionsValue)(nil),                  // 139: erda.core.monitor.alert.AlertConditionsValue
	nil,                                           // 140: erda.core.monitor.alert.CustomizeAlertDetail.AttributesEntry
	nil,                                           // 141: erda.core.monitor.alert.CustomizeAlertRule.SelectEntry
	nil,                                           // 142: erda.core.monitor.alert.CustomizeAlertRule.AttributesEntry
	nil,                                           // 143: erda.core.monitor.alert.CustomizeAlertNotifyTemplates.AttributesEntry
	nil,                                           // 144: erda.core.monitor.alert.CreateCustomizeAlertRequest.AttributesEntry
	nil,                                           // 145: erda.core.monitor.alert.UpdateCustomizeAlertRequest.AttributesEntry
	nil,                                           // 146: erda.core.monitor.alert.CreateOrgCustomizeAlertRequest.AttributesEntry
	nil,                                           // 147: erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest.AttributesEntry
	nil,                                           // 148: erda.core.monitor.alert.QueryDashboardByAlertRequest.AttributesEntry
	nil,                                           // 149: erda.core.monitor.alert.Config.OptionPropsEntry
	nil,                                           // 150: erda.core.monitor.alert.API.QueryEntry
	nil,                                           // 151: erda.core.monitor.alert.API.BodyEntry
	nil,                                           // 152: erda.core.monitor.alert.API.HeaderEntry
	nil,                                           // 153: erda.core.monitor.alert.API.ExtraDataEntry
	nil,                                           // 154: erda.core.monitor.alert.QueryOrgDashboardByAlertRequest.AttributesEntry
	nil,                                           // 155: erda.core.monitor.alert.AlertRule.TemplateEntry
	nil,                                           // 156: erda.core.monitor.alert.AlertRule.AttributesEntry
	nil,                                           // 157: erda.core.monitor.alert.Alert.FiltersEntry
	nil,                                           // 158: erda.core.monitor.alert.Alert.AttributesEntry
	nil,                                           // 159: erda.core.monitor.alert.CreateAlertRequest.FiltersEntry
	nil,                                           // 160: erda.core.monitor.alert.CreateAlertRequest.AttributesEntry
	nil,                                           // 161: erda.core.monitor.alert.UpdateAlertRequest.FiltersEntry
	nil,                                           // 162: erda.core.monitor.alert.UpdateAlertRequest.AttributesEntry
	nil,                                           // 163: erda.core.monitor.alert.DeleteAlertResponse.DataEntry
	nil,                                           // 164: erda.core.monitor.alert.CreateOrgAlertRequest.FiltersEntry
	nil,                                           // 165: erda.core.monitor.alert.CreateOrgAlertRequest.AttributesEntry
	nil,                                           // 166: erda.core.monitor.alert.UpdateOrgAlertRequest.FiltersEntry
	nil,                                           // 167: erda.core.monitor.alert.UpdateOrgAlertRequest.AttributesEntry
	nil,                                           // 168: erda.core.monitor.alert.DeleteOrgAlertResponse.DataEntry
	nil,                                           // 169: erda.core.monitor.alert.ConditionsValueRequest.FiltersEntry
	(*structpb.Value)(nil),                        // 170: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                 // 171: google.protobuf.Timestamp
}
var file_alert_proto_depIdxs = []int32{
	2,   // 0: erda.core.monitor.alert.QueryCustomizeMetricResponse.data:type_name -> erda.core.monitor.alert.CustomizeMetrics
	3,   // 1: erda.core.monitor.alert.CustomizeMetrics.metrics:type_name -> erda.core.monitor.alert.MetricMeta
	7,   // 2: erda.core.monitor.alert.CustomizeMetrics.functionOperators:type_name -> erda.core.monitor.alert.Operator
	7,   // 3: erda.core.monitor.alert.CustomizeMetrics.filterOperators:type_name -> erda.core.monitor.alert.Operator
	4,   // 4: erda.core.monitor.alert.CustomizeMetrics.aggregator:type_name -> erda.core.monitor.alert.DisplayKey
	4,   // 5: erda.core.monitor.alert.MetricMeta.name:type_name -> erda.core.monitor.alert.DisplayKey
	5,   // 6: erda.core.monitor.alert.MetricMeta.fields:type_name -> erda.core.monitor.alert.FieldMeta
	6,   // 7: erda.core.monitor.alert.MetricMeta.tags:type_name -> erda.core.monitor.alert.TagMeta
	4,   // 8: erda.core.monitor.alert.FieldMeta.field:type_name -> erda.core.monitor.alert.DisplayKey
	4,   // 9: erda.core.monitor.alert.TagMeta.tag:type_name -> erda.core.monitor.alert.DisplayKey
	10,  // 10: erda.core.monitor.alert.QueryCustomizeNotifyTargetResponse.data:type_name -> erda.core.monitor.alert.QueryCustomizeNotifyTargetData
	4,   // 11: erda.core.monitor.alert.QueryCustomizeNotifyTargetData.targets:type_name -> erda.core.monitor.alert.DisplayKey
	10,  // 12: erda.core.monitor.alert.QueryOrgCustomizeNotifyTargetResponse.data:type_name -> erda.core.monitor.alert.QueryCustomizeNotifyTargetData
	15,  // 13: erda.core.monitor.alert.QueryCustomizeAlertResponse.data:type_name -> erda.core.monitor.alert.QueryCustomizeAlertData
	16,  // 14: erda.core.monitor.alert.QueryCustomizeAlertData.list:type_name -> erda.core.monitor.alert.CustomizeAlertOverview
	19,  // 15: erda.core.monitor.alert.GetCustomizeAlertResponse.data:type_name -> erda.core.monitor.alert.CustomizeAlertDetail
	140, // 16: erda.core.monitor.alert.CustomizeAlertDetail.attributes:type_name -> erda.core.monitor.alert.CustomizeAlertDetail.AttributesEntry
	20,  // 17: erda.core.monitor.alert.CustomizeAlertDetail.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 18: erda.core.monitor.alert.CustomizeAlertDetail.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	21,  // 19: erda.core.monitor.alert.CustomizeAlertRule.functions:type_name -> erda.core.monitor.alert.CustomizeAlertRuleFunction
	22,  // 20: erda.core.monitor.alert.CustomizeAlertRule.filters:type_name -> erda.core.monitor.alert.CustomizeAlertRuleFilter
	141, // 21: erda.core.monitor.alert.CustomizeAlertRule.select:type_name -> erda.core.monitor.alert.CustomizeAlertRule.SelectEntry
	142, // 22: erda.core.monitor.alert.CustomizeAlertRule.attributes:type_name -> erda.core.monitor.alert.CustomizeAlertRule.AttributesEntry
	170, // 23: erda.core.monitor.alert.CustomizeAlertRuleFunction.value:type_name -> google.protobuf.Value
	170, // 24: erda.core.monitor.alert.CustomizeAlertRuleFilter.value:type_name -> google.protobuf.Value
	143, // 25: erda.core.monitor.alert.CustomizeAlertNotifyTemplates.attributes:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates.AttributesEntry
	19,  // 26: erda.core.monitor.alert.GetCustomizeAlertDetailResponse.data:type_name -> erda.core.monitor.alert.CustomizeAlertDetail
	144, // 27: erda.core.monitor.alert.CreateCustomizeAlertRequest.attributes:type_name -> erda.core.monitor.alert.CreateCustomizeAlertRequest.AttributesEntry
	20,  // 28: erda.core.monitor.alert.CreateCustomizeAlertRequest.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 29: erda.core.monitor.alert.CreateCustomizeAlertRequest.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	145, // 30: erda.core.monitor.alert.UpdateCustomizeAlertRequest.attributes:type_name -> erda.core.monitor.alert.UpdateCustomizeAlertRequest.AttributesEntry
	20,  // 31: erda.core.monitor.alert.UpdateCustomizeAlertRequest.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 32: erda.core.monitor.alert.UpdateCustomizeAlertRequest.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	2,   // 33: erda.core.monitor.alert.QueryOrgCustomizeMetricResponse.data:type_name -> erda.core.monitor.alert.CustomizeMetrics
	38,  // 34: erda.core.monitor.alert.QueryOrgCustomizeAlertsResponse.data:type_name -> erda.core.monitor.alert.QueryOrgCustomizeAlertsData
	16,  // 35: erda.core.monitor.alert.QueryOrgCustomizeAlertsData.list:type_name -> erda.core.monitor.alert.CustomizeAlertOverview
	19,  // 36: erda.core.monitor.alert.GetOrgCustomizeAlertDetailResponse.data:type_name -> erda.core.monitor.alert.CustomizeAlertDetail
	146, // 37: erda.core.monitor.alert.CreateOrgCustomizeAlertRequest.attributes:type_name -> erda.core.monitor.alert.CreateOrgCustomizeAlertRequest.AttributesEntry
	20,  // 38: erda.core.monitor.alert.CreateOrgCustomizeAlertRequest.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 39: erda.core.monitor.alert.CreateOrgCustomizeAlertRequest.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	147, // 40: erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest.attributes:type_name -> erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest.AttributesEntry
	20,  // 41: erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 42: erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	170, // 43: erda.core.monitor.alert.DeleteOrgCustomizeAlertResponse.data:type_name -> google.protobuf.Value
	148, // 44: erda.core.monitor.alert.QueryDashboardByAlertRequest.attributes:type_name -> erda.core.monitor.alert.QueryDashboardByAlertRequest.AttributesEntry
	20,  // 45: erda.core.monitor.alert.QueryDashboardByAlertRequest.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 46: erda.core.monitor.alert.QueryDashboardByAlertRequest.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	51,  // 47: erda.core.monitor.alert.QueryDashboardByAlertResponse.data:type_name -> erda.core.monitor.alert.View
	170, // 48: erda.core.monitor.alert.View.staticData:type_name -> google.protobuf.Value
	52,  // 49: erda.core.monitor.alert.View.config:type_name -> erda.core.monitor.alert.Config
	53,  // 50: erda.core.monitor.alert.View.api:type_name -> erda.core.monitor.alert.API
	170, // 51: erda.core.monitor.alert.View.controls:type_name -> google.protobuf.Value
	149, // 52: erda.core.monitor.alert.Config.optionProps:type_name -> erda.core.monitor.alert.Config.OptionPropsEntry
	170, // 53: erda.core.monitor.alert.Config.dataSourceConfig:type_name -> google.protobuf.Value
	170, // 54: erda.core.monitor.alert.Config.option:type_name -> google.protobuf.Value
	150, // 55: erda.core.monitor.alert.API.query:type_name -> erda.core.monitor.alert.API.QueryEntry
	151, // 56: erda.core.monitor.alert.API.body:type_name -> erda.core.monitor.alert.API.BodyEntry
	152, // 57: erda.core.monitor.alert.API.header:type_name -> erda.core.monitor.alert.API.HeaderEntry
	153, // 58: erda.core.monitor.alert.API.extraData:type_name -> erda.core.monitor.alert.API.ExtraDataEntry
	154, // 59: erda.core.monitor.alert.QueryOrgDashboardByAlertRequest.attributes:type_name -> erda.core.monitor.alert.QueryOrgDashboardByAlertRequest.AttributesEntry
	20,  // 60: erda.core.monitor.alert.QueryOrgDashboardByAlertRequest.rules:type_name -> erda.core.monitor.alert.CustomizeAlertRule
	23,  // 61: erda.core.monitor.alert.QueryOrgDashboardByAlertRequest.notifies:type_name -> erda.core.monitor.alert.CustomizeAlertNotifyTemplates
	51,  // 62: erda.core.monitor.alert.QueryOrgDashboardByAlertResponse.data:type_name -> erda.core.monitor.alert.View
	58,  // 63: erda.core.monitor.alert.QueryAlertRuleResponse.data:type_name -> erda.core.monitor.alert.AlertTypeRuleResp
	59,  // 64: erda.core.monitor.alert.AlertTypeRuleResp.alertTypeRules:type_name -> erda.core.monitor.alert.AlertTypeRule
	7,   // 65: erda.core.monitor.alert.AlertTypeRuleResp.operators:type_name -> erda.core.monitor.alert.Operator
	4,   // 66: erda.core.monitor.alert.AlertTypeRuleResp.aggregator:type_name -> erda.core.monitor.alert.DisplayKey
	62,  // 67: erda.core.monitor.alert.AlertTypeRuleResp.silence:type_name -> erda.core.monitor.alert.NotifySilence
	4,   // 68: erda.core.monitor.alert.AlertTypeRule.alertType:type_name -> erda.core.monitor.alert.DisplayKey
	60,  // 69: erda.core.monitor.alert.AlertTypeRule.rules:type_name -> erda.core.monitor.alert.AlertRule
	4,   // 70: erda.core.monitor.alert.AlertRule.alertIndex:type_name -> erda.core.monitor.alert.DisplayKey
	155, // 71: erda.core.monitor.alert.AlertRule.template:type_name -> erda.core.monitor.alert.AlertRule.TemplateEntry
	61,  // 72: erda.core.monitor.alert.AlertRule.functions:type_name -> erda.core.monitor.alert.AlertRuleFunction
	156, // 73: erda.core.monitor.alert.AlertRule.attributes:type_name -> erda.core.monitor.alert.AlertRule.AttributesEntry
	4,   // 74: erda.core.monitor.alert.AlertRuleFunction.field:type_name -> erda.core.monitor.alert.DisplayKey
	170, // 75: erda.core.monitor.alert.AlertRuleFunction.value:type_name -> google.protobuf.Value
	4,   // 76: erda.core.monitor.alert.NotifySilence.unit:type_name -> erda.core.monitor.alert.DisplayKey
	65,  // 77: erda.core.monitor.alert.QueryAlertsResponse.data:type_name -> erda.core.monitor.alert.QueryAlertsData
	66,  // 78: erda.core.monitor.alert.QueryAlertsData.list:type_name -> erda.core.monitor.alert.Alert
	67,  // 79: erda.core.monitor.alert.Alert.rules:type_name -> erda.core.monitor.alert.AlertExpression
	69,  // 80: erda.core.monitor.alert.Alert.notifies:type_name -> erda.core.monitor.alert.AlertNotify
	157, // 81: erda.core.monitor.alert.Alert.filters:type_name -> erda.core.monitor.alert.Alert.FiltersEntry
	158, // 82: erda.core.monitor.alert.Alert.attributes:type_name -> erda.core.monitor.alert.Alert.AttributesEntry
	94,  // 83: erda.core.monitor.alert.Alert.triggerCondition:type_name -> erda.core.monitor.alert.TriggerCondition
	68,  // 84: erda.core.monitor.alert.AlertExpression.functions:type_name -> erda.core.monitor.alert.AlertExpressionFunction
	170, // 85: erda.core.monitor.alert.AlertExpressionFunction.value:type_name -> google.protobuf.Value
	70,  // 86: erda.core.monitor.alert.AlertNotify.notifyGroup:type_name -> erda.core.monitor.alert.NotifyGroup
	73,  // 87: erda.core.monitor.alert.AlertNotify.silence:type_name -> erda.core.monitor.alert.AlertNotifySilence
	71,  // 88: erda.core.monitor.alert.NotifyGroup.targets:type_name -> erda.core.monitor.alert.NotifyTarget
	171, // 89: erda.core.monitor.alert.NotifyGroup.createdAt:type_name -> google.protobuf.Timestamp
	72,  // 90: erda.core.monitor.alert.NotifyTarget.values:type_name -> erda.core.monitor.alert.Target
	66,  // 91: erda.core.monitor.alert.GetAlertResponse.data:type_name -> erda.core.monitor.alert.Alert
	66,  // 92: erda.core.monitor.alert.GetAlertDetailResponse.data:type_name -> erda.core.monitor.alert.Alert
	67,  // 93: erda.core.monitor.alert.CreateAlertRequest.rules:type_name -> erda.core.monitor.alert.AlertExpression
	69,  // 94: erda.core.monitor.alert.CreateAlertRequest.notifies:type_name -> erda.core.monitor.alert.AlertNotify
	159, // 95: erda.core.monitor.alert.CreateAlertRequest.filters:type_name -> erda.core.monitor.alert.CreateAlertRequest.FiltersEntry
	160, // 96: erda.core.monitor.alert.CreateAlertRequest.attributes:type_name -> erda.core.monitor.alert.CreateAlertRequest.AttributesEntry
	94,  // 97: erda.core.monitor.alert.CreateAlertRequest.triggerCondition:type_name -> erda.core.monitor.alert.TriggerCondition
	67,  // 98: erda.core.monitor.alert.UpdateAlertRequest.rules:type_name -> erda.core.monitor.alert.AlertExpression
	69,  // 99: erda.core.monitor.alert.UpdateAlertRequest.notifies:type_name -> erda.core.monitor.alert.AlertNotify
	161, // 100: erda.core.monitor.alert.UpdateAlertRequest.filters:type_name -> erda.core.monitor.alert.UpdateAlertRequest.FiltersEntry
	162, // 101: erda.core.monitor.alert.UpdateAlertRequest.attributes:type_name -> erda.core.monitor.alert.UpdateAlertRequest.AttributesEntry
	94,  // 102: erda.core.monitor.alert.UpdateAlertRequest.triggerCondition:type_name -> erda.core.monitor.alert.TriggerCondition
	163, // 103: erda.core.monitor.alert.DeleteAlertResponse.data:type_name -> erda.core.monitor.alert.DeleteAlertResponse.DataEntry
	58,  // 104: erda.core.monitor.alert.QueryOrgAlertRuleResponse.data:type_name -> erda.core.monitor.alert.AlertTypeRuleResp
	90,  // 105: erda.core.monitor.alert.QueryOrgAlertResponse.data:type_name -> erda.core.monitor.alert.QueryOrgAlertData
	66,  // 106: erda.core.monitor.alert.QueryOrgAlertData.list:type_name -> erda.core.monitor.alert.Alert
	66,  // 107: erda.core.monitor.alert.GetOrgAlertDetailResponse.data:type_name -> erda.core.monitor.alert.Alert
	67,  // 108: erda.core.monitor.alert.CreateOrgAlertRequest.rules:type_name -> erda.core.monitor.alert.AlertExpression
	69,  // 109: erda.core.monitor.alert.CreateOrgAlertRequest.notifies:type_name -> erda.core.monitor.alert.AlertNotify
	164, // 110: erda.core.monitor.alert.CreateOrgAlertRequest.filters:type_name -> erda.core.monitor.alert.CreateOrgAlertRequest.FiltersEntry
	165, // 111: erda.core.monitor.alert.CreateOrgAlertRequest.attributes:type_name -> erda.core.monitor.alert.CreateOrgAlertRequest.AttributesEntry
	94,  // 112: erda.core.monitor.alert.CreateOrgAlertRequest.triggerCondition:type_name -> erda.core.monitor.alert.TriggerCondition
	67,  // 113: erda.core.monitor.alert.UpdateOrgAlertRequest.rules:type_name -> erda.core.monitor.alert.AlertExpression
	69,  // 114: erda.core.monitor.alert.UpdateOrgAlertRequest.notifies:type_name -> erda.core.monitor.alert.AlertNotify
	166, // 115: erda.core.monitor.alert.UpdateOrgAlertRequest.filters:type_name -> erda.core.monitor.alert.UpdateOrgAlertRequest.FiltersEntry
	167, // 116: erda.core.monitor.alert.UpdateOrgAlertRequest.attributes:type_name -> erda.core.monitor.alert.UpdateOrgAlertRequest.AttributesEntry
	94,  // 117: erda.core.monitor.alert.UpdateOrgAlertRequest.triggerCondition:type_name -> erda.core.monitor.alert.TriggerCondition
	168, // 118: erda.core.monitor.alert.DeleteOrgAlertResponse.data:type_name -> erda.core.monitor.alert.DeleteOrgAlertResponse.DataEntry
	104, // 119: erda.core.monitor.alert.GetAlertRecordAttrResponse.data:type_name -> erda.core.monitor.alert.AlertRecordAttr
	4,   // 120: erda.core.monitor.alert.AlertRecordAttr.alertState:type_name -> erda.core.monitor.alert.DisplayKey
	4,   // 121: erda.core.monitor.alert.AlertRecordAttr.alertType:type_name -> erda.core.monitor.alert.DisplayKey
	4,   // 122: erda.core.monitor.alert.AlertRecordAttr.handleState:type_name -> erda.core.monitor.alert.DisplayKey
	107, // 123: erda.core.monitor.alert.QueryAlertRecordResponse.data:type_name -> erda.core.monitor.alert.ListResult
	108, // 124: erda.core.monitor.alert.ListResult.list:type_name -> erda.core.monitor.alert.AlertRecord
	108, // 125: erda.core.monitor.alert.GetAlertRecordResponse.data:type_name -> erda.core.monitor.alert.AlertRecord
	113, // 126: erda.core.monitor.alert.QueryAlertHistoryResponse.data:type_name -> erda.core.monitor.alert.AlertHistory
	171, // 127: erda.core.monitor.alert.CreateAlertIssueRequest.planStartedAt:type_name -> google.protobuf.Timestamp
	171, // 128: erda.core.monitor.alert.CreateAlertIssueRequest.planFinishedAt:type_name -> google.protobuf.Timestamp
	115, // 129: erda.core.monitor.alert.CreateAlertIssueRequest.issueManHour:type_name -> erda.core.monitor.alert.IssueManHour
	171, // 130: erda.core.monitor.alert.UpdateAlertIssueRequest.planStartedAt:type_name -> google.protobuf.Timestamp
	171, // 131: erda.core.monitor.alert.UpdateAlertIssueRequest.planFinishedAt:type_name -> google.protobuf.Timestamp
	115, // 132: erda.core.monitor.alert.UpdateAlertIssueRequest.issueManHour:type_name -> erda.core.monitor.alert.IssueManHour
	104, // 133: erda.core.monitor.alert.GetOrgAlertRecordAttrResponse.data:type_name -> erda.core.monitor.alert.AlertRecordAttr
	123, // 134: erda.core.monitor.alert.QueryOrgHostsAlertRecordRequest.clusters:type_name -> erda.core.monitor.alert.ClusterReq
	107, // 135: erda.core.monitor.alert.QueryOrgAlertRecordResponse.data:type_name -> erda.core.monitor.alert.ListResult
	108, // 136: erda.core.monitor.alert.GetOrgAlertRecordResponse.data:type_name -> erda.core.monitor.alert.AlertRecord
	113, // 137: erda.core.monitor.alert.QueryOrgAlertHistoryResponse.data:type_name -> erda.core.monitor.alert.AlertHistory
	171, // 138: erda.core.monitor.alert.CreateOrgAlertIssueRequest.planStartedAt:type_name -> google.protobuf.Timestamp
	171, // 139: erda.core.monitor.alert.CreateOrgAlertIssueRequest.planFinishedAt:type_name -> google.protobuf.Timestamp
	115, // 140: erda.core.monitor.alert.CreateOrgAlertIssueRequest.issueManHour:type_name -> erda.core.monitor.alert.IssueManHour
	171, // 141: erda.core.monitor.alert.UpdateOrgAlertIssueRequest.planStartedAt:type_name -> google.protobuf.Timestamp
	171, // 142: erda.core.monitor.alert.UpdateOrgAlertIssueRequest.planFinishedAt:type_name -> google.protobuf.Timestamp
	115, // 143: erda.core.monitor.alert.UpdateOrgAlertIssueRequest.issueManHour:type_name -> erda.core.monitor.alert.IssueManHour
	135, // 144: erda.core.monitor.alert.GetAlertConditionsResponse.data:type_name -> erda.core.monitor.alert.Conditions
	137, // 145: erda.core.monitor.alert.GetAlertConditionsValueRequest.conditions:type_name -> erda.core.monitor.alert.ConditionsValueRequest
	169, // 146: erda.core.monitor.alert.ConditionsValueRequest.filters:type_name -> erda.core.monitor.alert.ConditionsValueRequest.FiltersEntry
	139, // 147: erda.core.monitor.alert.GetAlertConditionsValueResponse.data:type_name -> erda.core.monitor.alert.AlertConditionsValue
	170, // 148: erda.core.monitor.alert.AlertConditionsValue.options:type_name -> google.protobuf.Value
	170, // 149: erda.core.monitor.alert.CustomizeAlertDetail.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 150: erda.core.monitor.alert.CustomizeAlertRule.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 151: erda.core.monitor.alert.CustomizeAlertNotifyTemplates.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 152: erda.core.monitor.alert.CreateCustomizeAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 153: erda.core.monitor.alert.UpdateCustomizeAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 154: erda.core.monitor.alert.CreateOrgCustomizeAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 155: erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 156: erda.core.monitor.alert.QueryDashboardByAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 157: erda.core.monitor.alert.Config.OptionPropsEntry.value:type_name -> google.protobuf.Value
	170, // 158: erda.core.monitor.alert.API.QueryEntry.value:type_name -> google.protobuf.Value
	170, // 159: erda.core.monitor.alert.API.BodyEntry.value:type_name -> google.protobuf.Value
	170, // 160: erda.core.monitor.alert.API.HeaderEntry.value:type_name -> google.protobuf.Value
	170, // 161: erda.core.monitor.alert.API.ExtraDataEntry.value:type_name -> google.protobuf.Value
	170, // 162: erda.core.monitor.alert.QueryOrgDashboardByAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 163: erda.core.monitor.alert.AlertRule.TemplateEntry.value:type_name -> google.protobuf.Value
	170, // 164: erda.core.monitor.alert.AlertRule.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 165: erda.core.monitor.alert.Alert.FiltersEntry.value:type_name -> google.protobuf.Value
	170, // 166: erda.core.monitor.alert.Alert.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 167: erda.core.monitor.alert.CreateAlertRequest.FiltersEntry.value:type_name -> google.protobuf.Value
	170, // 168: erda.core.monitor.alert.CreateAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 169: erda.core.monitor.alert.UpdateAlertRequest.FiltersEntry.value:type_name -> google.protobuf.Value
	170, // 170: erda.core.monitor.alert.UpdateAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 171: erda.core.monitor.alert.DeleteAlertResponse.DataEntry.value:type_name -> google.protobuf.Value
	170, // 172: erda.core.monitor.alert.CreateOrgAlertRequest.FiltersEntry.value:type_name -> google.protobuf.Value
	170, // 173: erda.core.monitor.alert.CreateOrgAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 174: erda.core.monitor.alert.UpdateOrgAlertRequest.FiltersEntry.value:type_name -> google.protobuf.Value
	170, // 175: erda.core.monitor.alert.UpdateOrgAlertRequest.AttributesEntry.value:type_name -> google.protobuf.Value
	170, // 176: erda.core.monitor.alert.DeleteOrgAlertResponse.DataEntry.value:type_name -> google.protobuf.Value
	0,   // 177: erda.core.monitor.alert.AlertService.QueryCustomizeMetric:input_type -> erda.core.monitor.alert.QueryCustomizeMetricRequest
	8,   // 178: erda.core.monitor.alert.AlertService.QueryCustomizeNotifyTarget:input_type -> erda.core.monitor.alert.QueryCustomizeNotifyTargetRequest
	11,  // 179: erda.core.monitor.alert.AlertService.QueryOrgCustomizeNotifyTarget:input_type -> erda.core.monitor.alert.QueryOrgCustomizeNotifyTargetRequest
	13,  // 180: erda.core.monitor.alert.AlertService.QueryCustomizeAlert:input_type -> erda.core.monitor.alert.QueryCustomizeAlertRequest
	17,  // 181: erda.core.monitor.alert.AlertService.GetCustomizeAlert:input_type -> erda.core.monitor.alert.GetCustomizeAlertRequest
	24,  // 182: erda.core.monitor.alert.AlertService.GetCustomizeAlertDetail:input_type -> erda.core.monitor.alert.GetCustomizeAlertDetailRequest
	26,  // 183: erda.core.monitor.alert.AlertService.CreateCustomizeAlert:input_type -> erda.core.monitor.alert.CreateCustomizeAlertRequest
	28,  // 184: erda.core.monitor.alert.AlertService.UpdateCustomizeAlert:input_type -> erda.core.monitor.alert.UpdateCustomizeAlertRequest
	30,  // 185: erda.core.monitor.alert.AlertService.UpdateCustomizeAlertEnable:input_type -> erda.core.monitor.alert.UpdateCustomizeAlertEnableRequest
	32,  // 186: erda.core.monitor.alert.AlertService.DeleteCustomizeAlert:input_type -> erda.core.monitor.alert.DeleteCustomizeAlertRequest
	34,  // 187: erda.core.monitor.alert.AlertService.QueryOrgCustomizeMetric:input_type -> erda.core.monitor.alert.QueryOrgCustomizeMetricRequest
	36,  // 188: erda.core.monitor.alert.AlertService.QueryOrgCustomizeAlerts:input_type -> erda.core.monitor.alert.QueryOrgCustomizeAlertsRequest
	39,  // 189: erda.core.monitor.alert.AlertService.GetOrgCustomizeAlertDetail:input_type -> erda.core.monitor.alert.GetOrgCustomizeAlertDetailRequest
	41,  // 190: erda.core.monitor.alert.AlertService.CreateOrgCustomizeAlert:input_type -> erda.core.monitor.alert.CreateOrgCustomizeAlertRequest
	43,  // 191: erda.core.monitor.alert.AlertService.UpdateOrgCustomizeAlert:input_type -> erda.core.monitor.alert.UpdateOrgCustomizeAlertRequest
	45,  // 192: erda.core.monitor.alert.AlertService.UpdateOrgCustomizeAlertEnable:input_type -> erda.core.monitor.alert.UpdateOrgCustomizeAlertEnableRequest
	47,  // 193: erda.core.monitor.alert.AlertService.DeleteOrgCustomizeAlert:input_type -> erda.core.monitor.alert.DeleteOrgCustomizeAlertRequest
	49,  // 194: erda.core.monitor.alert.AlertService.QueryDashboardByAlert:input_type -> erda.core.monitor.alert.QueryDashboardByAlertRequest
	54,  // 195: erda.core.monitor.alert.AlertService.QueryOrgDashboardByAlert:input_type -> erda.core.monitor.alert.QueryOrgDashboardByAlertRequest
	56,  // 196: erda.core.monitor.alert.AlertService.QueryAlertRule:input_type -> erda.core.monitor.alert.QueryAlertRuleRequest
	63,  // 197: erda.core.monitor.alert.AlertService.QueryAlert:input_type -> erda.core.monitor.alert.QueryAlertRequest
	74,  // 198: erda.core.monitor.alert.AlertService.GetAlert:input_type -> erda.core.monitor.alert.GetAlertRequest
	76,  // 199: erda.core.monitor.alert.AlertService.GetAlertDetail:input_type -> erda.core.monitor.alert.GetAlertDetailRequest
	78,  // 200: erda.core.monitor.alert.AlertService.CreateAlert:input_type -> erda.core.monitor.alert.CreateAlertRequest
	80,  // 201: erda.core.monitor.alert.AlertService.UpdateAlert:input_type -> erda.core.monitor.alert.UpdateAlertRequest
	82,  // 202: erda.core.monitor.alert.AlertService.UpdateAlertEnable:input_type -> erda.core.monitor.alert.UpdateAlertEnableRequest
	84,  // 203: erda.core.monitor.alert.AlertService.DeleteAlert:input_type -> erda.core.monitor.alert.DeleteAlertRequest
	86,  // 204: erda.core.monitor.alert.AlertService.QueryOrgAlertRule:input_type -> erda.core.monitor.alert.QueryOrgAlertRuleRequest
	88,  // 205: erda.core.monitor.alert.AlertService.QueryOrgAlert:input_type -> erda.core.monitor.alert.QueryOrgAlertRequest
	91,  // 206: erda.core.monitor.alert.AlertService.GetOrgAlertDetail:input_type -> erda.core.monitor.alert.GetOrgAlertDetailRequest
	93,  // 207: erda.core.monitor.alert.AlertService.CreateOrgAlert:input_type -> erda.core.monitor.alert.CreateOrgAlertRequest
	96,  // 208: erda.core.monitor.alert.AlertService.UpdateOrgAlert:input_type -> erda.core.monitor.alert.UpdateOrgAlertRequest
	98,  // 209: erda.core.monitor.alert.AlertService.UpdateOrgAlertEnable:input_type -> erda.core.monitor.alert.UpdateOrgAlertEnableRequest
	100, // 210: erda.core.monitor.alert.AlertService.DeleteOrgAlert:input_type -> erda.core.monitor.alert.DeleteOrgAlertRequest
	102, // 211: erda.core.monitor.alert.AlertService.GetAlertRecordAttr:input_type -> erda.core.monitor.alert.GetAlertRecordAttrRequest
	105, // 212: erda.core.monitor.alert.AlertService.QueryAlertRecord:input_type -> erda.core.monitor.alert.QueryAlertRecordRequest
	109, // 213: erda.core.monitor.alert.AlertService.GetAlertRecord:input_type -> erda.core.monitor.alert.GetAlertRecordRequest
	111, // 214: erda.core.monitor.alert.AlertService.QueryAlertHistory:input_type -> erda.core.monitor.alert.QueryAlertHistoryRequest
	114, // 215: erda.core.monitor.alert.AlertService.CreateAlertIssue:input_type -> erda.core.monitor.alert.CreateAlertIssueRequest
	117, // 216: erda.core.monitor.alert.AlertService.UpdateAlertIssue:input_type -> erda.core.monitor.alert.UpdateAlertIssueRequest
	119, // 217: erda.core.monitor.alert.AlertService.GetOrgAlertRecordAttr:input_type -> erda.core.monitor.alert.GetOrgAlertRecordAttrRequest
	121, // 218: erda.core.monitor.alert.AlertService.QueryOrgAlertRecord:input_type -> erda.core.monitor.alert.QueryOrgAlertRecordRequest
	122, // 219: erda.core.monitor.alert.AlertService.QueryOrgHostsAlertRecord:input_type -> erda.core.monitor.alert.QueryOrgHostsAlertRecordRequest
	125, // 220: erda.core.monitor.alert.AlertService.GetOrgAlertRecord:input_type -> erda.core.monitor.alert.GetOrgAlertRecordRequest
	127, // 221: erda.core.monitor.alert.AlertService.QueryOrgAlertHistory:input_type -> erda.core.monitor.alert.QueryOrgAlertHistoryRequest
	129, // 222: erda.core.monitor.alert.AlertService.CreateOrgAlertIssue:input_type -> erda.core.monitor.alert.CreateOrgAlertIssueRequest
	131, // 223: erda.core.monitor.alert.AlertService.UpdateOrgAlertIssue:input_type -> erda.core.monitor.alert.UpdateOrgAlertIssueRequest
	133, // 224: erda.core.monitor.alert.AlertService.GetAlertConditions:input_type -> erda.core.monitor.alert.GetAlertConditionsRequest
	136, // 225: erda.core.monitor.alert.AlertService.GetAlertConditionsValue:input_type -> erda.core.monitor.alert.GetAlertConditionsValueRequest
	1,   // 226: erda.core.monitor.alert.AlertService.QueryCustomizeMetric:output_type -> erda.core.monitor.alert.QueryCustomizeMetricResponse
	9,   // 227: erda.core.monitor.alert.AlertService.QueryCustomizeNotifyTarget:output_type -> erda.core.monitor.alert.QueryCustomizeNotifyTargetResponse
	12,  // 228: erda.core.monitor.alert.AlertService.QueryOrgCustomizeNotifyTarget:output_type -> erda.core.monitor.alert.QueryOrgCustomizeNotifyTargetResponse
	14,  // 229: erda.core.monitor.alert.AlertService.QueryCustomizeAlert:output_type -> erda.core.monitor.alert.QueryCustomizeAlertResponse
	18,  // 230: erda.core.monitor.alert.AlertService.GetCustomizeAlert:output_type -> erda.core.monitor.alert.GetCustomizeAlertResponse
	25,  // 231: erda.core.monitor.alert.AlertService.GetCustomizeAlertDetail:output_type -> erda.core.monitor.alert.GetCustomizeAlertDetailResponse
	27,  // 232: erda.core.monitor.alert.AlertService.CreateCustomizeAlert:output_type -> erda.core.monitor.alert.CreateCustomizeAlertResponse
	29,  // 233: erda.core.monitor.alert.AlertService.UpdateCustomizeAlert:output_type -> erda.core.monitor.alert.UpdateCustomizeAlertResponse
	31,  // 234: erda.core.monitor.alert.AlertService.UpdateCustomizeAlertEnable:output_type -> erda.core.monitor.alert.UpdateCustomizeAlertEnableResponse
	33,  // 235: erda.core.monitor.alert.AlertService.DeleteCustomizeAlert:output_type -> erda.core.monitor.alert.DeleteCustomizeAlertResponse
	35,  // 236: erda.core.monitor.alert.AlertService.QueryOrgCustomizeMetric:output_type -> erda.core.monitor.alert.QueryOrgCustomizeMetricResponse
	37,  // 237: erda.core.monitor.alert.AlertService.QueryOrgCustomizeAlerts:output_type -> erda.core.monitor.alert.QueryOrgCustomizeAlertsResponse
	40,  // 238: erda.core.monitor.alert.AlertService.GetOrgCustomizeAlertDetail:output_type -> erda.core.monitor.alert.GetOrgCustomizeAlertDetailResponse
	42,  // 239: erda.core.monitor.alert.AlertService.CreateOrgCustomizeAlert:output_type -> erda.core.monitor.alert.CreateOrgCustomizeAlertResponse
	44,  // 240: erda.core.monitor.alert.AlertService.UpdateOrgCustomizeAlert:output_type -> erda.core.monitor.alert.UpdateOrgCustomizeAlertResponse
	46,  // 241: erda.core.monitor.alert.AlertService.UpdateOrgCustomizeAlertEnable:output_type -> erda.core.monitor.alert.UpdateOrgCustomizeAlertEnableResponse
	48,  // 242: erda.core.monitor.alert.AlertService.DeleteOrgCustomizeAlert:output_type -> erda.core.monitor.alert.DeleteOrgCustomizeAlertResponse
	50,  // 243: erda.core.monitor.alert.AlertService.QueryDashboardByAlert:output_type -> erda.core.monitor.alert.QueryDashboardByAlertResponse
	55,  // 244: erda.core.monitor.alert.AlertService.QueryOrgDashboardByAlert:output_type -> erda.core.monitor.alert.QueryOrgDashboardByAlertResponse
	57,  // 245: erda.core.monitor.alert.AlertService.QueryAlertRule:output_type -> erda.core.monitor.alert.QueryAlertRuleResponse
	64,  // 246: erda.core.monitor.alert.AlertService.QueryAlert:output_type -> erda.core.monitor.alert.QueryAlertsResponse
	75,  // 247: erda.core.monitor.alert.AlertService.GetAlert:output_type -> erda.core.monitor.alert.GetAlertResponse
	77,  // 248: erda.core.monitor.alert.AlertService.GetAlertDetail:output_type -> erda.core.monitor.alert.GetAlertDetailResponse
	79,  // 249: erda.core.monitor.alert.AlertService.CreateAlert:output_type -> erda.core.monitor.alert.CreateAlertResponse
	81,  // 250: erda.core.monitor.alert.AlertService.UpdateAlert:output_type -> erda.core.monitor.alert.UpdateAlertResponse
	83,  // 251: erda.core.monitor.alert.AlertService.UpdateAlertEnable:output_type -> erda.core.monitor.alert.UpdateAlertEnableResponse
	85,  // 252: erda.core.monitor.alert.AlertService.DeleteAlert:output_type -> erda.core.monitor.alert.DeleteAlertResponse
	87,  // 253: erda.core.monitor.alert.AlertService.QueryOrgAlertRule:output_type -> erda.core.monitor.alert.QueryOrgAlertRuleResponse
	89,  // 254: erda.core.monitor.alert.AlertService.QueryOrgAlert:output_type -> erda.core.monitor.alert.QueryOrgAlertResponse
	92,  // 255: erda.core.monitor.alert.AlertService.GetOrgAlertDetail:output_type -> erda.core.monitor.alert.GetOrgAlertDetailResponse
	95,  // 256: erda.core.monitor.alert.AlertService.CreateOrgAlert:output_type -> erda.core.monitor.alert.CreateOrgAlertResponse
	97,  // 257: erda.core.monitor.alert.AlertService.UpdateOrgAlert:output_type -> erda.core.monitor.alert.UpdateOrgAlertResponse
	99,  // 258: erda.core.monitor.alert.AlertService.UpdateOrgAlertEnable:output_type -> erda.core.monitor.alert.UpdateOrgAlertEnableResponse
	101, // 259: erda.core.monitor.alert.AlertService.DeleteOrgAlert:output_type -> erda.core.monitor.alert.DeleteOrgAlertResponse
	103, // 260: erda.core.monitor.alert.AlertService.GetAlertRecordAttr:output_type -> erda.core.monitor.alert.GetAlertRecordAttrResponse
	106, // 261: erda.core.monitor.alert.AlertService.QueryAlertRecord:output_type -> erda.core.monitor.alert.QueryAlertRecordResponse
	110, // 262: erda.core.monitor.alert.AlertService.GetAlertRecord:output_type -> erda.core.monitor.alert.GetAlertRecordResponse
	112, // 263: erda.core.monitor.alert.AlertService.QueryAlertHistory:output_type -> erda.core.monitor.alert.QueryAlertHistoryResponse
	116, // 264: erda.core.monitor.alert.AlertService.CreateAlertIssue:output_type -> erda.core.monitor.alert.CreateAlertIssueResponse
	118, // 265: erda.core.monitor.alert.AlertService.UpdateAlertIssue:output_type -> erda.core.monitor.alert.UpdateAlertIssueResponse
	120, // 266: erda.core.monitor.alert.AlertService.GetOrgAlertRecordAttr:output_type -> erda.core.monitor.alert.GetOrgAlertRecordAttrResponse
	124, // 267: erda.core.monitor.alert.AlertService.QueryOrgAlertRecord:output_type -> erda.core.monitor.alert.QueryOrgAlertRecordResponse
	124, // 268: erda.core.monitor.alert.AlertService.QueryOrgHostsAlertRecord:output_type -> erda.core.monitor.alert.QueryOrgAlertRecordResponse
	126, // 269: erda.core.monitor.alert.AlertService.GetOrgAlertRecord:output_type -> erda.core.monitor.alert.GetOrgAlertRecordResponse
	128, // 270: erda.core.monitor.alert.AlertService.QueryOrgAlertHistory:output_type -> erda.core.monitor.alert.QueryOrgAlertHistoryResponse
	130, // 271: erda.core.monitor.alert.AlertService.CreateOrgAlertIssue:output_type -> erda.core.monitor.alert.CreateOrgAlertIssueResponse
	132, // 272: erda.core.monitor.alert.AlertService.UpdateOrgAlertIssue:output_type -> erda.core.monitor.alert.UpdateOrgAlertIssueResponse
	134, // 273: erda.core.monitor.alert.AlertService.GetAlertConditions:output_type -> erda.core.monitor.alert.GetAlertConditionsResponse
	138, // 274: erda.core.monitor.alert.AlertService.GetAlertConditionsValue:output_type -> erda.core.monitor.alert.GetAlertConditionsValueResponse
	226, // [226:275] is the sub-list for method output_type
	177, // [177:226] is the sub-list for method input_type
	177, // [177:177] is the sub-list for extension type_name
	177, // [177:177] is the sub-list for extension extendee
	0,   // [0:177] is the sub-list for field type_name
}

func init() { file_alert_proto_init() }
func file_alert_proto_init() {
	if File_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeNotifyTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeNotifyTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeNotifyTargetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeNotifyTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeNotifyTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomizeAlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeAlertOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeAlertDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeAlertRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeAlertRuleFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeAlertRuleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomizeAlertNotifyTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomizeAlertDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomizeAlertDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomizeAlertEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomizeAlertEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeAlertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeAlertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgCustomizeAlertsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgCustomizeAlertDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgCustomizeAlertDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgCustomizeAlertEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgCustomizeAlertEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgCustomizeAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgCustomizeAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDashboardByAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDashboardByAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgDashboardByAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgDashboardByAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertTypeRuleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertTypeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertRuleFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySilence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertExpressionFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertNotifySilence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgAlertDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgAlertDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgAlertEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgAlertEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrgAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertRecordAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertRecordAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertRecordAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAlertHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueManHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlertIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlertIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgAlertRecordAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgAlertRecordAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgHostsAlertRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgAlertRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgAlertRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrgAlertHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgAlertIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgAlertIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgAlertIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgAlertIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertConditionsValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionsValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlertConditionsValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alert_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertConditionsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   170,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_alert_proto_goTypes,
		DependencyIndexes: file_alert_proto_depIdxs,
		MessageInfos:      file_alert_proto_msgTypes,
	}.Build()
	File_alert_proto = out.File
	file_alert_proto_rawDesc = nil
	file_alert_proto_goTypes = nil
	file_alert_proto_depIdxs = nil
}
