// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: alert.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	QueryCustomizeMetric(ctx context.Context, in *QueryCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryCustomizeMetricResponse, error)
	QueryCustomizeNotifyTarget(ctx context.Context, in *QueryCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryCustomizeNotifyTargetResponse, error)
	QueryOrgCustomizeNotifyTarget(ctx context.Context, in *QueryOrgCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeNotifyTargetResponse, error)
	QueryCustomizeAlert(ctx context.Context, in *QueryCustomizeAlertRequest, opts ...grpc.CallOption) (*QueryCustomizeAlertResponse, error)
	GetCustomizeAlert(ctx context.Context, in *GetCustomizeAlertRequest, opts ...grpc.CallOption) (*GetCustomizeAlertResponse, error)
	GetCustomizeAlertDetail(ctx context.Context, in *GetCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetCustomizeAlertDetailResponse, error)
	CreateCustomizeAlert(ctx context.Context, in *CreateCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateCustomizeAlertResponse, error)
	UpdateCustomizeAlert(ctx context.Context, in *UpdateCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertResponse, error)
	UpdateCustomizeAlertEnable(ctx context.Context, in *UpdateCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertEnableResponse, error)
	DeleteCustomizeAlert(ctx context.Context, in *DeleteCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteCustomizeAlertResponse, error)
	QueryOrgCustomizeMetric(ctx context.Context, in *QueryOrgCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeMetricResponse, error)
	QueryOrgCustomizeAlerts(ctx context.Context, in *QueryOrgCustomizeAlertsRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeAlertsResponse, error)
	GetOrgCustomizeAlertDetail(ctx context.Context, in *GetOrgCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgCustomizeAlertDetailResponse, error)
	CreateOrgCustomizeAlert(ctx context.Context, in *CreateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlert(ctx context.Context, in *UpdateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlertEnable(ctx context.Context, in *UpdateOrgCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertEnableResponse, error)
	DeleteOrgCustomizeAlert(ctx context.Context, in *DeleteOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteOrgCustomizeAlertResponse, error)
	QueryDashboardByAlert(ctx context.Context, in *QueryDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryDashboardByAlertResponse, error)
	QueryOrgDashboardByAlert(ctx context.Context, in *QueryOrgDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryOrgDashboardByAlertResponse, error)
	QueryAlertRule(ctx context.Context, in *QueryAlertRuleRequest, opts ...grpc.CallOption) (*QueryAlertRuleResponse, error)
	QueryAlert(ctx context.Context, in *QueryAlertRequest, opts ...grpc.CallOption) (*QueryAlertsResponse, error)
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error)
	GetAlertDetail(ctx context.Context, in *GetAlertDetailRequest, opts ...grpc.CallOption) (*GetAlertDetailResponse, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error)
	UpdateAlertEnable(ctx context.Context, in *UpdateAlertEnableRequest, opts ...grpc.CallOption) (*UpdateAlertEnableResponse, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	GetRawAlertExpression(ctx context.Context, in *GetRawAlertExpressionRequest, opts ...grpc.CallOption) (*GetRawAlertExpressionResponse, error)
	QueryOrgAlertRule(ctx context.Context, in *QueryOrgAlertRuleRequest, opts ...grpc.CallOption) (*QueryOrgAlertRuleResponse, error)
	QueryOrgAlert(ctx context.Context, in *QueryOrgAlertRequest, opts ...grpc.CallOption) (*QueryOrgAlertResponse, error)
	GetOrgAlertDetail(ctx context.Context, in *GetOrgAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgAlertDetailResponse, error)
	CreateOrgAlert(ctx context.Context, in *CreateOrgAlertRequest, opts ...grpc.CallOption) (*CreateOrgAlertResponse, error)
	UpdateOrgAlert(ctx context.Context, in *UpdateOrgAlertRequest, opts ...grpc.CallOption) (*UpdateOrgAlertResponse, error)
	UpdateOrgAlertEnable(ctx context.Context, in *UpdateOrgAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgAlertEnableResponse, error)
	DeleteOrgAlert(ctx context.Context, in *DeleteOrgAlertRequest, opts ...grpc.CallOption) (*DeleteOrgAlertResponse, error)
	GetAlertRecordAttr(ctx context.Context, in *GetAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetAlertRecordAttrResponse, error)
	QueryAlertRecord(ctx context.Context, in *QueryAlertRecordRequest, opts ...grpc.CallOption) (*QueryAlertRecordResponse, error)
	GetAlertRecord(ctx context.Context, in *GetAlertRecordRequest, opts ...grpc.CallOption) (*GetAlertRecordResponse, error)
	QueryAlertHistory(ctx context.Context, in *QueryAlertHistoryRequest, opts ...grpc.CallOption) (*QueryAlertHistoryResponse, error)
	CreateAlertIssue(ctx context.Context, in *CreateAlertIssueRequest, opts ...grpc.CallOption) (*CreateAlertIssueResponse, error)
	UpdateAlertIssue(ctx context.Context, in *UpdateAlertIssueRequest, opts ...grpc.CallOption) (*UpdateAlertIssueResponse, error)
	GetOrgAlertRecordAttr(ctx context.Context, in *GetOrgAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordAttrResponse, error)
	QueryOrgAlertRecord(ctx context.Context, in *QueryOrgAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error)
	QueryOrgHostsAlertRecord(ctx context.Context, in *QueryOrgHostsAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error)
	GetOrgAlertRecord(ctx context.Context, in *GetOrgAlertRecordRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordResponse, error)
	QueryOrgAlertHistory(ctx context.Context, in *QueryOrgAlertHistoryRequest, opts ...grpc.CallOption) (*QueryOrgAlertHistoryResponse, error)
	CreateOrgAlertIssue(ctx context.Context, in *CreateOrgAlertIssueRequest, opts ...grpc.CallOption) (*CreateOrgAlertIssueResponse, error)
	UpdateOrgAlertIssue(ctx context.Context, in *UpdateOrgAlertIssueRequest, opts ...grpc.CallOption) (*UpdateOrgAlertIssueResponse, error)
	GetAlertConditions(ctx context.Context, in *GetAlertConditionsRequest, opts ...grpc.CallOption) (*GetAlertConditionsResponse, error)
	GetAlertConditionsValue(ctx context.Context, in *GetAlertConditionsValueRequest, opts ...grpc.CallOption) (*GetAlertConditionsValueResponse, error)
	GetAlertEvents(ctx context.Context, in *GetAlertEventRequest, opts ...grpc.CallOption) (*GetAlertEventResponse, error)
	SuppressAlertEvent(ctx context.Context, in *SuppressAlertEventRequest, opts ...grpc.CallOption) (*SuppressAlertEventResponse, error)
	CancelSuppressAlertEvent(ctx context.Context, in *CancelSuppressAlertEventRequest, opts ...grpc.CallOption) (*CancelSuppressAlertEventResponse, error)
	CountUnRecoverAlertEvents(ctx context.Context, in *CountUnRecoverAlertEventsRequest, opts ...grpc.CallOption) (*CountUnRecoverAlertEventsResponse, error)
}

type alertServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewAlertServiceClient(cc grpc1.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) QueryCustomizeMetric(ctx context.Context, in *QueryCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryCustomizeMetricResponse, error) {
	out := new(QueryCustomizeMetricResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryCustomizeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryCustomizeNotifyTarget(ctx context.Context, in *QueryCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryCustomizeNotifyTargetResponse, error) {
	out := new(QueryCustomizeNotifyTargetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryCustomizeNotifyTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgCustomizeNotifyTarget(ctx context.Context, in *QueryOrgCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeNotifyTargetResponse, error) {
	out := new(QueryOrgCustomizeNotifyTargetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgCustomizeNotifyTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryCustomizeAlert(ctx context.Context, in *QueryCustomizeAlertRequest, opts ...grpc.CallOption) (*QueryCustomizeAlertResponse, error) {
	out := new(QueryCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetCustomizeAlert(ctx context.Context, in *GetCustomizeAlertRequest, opts ...grpc.CallOption) (*GetCustomizeAlertResponse, error) {
	out := new(GetCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetCustomizeAlertDetail(ctx context.Context, in *GetCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetCustomizeAlertDetailResponse, error) {
	out := new(GetCustomizeAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetCustomizeAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateCustomizeAlert(ctx context.Context, in *CreateCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateCustomizeAlertResponse, error) {
	out := new(CreateCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CreateCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateCustomizeAlert(ctx context.Context, in *UpdateCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertResponse, error) {
	out := new(UpdateCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateCustomizeAlertEnable(ctx context.Context, in *UpdateCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertEnableResponse, error) {
	out := new(UpdateCustomizeAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateCustomizeAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteCustomizeAlert(ctx context.Context, in *DeleteCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteCustomizeAlertResponse, error) {
	out := new(DeleteCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/DeleteCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgCustomizeMetric(ctx context.Context, in *QueryOrgCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeMetricResponse, error) {
	out := new(QueryOrgCustomizeMetricResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgCustomizeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgCustomizeAlerts(ctx context.Context, in *QueryOrgCustomizeAlertsRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeAlertsResponse, error) {
	out := new(QueryOrgCustomizeAlertsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgCustomizeAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetOrgCustomizeAlertDetail(ctx context.Context, in *GetOrgCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgCustomizeAlertDetailResponse, error) {
	out := new(GetOrgCustomizeAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetOrgCustomizeAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateOrgCustomizeAlert(ctx context.Context, in *CreateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateOrgCustomizeAlertResponse, error) {
	out := new(CreateOrgCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CreateOrgCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateOrgCustomizeAlert(ctx context.Context, in *UpdateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertResponse, error) {
	out := new(UpdateOrgCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateOrgCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateOrgCustomizeAlertEnable(ctx context.Context, in *UpdateOrgCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertEnableResponse, error) {
	out := new(UpdateOrgCustomizeAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateOrgCustomizeAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteOrgCustomizeAlert(ctx context.Context, in *DeleteOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteOrgCustomizeAlertResponse, error) {
	out := new(DeleteOrgCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/DeleteOrgCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryDashboardByAlert(ctx context.Context, in *QueryDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryDashboardByAlertResponse, error) {
	out := new(QueryDashboardByAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryDashboardByAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgDashboardByAlert(ctx context.Context, in *QueryOrgDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryOrgDashboardByAlertResponse, error) {
	out := new(QueryOrgDashboardByAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgDashboardByAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryAlertRule(ctx context.Context, in *QueryAlertRuleRequest, opts ...grpc.CallOption) (*QueryAlertRuleResponse, error) {
	out := new(QueryAlertRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryAlertRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryAlert(ctx context.Context, in *QueryAlertRequest, opts ...grpc.CallOption) (*QueryAlertsResponse, error) {
	out := new(QueryAlertsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error) {
	out := new(GetAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertDetail(ctx context.Context, in *GetAlertDetailRequest, opts ...grpc.CallOption) (*GetAlertDetailResponse, error) {
	out := new(GetAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error) {
	out := new(UpdateAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlertEnable(ctx context.Context, in *UpdateAlertEnableRequest, opts ...grpc.CallOption) (*UpdateAlertEnableResponse, error) {
	out := new(UpdateAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetRawAlertExpression(ctx context.Context, in *GetRawAlertExpressionRequest, opts ...grpc.CallOption) (*GetRawAlertExpressionResponse, error) {
	out := new(GetRawAlertExpressionResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetRawAlertExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgAlertRule(ctx context.Context, in *QueryOrgAlertRuleRequest, opts ...grpc.CallOption) (*QueryOrgAlertRuleResponse, error) {
	out := new(QueryOrgAlertRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgAlertRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgAlert(ctx context.Context, in *QueryOrgAlertRequest, opts ...grpc.CallOption) (*QueryOrgAlertResponse, error) {
	out := new(QueryOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetOrgAlertDetail(ctx context.Context, in *GetOrgAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgAlertDetailResponse, error) {
	out := new(GetOrgAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetOrgAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateOrgAlert(ctx context.Context, in *CreateOrgAlertRequest, opts ...grpc.CallOption) (*CreateOrgAlertResponse, error) {
	out := new(CreateOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CreateOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateOrgAlert(ctx context.Context, in *UpdateOrgAlertRequest, opts ...grpc.CallOption) (*UpdateOrgAlertResponse, error) {
	out := new(UpdateOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateOrgAlertEnable(ctx context.Context, in *UpdateOrgAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgAlertEnableResponse, error) {
	out := new(UpdateOrgAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateOrgAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteOrgAlert(ctx context.Context, in *DeleteOrgAlertRequest, opts ...grpc.CallOption) (*DeleteOrgAlertResponse, error) {
	out := new(DeleteOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/DeleteOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertRecordAttr(ctx context.Context, in *GetAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetAlertRecordAttrResponse, error) {
	out := new(GetAlertRecordAttrResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlertRecordAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryAlertRecord(ctx context.Context, in *QueryAlertRecordRequest, opts ...grpc.CallOption) (*QueryAlertRecordResponse, error) {
	out := new(QueryAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertRecord(ctx context.Context, in *GetAlertRecordRequest, opts ...grpc.CallOption) (*GetAlertRecordResponse, error) {
	out := new(GetAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryAlertHistory(ctx context.Context, in *QueryAlertHistoryRequest, opts ...grpc.CallOption) (*QueryAlertHistoryResponse, error) {
	out := new(QueryAlertHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateAlertIssue(ctx context.Context, in *CreateAlertIssueRequest, opts ...grpc.CallOption) (*CreateAlertIssueResponse, error) {
	out := new(CreateAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CreateAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlertIssue(ctx context.Context, in *UpdateAlertIssueRequest, opts ...grpc.CallOption) (*UpdateAlertIssueResponse, error) {
	out := new(UpdateAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetOrgAlertRecordAttr(ctx context.Context, in *GetOrgAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordAttrResponse, error) {
	out := new(GetOrgAlertRecordAttrResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetOrgAlertRecordAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgAlertRecord(ctx context.Context, in *QueryOrgAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error) {
	out := new(QueryOrgAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgHostsAlertRecord(ctx context.Context, in *QueryOrgHostsAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error) {
	out := new(QueryOrgAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgHostsAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetOrgAlertRecord(ctx context.Context, in *GetOrgAlertRecordRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordResponse, error) {
	out := new(GetOrgAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetOrgAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryOrgAlertHistory(ctx context.Context, in *QueryOrgAlertHistoryRequest, opts ...grpc.CallOption) (*QueryOrgAlertHistoryResponse, error) {
	out := new(QueryOrgAlertHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/QueryOrgAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateOrgAlertIssue(ctx context.Context, in *CreateOrgAlertIssueRequest, opts ...grpc.CallOption) (*CreateOrgAlertIssueResponse, error) {
	out := new(CreateOrgAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CreateOrgAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateOrgAlertIssue(ctx context.Context, in *UpdateOrgAlertIssueRequest, opts ...grpc.CallOption) (*UpdateOrgAlertIssueResponse, error) {
	out := new(UpdateOrgAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/UpdateOrgAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertConditions(ctx context.Context, in *GetAlertConditionsRequest, opts ...grpc.CallOption) (*GetAlertConditionsResponse, error) {
	out := new(GetAlertConditionsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlertConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertConditionsValue(ctx context.Context, in *GetAlertConditionsValueRequest, opts ...grpc.CallOption) (*GetAlertConditionsValueResponse, error) {
	out := new(GetAlertConditionsValueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlertConditionsValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertEvents(ctx context.Context, in *GetAlertEventRequest, opts ...grpc.CallOption) (*GetAlertEventResponse, error) {
	out := new(GetAlertEventResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/GetAlertEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) SuppressAlertEvent(ctx context.Context, in *SuppressAlertEventRequest, opts ...grpc.CallOption) (*SuppressAlertEventResponse, error) {
	out := new(SuppressAlertEventResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/SuppressAlertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CancelSuppressAlertEvent(ctx context.Context, in *CancelSuppressAlertEventRequest, opts ...grpc.CallOption) (*CancelSuppressAlertEventResponse, error) {
	out := new(CancelSuppressAlertEventResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CancelSuppressAlertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CountUnRecoverAlertEvents(ctx context.Context, in *CountUnRecoverAlertEventsRequest, opts ...grpc.CallOption) (*CountUnRecoverAlertEventsResponse, error) {
	out := new(CountUnRecoverAlertEventsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.AlertService/CountUnRecoverAlertEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations should embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	QueryCustomizeMetric(context.Context, *QueryCustomizeMetricRequest) (*QueryCustomizeMetricResponse, error)
	QueryCustomizeNotifyTarget(context.Context, *QueryCustomizeNotifyTargetRequest) (*QueryCustomizeNotifyTargetResponse, error)
	QueryOrgCustomizeNotifyTarget(context.Context, *QueryOrgCustomizeNotifyTargetRequest) (*QueryOrgCustomizeNotifyTargetResponse, error)
	QueryCustomizeAlert(context.Context, *QueryCustomizeAlertRequest) (*QueryCustomizeAlertResponse, error)
	GetCustomizeAlert(context.Context, *GetCustomizeAlertRequest) (*GetCustomizeAlertResponse, error)
	GetCustomizeAlertDetail(context.Context, *GetCustomizeAlertDetailRequest) (*GetCustomizeAlertDetailResponse, error)
	CreateCustomizeAlert(context.Context, *CreateCustomizeAlertRequest) (*CreateCustomizeAlertResponse, error)
	UpdateCustomizeAlert(context.Context, *UpdateCustomizeAlertRequest) (*UpdateCustomizeAlertResponse, error)
	UpdateCustomizeAlertEnable(context.Context, *UpdateCustomizeAlertEnableRequest) (*UpdateCustomizeAlertEnableResponse, error)
	DeleteCustomizeAlert(context.Context, *DeleteCustomizeAlertRequest) (*DeleteCustomizeAlertResponse, error)
	QueryOrgCustomizeMetric(context.Context, *QueryOrgCustomizeMetricRequest) (*QueryOrgCustomizeMetricResponse, error)
	QueryOrgCustomizeAlerts(context.Context, *QueryOrgCustomizeAlertsRequest) (*QueryOrgCustomizeAlertsResponse, error)
	GetOrgCustomizeAlertDetail(context.Context, *GetOrgCustomizeAlertDetailRequest) (*GetOrgCustomizeAlertDetailResponse, error)
	CreateOrgCustomizeAlert(context.Context, *CreateOrgCustomizeAlertRequest) (*CreateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlert(context.Context, *UpdateOrgCustomizeAlertRequest) (*UpdateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlertEnable(context.Context, *UpdateOrgCustomizeAlertEnableRequest) (*UpdateOrgCustomizeAlertEnableResponse, error)
	DeleteOrgCustomizeAlert(context.Context, *DeleteOrgCustomizeAlertRequest) (*DeleteOrgCustomizeAlertResponse, error)
	QueryDashboardByAlert(context.Context, *QueryDashboardByAlertRequest) (*QueryDashboardByAlertResponse, error)
	QueryOrgDashboardByAlert(context.Context, *QueryOrgDashboardByAlertRequest) (*QueryOrgDashboardByAlertResponse, error)
	QueryAlertRule(context.Context, *QueryAlertRuleRequest) (*QueryAlertRuleResponse, error)
	QueryAlert(context.Context, *QueryAlertRequest) (*QueryAlertsResponse, error)
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error)
	GetAlertDetail(context.Context, *GetAlertDetailRequest) (*GetAlertDetailResponse, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error)
	UpdateAlertEnable(context.Context, *UpdateAlertEnableRequest) (*UpdateAlertEnableResponse, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	GetRawAlertExpression(context.Context, *GetRawAlertExpressionRequest) (*GetRawAlertExpressionResponse, error)
	QueryOrgAlertRule(context.Context, *QueryOrgAlertRuleRequest) (*QueryOrgAlertRuleResponse, error)
	QueryOrgAlert(context.Context, *QueryOrgAlertRequest) (*QueryOrgAlertResponse, error)
	GetOrgAlertDetail(context.Context, *GetOrgAlertDetailRequest) (*GetOrgAlertDetailResponse, error)
	CreateOrgAlert(context.Context, *CreateOrgAlertRequest) (*CreateOrgAlertResponse, error)
	UpdateOrgAlert(context.Context, *UpdateOrgAlertRequest) (*UpdateOrgAlertResponse, error)
	UpdateOrgAlertEnable(context.Context, *UpdateOrgAlertEnableRequest) (*UpdateOrgAlertEnableResponse, error)
	DeleteOrgAlert(context.Context, *DeleteOrgAlertRequest) (*DeleteOrgAlertResponse, error)
	GetAlertRecordAttr(context.Context, *GetAlertRecordAttrRequest) (*GetAlertRecordAttrResponse, error)
	QueryAlertRecord(context.Context, *QueryAlertRecordRequest) (*QueryAlertRecordResponse, error)
	GetAlertRecord(context.Context, *GetAlertRecordRequest) (*GetAlertRecordResponse, error)
	QueryAlertHistory(context.Context, *QueryAlertHistoryRequest) (*QueryAlertHistoryResponse, error)
	CreateAlertIssue(context.Context, *CreateAlertIssueRequest) (*CreateAlertIssueResponse, error)
	UpdateAlertIssue(context.Context, *UpdateAlertIssueRequest) (*UpdateAlertIssueResponse, error)
	GetOrgAlertRecordAttr(context.Context, *GetOrgAlertRecordAttrRequest) (*GetOrgAlertRecordAttrResponse, error)
	QueryOrgAlertRecord(context.Context, *QueryOrgAlertRecordRequest) (*QueryOrgAlertRecordResponse, error)
	QueryOrgHostsAlertRecord(context.Context, *QueryOrgHostsAlertRecordRequest) (*QueryOrgAlertRecordResponse, error)
	GetOrgAlertRecord(context.Context, *GetOrgAlertRecordRequest) (*GetOrgAlertRecordResponse, error)
	QueryOrgAlertHistory(context.Context, *QueryOrgAlertHistoryRequest) (*QueryOrgAlertHistoryResponse, error)
	CreateOrgAlertIssue(context.Context, *CreateOrgAlertIssueRequest) (*CreateOrgAlertIssueResponse, error)
	UpdateOrgAlertIssue(context.Context, *UpdateOrgAlertIssueRequest) (*UpdateOrgAlertIssueResponse, error)
	GetAlertConditions(context.Context, *GetAlertConditionsRequest) (*GetAlertConditionsResponse, error)
	GetAlertConditionsValue(context.Context, *GetAlertConditionsValueRequest) (*GetAlertConditionsValueResponse, error)
	GetAlertEvents(context.Context, *GetAlertEventRequest) (*GetAlertEventResponse, error)
	SuppressAlertEvent(context.Context, *SuppressAlertEventRequest) (*SuppressAlertEventResponse, error)
	CancelSuppressAlertEvent(context.Context, *CancelSuppressAlertEventRequest) (*CancelSuppressAlertEventResponse, error)
	CountUnRecoverAlertEvents(context.Context, *CountUnRecoverAlertEventsRequest) (*CountUnRecoverAlertEventsResponse, error)
}

// UnimplementedAlertServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (*UnimplementedAlertServiceServer) QueryCustomizeMetric(context.Context, *QueryCustomizeMetricRequest) (*QueryCustomizeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeMetric not implemented")
}
func (*UnimplementedAlertServiceServer) QueryCustomizeNotifyTarget(context.Context, *QueryCustomizeNotifyTargetRequest) (*QueryCustomizeNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeNotifyTarget not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgCustomizeNotifyTarget(context.Context, *QueryOrgCustomizeNotifyTargetRequest) (*QueryOrgCustomizeNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgCustomizeNotifyTarget not implemented")
}
func (*UnimplementedAlertServiceServer) QueryCustomizeAlert(context.Context, *QueryCustomizeAlertRequest) (*QueryCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetCustomizeAlert(context.Context, *GetCustomizeAlertRequest) (*GetCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetCustomizeAlertDetail(context.Context, *GetCustomizeAlertDetailRequest) (*GetCustomizeAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomizeAlertDetail not implemented")
}
func (*UnimplementedAlertServiceServer) CreateCustomizeAlert(context.Context, *CreateCustomizeAlertRequest) (*CreateCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateCustomizeAlert(context.Context, *UpdateCustomizeAlertRequest) (*UpdateCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateCustomizeAlertEnable(context.Context, *UpdateCustomizeAlertEnableRequest) (*UpdateCustomizeAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizeAlertEnable not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteCustomizeAlert(context.Context, *DeleteCustomizeAlertRequest) (*DeleteCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgCustomizeMetric(context.Context, *QueryOrgCustomizeMetricRequest) (*QueryOrgCustomizeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgCustomizeMetric not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgCustomizeAlerts(context.Context, *QueryOrgCustomizeAlertsRequest) (*QueryOrgCustomizeAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgCustomizeAlerts not implemented")
}
func (*UnimplementedAlertServiceServer) GetOrgCustomizeAlertDetail(context.Context, *GetOrgCustomizeAlertDetailRequest) (*GetOrgCustomizeAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgCustomizeAlertDetail not implemented")
}
func (*UnimplementedAlertServiceServer) CreateOrgCustomizeAlert(context.Context, *CreateOrgCustomizeAlertRequest) (*CreateOrgCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateOrgCustomizeAlert(context.Context, *UpdateOrgCustomizeAlertRequest) (*UpdateOrgCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateOrgCustomizeAlertEnable(context.Context, *UpdateOrgCustomizeAlertEnableRequest) (*UpdateOrgCustomizeAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgCustomizeAlertEnable not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteOrgCustomizeAlert(context.Context, *DeleteOrgCustomizeAlertRequest) (*DeleteOrgCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) QueryDashboardByAlert(context.Context, *QueryDashboardByAlertRequest) (*QueryDashboardByAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDashboardByAlert not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgDashboardByAlert(context.Context, *QueryOrgDashboardByAlertRequest) (*QueryOrgDashboardByAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgDashboardByAlert not implemented")
}
func (*UnimplementedAlertServiceServer) QueryAlertRule(context.Context, *QueryAlertRuleRequest) (*QueryAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertRule not implemented")
}
func (*UnimplementedAlertServiceServer) QueryAlert(context.Context, *QueryAlertRequest) (*QueryAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertDetail(context.Context, *GetAlertDetailRequest) (*GetAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertDetail not implemented")
}
func (*UnimplementedAlertServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlertEnable(context.Context, *UpdateAlertEnableRequest) (*UpdateAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertEnable not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetRawAlertExpression(context.Context, *GetRawAlertExpressionRequest) (*GetRawAlertExpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawAlertExpression not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgAlertRule(context.Context, *QueryOrgAlertRuleRequest) (*QueryOrgAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlertRule not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgAlert(context.Context, *QueryOrgAlertRequest) (*QueryOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetOrgAlertDetail(context.Context, *GetOrgAlertDetailRequest) (*GetOrgAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAlertDetail not implemented")
}
func (*UnimplementedAlertServiceServer) CreateOrgAlert(context.Context, *CreateOrgAlertRequest) (*CreateOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateOrgAlert(context.Context, *UpdateOrgAlertRequest) (*UpdateOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateOrgAlertEnable(context.Context, *UpdateOrgAlertEnableRequest) (*UpdateOrgAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgAlertEnable not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteOrgAlert(context.Context, *DeleteOrgAlertRequest) (*DeleteOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertRecordAttr(context.Context, *GetAlertRecordAttrRequest) (*GetAlertRecordAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecordAttr not implemented")
}
func (*UnimplementedAlertServiceServer) QueryAlertRecord(context.Context, *QueryAlertRecordRequest) (*QueryAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertRecord not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertRecord(context.Context, *GetAlertRecordRequest) (*GetAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecord not implemented")
}
func (*UnimplementedAlertServiceServer) QueryAlertHistory(context.Context, *QueryAlertHistoryRequest) (*QueryAlertHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertHistory not implemented")
}
func (*UnimplementedAlertServiceServer) CreateAlertIssue(context.Context, *CreateAlertIssueRequest) (*CreateAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertIssue not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlertIssue(context.Context, *UpdateAlertIssueRequest) (*UpdateAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertIssue not implemented")
}
func (*UnimplementedAlertServiceServer) GetOrgAlertRecordAttr(context.Context, *GetOrgAlertRecordAttrRequest) (*GetOrgAlertRecordAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAlertRecordAttr not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgAlertRecord(context.Context, *QueryOrgAlertRecordRequest) (*QueryOrgAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlertRecord not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgHostsAlertRecord(context.Context, *QueryOrgHostsAlertRecordRequest) (*QueryOrgAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgHostsAlertRecord not implemented")
}
func (*UnimplementedAlertServiceServer) GetOrgAlertRecord(context.Context, *GetOrgAlertRecordRequest) (*GetOrgAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAlertRecord not implemented")
}
func (*UnimplementedAlertServiceServer) QueryOrgAlertHistory(context.Context, *QueryOrgAlertHistoryRequest) (*QueryOrgAlertHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlertHistory not implemented")
}
func (*UnimplementedAlertServiceServer) CreateOrgAlertIssue(context.Context, *CreateOrgAlertIssueRequest) (*CreateOrgAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgAlertIssue not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateOrgAlertIssue(context.Context, *UpdateOrgAlertIssueRequest) (*UpdateOrgAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgAlertIssue not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertConditions(context.Context, *GetAlertConditionsRequest) (*GetAlertConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConditions not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertConditionsValue(context.Context, *GetAlertConditionsValueRequest) (*GetAlertConditionsValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConditionsValue not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertEvents(context.Context, *GetAlertEventRequest) (*GetAlertEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertEvents not implemented")
}
func (*UnimplementedAlertServiceServer) SuppressAlertEvent(context.Context, *SuppressAlertEventRequest) (*SuppressAlertEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressAlertEvent not implemented")
}
func (*UnimplementedAlertServiceServer) CancelSuppressAlertEvent(context.Context, *CancelSuppressAlertEventRequest) (*CancelSuppressAlertEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSuppressAlertEvent not implemented")
}
func (*UnimplementedAlertServiceServer) CountUnRecoverAlertEvents(context.Context, *CountUnRecoverAlertEventsRequest) (*CountUnRecoverAlertEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUnRecoverAlertEvents not implemented")
}

func RegisterAlertServiceServer(s grpc1.ServiceRegistrar, srv AlertServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_AlertService_serviceDesc(srv, opts...), srv)
}

var _AlertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.monitor.alert.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "alert.proto",
}

func _get_AlertService_serviceDesc(srv AlertServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_AlertService_QueryCustomizeMetric_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeMetric(ctx, req.(*QueryCustomizeMetricRequest))
	}
	var _AlertService_QueryCustomizeMetric_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryCustomizeMetric_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryCustomizeMetric", srv)
		_AlertService_QueryCustomizeMetric_Handler = h.Interceptor(_AlertService_QueryCustomizeMetric_Handler)
	}

	_AlertService_QueryCustomizeNotifyTarget_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeNotifyTarget(ctx, req.(*QueryCustomizeNotifyTargetRequest))
	}
	var _AlertService_QueryCustomizeNotifyTarget_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryCustomizeNotifyTarget_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryCustomizeNotifyTarget", srv)
		_AlertService_QueryCustomizeNotifyTarget_Handler = h.Interceptor(_AlertService_QueryCustomizeNotifyTarget_Handler)
	}

	_AlertService_QueryOrgCustomizeNotifyTarget_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgCustomizeNotifyTarget(ctx, req.(*QueryOrgCustomizeNotifyTargetRequest))
	}
	var _AlertService_QueryOrgCustomizeNotifyTarget_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgCustomizeNotifyTarget_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgCustomizeNotifyTarget", srv)
		_AlertService_QueryOrgCustomizeNotifyTarget_Handler = h.Interceptor(_AlertService_QueryOrgCustomizeNotifyTarget_Handler)
	}

	_AlertService_QueryCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeAlert(ctx, req.(*QueryCustomizeAlertRequest))
	}
	var _AlertService_QueryCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryCustomizeAlert", srv)
		_AlertService_QueryCustomizeAlert_Handler = h.Interceptor(_AlertService_QueryCustomizeAlert_Handler)
	}

	_AlertService_GetCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomizeAlert(ctx, req.(*GetCustomizeAlertRequest))
	}
	var _AlertService_GetCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetCustomizeAlert", srv)
		_AlertService_GetCustomizeAlert_Handler = h.Interceptor(_AlertService_GetCustomizeAlert_Handler)
	}

	_AlertService_GetCustomizeAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomizeAlertDetail(ctx, req.(*GetCustomizeAlertDetailRequest))
	}
	var _AlertService_GetCustomizeAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetCustomizeAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetCustomizeAlertDetail", srv)
		_AlertService_GetCustomizeAlertDetail_Handler = h.Interceptor(_AlertService_GetCustomizeAlertDetail_Handler)
	}

	_AlertService_CreateCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateCustomizeAlert(ctx, req.(*CreateCustomizeAlertRequest))
	}
	var _AlertService_CreateCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CreateCustomizeAlert", srv)
		_AlertService_CreateCustomizeAlert_Handler = h.Interceptor(_AlertService_CreateCustomizeAlert_Handler)
	}

	_AlertService_UpdateCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomizeAlert(ctx, req.(*UpdateCustomizeAlertRequest))
	}
	var _AlertService_UpdateCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateCustomizeAlert", srv)
		_AlertService_UpdateCustomizeAlert_Handler = h.Interceptor(_AlertService_UpdateCustomizeAlert_Handler)
	}

	_AlertService_UpdateCustomizeAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomizeAlertEnable(ctx, req.(*UpdateCustomizeAlertEnableRequest))
	}
	var _AlertService_UpdateCustomizeAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateCustomizeAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateCustomizeAlertEnable", srv)
		_AlertService_UpdateCustomizeAlertEnable_Handler = h.Interceptor(_AlertService_UpdateCustomizeAlertEnable_Handler)
	}

	_AlertService_DeleteCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteCustomizeAlert(ctx, req.(*DeleteCustomizeAlertRequest))
	}
	var _AlertService_DeleteCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DeleteCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "DeleteCustomizeAlert", srv)
		_AlertService_DeleteCustomizeAlert_Handler = h.Interceptor(_AlertService_DeleteCustomizeAlert_Handler)
	}

	_AlertService_QueryOrgCustomizeMetric_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgCustomizeMetric(ctx, req.(*QueryOrgCustomizeMetricRequest))
	}
	var _AlertService_QueryOrgCustomizeMetric_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgCustomizeMetric_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgCustomizeMetric", srv)
		_AlertService_QueryOrgCustomizeMetric_Handler = h.Interceptor(_AlertService_QueryOrgCustomizeMetric_Handler)
	}

	_AlertService_QueryOrgCustomizeAlerts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgCustomizeAlerts(ctx, req.(*QueryOrgCustomizeAlertsRequest))
	}
	var _AlertService_QueryOrgCustomizeAlerts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgCustomizeAlerts_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgCustomizeAlerts", srv)
		_AlertService_QueryOrgCustomizeAlerts_Handler = h.Interceptor(_AlertService_QueryOrgCustomizeAlerts_Handler)
	}

	_AlertService_GetOrgCustomizeAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgCustomizeAlertDetail(ctx, req.(*GetOrgCustomizeAlertDetailRequest))
	}
	var _AlertService_GetOrgCustomizeAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetOrgCustomizeAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetOrgCustomizeAlertDetail", srv)
		_AlertService_GetOrgCustomizeAlertDetail_Handler = h.Interceptor(_AlertService_GetOrgCustomizeAlertDetail_Handler)
	}

	_AlertService_CreateOrgCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgCustomizeAlert(ctx, req.(*CreateOrgCustomizeAlertRequest))
	}
	var _AlertService_CreateOrgCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateOrgCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CreateOrgCustomizeAlert", srv)
		_AlertService_CreateOrgCustomizeAlert_Handler = h.Interceptor(_AlertService_CreateOrgCustomizeAlert_Handler)
	}

	_AlertService_UpdateOrgCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgCustomizeAlert(ctx, req.(*UpdateOrgCustomizeAlertRequest))
	}
	var _AlertService_UpdateOrgCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateOrgCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateOrgCustomizeAlert", srv)
		_AlertService_UpdateOrgCustomizeAlert_Handler = h.Interceptor(_AlertService_UpdateOrgCustomizeAlert_Handler)
	}

	_AlertService_UpdateOrgCustomizeAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgCustomizeAlertEnable(ctx, req.(*UpdateOrgCustomizeAlertEnableRequest))
	}
	var _AlertService_UpdateOrgCustomizeAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateOrgCustomizeAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateOrgCustomizeAlertEnable", srv)
		_AlertService_UpdateOrgCustomizeAlertEnable_Handler = h.Interceptor(_AlertService_UpdateOrgCustomizeAlertEnable_Handler)
	}

	_AlertService_DeleteOrgCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteOrgCustomizeAlert(ctx, req.(*DeleteOrgCustomizeAlertRequest))
	}
	var _AlertService_DeleteOrgCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DeleteOrgCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "DeleteOrgCustomizeAlert", srv)
		_AlertService_DeleteOrgCustomizeAlert_Handler = h.Interceptor(_AlertService_DeleteOrgCustomizeAlert_Handler)
	}

	_AlertService_QueryDashboardByAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryDashboardByAlert(ctx, req.(*QueryDashboardByAlertRequest))
	}
	var _AlertService_QueryDashboardByAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryDashboardByAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryDashboardByAlert", srv)
		_AlertService_QueryDashboardByAlert_Handler = h.Interceptor(_AlertService_QueryDashboardByAlert_Handler)
	}

	_AlertService_QueryOrgDashboardByAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgDashboardByAlert(ctx, req.(*QueryOrgDashboardByAlertRequest))
	}
	var _AlertService_QueryOrgDashboardByAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgDashboardByAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgDashboardByAlert", srv)
		_AlertService_QueryOrgDashboardByAlert_Handler = h.Interceptor(_AlertService_QueryOrgDashboardByAlert_Handler)
	}

	_AlertService_QueryAlertRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertRule(ctx, req.(*QueryAlertRuleRequest))
	}
	var _AlertService_QueryAlertRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryAlertRule_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryAlertRule", srv)
		_AlertService_QueryAlertRule_Handler = h.Interceptor(_AlertService_QueryAlertRule_Handler)
	}

	_AlertService_QueryAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlert(ctx, req.(*QueryAlertRequest))
	}
	var _AlertService_QueryAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryAlert", srv)
		_AlertService_QueryAlert_Handler = h.Interceptor(_AlertService_QueryAlert_Handler)
	}

	_AlertService_GetAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlert(ctx, req.(*GetAlertRequest))
	}
	var _AlertService_GetAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlert", srv)
		_AlertService_GetAlert_Handler = h.Interceptor(_AlertService_GetAlert_Handler)
	}

	_AlertService_GetAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertDetail(ctx, req.(*GetAlertDetailRequest))
	}
	var _AlertService_GetAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlertDetail", srv)
		_AlertService_GetAlertDetail_Handler = h.Interceptor(_AlertService_GetAlertDetail_Handler)
	}

	_AlertService_CreateAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	var _AlertService_CreateAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CreateAlert", srv)
		_AlertService_CreateAlert_Handler = h.Interceptor(_AlertService_CreateAlert_Handler)
	}

	_AlertService_UpdateAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	var _AlertService_UpdateAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateAlert", srv)
		_AlertService_UpdateAlert_Handler = h.Interceptor(_AlertService_UpdateAlert_Handler)
	}

	_AlertService_UpdateAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlertEnable(ctx, req.(*UpdateAlertEnableRequest))
	}
	var _AlertService_UpdateAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateAlertEnable", srv)
		_AlertService_UpdateAlertEnable_Handler = h.Interceptor(_AlertService_UpdateAlertEnable_Handler)
	}

	_AlertService_DeleteAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	var _AlertService_DeleteAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DeleteAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "DeleteAlert", srv)
		_AlertService_DeleteAlert_Handler = h.Interceptor(_AlertService_DeleteAlert_Handler)
	}

	_AlertService_GetRawAlertExpression_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRawAlertExpression(ctx, req.(*GetRawAlertExpressionRequest))
	}
	var _AlertService_GetRawAlertExpression_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetRawAlertExpression_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetRawAlertExpression", srv)
		_AlertService_GetRawAlertExpression_Handler = h.Interceptor(_AlertService_GetRawAlertExpression_Handler)
	}

	_AlertService_QueryOrgAlertRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlertRule(ctx, req.(*QueryOrgAlertRuleRequest))
	}
	var _AlertService_QueryOrgAlertRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgAlertRule_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgAlertRule", srv)
		_AlertService_QueryOrgAlertRule_Handler = h.Interceptor(_AlertService_QueryOrgAlertRule_Handler)
	}

	_AlertService_QueryOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlert(ctx, req.(*QueryOrgAlertRequest))
	}
	var _AlertService_QueryOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgAlert", srv)
		_AlertService_QueryOrgAlert_Handler = h.Interceptor(_AlertService_QueryOrgAlert_Handler)
	}

	_AlertService_GetOrgAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgAlertDetail(ctx, req.(*GetOrgAlertDetailRequest))
	}
	var _AlertService_GetOrgAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetOrgAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetOrgAlertDetail", srv)
		_AlertService_GetOrgAlertDetail_Handler = h.Interceptor(_AlertService_GetOrgAlertDetail_Handler)
	}

	_AlertService_CreateOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgAlert(ctx, req.(*CreateOrgAlertRequest))
	}
	var _AlertService_CreateOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CreateOrgAlert", srv)
		_AlertService_CreateOrgAlert_Handler = h.Interceptor(_AlertService_CreateOrgAlert_Handler)
	}

	_AlertService_UpdateOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgAlert(ctx, req.(*UpdateOrgAlertRequest))
	}
	var _AlertService_UpdateOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateOrgAlert", srv)
		_AlertService_UpdateOrgAlert_Handler = h.Interceptor(_AlertService_UpdateOrgAlert_Handler)
	}

	_AlertService_UpdateOrgAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgAlertEnable(ctx, req.(*UpdateOrgAlertEnableRequest))
	}
	var _AlertService_UpdateOrgAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateOrgAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateOrgAlertEnable", srv)
		_AlertService_UpdateOrgAlertEnable_Handler = h.Interceptor(_AlertService_UpdateOrgAlertEnable_Handler)
	}

	_AlertService_DeleteOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteOrgAlert(ctx, req.(*DeleteOrgAlertRequest))
	}
	var _AlertService_DeleteOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DeleteOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "DeleteOrgAlert", srv)
		_AlertService_DeleteOrgAlert_Handler = h.Interceptor(_AlertService_DeleteOrgAlert_Handler)
	}

	_AlertService_GetAlertRecordAttr_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecordAttr(ctx, req.(*GetAlertRecordAttrRequest))
	}
	var _AlertService_GetAlertRecordAttr_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertRecordAttr_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlertRecordAttr", srv)
		_AlertService_GetAlertRecordAttr_Handler = h.Interceptor(_AlertService_GetAlertRecordAttr_Handler)
	}

	_AlertService_QueryAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertRecord(ctx, req.(*QueryAlertRecordRequest))
	}
	var _AlertService_QueryAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryAlertRecord", srv)
		_AlertService_QueryAlertRecord_Handler = h.Interceptor(_AlertService_QueryAlertRecord_Handler)
	}

	_AlertService_GetAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecord(ctx, req.(*GetAlertRecordRequest))
	}
	var _AlertService_GetAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlertRecord", srv)
		_AlertService_GetAlertRecord_Handler = h.Interceptor(_AlertService_GetAlertRecord_Handler)
	}

	_AlertService_QueryAlertHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertHistory(ctx, req.(*QueryAlertHistoryRequest))
	}
	var _AlertService_QueryAlertHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryAlertHistory_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryAlertHistory", srv)
		_AlertService_QueryAlertHistory_Handler = h.Interceptor(_AlertService_QueryAlertHistory_Handler)
	}

	_AlertService_CreateAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAlertIssue(ctx, req.(*CreateAlertIssueRequest))
	}
	var _AlertService_CreateAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CreateAlertIssue", srv)
		_AlertService_CreateAlertIssue_Handler = h.Interceptor(_AlertService_CreateAlertIssue_Handler)
	}

	_AlertService_UpdateAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlertIssue(ctx, req.(*UpdateAlertIssueRequest))
	}
	var _AlertService_UpdateAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateAlertIssue", srv)
		_AlertService_UpdateAlertIssue_Handler = h.Interceptor(_AlertService_UpdateAlertIssue_Handler)
	}

	_AlertService_GetOrgAlertRecordAttr_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgAlertRecordAttr(ctx, req.(*GetOrgAlertRecordAttrRequest))
	}
	var _AlertService_GetOrgAlertRecordAttr_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetOrgAlertRecordAttr_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetOrgAlertRecordAttr", srv)
		_AlertService_GetOrgAlertRecordAttr_Handler = h.Interceptor(_AlertService_GetOrgAlertRecordAttr_Handler)
	}

	_AlertService_QueryOrgAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlertRecord(ctx, req.(*QueryOrgAlertRecordRequest))
	}
	var _AlertService_QueryOrgAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgAlertRecord", srv)
		_AlertService_QueryOrgAlertRecord_Handler = h.Interceptor(_AlertService_QueryOrgAlertRecord_Handler)
	}

	_AlertService_QueryOrgHostsAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgHostsAlertRecord(ctx, req.(*QueryOrgHostsAlertRecordRequest))
	}
	var _AlertService_QueryOrgHostsAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgHostsAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgHostsAlertRecord", srv)
		_AlertService_QueryOrgHostsAlertRecord_Handler = h.Interceptor(_AlertService_QueryOrgHostsAlertRecord_Handler)
	}

	_AlertService_GetOrgAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgAlertRecord(ctx, req.(*GetOrgAlertRecordRequest))
	}
	var _AlertService_GetOrgAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetOrgAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetOrgAlertRecord", srv)
		_AlertService_GetOrgAlertRecord_Handler = h.Interceptor(_AlertService_GetOrgAlertRecord_Handler)
	}

	_AlertService_QueryOrgAlertHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlertHistory(ctx, req.(*QueryOrgAlertHistoryRequest))
	}
	var _AlertService_QueryOrgAlertHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryOrgAlertHistory_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "QueryOrgAlertHistory", srv)
		_AlertService_QueryOrgAlertHistory_Handler = h.Interceptor(_AlertService_QueryOrgAlertHistory_Handler)
	}

	_AlertService_CreateOrgAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgAlertIssue(ctx, req.(*CreateOrgAlertIssueRequest))
	}
	var _AlertService_CreateOrgAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateOrgAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CreateOrgAlertIssue", srv)
		_AlertService_CreateOrgAlertIssue_Handler = h.Interceptor(_AlertService_CreateOrgAlertIssue_Handler)
	}

	_AlertService_UpdateOrgAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgAlertIssue(ctx, req.(*UpdateOrgAlertIssueRequest))
	}
	var _AlertService_UpdateOrgAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateOrgAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "UpdateOrgAlertIssue", srv)
		_AlertService_UpdateOrgAlertIssue_Handler = h.Interceptor(_AlertService_UpdateOrgAlertIssue_Handler)
	}

	_AlertService_GetAlertConditions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertConditions(ctx, req.(*GetAlertConditionsRequest))
	}
	var _AlertService_GetAlertConditions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertConditions_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlertConditions", srv)
		_AlertService_GetAlertConditions_Handler = h.Interceptor(_AlertService_GetAlertConditions_Handler)
	}

	_AlertService_GetAlertConditionsValue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertConditionsValue(ctx, req.(*GetAlertConditionsValueRequest))
	}
	var _AlertService_GetAlertConditionsValue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertConditionsValue_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlertConditionsValue", srv)
		_AlertService_GetAlertConditionsValue_Handler = h.Interceptor(_AlertService_GetAlertConditionsValue_Handler)
	}

	_AlertService_GetAlertEvents_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertEvents(ctx, req.(*GetAlertEventRequest))
	}
	var _AlertService_GetAlertEvents_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertEvents_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "GetAlertEvents", srv)
		_AlertService_GetAlertEvents_Handler = h.Interceptor(_AlertService_GetAlertEvents_Handler)
	}

	_AlertService_SuppressAlertEvent_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SuppressAlertEvent(ctx, req.(*SuppressAlertEventRequest))
	}
	var _AlertService_SuppressAlertEvent_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_SuppressAlertEvent_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "SuppressAlertEvent", srv)
		_AlertService_SuppressAlertEvent_Handler = h.Interceptor(_AlertService_SuppressAlertEvent_Handler)
	}

	_AlertService_CancelSuppressAlertEvent_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CancelSuppressAlertEvent(ctx, req.(*CancelSuppressAlertEventRequest))
	}
	var _AlertService_CancelSuppressAlertEvent_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CancelSuppressAlertEvent_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CancelSuppressAlertEvent", srv)
		_AlertService_CancelSuppressAlertEvent_Handler = h.Interceptor(_AlertService_CancelSuppressAlertEvent_Handler)
	}

	_AlertService_CountUnRecoverAlertEvents_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CountUnRecoverAlertEvents(ctx, req.(*CountUnRecoverAlertEventsRequest))
	}
	var _AlertService_CountUnRecoverAlertEvents_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CountUnRecoverAlertEvents_info = transport.NewServiceInfo("erda.core.monitor.alert.AlertService", "CountUnRecoverAlertEvents", srv)
		_AlertService_CountUnRecoverAlertEvents_Handler = h.Interceptor(_AlertService_CountUnRecoverAlertEvents_Handler)
	}

	var serviceDesc = _AlertService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "QueryCustomizeMetric",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeMetricRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryCustomizeMetric(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryCustomizeMetric_info)
				}
				if interceptor == nil {
					return _AlertService_QueryCustomizeMetric_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryCustomizeMetric",
				}
				return interceptor(ctx, in, info, _AlertService_QueryCustomizeMetric_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeNotifyTarget",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeNotifyTargetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryCustomizeNotifyTarget(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryCustomizeNotifyTarget_info)
				}
				if interceptor == nil {
					return _AlertService_QueryCustomizeNotifyTarget_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryCustomizeNotifyTarget",
				}
				return interceptor(ctx, in, info, _AlertService_QueryCustomizeNotifyTarget_Handler)
			},
		},
		{
			MethodName: "QueryOrgCustomizeNotifyTarget",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgCustomizeNotifyTargetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgCustomizeNotifyTarget(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgCustomizeNotifyTarget_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgCustomizeNotifyTarget_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgCustomizeNotifyTarget",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgCustomizeNotifyTarget_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_QueryCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_QueryCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "GetCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_GetCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_GetCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "GetCustomizeAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomizeAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetCustomizeAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetCustomizeAlertDetail_info)
				}
				if interceptor == nil {
					return _AlertService_GetCustomizeAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetCustomizeAlertDetail",
				}
				return interceptor(ctx, in, info, _AlertService_GetCustomizeAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_CreateCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CreateCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_CreateCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateCustomizeAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomizeAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateCustomizeAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateCustomizeAlertEnable_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateCustomizeAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateCustomizeAlertEnable",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateCustomizeAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DeleteCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DeleteCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_DeleteCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/DeleteCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_DeleteCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "QueryOrgCustomizeMetric",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgCustomizeMetricRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgCustomizeMetric(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgCustomizeMetric_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgCustomizeMetric_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgCustomizeMetric",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgCustomizeMetric_Handler)
			},
		},
		{
			MethodName: "QueryOrgCustomizeAlerts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgCustomizeAlertsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgCustomizeAlerts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgCustomizeAlerts_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgCustomizeAlerts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgCustomizeAlerts",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgCustomizeAlerts_Handler)
			},
		},
		{
			MethodName: "GetOrgCustomizeAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgCustomizeAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetOrgCustomizeAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetOrgCustomizeAlertDetail_info)
				}
				if interceptor == nil {
					return _AlertService_GetOrgCustomizeAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetOrgCustomizeAlertDetail",
				}
				return interceptor(ctx, in, info, _AlertService_GetOrgCustomizeAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateOrgCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateOrgCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateOrgCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_CreateOrgCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CreateOrgCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_CreateOrgCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateOrgCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateOrgCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateOrgCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateOrgCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateOrgCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgCustomizeAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgCustomizeAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateOrgCustomizeAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateOrgCustomizeAlertEnable_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateOrgCustomizeAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateOrgCustomizeAlertEnable",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateOrgCustomizeAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteOrgCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteOrgCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DeleteOrgCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DeleteOrgCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_DeleteOrgCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/DeleteOrgCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_DeleteOrgCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "QueryDashboardByAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryDashboardByAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryDashboardByAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryDashboardByAlert_info)
				}
				if interceptor == nil {
					return _AlertService_QueryDashboardByAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryDashboardByAlert",
				}
				return interceptor(ctx, in, info, _AlertService_QueryDashboardByAlert_Handler)
			},
		},
		{
			MethodName: "QueryOrgDashboardByAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgDashboardByAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgDashboardByAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgDashboardByAlert_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgDashboardByAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgDashboardByAlert",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgDashboardByAlert_Handler)
			},
		},
		{
			MethodName: "QueryAlertRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryAlertRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryAlertRule_info)
				}
				if interceptor == nil {
					return _AlertService_QueryAlertRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryAlertRule",
				}
				return interceptor(ctx, in, info, _AlertService_QueryAlertRule_Handler)
			},
		},
		{
			MethodName: "QueryAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryAlert_info)
				}
				if interceptor == nil {
					return _AlertService_QueryAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryAlert",
				}
				return interceptor(ctx, in, info, _AlertService_QueryAlert_Handler)
			},
		},
		{
			MethodName: "GetAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlert_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlert",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlert_Handler)
			},
		},
		{
			MethodName: "GetAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertDetail_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlertDetail",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateAlert_info)
				}
				if interceptor == nil {
					return _AlertService_CreateAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CreateAlert",
				}
				return interceptor(ctx, in, info, _AlertService_CreateAlert_Handler)
			},
		},
		{
			MethodName: "UpdateAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateAlert_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateAlert",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateAlert_Handler)
			},
		},
		{
			MethodName: "UpdateAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateAlertEnable_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateAlertEnable",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DeleteAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DeleteAlert_info)
				}
				if interceptor == nil {
					return _AlertService_DeleteAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/DeleteAlert",
				}
				return interceptor(ctx, in, info, _AlertService_DeleteAlert_Handler)
			},
		},
		{
			MethodName: "GetRawAlertExpression",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetRawAlertExpressionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetRawAlertExpression(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetRawAlertExpression_info)
				}
				if interceptor == nil {
					return _AlertService_GetRawAlertExpression_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetRawAlertExpression",
				}
				return interceptor(ctx, in, info, _AlertService_GetRawAlertExpression_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlertRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgAlertRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgAlertRule_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgAlertRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgAlertRule",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgAlertRule_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgAlert_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgAlert",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgAlert_Handler)
			},
		},
		{
			MethodName: "GetOrgAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetOrgAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetOrgAlertDetail_info)
				}
				if interceptor == nil {
					return _AlertService_GetOrgAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetOrgAlertDetail",
				}
				return interceptor(ctx, in, info, _AlertService_GetOrgAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateOrgAlert_info)
				}
				if interceptor == nil {
					return _AlertService_CreateOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CreateOrgAlert",
				}
				return interceptor(ctx, in, info, _AlertService_CreateOrgAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateOrgAlert_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateOrgAlert",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateOrgAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateOrgAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateOrgAlertEnable_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateOrgAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateOrgAlertEnable",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateOrgAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DeleteOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DeleteOrgAlert_info)
				}
				if interceptor == nil {
					return _AlertService_DeleteOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/DeleteOrgAlert",
				}
				return interceptor(ctx, in, info, _AlertService_DeleteOrgAlert_Handler)
			},
		},
		{
			MethodName: "GetAlertRecordAttr",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordAttrRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertRecordAttr(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertRecordAttr_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertRecordAttr_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlertRecordAttr",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertRecordAttr_Handler)
			},
		},
		{
			MethodName: "QueryAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryAlertRecord_info)
				}
				if interceptor == nil {
					return _AlertService_QueryAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryAlertRecord",
				}
				return interceptor(ctx, in, info, _AlertService_QueryAlertRecord_Handler)
			},
		},
		{
			MethodName: "GetAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertRecord_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlertRecord",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertRecord_Handler)
			},
		},
		{
			MethodName: "QueryAlertHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryAlertHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryAlertHistory_info)
				}
				if interceptor == nil {
					return _AlertService_QueryAlertHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryAlertHistory",
				}
				return interceptor(ctx, in, info, _AlertService_QueryAlertHistory_Handler)
			},
		},
		{
			MethodName: "CreateAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateAlertIssue_info)
				}
				if interceptor == nil {
					return _AlertService_CreateAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CreateAlertIssue",
				}
				return interceptor(ctx, in, info, _AlertService_CreateAlertIssue_Handler)
			},
		},
		{
			MethodName: "UpdateAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateAlertIssue_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateAlertIssue",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateAlertIssue_Handler)
			},
		},
		{
			MethodName: "GetOrgAlertRecordAttr",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgAlertRecordAttrRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetOrgAlertRecordAttr(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetOrgAlertRecordAttr_info)
				}
				if interceptor == nil {
					return _AlertService_GetOrgAlertRecordAttr_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetOrgAlertRecordAttr",
				}
				return interceptor(ctx, in, info, _AlertService_GetOrgAlertRecordAttr_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgAlertRecord_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgAlertRecord",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgAlertRecord_Handler)
			},
		},
		{
			MethodName: "QueryOrgHostsAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgHostsAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgHostsAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgHostsAlertRecord_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgHostsAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgHostsAlertRecord",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgHostsAlertRecord_Handler)
			},
		},
		{
			MethodName: "GetOrgAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetOrgAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetOrgAlertRecord_info)
				}
				if interceptor == nil {
					return _AlertService_GetOrgAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetOrgAlertRecord",
				}
				return interceptor(ctx, in, info, _AlertService_GetOrgAlertRecord_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlertHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryOrgAlertHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryOrgAlertHistory_info)
				}
				if interceptor == nil {
					return _AlertService_QueryOrgAlertHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/QueryOrgAlertHistory",
				}
				return interceptor(ctx, in, info, _AlertService_QueryOrgAlertHistory_Handler)
			},
		},
		{
			MethodName: "CreateOrgAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateOrgAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateOrgAlertIssue_info)
				}
				if interceptor == nil {
					return _AlertService_CreateOrgAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CreateOrgAlertIssue",
				}
				return interceptor(ctx, in, info, _AlertService_CreateOrgAlertIssue_Handler)
			},
		},
		{
			MethodName: "UpdateOrgAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateOrgAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateOrgAlertIssue_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateOrgAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/UpdateOrgAlertIssue",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateOrgAlertIssue_Handler)
			},
		},
		{
			MethodName: "GetAlertConditions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertConditionsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertConditions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertConditions_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertConditions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlertConditions",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertConditions_Handler)
			},
		},
		{
			MethodName: "GetAlertConditionsValue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertConditionsValueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertConditionsValue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertConditionsValue_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertConditionsValue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlertConditionsValue",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertConditionsValue_Handler)
			},
		},
		{
			MethodName: "GetAlertEvents",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertEventRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertEvents(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertEvents_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertEvents_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/GetAlertEvents",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertEvents_Handler)
			},
		},
		{
			MethodName: "SuppressAlertEvent",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SuppressAlertEventRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).SuppressAlertEvent(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_SuppressAlertEvent_info)
				}
				if interceptor == nil {
					return _AlertService_SuppressAlertEvent_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/SuppressAlertEvent",
				}
				return interceptor(ctx, in, info, _AlertService_SuppressAlertEvent_Handler)
			},
		},
		{
			MethodName: "CancelSuppressAlertEvent",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CancelSuppressAlertEventRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CancelSuppressAlertEvent(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CancelSuppressAlertEvent_info)
				}
				if interceptor == nil {
					return _AlertService_CancelSuppressAlertEvent_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CancelSuppressAlertEvent",
				}
				return interceptor(ctx, in, info, _AlertService_CancelSuppressAlertEvent_Handler)
			},
		},
		{
			MethodName: "CountUnRecoverAlertEvents",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CountUnRecoverAlertEventsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CountUnRecoverAlertEvents(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CountUnRecoverAlertEvents_info)
				}
				if interceptor == nil {
					return _AlertService_CountUnRecoverAlertEvents_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.AlertService/CountUnRecoverAlertEvents",
				}
				return interceptor(ctx, in, info, _AlertService_CountUnRecoverAlertEvents_Handler)
			},
		},
	}
	return &serviceDesc
}
