// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: alert.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/monitor/alert/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// AlertService alert.proto
	AlertService() pb.AlertServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		alertService: pb.NewAlertServiceClient(cc),
	}
}

type serviceClients struct {
	alertService pb.AlertServiceClient
}

func (c *serviceClients) AlertService() pb.AlertServiceClient {
	return c.alertService
}

type alertServiceWrapper struct {
	client pb.AlertServiceClient
	opts   []grpc1.CallOption
}

func (s *alertServiceWrapper) QueryCustomizeMetric(ctx context.Context, req *pb.QueryCustomizeMetricRequest) (*pb.QueryCustomizeMetricResponse, error) {
	return s.client.QueryCustomizeMetric(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryCustomizeNotifyTarget(ctx context.Context, req *pb.QueryCustomizeNotifyTargetRequest) (*pb.QueryCustomizeNotifyTargetResponse, error) {
	return s.client.QueryCustomizeNotifyTarget(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgCustomizeNotifyTarget(ctx context.Context, req *pb.QueryOrgCustomizeNotifyTargetRequest) (*pb.QueryOrgCustomizeNotifyTargetResponse, error) {
	return s.client.QueryOrgCustomizeNotifyTarget(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryCustomizeAlert(ctx context.Context, req *pb.QueryCustomizeAlertRequest) (*pb.QueryCustomizeAlertResponse, error) {
	return s.client.QueryCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetCustomizeAlert(ctx context.Context, req *pb.GetCustomizeAlertRequest) (*pb.GetCustomizeAlertResponse, error) {
	return s.client.GetCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetCustomizeAlertDetail(ctx context.Context, req *pb.GetCustomizeAlertDetailRequest) (*pb.GetCustomizeAlertDetailResponse, error) {
	return s.client.GetCustomizeAlertDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateCustomizeAlert(ctx context.Context, req *pb.CreateCustomizeAlertRequest) (*pb.CreateCustomizeAlertResponse, error) {
	return s.client.CreateCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateCustomizeAlert(ctx context.Context, req *pb.UpdateCustomizeAlertRequest) (*pb.UpdateCustomizeAlertResponse, error) {
	return s.client.UpdateCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateCustomizeAlertEnable(ctx context.Context, req *pb.UpdateCustomizeAlertEnableRequest) (*pb.UpdateCustomizeAlertEnableResponse, error) {
	return s.client.UpdateCustomizeAlertEnable(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DeleteCustomizeAlert(ctx context.Context, req *pb.DeleteCustomizeAlertRequest) (*pb.DeleteCustomizeAlertResponse, error) {
	return s.client.DeleteCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgCustomizeMetric(ctx context.Context, req *pb.QueryOrgCustomizeMetricRequest) (*pb.QueryOrgCustomizeMetricResponse, error) {
	return s.client.QueryOrgCustomizeMetric(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgCustomizeAlerts(ctx context.Context, req *pb.QueryOrgCustomizeAlertsRequest) (*pb.QueryOrgCustomizeAlertsResponse, error) {
	return s.client.QueryOrgCustomizeAlerts(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetOrgCustomizeAlertDetail(ctx context.Context, req *pb.GetOrgCustomizeAlertDetailRequest) (*pb.GetOrgCustomizeAlertDetailResponse, error) {
	return s.client.GetOrgCustomizeAlertDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateOrgCustomizeAlert(ctx context.Context, req *pb.CreateOrgCustomizeAlertRequest) (*pb.CreateOrgCustomizeAlertResponse, error) {
	return s.client.CreateOrgCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateOrgCustomizeAlert(ctx context.Context, req *pb.UpdateOrgCustomizeAlertRequest) (*pb.UpdateOrgCustomizeAlertResponse, error) {
	return s.client.UpdateOrgCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateOrgCustomizeAlertEnable(ctx context.Context, req *pb.UpdateOrgCustomizeAlertEnableRequest) (*pb.UpdateOrgCustomizeAlertEnableResponse, error) {
	return s.client.UpdateOrgCustomizeAlertEnable(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DeleteOrgCustomizeAlert(ctx context.Context, req *pb.DeleteOrgCustomizeAlertRequest) (*pb.DeleteOrgCustomizeAlertResponse, error) {
	return s.client.DeleteOrgCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryDashboardByAlert(ctx context.Context, req *pb.QueryDashboardByAlertRequest) (*pb.QueryDashboardByAlertResponse, error) {
	return s.client.QueryDashboardByAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgDashboardByAlert(ctx context.Context, req *pb.QueryOrgDashboardByAlertRequest) (*pb.QueryOrgDashboardByAlertResponse, error) {
	return s.client.QueryOrgDashboardByAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryAlertRule(ctx context.Context, req *pb.QueryAlertRuleRequest) (*pb.QueryAlertRuleResponse, error) {
	return s.client.QueryAlertRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryAlert(ctx context.Context, req *pb.QueryAlertRequest) (*pb.QueryAlertsResponse, error) {
	return s.client.QueryAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlert(ctx context.Context, req *pb.GetAlertRequest) (*pb.GetAlertResponse, error) {
	return s.client.GetAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertDetail(ctx context.Context, req *pb.GetAlertDetailRequest) (*pb.GetAlertDetailResponse, error) {
	return s.client.GetAlertDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateAlert(ctx context.Context, req *pb.CreateAlertRequest) (*pb.CreateAlertResponse, error) {
	return s.client.CreateAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateAlert(ctx context.Context, req *pb.UpdateAlertRequest) (*pb.UpdateAlertResponse, error) {
	return s.client.UpdateAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateAlertEnable(ctx context.Context, req *pb.UpdateAlertEnableRequest) (*pb.UpdateAlertEnableResponse, error) {
	return s.client.UpdateAlertEnable(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DeleteAlert(ctx context.Context, req *pb.DeleteAlertRequest) (*pb.DeleteAlertResponse, error) {
	return s.client.DeleteAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetRawAlertExpression(ctx context.Context, req *pb.GetRawAlertExpressionRequest) (*pb.GetRawAlertExpressionResponse, error) {
	return s.client.GetRawAlertExpression(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgAlertRule(ctx context.Context, req *pb.QueryOrgAlertRuleRequest) (*pb.QueryOrgAlertRuleResponse, error) {
	return s.client.QueryOrgAlertRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgAlert(ctx context.Context, req *pb.QueryOrgAlertRequest) (*pb.QueryOrgAlertResponse, error) {
	return s.client.QueryOrgAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetOrgAlertDetail(ctx context.Context, req *pb.GetOrgAlertDetailRequest) (*pb.GetOrgAlertDetailResponse, error) {
	return s.client.GetOrgAlertDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateOrgAlert(ctx context.Context, req *pb.CreateOrgAlertRequest) (*pb.CreateOrgAlertResponse, error) {
	return s.client.CreateOrgAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateOrgAlert(ctx context.Context, req *pb.UpdateOrgAlertRequest) (*pb.UpdateOrgAlertResponse, error) {
	return s.client.UpdateOrgAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateOrgAlertEnable(ctx context.Context, req *pb.UpdateOrgAlertEnableRequest) (*pb.UpdateOrgAlertEnableResponse, error) {
	return s.client.UpdateOrgAlertEnable(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DeleteOrgAlert(ctx context.Context, req *pb.DeleteOrgAlertRequest) (*pb.DeleteOrgAlertResponse, error) {
	return s.client.DeleteOrgAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertRecordAttr(ctx context.Context, req *pb.GetAlertRecordAttrRequest) (*pb.GetAlertRecordAttrResponse, error) {
	return s.client.GetAlertRecordAttr(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryAlertRecord(ctx context.Context, req *pb.QueryAlertRecordRequest) (*pb.QueryAlertRecordResponse, error) {
	return s.client.QueryAlertRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertRecord(ctx context.Context, req *pb.GetAlertRecordRequest) (*pb.GetAlertRecordResponse, error) {
	return s.client.GetAlertRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryAlertHistory(ctx context.Context, req *pb.QueryAlertHistoryRequest) (*pb.QueryAlertHistoryResponse, error) {
	return s.client.QueryAlertHistory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateAlertIssue(ctx context.Context, req *pb.CreateAlertIssueRequest) (*pb.CreateAlertIssueResponse, error) {
	return s.client.CreateAlertIssue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateAlertIssue(ctx context.Context, req *pb.UpdateAlertIssueRequest) (*pb.UpdateAlertIssueResponse, error) {
	return s.client.UpdateAlertIssue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetOrgAlertRecordAttr(ctx context.Context, req *pb.GetOrgAlertRecordAttrRequest) (*pb.GetOrgAlertRecordAttrResponse, error) {
	return s.client.GetOrgAlertRecordAttr(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgAlertRecord(ctx context.Context, req *pb.QueryOrgAlertRecordRequest) (*pb.QueryOrgAlertRecordResponse, error) {
	return s.client.QueryOrgAlertRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgHostsAlertRecord(ctx context.Context, req *pb.QueryOrgHostsAlertRecordRequest) (*pb.QueryOrgAlertRecordResponse, error) {
	return s.client.QueryOrgHostsAlertRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetOrgAlertRecord(ctx context.Context, req *pb.GetOrgAlertRecordRequest) (*pb.GetOrgAlertRecordResponse, error) {
	return s.client.GetOrgAlertRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryOrgAlertHistory(ctx context.Context, req *pb.QueryOrgAlertHistoryRequest) (*pb.QueryOrgAlertHistoryResponse, error) {
	return s.client.QueryOrgAlertHistory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateOrgAlertIssue(ctx context.Context, req *pb.CreateOrgAlertIssueRequest) (*pb.CreateOrgAlertIssueResponse, error) {
	return s.client.CreateOrgAlertIssue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateOrgAlertIssue(ctx context.Context, req *pb.UpdateOrgAlertIssueRequest) (*pb.UpdateOrgAlertIssueResponse, error) {
	return s.client.UpdateOrgAlertIssue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertConditions(ctx context.Context, req *pb.GetAlertConditionsRequest) (*pb.GetAlertConditionsResponse, error) {
	return s.client.GetAlertConditions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertConditionsValue(ctx context.Context, req *pb.GetAlertConditionsValueRequest) (*pb.GetAlertConditionsValueResponse, error) {
	return s.client.GetAlertConditionsValue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertEvents(ctx context.Context, req *pb.GetAlertEventRequest) (*pb.GetAlertEventResponse, error) {
	return s.client.GetAlertEvents(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) SuppressAlertEvent(ctx context.Context, req *pb.SuppressAlertEventRequest) (*pb.SuppressAlertEventResponse, error) {
	return s.client.SuppressAlertEvent(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CancelSuppressAlertEvent(ctx context.Context, req *pb.CancelSuppressAlertEventRequest) (*pb.CancelSuppressAlertEventResponse, error) {
	return s.client.CancelSuppressAlertEvent(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CountUnRecoverAlertEvents(ctx context.Context, req *pb.CountUnRecoverAlertEventsRequest) (*pb.CountUnRecoverAlertEventsResponse, error) {
	return s.client.CountUnRecoverAlertEvents(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
