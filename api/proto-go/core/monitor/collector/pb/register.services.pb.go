// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: collector.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterCollectorServiceImp collector.proto
func RegisterCollectorServiceImp(regester transport.Register, srv CollectorServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterCollectorServiceHandler(regester, CollectorServiceHandler(srv), _ops.HTTP...)
	RegisterCollectorServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.monitor.collector.CollectorService",
	)
}

var (
	collectorServiceClientType  = reflect.TypeOf((*CollectorServiceClient)(nil)).Elem()
	collectorServiceServerType  = reflect.TypeOf((*CollectorServiceServer)(nil)).Elem()
	collectorServiceHandlerType = reflect.TypeOf((*CollectorServiceHandler)(nil)).Elem()
)

// CollectorServiceClientType .
func CollectorServiceClientType() reflect.Type { return collectorServiceClientType }

// CollectorServiceServerType .
func CollectorServiceServerType() reflect.Type { return collectorServiceServerType }

// CollectorServiceHandlerType .
func CollectorServiceHandlerType() reflect.Type { return collectorServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		collectorServiceClientType,
		// server types
		collectorServiceServerType,
		// handler types
		collectorServiceHandlerType,
	}
}
