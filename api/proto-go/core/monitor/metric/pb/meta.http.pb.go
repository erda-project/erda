// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: meta.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MetricMetaServiceHandler is the server API for MetricMetaService service.
type MetricMetaServiceHandler interface {
	// GET /api/metric-names
	ListMetricNames(context.Context, *ListMetricNamesRequest) (*ListMetricNamesResponse, error)
	// GET /api/metric-meta
	ListMetricMeta(context.Context, *ListMetricMetaRequest) (*ListMetricMetaResponse, error)
	// POST /api/metric-meta
	RegisterMetricMeta(context.Context, *RegisterMetricMetaRequest) (*RegisterMetricMetaResponse, error)
	// DELETE /api/metric-meta
	UnRegisterMetricMeta(context.Context, *UnRegisterMetricMetaRequest) (*UnRegisterMetricMetaResponse, error)
	// GET /api/metric-groups
	ListMetricGroups(context.Context, *ListMetricGroupsRequest) (*ListMetricGroupsResponse, error)
	// GET /api/metric-groups/{id}
	GetMetricGroup(context.Context, *GetMetricGroupRequest) (*GetMetricGroupResponse, error)
}

// RegisterMetricMetaServiceHandler register MetricMetaServiceHandler to http.Router.
func RegisterMetricMetaServiceHandler(r http.Router, srv MetricMetaServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ListMetricNames := func(method, path string, fn func(context.Context, *ListMetricNamesRequest) (*ListMetricNamesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListMetricNamesRequest))
		}
		var ListMetricNames_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListMetricNames_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricMetaService", "ListMetricNames", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListMetricNames_info)
				}
				r = r.WithContext(ctx)
				var in ListMetricNamesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["scopeId"]; len(vals) > 0 {
					in.ScopeID = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListMetricMeta := func(method, path string, fn func(context.Context, *ListMetricMetaRequest) (*ListMetricMetaResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListMetricMetaRequest))
		}
		var ListMetricMeta_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListMetricMeta_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricMetaService", "ListMetricMeta", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListMetricMeta_info)
				}
				r = r.WithContext(ctx)
				var in ListMetricMetaRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["scopeId"]; len(vals) > 0 {
					in.ScopeID = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_RegisterMetricMeta := func(method, path string, fn func(context.Context, *RegisterMetricMetaRequest) (*RegisterMetricMetaResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*RegisterMetricMetaRequest))
		}
		var RegisterMetricMeta_info transport.ServiceInfo
		if h.Interceptor != nil {
			RegisterMetricMeta_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricMetaService", "RegisterMetricMeta", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, RegisterMetricMeta_info)
				}
				r = r.WithContext(ctx)
				var in RegisterMetricMetaRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UnRegisterMetricMeta := func(method, path string, fn func(context.Context, *UnRegisterMetricMetaRequest) (*UnRegisterMetricMetaResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UnRegisterMetricMetaRequest))
		}
		var UnRegisterMetricMeta_info transport.ServiceInfo
		if h.Interceptor != nil {
			UnRegisterMetricMeta_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricMetaService", "UnRegisterMetricMeta", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UnRegisterMetricMeta_info)
				}
				r = r.WithContext(ctx)
				var in UnRegisterMetricMetaRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListMetricGroups := func(method, path string, fn func(context.Context, *ListMetricGroupsRequest) (*ListMetricGroupsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListMetricGroupsRequest))
		}
		var ListMetricGroups_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListMetricGroups_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricMetaService", "ListMetricGroups", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListMetricGroups_info)
				}
				r = r.WithContext(ctx)
				var in ListMetricGroupsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["scopeId"]; len(vals) > 0 {
					in.ScopeID = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetMetricGroup := func(method, path string, fn func(context.Context, *GetMetricGroupRequest) (*GetMetricGroupResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetMetricGroupRequest))
		}
		var GetMetricGroup_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetMetricGroup_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricMetaService", "GetMetricGroup", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetMetricGroup_info)
				}
				r = r.WithContext(ctx)
				var in GetMetricGroupRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["scopeId"]; len(vals) > 0 {
					in.ScopeID = vals[0]
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListMetricNames("GET", "/api/metric-names", srv.ListMetricNames)
	add_ListMetricMeta("GET", "/api/metric-meta", srv.ListMetricMeta)
	add_RegisterMetricMeta("POST", "/api/metric-meta", srv.RegisterMetricMeta)
	add_UnRegisterMetricMeta("DELETE", "/api/metric-meta", srv.UnRegisterMetricMeta)
	add_ListMetricGroups("GET", "/api/metric-groups", srv.ListMetricGroups)
	add_GetMetricGroup("GET", "/api/metric-groups/{id}", srv.GetMetricGroup)
}
