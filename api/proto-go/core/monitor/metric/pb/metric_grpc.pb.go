// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: metric.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceClient interface {
	QueryWithInfluxFormat(ctx context.Context, in *QueryWithInfluxFormatRequest, opts ...grpc.CallOption) (*QueryWithInfluxFormatResponse, error)
	SearchWithInfluxFormat(ctx context.Context, in *QueryWithInfluxFormatRequest, opts ...grpc.CallOption) (*QueryWithInfluxFormatResponse, error)
	QueryWithTableFormat(ctx context.Context, in *QueryWithTableFormatRequest, opts ...grpc.CallOption) (*QueryWithTableFormatResponse, error)
	SearchWithTableFormat(ctx context.Context, in *QueryWithTableFormatRequest, opts ...grpc.CallOption) (*QueryWithTableFormatResponse, error)
	GeneralQuery(ctx context.Context, in *GeneralQueryRequest, opts ...grpc.CallOption) (*GeneralQueryResponse, error)
	GeneralSearch(ctx context.Context, in *GeneralQueryRequest, opts ...grpc.CallOption) (*GeneralQueryResponse, error)
}

type metricServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMetricServiceClient(cc grpc1.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) QueryWithInfluxFormat(ctx context.Context, in *QueryWithInfluxFormatRequest, opts ...grpc.CallOption) (*QueryWithInfluxFormatResponse, error) {
	out := new(QueryWithInfluxFormatResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.metric.MetricService/QueryWithInfluxFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) SearchWithInfluxFormat(ctx context.Context, in *QueryWithInfluxFormatRequest, opts ...grpc.CallOption) (*QueryWithInfluxFormatResponse, error) {
	out := new(QueryWithInfluxFormatResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.metric.MetricService/SearchWithInfluxFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) QueryWithTableFormat(ctx context.Context, in *QueryWithTableFormatRequest, opts ...grpc.CallOption) (*QueryWithTableFormatResponse, error) {
	out := new(QueryWithTableFormatResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.metric.MetricService/QueryWithTableFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) SearchWithTableFormat(ctx context.Context, in *QueryWithTableFormatRequest, opts ...grpc.CallOption) (*QueryWithTableFormatResponse, error) {
	out := new(QueryWithTableFormatResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.metric.MetricService/SearchWithTableFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) GeneralQuery(ctx context.Context, in *GeneralQueryRequest, opts ...grpc.CallOption) (*GeneralQueryResponse, error) {
	out := new(GeneralQueryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.metric.MetricService/GeneralQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) GeneralSearch(ctx context.Context, in *GeneralQueryRequest, opts ...grpc.CallOption) (*GeneralQueryResponse, error) {
	out := new(GeneralQueryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.metric.MetricService/GeneralSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations should embed UnimplementedMetricServiceServer
// for forward compatibility
type MetricServiceServer interface {
	QueryWithInfluxFormat(context.Context, *QueryWithInfluxFormatRequest) (*QueryWithInfluxFormatResponse, error)
	SearchWithInfluxFormat(context.Context, *QueryWithInfluxFormatRequest) (*QueryWithInfluxFormatResponse, error)
	QueryWithTableFormat(context.Context, *QueryWithTableFormatRequest) (*QueryWithTableFormatResponse, error)
	SearchWithTableFormat(context.Context, *QueryWithTableFormatRequest) (*QueryWithTableFormatResponse, error)
	GeneralQuery(context.Context, *GeneralQueryRequest) (*GeneralQueryResponse, error)
	GeneralSearch(context.Context, *GeneralQueryRequest) (*GeneralQueryResponse, error)
}

// UnimplementedMetricServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetricServiceServer struct {
}

func (*UnimplementedMetricServiceServer) QueryWithInfluxFormat(context.Context, *QueryWithInfluxFormatRequest) (*QueryWithInfluxFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithInfluxFormat not implemented")
}
func (*UnimplementedMetricServiceServer) SearchWithInfluxFormat(context.Context, *QueryWithInfluxFormatRequest) (*QueryWithInfluxFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWithInfluxFormat not implemented")
}
func (*UnimplementedMetricServiceServer) QueryWithTableFormat(context.Context, *QueryWithTableFormatRequest) (*QueryWithTableFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithTableFormat not implemented")
}
func (*UnimplementedMetricServiceServer) SearchWithTableFormat(context.Context, *QueryWithTableFormatRequest) (*QueryWithTableFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWithTableFormat not implemented")
}
func (*UnimplementedMetricServiceServer) GeneralQuery(context.Context, *GeneralQueryRequest) (*GeneralQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralQuery not implemented")
}
func (*UnimplementedMetricServiceServer) GeneralSearch(context.Context, *GeneralQueryRequest) (*GeneralQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralSearch not implemented")
}

func RegisterMetricServiceServer(s grpc1.ServiceRegistrar, srv MetricServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MetricService_serviceDesc(srv, opts...), srv)
}

var _MetricService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.monitor.metric.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "metric.proto",
}

func _get_MetricService_serviceDesc(srv MetricServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MetricService_QueryWithInfluxFormat_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryWithInfluxFormat(ctx, req.(*QueryWithInfluxFormatRequest))
	}
	var _MetricService_QueryWithInfluxFormat_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MetricService_QueryWithInfluxFormat_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricService", "QueryWithInfluxFormat", srv)
		_MetricService_QueryWithInfluxFormat_Handler = h.Interceptor(_MetricService_QueryWithInfluxFormat_Handler)
	}

	_MetricService_SearchWithInfluxFormat_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SearchWithInfluxFormat(ctx, req.(*QueryWithInfluxFormatRequest))
	}
	var _MetricService_SearchWithInfluxFormat_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MetricService_SearchWithInfluxFormat_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricService", "SearchWithInfluxFormat", srv)
		_MetricService_SearchWithInfluxFormat_Handler = h.Interceptor(_MetricService_SearchWithInfluxFormat_Handler)
	}

	_MetricService_QueryWithTableFormat_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryWithTableFormat(ctx, req.(*QueryWithTableFormatRequest))
	}
	var _MetricService_QueryWithTableFormat_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MetricService_QueryWithTableFormat_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricService", "QueryWithTableFormat", srv)
		_MetricService_QueryWithTableFormat_Handler = h.Interceptor(_MetricService_QueryWithTableFormat_Handler)
	}

	_MetricService_SearchWithTableFormat_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SearchWithTableFormat(ctx, req.(*QueryWithTableFormatRequest))
	}
	var _MetricService_SearchWithTableFormat_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MetricService_SearchWithTableFormat_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricService", "SearchWithTableFormat", srv)
		_MetricService_SearchWithTableFormat_Handler = h.Interceptor(_MetricService_SearchWithTableFormat_Handler)
	}

	_MetricService_GeneralQuery_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GeneralQuery(ctx, req.(*GeneralQueryRequest))
	}
	var _MetricService_GeneralQuery_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MetricService_GeneralQuery_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricService", "GeneralQuery", srv)
		_MetricService_GeneralQuery_Handler = h.Interceptor(_MetricService_GeneralQuery_Handler)
	}

	_MetricService_GeneralSearch_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GeneralSearch(ctx, req.(*GeneralQueryRequest))
	}
	var _MetricService_GeneralSearch_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MetricService_GeneralSearch_info = transport.NewServiceInfo("erda.core.monitor.metric.MetricService", "GeneralSearch", srv)
		_MetricService_GeneralSearch_Handler = h.Interceptor(_MetricService_GeneralSearch_Handler)
	}

	var serviceDesc = _MetricService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "QueryWithInfluxFormat",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryWithInfluxFormatRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MetricServiceServer).QueryWithInfluxFormat(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MetricService_QueryWithInfluxFormat_info)
				}
				if interceptor == nil {
					return _MetricService_QueryWithInfluxFormat_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.metric.MetricService/QueryWithInfluxFormat",
				}
				return interceptor(ctx, in, info, _MetricService_QueryWithInfluxFormat_Handler)
			},
		},
		{
			MethodName: "SearchWithInfluxFormat",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryWithInfluxFormatRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MetricServiceServer).SearchWithInfluxFormat(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MetricService_SearchWithInfluxFormat_info)
				}
				if interceptor == nil {
					return _MetricService_SearchWithInfluxFormat_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.metric.MetricService/SearchWithInfluxFormat",
				}
				return interceptor(ctx, in, info, _MetricService_SearchWithInfluxFormat_Handler)
			},
		},
		{
			MethodName: "QueryWithTableFormat",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryWithTableFormatRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MetricServiceServer).QueryWithTableFormat(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MetricService_QueryWithTableFormat_info)
				}
				if interceptor == nil {
					return _MetricService_QueryWithTableFormat_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.metric.MetricService/QueryWithTableFormat",
				}
				return interceptor(ctx, in, info, _MetricService_QueryWithTableFormat_Handler)
			},
		},
		{
			MethodName: "SearchWithTableFormat",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryWithTableFormatRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MetricServiceServer).SearchWithTableFormat(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MetricService_SearchWithTableFormat_info)
				}
				if interceptor == nil {
					return _MetricService_SearchWithTableFormat_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.metric.MetricService/SearchWithTableFormat",
				}
				return interceptor(ctx, in, info, _MetricService_SearchWithTableFormat_Handler)
			},
		},
		{
			MethodName: "GeneralQuery",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GeneralQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MetricServiceServer).GeneralQuery(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MetricService_GeneralQuery_info)
				}
				if interceptor == nil {
					return _MetricService_GeneralQuery_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.metric.MetricService/GeneralQuery",
				}
				return interceptor(ctx, in, info, _MetricService_GeneralQuery_Handler)
			},
		},
		{
			MethodName: "GeneralSearch",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GeneralQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MetricServiceServer).GeneralSearch(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MetricService_GeneralSearch_info)
				}
				if interceptor == nil {
					return _MetricService_GeneralSearch_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.metric.MetricService/GeneralSearch",
				}
				return interceptor(ctx, in, info, _MetricService_GeneralSearch_Handler)
			},
		},
	}
	return &serviceDesc
}
