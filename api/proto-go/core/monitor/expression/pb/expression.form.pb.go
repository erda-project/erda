// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: expression.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetExpressionsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetExpressionsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetMetricExpressionsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetMetricExpressionsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ExpressionData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Expression)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAlertNotifiesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAlertNotifiesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertNotifyData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertNotify)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyTarget)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTemplatesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTemplatesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertTemplateData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertTemplate)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgsLocaleRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgsLocaleResponse)(nil)

// GetExpressionsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetExpressionsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			}
		}
	}
	return nil
}

// GetExpressionsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetExpressionsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ExpressionData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &ExpressionData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// GetMetricExpressionsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetMetricExpressionsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			}
		}
	}
	return nil
}

// GetMetricExpressionsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetMetricExpressionsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ExpressionData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &ExpressionData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// ExpressionData implement urlenc.URLValuesUnmarshaler.
func (m *ExpressionData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// Expression implement urlenc.URLValuesUnmarshaler.
func (m *Expression) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "version":
				m.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "alertId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AlertId = val
			}
		}
	}
	return nil
}

// GetAlertNotifiesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAlertNotifiesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			}
		}
	}
	return nil
}

// GetAlertNotifiesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAlertNotifiesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &AlertNotifyData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &AlertNotifyData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// AlertNotifyData implement urlenc.URLValuesUnmarshaler.
func (m *AlertNotifyData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// AlertNotify implement urlenc.URLValuesUnmarshaler.
func (m *AlertNotify) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "alertId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AlertId = val
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &NotifyTarget{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &NotifyTarget{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &NotifyTarget{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &NotifyTarget{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.level":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &NotifyTarget{}
				}
				m.NotifyTarget.Level = vals[0]
			case "silence":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Silence = val
			case "silencePolicy":
				m.SilencePolicy = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			}
		}
	}
	return nil
}

// NotifyTarget implement urlenc.URLValuesUnmarshaler.
func (m *NotifyTarget) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "groupId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupId = val
			case "groupType":
				m.GroupType = vals[0]
			case "level":
				m.Level = vals[0]
			}
		}
	}
	return nil
}

// GetTemplatesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetTemplatesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// GetTemplatesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetTemplatesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &AlertTemplateData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &AlertTemplateData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// AlertTemplateData implement urlenc.URLValuesUnmarshaler.
func (m *AlertTemplateData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// AlertTemplate implement urlenc.URLValuesUnmarshaler.
func (m *AlertTemplate) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "alertType":
				m.AlertType = vals[0]
			case "alertIndex":
				m.AlertIndex = vals[0]
			case "target":
				m.Target = vals[0]
			case "trigger":
				m.Trigger = vals[0]
			case "title":
				m.Title = vals[0]
			case "template":
				m.Template = vals[0]
			case "version":
				m.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "language":
				m.Language = vals[0]
			}
		}
	}
	return nil
}

// GetOrgsLocaleRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgsLocaleRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetOrgsLocaleResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgsLocaleResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
