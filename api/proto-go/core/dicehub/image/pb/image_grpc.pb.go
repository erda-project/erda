// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: image.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	GetImage(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (*ImageGetResponse, error)
	ListImage(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error)
}

type imageServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewImageServiceClient(cc grpc1.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) GetImage(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (*ImageGetResponse, error) {
	out := new(ImageGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.image.ImageService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) ListImage(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.image.ImageService/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations should embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	GetImage(context.Context, *ImageGetRequest) (*ImageGetResponse, error)
	ListImage(context.Context, *ImageListRequest) (*ImageListResponse, error)
}

// UnimplementedImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (*UnimplementedImageServiceServer) GetImage(context.Context, *ImageGetRequest) (*ImageGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedImageServiceServer) ListImage(context.Context, *ImageListRequest) (*ImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}

func RegisterImageServiceServer(s grpc1.ServiceRegistrar, srv ImageServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ImageService_serviceDesc(srv, opts...), srv)
}

var _ImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.dicehub.image.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "image.proto",
}

func _get_ImageService_serviceDesc(srv ImageServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ImageService_GetImage_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetImage(ctx, req.(*ImageGetRequest))
	}
	var _ImageService_GetImage_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ImageService_GetImage_info = transport.NewServiceInfo("erda.core.dicehub.image.ImageService", "GetImage", srv)
		_ImageService_GetImage_Handler = h.Interceptor(_ImageService_GetImage_Handler)
	}

	_ImageService_ListImage_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListImage(ctx, req.(*ImageListRequest))
	}
	var _ImageService_ListImage_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ImageService_ListImage_info = transport.NewServiceInfo("erda.core.dicehub.image.ImageService", "ListImage", srv)
		_ImageService_ListImage_Handler = h.Interceptor(_ImageService_ListImage_Handler)
	}

	var serviceDesc = _ImageService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetImage",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ImageGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ImageServiceServer).GetImage(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ImageService_GetImage_info)
				}
				if interceptor == nil {
					return _ImageService_GetImage_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.image.ImageService/GetImage",
				}
				return interceptor(ctx, in, info, _ImageService_GetImage_Handler)
			},
		},
		{
			MethodName: "ListImage",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ImageListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ImageServiceServer).ListImage(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ImageService_ListImage_info)
				}
				if interceptor == nil {
					return _ImageService_ListImage_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.image.ImageService/ListImage",
				}
				return interceptor(ctx, in, info, _ImageService_ListImage_Handler)
			},
		},
	}
	return &serviceDesc
}
