// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: template.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// TemplateServiceHandler is the server API for TemplateService service.
type TemplateServiceHandler interface {
	// POST /api/pipeline-templates/actions/apply
	ApplyPipelineTemplate(context.Context, *PipelineTemplateApplyRequest) (*PipelineTemplateCreateResponse, error)
	// GET /api/pipeline-templates
	QueryPipelineTemplates(context.Context, *PipelineTemplateQueryRequest) (*PipelineTemplateQueryResponse, error)
	// POST /api/pipeline-templates/{name}/actions/render
	RenderPipelineTemplate(context.Context, *PipelineTemplateRenderRequest) (*PipelineTemplateRenderResponse, error)
	// POST /api/pipeline-templates/local/actions/render-spec
	RenderPipelineTemplateBySpec(context.Context, *PipelineTemplateRenderSpecRequest) (*PipelineTemplateRenderResponse, error)
	// GET /api/pipeline-templates/{name}/actions/query-version
	GetPipelineTemplateVersion(context.Context, *PipelineTemplateVersionGetRequest) (*PipelineTemplateVersionGetResponse, error)
	// GET /api/pipeline-templates/{name}/actions/query-versions
	QueryPipelineTemplateVersions(context.Context, *PipelineTemplateVersionQueryRequest) (*PipelineTemplateVersionQueryResponse, error)
	// GET /api/pipeline-snippets/actions/query-snippet-yml
	QuerySnippetYml(context.Context, *QuerySnippetYmlRequest) (*QuerySnippetYmlResponse, error)
}

// RegisterTemplateServiceHandler register TemplateServiceHandler to http.Router.
func RegisterTemplateServiceHandler(r http.Router, srv TemplateServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		return func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
	}

	add_ApplyPipelineTemplate := func(method, path string, fn func(context.Context, *PipelineTemplateApplyRequest) (*PipelineTemplateCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineTemplateApplyRequest))
		}
		var ApplyPipelineTemplate_info transport.ServiceInfo
		if h.Interceptor != nil {
			ApplyPipelineTemplate_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "ApplyPipelineTemplate", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ApplyPipelineTemplate_info)
				}
				r = r.WithContext(ctx)
				var in PipelineTemplateApplyRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryPipelineTemplates := func(method, path string, fn func(context.Context, *PipelineTemplateQueryRequest) (*PipelineTemplateQueryResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineTemplateQueryRequest))
		}
		var QueryPipelineTemplates_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryPipelineTemplates_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "QueryPipelineTemplates", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryPipelineTemplates_info)
				}
				r = r.WithContext(ctx)
				var in PipelineTemplateQueryRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_RenderPipelineTemplate := func(method, path string, fn func(context.Context, *PipelineTemplateRenderRequest) (*PipelineTemplateRenderResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineTemplateRenderRequest))
		}
		var RenderPipelineTemplate_info transport.ServiceInfo
		if h.Interceptor != nil {
			RenderPipelineTemplate_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "RenderPipelineTemplate", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, RenderPipelineTemplate_info)
				}
				r = r.WithContext(ctx)
				var in PipelineTemplateRenderRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_RenderPipelineTemplateBySpec := func(method, path string, fn func(context.Context, *PipelineTemplateRenderSpecRequest) (*PipelineTemplateRenderResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineTemplateRenderSpecRequest))
		}
		var RenderPipelineTemplateBySpec_info transport.ServiceInfo
		if h.Interceptor != nil {
			RenderPipelineTemplateBySpec_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "RenderPipelineTemplateBySpec", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, RenderPipelineTemplateBySpec_info)
				}
				r = r.WithContext(ctx)
				var in PipelineTemplateRenderSpecRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetPipelineTemplateVersion := func(method, path string, fn func(context.Context, *PipelineTemplateVersionGetRequest) (*PipelineTemplateVersionGetResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineTemplateVersionGetRequest))
		}
		var GetPipelineTemplateVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetPipelineTemplateVersion_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "GetPipelineTemplateVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetPipelineTemplateVersion_info)
				}
				r = r.WithContext(ctx)
				var in PipelineTemplateVersionGetRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryPipelineTemplateVersions := func(method, path string, fn func(context.Context, *PipelineTemplateVersionQueryRequest) (*PipelineTemplateVersionQueryResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineTemplateVersionQueryRequest))
		}
		var QueryPipelineTemplateVersions_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryPipelineTemplateVersions_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "QueryPipelineTemplateVersions", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryPipelineTemplateVersions_info)
				}
				r = r.WithContext(ctx)
				var in PipelineTemplateVersionQueryRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QuerySnippetYml := func(method, path string, fn func(context.Context, *QuerySnippetYmlRequest) (*QuerySnippetYmlResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QuerySnippetYmlRequest))
		}
		var QuerySnippetYml_info transport.ServiceInfo
		if h.Interceptor != nil {
			QuerySnippetYml_info = transport.NewServiceInfo("erda.core.dicehub.template.TemplateService", "QuerySnippetYml", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QuerySnippetYml_info)
				}
				r = r.WithContext(ctx)
				var in QuerySnippetYmlRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ApplyPipelineTemplate("POST", "/api/pipeline-templates/actions/apply", srv.ApplyPipelineTemplate)
	add_QueryPipelineTemplates("GET", "/api/pipeline-templates", srv.QueryPipelineTemplates)
	add_RenderPipelineTemplate("POST", "/api/pipeline-templates/{name}/actions/render", srv.RenderPipelineTemplate)
	add_RenderPipelineTemplateBySpec("POST", "/api/pipeline-templates/local/actions/render-spec", srv.RenderPipelineTemplateBySpec)
	add_GetPipelineTemplateVersion("GET", "/api/pipeline-templates/{name}/actions/query-version", srv.GetPipelineTemplateVersion)
	add_QueryPipelineTemplateVersions("GET", "/api/pipeline-templates/{name}/actions/query-versions", srv.QueryPipelineTemplateVersions)
	add_QuerySnippetYml("GET", "/api/pipeline-snippets/actions/query-snippet-yml", srv.QuerySnippetYml)
}
