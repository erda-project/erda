// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: extension.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// ExtensionServiceHandler is the server API for ExtensionService service.
type ExtensionServiceHandler interface {
	// POST /api/extensions/actions/search
	SearchExtensions(context.Context, *ExtensionSearchRequest) (*ExtensionSearchResponse, error)
	// POST /api/extensions
	CreateExtension(context.Context, *ExtensionCreateRequest) (*ExtensionCreateResponse, error)
	// GET /api/extensions
	QueryExtensions(context.Context, *QueryExtensionsRequest) (*QueryExtensionsResponse, error)
	// GET /api/extensions/actions/query-menu
	QueryExtensionsMenu(context.Context, *QueryExtensionsMenuRequest) (*QueryExtensionsMenuResponse, error)
	// POST /api/extensions/{name}
	CreateExtensionVersion(context.Context, *ExtensionVersionCreateRequest) (*ExtensionVersionCreateResponse, error)
	// GET /api/extensions/{name}/{version}
	GetExtensionVersion(context.Context, *GetExtensionVersionRequest) (*GetExtensionVersionResponse, error)
	// GET /api/extensions/{name}
	QueryExtensionVersions(context.Context, *ExtensionVersionQueryRequest) (*ExtensionVersionQueryResponse, error)
}

// RegisterExtensionServiceHandler register ExtensionServiceHandler to http.Router.
func RegisterExtensionServiceHandler(r http.Router, srv ExtensionServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_SearchExtensions := func(method, path string, fn func(context.Context, *ExtensionSearchRequest) (*ExtensionSearchResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ExtensionSearchRequest))
		}
		var SearchExtensions_info transport.ServiceInfo
		if h.Interceptor != nil {
			SearchExtensions_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "SearchExtensions", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SearchExtensions_info)
				}
				r = r.WithContext(ctx)
				var in ExtensionSearchRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateExtension := func(method, path string, fn func(context.Context, *ExtensionCreateRequest) (*ExtensionCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ExtensionCreateRequest))
		}
		var CreateExtension_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateExtension_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "CreateExtension", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateExtension_info)
				}
				r = r.WithContext(ctx)
				var in ExtensionCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryExtensions := func(method, path string, fn func(context.Context, *QueryExtensionsRequest) (*QueryExtensionsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QueryExtensionsRequest))
		}
		var QueryExtensions_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryExtensions_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "QueryExtensions", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryExtensions_info)
				}
				r = r.WithContext(ctx)
				var in QueryExtensionsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryExtensionsMenu := func(method, path string, fn func(context.Context, *QueryExtensionsMenuRequest) (*QueryExtensionsMenuResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QueryExtensionsMenuRequest))
		}
		var QueryExtensionsMenu_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryExtensionsMenu_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "QueryExtensionsMenu", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryExtensionsMenu_info)
				}
				r = r.WithContext(ctx)
				var in QueryExtensionsMenuRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateExtensionVersion := func(method, path string, fn func(context.Context, *ExtensionVersionCreateRequest) (*ExtensionVersionCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ExtensionVersionCreateRequest))
		}
		var CreateExtensionVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateExtensionVersion_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "CreateExtensionVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateExtensionVersion_info)
				}
				r = r.WithContext(ctx)
				var in ExtensionVersionCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetExtensionVersion := func(method, path string, fn func(context.Context, *GetExtensionVersionRequest) (*GetExtensionVersionResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetExtensionVersionRequest))
		}
		var GetExtensionVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetExtensionVersion_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "GetExtensionVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetExtensionVersion_info)
				}
				r = r.WithContext(ctx)
				var in GetExtensionVersionRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						case "version":
							in.Version = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryExtensionVersions := func(method, path string, fn func(context.Context, *ExtensionVersionQueryRequest) (*ExtensionVersionQueryResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ExtensionVersionQueryRequest))
		}
		var QueryExtensionVersions_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryExtensionVersions_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "QueryExtensionVersions", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryExtensionVersions_info)
				}
				r = r.WithContext(ctx)
				var in ExtensionVersionQueryRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "name":
							in.Name = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SearchExtensions("POST", "/api/extensions/actions/search", srv.SearchExtensions)
	add_CreateExtension("POST", "/api/extensions", srv.CreateExtension)
	add_QueryExtensions("GET", "/api/extensions", srv.QueryExtensions)
	add_QueryExtensionsMenu("GET", "/api/extensions/actions/query-menu", srv.QueryExtensionsMenu)
	add_CreateExtensionVersion("POST", "/api/extensions/{name}", srv.CreateExtensionVersion)
	add_GetExtensionVersion("GET", "/api/extensions/{name}/{version}", srv.GetExtensionVersion)
	add_QueryExtensionVersions("GET", "/api/extensions/{name}", srv.QueryExtensionVersions)
}
