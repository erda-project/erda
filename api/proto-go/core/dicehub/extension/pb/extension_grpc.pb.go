// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: extension.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ExtensionServiceClient is the client API for ExtensionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionServiceClient interface {
	SearchExtensions(ctx context.Context, in *ExtensionSearchRequest, opts ...grpc.CallOption) (*ExtensionSearchResponse, error)
	CreateExtension(ctx context.Context, in *ExtensionCreateRequest, opts ...grpc.CallOption) (*ExtensionCreateResponse, error)
	QueryExtensions(ctx context.Context, in *QueryExtensionsRequest, opts ...grpc.CallOption) (*QueryExtensionsResponse, error)
	QueryExtensionsMenu(ctx context.Context, in *QueryExtensionsMenuRequest, opts ...grpc.CallOption) (*QueryExtensionsMenuResponse, error)
	CreateExtensionVersion(ctx context.Context, in *ExtensionVersionCreateRequest, opts ...grpc.CallOption) (*ExtensionVersionCreateResponse, error)
	GetExtensionVersion(ctx context.Context, in *GetExtensionVersionRequest, opts ...grpc.CallOption) (*GetExtensionVersionResponse, error)
	QueryExtensionVersions(ctx context.Context, in *ExtensionVersionQueryRequest, opts ...grpc.CallOption) (*ExtensionVersionQueryResponse, error)
}

type extensionServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewExtensionServiceClient(cc grpc1.ClientConnInterface) ExtensionServiceClient {
	return &extensionServiceClient{cc}
}

func (c *extensionServiceClient) SearchExtensions(ctx context.Context, in *ExtensionSearchRequest, opts ...grpc.CallOption) (*ExtensionSearchResponse, error) {
	out := new(ExtensionSearchResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/SearchExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) CreateExtension(ctx context.Context, in *ExtensionCreateRequest, opts ...grpc.CallOption) (*ExtensionCreateResponse, error) {
	out := new(ExtensionCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/CreateExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) QueryExtensions(ctx context.Context, in *QueryExtensionsRequest, opts ...grpc.CallOption) (*QueryExtensionsResponse, error) {
	out := new(QueryExtensionsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/QueryExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) QueryExtensionsMenu(ctx context.Context, in *QueryExtensionsMenuRequest, opts ...grpc.CallOption) (*QueryExtensionsMenuResponse, error) {
	out := new(QueryExtensionsMenuResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/QueryExtensionsMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) CreateExtensionVersion(ctx context.Context, in *ExtensionVersionCreateRequest, opts ...grpc.CallOption) (*ExtensionVersionCreateResponse, error) {
	out := new(ExtensionVersionCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/CreateExtensionVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) GetExtensionVersion(ctx context.Context, in *GetExtensionVersionRequest, opts ...grpc.CallOption) (*GetExtensionVersionResponse, error) {
	out := new(GetExtensionVersionResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/GetExtensionVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) QueryExtensionVersions(ctx context.Context, in *ExtensionVersionQueryRequest, opts ...grpc.CallOption) (*ExtensionVersionQueryResponse, error) {
	out := new(ExtensionVersionQueryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.extension.ExtensionService/QueryExtensionVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtensionServiceServer is the server API for ExtensionService service.
// All implementations should embed UnimplementedExtensionServiceServer
// for forward compatibility
type ExtensionServiceServer interface {
	SearchExtensions(context.Context, *ExtensionSearchRequest) (*ExtensionSearchResponse, error)
	CreateExtension(context.Context, *ExtensionCreateRequest) (*ExtensionCreateResponse, error)
	QueryExtensions(context.Context, *QueryExtensionsRequest) (*QueryExtensionsResponse, error)
	QueryExtensionsMenu(context.Context, *QueryExtensionsMenuRequest) (*QueryExtensionsMenuResponse, error)
	CreateExtensionVersion(context.Context, *ExtensionVersionCreateRequest) (*ExtensionVersionCreateResponse, error)
	GetExtensionVersion(context.Context, *GetExtensionVersionRequest) (*GetExtensionVersionResponse, error)
	QueryExtensionVersions(context.Context, *ExtensionVersionQueryRequest) (*ExtensionVersionQueryResponse, error)
}

// UnimplementedExtensionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExtensionServiceServer struct {
}

func (*UnimplementedExtensionServiceServer) SearchExtensions(context.Context, *ExtensionSearchRequest) (*ExtensionSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExtensions not implemented")
}
func (*UnimplementedExtensionServiceServer) CreateExtension(context.Context, *ExtensionCreateRequest) (*ExtensionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtension not implemented")
}
func (*UnimplementedExtensionServiceServer) QueryExtensions(context.Context, *QueryExtensionsRequest) (*QueryExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtensions not implemented")
}
func (*UnimplementedExtensionServiceServer) QueryExtensionsMenu(context.Context, *QueryExtensionsMenuRequest) (*QueryExtensionsMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtensionsMenu not implemented")
}
func (*UnimplementedExtensionServiceServer) CreateExtensionVersion(context.Context, *ExtensionVersionCreateRequest) (*ExtensionVersionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtensionVersion not implemented")
}
func (*UnimplementedExtensionServiceServer) GetExtensionVersion(context.Context, *GetExtensionVersionRequest) (*GetExtensionVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtensionVersion not implemented")
}
func (*UnimplementedExtensionServiceServer) QueryExtensionVersions(context.Context, *ExtensionVersionQueryRequest) (*ExtensionVersionQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtensionVersions not implemented")
}

func RegisterExtensionServiceServer(s grpc1.ServiceRegistrar, srv ExtensionServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ExtensionService_serviceDesc(srv, opts...), srv)
}

var _ExtensionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.dicehub.extension.ExtensionService",
	HandlerType: (*ExtensionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "extension.proto",
}

func _get_ExtensionService_serviceDesc(srv ExtensionServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ExtensionService_SearchExtensions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SearchExtensions(ctx, req.(*ExtensionSearchRequest))
	}
	var _ExtensionService_SearchExtensions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_SearchExtensions_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "SearchExtensions", srv)
		_ExtensionService_SearchExtensions_Handler = h.Interceptor(_ExtensionService_SearchExtensions_Handler)
	}

	_ExtensionService_CreateExtension_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateExtension(ctx, req.(*ExtensionCreateRequest))
	}
	var _ExtensionService_CreateExtension_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_CreateExtension_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "CreateExtension", srv)
		_ExtensionService_CreateExtension_Handler = h.Interceptor(_ExtensionService_CreateExtension_Handler)
	}

	_ExtensionService_QueryExtensions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryExtensions(ctx, req.(*QueryExtensionsRequest))
	}
	var _ExtensionService_QueryExtensions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_QueryExtensions_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "QueryExtensions", srv)
		_ExtensionService_QueryExtensions_Handler = h.Interceptor(_ExtensionService_QueryExtensions_Handler)
	}

	_ExtensionService_QueryExtensionsMenu_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryExtensionsMenu(ctx, req.(*QueryExtensionsMenuRequest))
	}
	var _ExtensionService_QueryExtensionsMenu_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_QueryExtensionsMenu_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "QueryExtensionsMenu", srv)
		_ExtensionService_QueryExtensionsMenu_Handler = h.Interceptor(_ExtensionService_QueryExtensionsMenu_Handler)
	}

	_ExtensionService_CreateExtensionVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateExtensionVersion(ctx, req.(*ExtensionVersionCreateRequest))
	}
	var _ExtensionService_CreateExtensionVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_CreateExtensionVersion_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "CreateExtensionVersion", srv)
		_ExtensionService_CreateExtensionVersion_Handler = h.Interceptor(_ExtensionService_CreateExtensionVersion_Handler)
	}

	_ExtensionService_GetExtensionVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetExtensionVersion(ctx, req.(*GetExtensionVersionRequest))
	}
	var _ExtensionService_GetExtensionVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_GetExtensionVersion_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "GetExtensionVersion", srv)
		_ExtensionService_GetExtensionVersion_Handler = h.Interceptor(_ExtensionService_GetExtensionVersion_Handler)
	}

	_ExtensionService_QueryExtensionVersions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryExtensionVersions(ctx, req.(*ExtensionVersionQueryRequest))
	}
	var _ExtensionService_QueryExtensionVersions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExtensionService_QueryExtensionVersions_info = transport.NewServiceInfo("erda.core.dicehub.extension.ExtensionService", "QueryExtensionVersions", srv)
		_ExtensionService_QueryExtensionVersions_Handler = h.Interceptor(_ExtensionService_QueryExtensionVersions_Handler)
	}

	var serviceDesc = _ExtensionService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "SearchExtensions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExtensionSearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).SearchExtensions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_SearchExtensions_info)
				}
				if interceptor == nil {
					return _ExtensionService_SearchExtensions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/SearchExtensions",
				}
				return interceptor(ctx, in, info, _ExtensionService_SearchExtensions_Handler)
			},
		},
		{
			MethodName: "CreateExtension",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExtensionCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).CreateExtension(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_CreateExtension_info)
				}
				if interceptor == nil {
					return _ExtensionService_CreateExtension_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/CreateExtension",
				}
				return interceptor(ctx, in, info, _ExtensionService_CreateExtension_Handler)
			},
		},
		{
			MethodName: "QueryExtensions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryExtensionsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).QueryExtensions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_QueryExtensions_info)
				}
				if interceptor == nil {
					return _ExtensionService_QueryExtensions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/QueryExtensions",
				}
				return interceptor(ctx, in, info, _ExtensionService_QueryExtensions_Handler)
			},
		},
		{
			MethodName: "QueryExtensionsMenu",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryExtensionsMenuRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).QueryExtensionsMenu(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_QueryExtensionsMenu_info)
				}
				if interceptor == nil {
					return _ExtensionService_QueryExtensionsMenu_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/QueryExtensionsMenu",
				}
				return interceptor(ctx, in, info, _ExtensionService_QueryExtensionsMenu_Handler)
			},
		},
		{
			MethodName: "CreateExtensionVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExtensionVersionCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).CreateExtensionVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_CreateExtensionVersion_info)
				}
				if interceptor == nil {
					return _ExtensionService_CreateExtensionVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/CreateExtensionVersion",
				}
				return interceptor(ctx, in, info, _ExtensionService_CreateExtensionVersion_Handler)
			},
		},
		{
			MethodName: "GetExtensionVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetExtensionVersionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).GetExtensionVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_GetExtensionVersion_info)
				}
				if interceptor == nil {
					return _ExtensionService_GetExtensionVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/GetExtensionVersion",
				}
				return interceptor(ctx, in, info, _ExtensionService_GetExtensionVersion_Handler)
			},
		},
		{
			MethodName: "QueryExtensionVersions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExtensionVersionQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExtensionServiceServer).QueryExtensionVersions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExtensionService_QueryExtensionVersions_info)
				}
				if interceptor == nil {
					return _ExtensionService_QueryExtensionVersions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.extension.ExtensionService/QueryExtensionVersions",
				}
				return interceptor(ctx, in, info, _ExtensionService_QueryExtensionVersions_Handler)
			},
		},
	}
	return &serviceDesc
}
