// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: extension.proto

package client

import (
	context "context"
	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/dicehub/extension/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ExtensionService extension.proto
	ExtensionService() pb.ExtensionServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		extensionService: pb.NewExtensionServiceClient(cc),
	}
}

type serviceClients struct {
	extensionService pb.ExtensionServiceClient
}

func (c *serviceClients) ExtensionService() pb.ExtensionServiceClient {
	return c.extensionService
}

type extensionServiceWrapper struct {
	client pb.ExtensionServiceClient
	opts   []grpc1.CallOption
}

func (s *extensionServiceWrapper) SearchExtensions(ctx context.Context, req *pb.ExtensionSearchRequest) (*pb.ExtensionSearchResponse, error) {
	return s.client.SearchExtensions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *extensionServiceWrapper) CreateExtension(ctx context.Context, req *pb.ExtensionCreateRequest) (*pb.ExtensionCreateResponse, error) {
	return s.client.CreateExtension(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *extensionServiceWrapper) QueryExtensions(ctx context.Context, req *pb.QueryExtensionsRequest) (*pb.QueryExtensionsResponse, error) {
	return s.client.QueryExtensions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *extensionServiceWrapper) QueryExtensionsMenu(ctx context.Context, req *pb.QueryExtensionsMenuRequest) (*pb.QueryExtensionsMenuResponse, error) {
	return s.client.QueryExtensionsMenu(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *extensionServiceWrapper) CreateExtensionVersion(ctx context.Context, req *pb.ExtensionVersionCreateRequest) (*pb.ExtensionVersionCreateResponse, error) {
	return s.client.CreateExtensionVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *extensionServiceWrapper) GetExtensionVersion(ctx context.Context, req *pb.GetExtensionVersionRequest) (*pb.GetExtensionVersionResponse, error) {
	return s.client.GetExtensionVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *extensionServiceWrapper) QueryExtensionVersions(ctx context.Context, req *pb.ExtensionVersionQueryRequest) (*pb.ExtensionVersionQueryResponse, error) {
	return s.client.QueryExtensionVersions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
