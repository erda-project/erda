// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: getdice.proto, opus.proto, release.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterReleaseGetDiceServiceImp getdice.proto
func RegisterReleaseGetDiceServiceImp(regester transport.Register, srv ReleaseGetDiceServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterReleaseGetDiceServiceHandler(regester, ReleaseGetDiceServiceHandler(srv), _ops.HTTP...)
	RegisterReleaseGetDiceServiceServer(regester, srv, _ops.GRPC...)
}

// RegisterOpusImp opus.proto
func RegisterOpusImp(regester transport.Register, srv OpusServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterOpusHandler(regester, OpusHandler(srv), _ops.HTTP...)
	RegisterOpusServer(regester, srv, _ops.GRPC...)
}

// RegisterReleaseServiceImp release.proto
func RegisterReleaseServiceImp(regester transport.Register, srv ReleaseServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterReleaseServiceHandler(regester, ReleaseServiceHandler(srv), _ops.HTTP...)
	RegisterReleaseServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.dicehub.release.Opus",
		"erda.core.dicehub.release.ReleaseGetDiceService",
		"erda.core.dicehub.release.ReleaseService",
	)
}

var (
	releaseGetDiceServiceClientType  = reflect.TypeOf((*ReleaseGetDiceServiceClient)(nil)).Elem()
	releaseGetDiceServiceServerType  = reflect.TypeOf((*ReleaseGetDiceServiceServer)(nil)).Elem()
	releaseGetDiceServiceHandlerType = reflect.TypeOf((*ReleaseGetDiceServiceHandler)(nil)).Elem()

	opusClientType  = reflect.TypeOf((*OpusClient)(nil)).Elem()
	opusServerType  = reflect.TypeOf((*OpusServer)(nil)).Elem()
	opusHandlerType = reflect.TypeOf((*OpusHandler)(nil)).Elem()

	releaseServiceClientType  = reflect.TypeOf((*ReleaseServiceClient)(nil)).Elem()
	releaseServiceServerType  = reflect.TypeOf((*ReleaseServiceServer)(nil)).Elem()
	releaseServiceHandlerType = reflect.TypeOf((*ReleaseServiceHandler)(nil)).Elem()
)

// ReleaseGetDiceServiceClientType .
func ReleaseGetDiceServiceClientType() reflect.Type { return releaseGetDiceServiceClientType }

// ReleaseGetDiceServiceServerType .
func ReleaseGetDiceServiceServerType() reflect.Type { return releaseGetDiceServiceServerType }

// ReleaseGetDiceServiceHandlerType .
func ReleaseGetDiceServiceHandlerType() reflect.Type { return releaseGetDiceServiceHandlerType }

// OpusClientType .
func OpusClientType() reflect.Type { return opusClientType }

// OpusServerType .
func OpusServerType() reflect.Type { return opusServerType }

// OpusHandlerType .
func OpusHandlerType() reflect.Type { return opusHandlerType }

// ReleaseServiceClientType .
func ReleaseServiceClientType() reflect.Type { return releaseServiceClientType }

// ReleaseServiceServerType .
func ReleaseServiceServerType() reflect.Type { return releaseServiceServerType }

// ReleaseServiceHandlerType .
func ReleaseServiceHandlerType() reflect.Type { return releaseServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		releaseGetDiceServiceClientType,
		opusClientType,
		releaseServiceClientType,
		// server types
		releaseGetDiceServiceServerType,
		opusServerType,
		releaseServiceServerType,
		// handler types
		releaseGetDiceServiceHandlerType,
		opusHandlerType,
		releaseServiceHandlerType,
	}
}
