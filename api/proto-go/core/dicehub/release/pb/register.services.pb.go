// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: getdice.proto, release.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterReleaseGetDiceServiceImp getdice.proto
func RegisterReleaseGetDiceServiceImp(regester transport.Register, srv ReleaseGetDiceServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterReleaseGetDiceServiceHandler(regester, ReleaseGetDiceServiceHandler(srv), _ops.HTTP...)
	RegisterReleaseGetDiceServiceServer(regester, srv, _ops.GRPC...)
}

// RegisterReleaseServiceImp release.proto
func RegisterReleaseServiceImp(regester transport.Register, srv ReleaseServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterReleaseServiceHandler(regester, ReleaseServiceHandler(srv), _ops.HTTP...)
	RegisterReleaseServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.dicehub.release.ReleaseGetDiceService",
		"erda.core.dicehub.release.ReleaseService",
	)
}

var (
	releaseGetDiceServiceClientType  = reflect.TypeOf((*ReleaseGetDiceServiceClient)(nil)).Elem()
	releaseGetDiceServiceServerType  = reflect.TypeOf((*ReleaseGetDiceServiceServer)(nil)).Elem()
	releaseGetDiceServiceHandlerType = reflect.TypeOf((*ReleaseGetDiceServiceHandler)(nil)).Elem()

	releaseServiceClientType  = reflect.TypeOf((*ReleaseServiceClient)(nil)).Elem()
	releaseServiceServerType  = reflect.TypeOf((*ReleaseServiceServer)(nil)).Elem()
	releaseServiceHandlerType = reflect.TypeOf((*ReleaseServiceHandler)(nil)).Elem()
)

// ReleaseGetDiceServiceClientType .
func ReleaseGetDiceServiceClientType() reflect.Type { return releaseGetDiceServiceClientType }

// ReleaseGetDiceServiceServerType .
func ReleaseGetDiceServiceServerType() reflect.Type { return releaseGetDiceServiceServerType }

// ReleaseGetDiceServiceHandlerType .
func ReleaseGetDiceServiceHandlerType() reflect.Type { return releaseGetDiceServiceHandlerType }

// ReleaseServiceClientType .
func ReleaseServiceClientType() reflect.Type { return releaseServiceClientType }

// ReleaseServiceServerType .
func ReleaseServiceServerType() reflect.Type { return releaseServiceServerType }

// ReleaseServiceHandlerType .
func ReleaseServiceHandlerType() reflect.Type { return releaseServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		releaseGetDiceServiceClientType,
		releaseServiceClientType,
		// server types
		releaseGetDiceServiceServerType,
		releaseServiceServerType,
		// handler types
		releaseGetDiceServiceHandlerType,
		releaseServiceHandlerType,
	}
}
