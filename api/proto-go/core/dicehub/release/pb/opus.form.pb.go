// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: opus.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*PutOnArtifactsReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PutOffArtifactsReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListArtifactsReq)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListArtifactsResp)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListArtifactsRespItem)(nil)

// PutOnArtifactsReq implement urlenc.URLValuesUnmarshaler.
func (m *PutOnArtifactsReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = uint32(val)
			case "orgName":
				m.OrgName = vals[0]
			case "userID":
				m.UserID = vals[0]
			case "opusID":
				m.OpusID = vals[0]
			case "opusVersionID":
				m.OpusVersionID = vals[0]
			case "releaseID":
				m.ReleaseID = vals[0]
			}
		}
	}
	return nil
}

// PutOffArtifactsReq implement urlenc.URLValuesUnmarshaler.
func (m *PutOffArtifactsReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = uint32(val)
			case "userID":
				m.UserID = vals[0]
			case "releaseID":
				m.ReleaseID = vals[0]
			}
		}
	}
	return nil
}

// ListArtifactsReq implement urlenc.URLValuesUnmarshaler.
func (m *ListArtifactsReq) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.OrgID = uint32(val)
			case "userID":
				m.UserID = vals[0]
			case "releaseIDs":
				m.ReleaseIDs = vals
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageNo = int32(val)
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PageSize = int32(val)
			}
		}
	}
	return nil
}

// ListArtifactsResp implement urlenc.URLValuesUnmarshaler.
func (m *ListArtifactsResp) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseUint(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Total = uint32(val)
			}
		}
	}
	return nil
}

// ListArtifactsRespItem implement urlenc.URLValuesUnmarshaler.
func (m *ListArtifactsRespItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "opusID":
				m.OpusID = vals[0]
			case "opusVersionID":
				m.OpusVersionID = vals[0]
			case "releaseID":
				m.ReleaseID = vals[0]
			}
		}
	}
	return nil
}
