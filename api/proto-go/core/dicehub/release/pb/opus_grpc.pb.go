// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: opus.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/common/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// OpusClient is the client API for Opus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpusClient interface {
	PutOnArtifacts(ctx context.Context, in *PutOnArtifactsReq, opts ...grpc.CallOption) (*pb.VoidResponse, error)
	PutOffArtifacts(ctx context.Context, in *PutOffArtifactsReq, opts ...grpc.CallOption) (*pb.VoidResponse, error)
	ListArtifacts(ctx context.Context, in *ListArtifactsReq, opts ...grpc.CallOption) (*ListArtifactsResp, error)
}

type opusClient struct {
	cc grpc1.ClientConnInterface
}

func NewOpusClient(cc grpc1.ClientConnInterface) OpusClient {
	return &opusClient{cc}
}

func (c *opusClient) PutOnArtifacts(ctx context.Context, in *PutOnArtifactsReq, opts ...grpc.CallOption) (*pb.VoidResponse, error) {
	out := new(pb.VoidResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.Opus/PutOnArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opusClient) PutOffArtifacts(ctx context.Context, in *PutOffArtifactsReq, opts ...grpc.CallOption) (*pb.VoidResponse, error) {
	out := new(pb.VoidResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.Opus/PutOffArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opusClient) ListArtifacts(ctx context.Context, in *ListArtifactsReq, opts ...grpc.CallOption) (*ListArtifactsResp, error) {
	out := new(ListArtifactsResp)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.Opus/ListArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpusServer is the server API for Opus service.
// All implementations should embed UnimplementedOpusServer
// for forward compatibility
type OpusServer interface {
	PutOnArtifacts(context.Context, *PutOnArtifactsReq) (*pb.VoidResponse, error)
	PutOffArtifacts(context.Context, *PutOffArtifactsReq) (*pb.VoidResponse, error)
	ListArtifacts(context.Context, *ListArtifactsReq) (*ListArtifactsResp, error)
}

// UnimplementedOpusServer should be embedded to have forward compatible implementations.
type UnimplementedOpusServer struct {
}

func (*UnimplementedOpusServer) PutOnArtifacts(context.Context, *PutOnArtifactsReq) (*pb.VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOnArtifacts not implemented")
}
func (*UnimplementedOpusServer) PutOffArtifacts(context.Context, *PutOffArtifactsReq) (*pb.VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOffArtifacts not implemented")
}
func (*UnimplementedOpusServer) ListArtifacts(context.Context, *ListArtifactsReq) (*ListArtifactsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}

func RegisterOpusServer(s grpc1.ServiceRegistrar, srv OpusServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Opus_serviceDesc(srv, opts...), srv)
}

var _Opus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.dicehub.release.Opus",
	HandlerType: (*OpusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "opus.proto",
}

func _get_Opus_serviceDesc(srv OpusServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Opus_PutOnArtifacts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PutOnArtifacts(ctx, req.(*PutOnArtifactsReq))
	}
	var _Opus_PutOnArtifacts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Opus_PutOnArtifacts_info = transport.NewServiceInfo("erda.core.dicehub.release.Opus", "PutOnArtifacts", srv)
		_Opus_PutOnArtifacts_Handler = h.Interceptor(_Opus_PutOnArtifacts_Handler)
	}

	_Opus_PutOffArtifacts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PutOffArtifacts(ctx, req.(*PutOffArtifactsReq))
	}
	var _Opus_PutOffArtifacts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Opus_PutOffArtifacts_info = transport.NewServiceInfo("erda.core.dicehub.release.Opus", "PutOffArtifacts", srv)
		_Opus_PutOffArtifacts_Handler = h.Interceptor(_Opus_PutOffArtifacts_Handler)
	}

	_Opus_ListArtifacts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListArtifacts(ctx, req.(*ListArtifactsReq))
	}
	var _Opus_ListArtifacts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Opus_ListArtifacts_info = transport.NewServiceInfo("erda.core.dicehub.release.Opus", "ListArtifacts", srv)
		_Opus_ListArtifacts_Handler = h.Interceptor(_Opus_ListArtifacts_Handler)
	}

	var serviceDesc = _Opus_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "PutOnArtifacts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PutOnArtifactsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpusServer).PutOnArtifacts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Opus_PutOnArtifacts_info)
				}
				if interceptor == nil {
					return _Opus_PutOnArtifacts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.Opus/PutOnArtifacts",
				}
				return interceptor(ctx, in, info, _Opus_PutOnArtifacts_Handler)
			},
		},
		{
			MethodName: "PutOffArtifacts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PutOffArtifactsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpusServer).PutOffArtifacts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Opus_PutOffArtifacts_info)
				}
				if interceptor == nil {
					return _Opus_PutOffArtifacts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.Opus/PutOffArtifacts",
				}
				return interceptor(ctx, in, info, _Opus_PutOffArtifacts_Handler)
			},
		},
		{
			MethodName: "ListArtifacts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListArtifactsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpusServer).ListArtifacts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Opus_ListArtifacts_info)
				}
				if interceptor == nil {
					return _Opus_ListArtifacts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.Opus/ListArtifacts",
				}
				return interceptor(ctx, in, info, _Opus_ListArtifacts_Handler)
			},
		},
	}
	return &serviceDesc
}
