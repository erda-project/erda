// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: release.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReleaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ReleaseList) Reset() {
	*x = ReleaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseList) ProtoMessage() {}

func (x *ReleaseList) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseList.ProtoReflect.Descriptor instead.
func (*ReleaseList) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{0}
}

func (x *ReleaseList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

// ReleaseCreateRequest create release API(POST /api/releases)
type ReleaseCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any character string, easy for users to identify, the maximum length is 255, required
	ReleaseName string `protobuf:"bytes,1,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	// describe this release function in detail, optional
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// When the resource type is diceyml, store the content of dice.yml, optional
	Dice string `protobuf:"bytes,3,opt,name=dice,proto3" json:"dice,omitempty"`
	// When addon is registered, release contains dice.yml and addon.yml, optional
	Addon                  string         `protobuf:"bytes,4,opt,name=addon,proto3" json:"addon,omitempty"`
	Tag                    []string       `protobuf:"bytes,5,rep,name=tag,proto3" json:"tag,omitempty"`
	IsStable               bool           `protobuf:"varint,6,opt,name=isStable,proto3" json:"isStable,omitempty"`
	IsFormal               bool           `protobuf:"varint,7,opt,name=isFormal,proto3" json:"isFormal,omitempty"`
	IsProjectRelease       bool           `protobuf:"varint,8,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	Changelog              string         `protobuf:"bytes,9,opt,name=changelog,proto3" json:"changelog,omitempty"`
	ApplicationReleaseList []*ReleaseList `protobuf:"bytes,10,rep,name=applicationReleaseList,proto3" json:"applicationReleaseList,omitempty"`
	// Used for release classification, description of release category, map type, maximum length 1000, optional
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags   []string          `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	// Store the release version information, which is unique under the same project and the same application in the same company, the maximum length is 100, optional
	Version string `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	// Enterprise identifier, describing the company to which the release belongs, optional
	OrgID int64 `protobuf:"varint,15,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	// Project identifier, describing the project to which the release belongs, optional
	ProjectID int64 `protobuf:"varint,16,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	// Application identifier, describing the application to which the release belongs, optional
	ApplicationID int64 `protobuf:"varint,17,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	// Project name, describe the project to which the release belongs, optional
	ProjectName string `protobuf:"bytes,18,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// Application name, describing the application to which the release belongs, optional
	ApplicationName string `protobuf:"bytes,19,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	// User identifier, describe the user to which the release belongs, the maximum length is 50, optional
	UserID string `protobuf:"bytes,20,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	// Cluster name, describing the cluster to which the release belongs, the maximum length is 80, optional
	ClusterName string `protobuf:"bytes,21,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// release Included resources，to compatible diceyml，optional
	Resources []*ReleaseResource `protobuf:"bytes,22,rep,name=resources,proto3" json:"resources,omitempty"`
	// CrossCluster cross cluster
	CrossCluster bool `protobuf:"varint,23,opt,name=crossCluster,proto3" json:"crossCluster,omitempty"`
}

func (x *ReleaseCreateRequest) Reset() {
	*x = ReleaseCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCreateRequest) ProtoMessage() {}

func (x *ReleaseCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCreateRequest.ProtoReflect.Descriptor instead.
func (*ReleaseCreateRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{1}
}

func (x *ReleaseCreateRequest) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseCreateRequest) GetDice() string {
	if x != nil {
		return x.Dice
	}
	return ""
}

func (x *ReleaseCreateRequest) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *ReleaseCreateRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ReleaseCreateRequest) GetIsStable() bool {
	if x != nil {
		return x.IsStable
	}
	return false
}

func (x *ReleaseCreateRequest) GetIsFormal() bool {
	if x != nil {
		return x.IsFormal
	}
	return false
}

func (x *ReleaseCreateRequest) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *ReleaseCreateRequest) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *ReleaseCreateRequest) GetApplicationReleaseList() []*ReleaseList {
	if x != nil {
		return x.ApplicationReleaseList
	}
	return nil
}

func (x *ReleaseCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ReleaseCreateRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ReleaseCreateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseCreateRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ReleaseCreateRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseCreateRequest) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ReleaseCreateRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ReleaseCreateRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ReleaseCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReleaseCreateRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ReleaseCreateRequest) GetResources() []*ReleaseResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ReleaseCreateRequest) GetCrossCluster() bool {
	if x != nil {
		return x.CrossCluster
	}
	return false
}

// ReleaseResource Resource structure
type ReleaseResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type resources type, required
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name resource name，optional, eg: init.sql/upgrade.sql
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // URL 资源URL, 可直接wget获取到资源, 选填(当type为diceyml, 资源作为release的dice字段在mysql存储)
	// URL resources URL, can get by wget
	URL  string                     `protobuf:"bytes,3,opt,name=URL,json=url,proto3" json:"URL,omitempty"`
	Meta map[string]*structpb.Value `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReleaseResource) Reset() {
	*x = ReleaseResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResource) ProtoMessage() {}

func (x *ReleaseResource) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResource.ProtoReflect.Descriptor instead.
func (*ReleaseResource) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReleaseResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseResource) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ReleaseResource) GetMeta() map[string]*structpb.Value {
	if x != nil {
		return x.Meta
	}
	return nil
}

// ReleaseCreateResponse create release API response
type ReleaseCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ReleaseCreateResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseCreateResponse) Reset() {
	*x = ReleaseCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCreateResponse) ProtoMessage() {}

func (x *ReleaseCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCreateResponse.ProtoReflect.Descriptor instead.
func (*ReleaseCreateResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseCreateResponse) GetData() *ReleaseCreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

// ReleaseCreateResponseData create release response data
type ReleaseCreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
}

func (x *ReleaseCreateResponseData) Reset() {
	*x = ReleaseCreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCreateResponseData) ProtoMessage() {}

func (x *ReleaseCreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCreateResponseData.ProtoReflect.Descriptor instead.
func (*ReleaseCreateResponseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{4}
}

func (x *ReleaseCreateResponseData) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

// ReleaseUpdateRequest update release API(PUT /api/releases/{releaseID})
type ReleaseUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID              string         `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
	Version                string         `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Desc                   string         `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Changelog              string         `protobuf:"bytes,4,opt,name=changelog,proto3" json:"changelog,omitempty"`
	ApplicationReleaseList []*ReleaseList `protobuf:"bytes,5,rep,name=applicationReleaseList,proto3" json:"applicationReleaseList,omitempty"`
	// The following information is mainly used for version coverage, to find out the previous version to clear
	OrgID         int64 `protobuf:"varint,6,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ProjectID     int64 `protobuf:"varint,7,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ApplicationID int64 `protobuf:"varint,8,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
}

func (x *ReleaseUpdateRequest) Reset() {
	*x = ReleaseUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUpdateRequest) ProtoMessage() {}

func (x *ReleaseUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUpdateRequest.ProtoReflect.Descriptor instead.
func (*ReleaseUpdateRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{5}
}

func (x *ReleaseUpdateRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseUpdateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseUpdateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseUpdateRequest) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *ReleaseUpdateRequest) GetApplicationReleaseList() []*ReleaseList {
	if x != nil {
		return x.ApplicationReleaseList
	}
	return nil
}

func (x *ReleaseUpdateRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ReleaseUpdateRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseUpdateRequest) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

// ReleaseDataResponse response only return data
type ReleaseDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseDataResponse) Reset() {
	*x = ReleaseDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseDataResponse) ProtoMessage() {}

func (x *ReleaseDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseDataResponse.ProtoReflect.Descriptor instead.
func (*ReleaseDataResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{6}
}

func (x *ReleaseDataResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ReleaseUserDataResponse response return userID and data
type ReleaseUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *ReleaseUserDataResponse) Reset() {
	*x = ReleaseUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUserDataResponse) ProtoMessage() {}

func (x *ReleaseUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUserDataResponse.ProtoReflect.Descriptor instead.
func (*ReleaseUserDataResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{7}
}

func (x *ReleaseUserDataResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ReleaseUserDataResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

// ReleaseUpdateResponse update release API response
type ReleaseUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Update succ
}

func (x *ReleaseUpdateResponse) Reset() {
	*x = ReleaseUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUpdateResponse) ProtoMessage() {}

func (x *ReleaseUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUpdateResponse.ProtoReflect.Descriptor instead.
func (*ReleaseUpdateResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseUpdateResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ReleaseReferenceUpdateRequest update Reference API(/api/releases/{releaseID}/reference/actions/change)
type ReleaseReferenceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
	Increase  bool   `protobuf:"varint,2,opt,name=increase,proto3" json:"increase,omitempty"` // true:reference+1  false:reference-1
}

func (x *ReleaseReferenceUpdateRequest) Reset() {
	*x = ReleaseReferenceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseReferenceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseReferenceUpdateRequest) ProtoMessage() {}

func (x *ReleaseReferenceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseReferenceUpdateRequest.ProtoReflect.Descriptor instead.
func (*ReleaseReferenceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{9}
}

func (x *ReleaseReferenceUpdateRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseReferenceUpdateRequest) GetIncrease() bool {
	if x != nil {
		return x.Increase
	}
	return false
}

type GetIosPlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
}

func (x *GetIosPlistRequest) Reset() {
	*x = GetIosPlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIosPlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIosPlistRequest) ProtoMessage() {}

func (x *GetIosPlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIosPlistRequest.ProtoReflect.Descriptor instead.
func (*GetIosPlistRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{10}
}

func (x *GetIosPlistRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

type GetIosPlistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIosPlistResponse) Reset() {
	*x = GetIosPlistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIosPlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIosPlistResponse) ProtoMessage() {}

func (x *GetIosPlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIosPlistResponse.ProtoReflect.Descriptor instead.
func (*GetIosPlistResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{11}
}

func (x *GetIosPlistResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ReleaseDeleteRequest delete release API(DELETE /api/releases/{releaseID})
type ReleaseDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
}

func (x *ReleaseDeleteRequest) Reset() {
	*x = ReleaseDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseDeleteRequest) ProtoMessage() {}

func (x *ReleaseDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseDeleteRequest.ProtoReflect.Descriptor instead.
func (*ReleaseDeleteRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{12}
}

func (x *ReleaseDeleteRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

// ReleaseDeleteResponse delete release API response
type ReleaseDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Delete succ
}

func (x *ReleaseDeleteResponse) Reset() {
	*x = ReleaseDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseDeleteResponse) ProtoMessage() {}

func (x *ReleaseDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseDeleteResponse.ProtoReflect.Descriptor instead.
func (*ReleaseDeleteResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{13}
}

func (x *ReleaseDeleteResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ReleaseGetRequest get release API(GET /api/releases/{releaseId})
type ReleaseGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
}

func (x *ReleaseGetRequest) Reset() {
	*x = ReleaseGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseGetRequest) ProtoMessage() {}

func (x *ReleaseGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseGetRequest.ProtoReflect.Descriptor instead.
func (*ReleaseGetRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseGetRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

// ReleaseGetResponse get release API response
type ReleaseGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ReleaseGetResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseGetResponse) Reset() {
	*x = ReleaseGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseGetResponse) ProtoMessage() {}

func (x *ReleaseGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseGetResponse.ProtoReflect.Descriptor instead.
func (*ReleaseGetResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{15}
}

func (x *ReleaseGetResponse) GetData() *ReleaseGetResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReleaseSummaryArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ApplicationReleaseSummary `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ReleaseSummaryArray) Reset() {
	*x = ReleaseSummaryArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSummaryArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSummaryArray) ProtoMessage() {}

func (x *ReleaseSummaryArray) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSummaryArray.ProtoReflect.Descriptor instead.
func (*ReleaseSummaryArray) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{16}
}

func (x *ReleaseSummaryArray) GetList() []*ApplicationReleaseSummary {
	if x != nil {
		return x.List
	}
	return nil
}

// ReleaseGetResponseData get release API response
type ReleaseGetResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID              string                 `protobuf:"bytes,1,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
	ReleaseName            string                 `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	Diceyml                string                 `protobuf:"bytes,3,opt,name=diceyml,proto3" json:"diceyml,omitempty"`
	Desc                   string                 `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Addon                  string                 `protobuf:"bytes,5,opt,name=addon,proto3" json:"addon,omitempty"`
	Changelog              string                 `protobuf:"bytes,6,opt,name=changelog,proto3" json:"changelog,omitempty"`
	IsStable               bool                   `protobuf:"varint,7,opt,name=isStable,proto3" json:"isStable,omitempty"`
	IsFormal               bool                   `protobuf:"varint,8,opt,name=isFormal,proto3" json:"isFormal,omitempty"`
	IsProjectRelease       bool                   `protobuf:"varint,9,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	ApplicationReleaseList []*ReleaseSummaryArray `protobuf:"bytes,10,rep,name=applicationReleaseList,proto3" json:"applicationReleaseList,omitempty"`
	Resources              []*ReleaseResource     `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty"`
	Images                 []string               `protobuf:"bytes,12,rep,name=images,proto3" json:"images,omitempty"`
	ServiceImages          []*ServiceImagePair    `protobuf:"bytes,13,rep,name=serviceImages,proto3" json:"serviceImages,omitempty"`
	Labels                 map[string]string      `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags                   string                 `protobuf:"bytes,15,opt,name=tags,proto3" json:"tags,omitempty"`
	Version                string                 `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	// is it possible to cross cluster
	CrossCluster bool `protobuf:"varint,17,opt,name=crossCluster,proto3" json:"crossCluster,omitempty"`
	// current deployment times
	Reference       int64  `protobuf:"varint,18,opt,name=reference,proto3" json:"reference,omitempty"`
	OrgID           int64  `protobuf:"varint,19,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ProjectID       int64  `protobuf:"varint,20,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ApplicationID   int64  `protobuf:"varint,21,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ProjectName     string `protobuf:"bytes,22,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationName string `protobuf:"bytes,23,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	UserID          string `protobuf:"bytes,24,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	// 集群名称
	ClusterName string                 `protobuf:"bytes,25,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// 是否为分支最新
	IsLatest bool `protobuf:"varint,28,opt,name=isLatest,proto3" json:"isLatest,omitempty"`
}

func (x *ReleaseGetResponseData) Reset() {
	*x = ReleaseGetResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseGetResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseGetResponseData) ProtoMessage() {}

func (x *ReleaseGetResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseGetResponseData.ProtoReflect.Descriptor instead.
func (*ReleaseGetResponseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{17}
}

func (x *ReleaseGetResponseData) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseGetResponseData) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseGetResponseData) GetDiceyml() string {
	if x != nil {
		return x.Diceyml
	}
	return ""
}

func (x *ReleaseGetResponseData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseGetResponseData) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *ReleaseGetResponseData) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *ReleaseGetResponseData) GetIsStable() bool {
	if x != nil {
		return x.IsStable
	}
	return false
}

func (x *ReleaseGetResponseData) GetIsFormal() bool {
	if x != nil {
		return x.IsFormal
	}
	return false
}

func (x *ReleaseGetResponseData) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *ReleaseGetResponseData) GetApplicationReleaseList() []*ReleaseSummaryArray {
	if x != nil {
		return x.ApplicationReleaseList
	}
	return nil
}

func (x *ReleaseGetResponseData) GetResources() []*ReleaseResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ReleaseGetResponseData) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ReleaseGetResponseData) GetServiceImages() []*ServiceImagePair {
	if x != nil {
		return x.ServiceImages
	}
	return nil
}

func (x *ReleaseGetResponseData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ReleaseGetResponseData) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ReleaseGetResponseData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseGetResponseData) GetCrossCluster() bool {
	if x != nil {
		return x.CrossCluster
	}
	return false
}

func (x *ReleaseGetResponseData) GetReference() int64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *ReleaseGetResponseData) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ReleaseGetResponseData) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseGetResponseData) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ReleaseGetResponseData) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ReleaseGetResponseData) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ReleaseGetResponseData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReleaseGetResponseData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ReleaseGetResponseData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReleaseGetResponseData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReleaseGetResponseData) GetIsLatest() bool {
	if x != nil {
		return x.IsLatest
	}
	return false
}

type ServiceImagePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,json=name,proto3" json:"serviceName,omitempty"`
	Image       string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ServiceImagePair) Reset() {
	*x = ServiceImagePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceImagePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceImagePair) ProtoMessage() {}

func (x *ServiceImagePair) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceImagePair.ProtoReflect.Descriptor instead.
func (*ServiceImagePair) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{18}
}

func (x *ServiceImagePair) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceImagePair) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type ApplicationReleaseSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID       string              `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
	ReleaseName     string              `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	Version         string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ApplicationID   int64               `protobuf:"varint,4,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ApplicationName string              `protobuf:"bytes,5,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Services        []*ServiceImagePair `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty"`
	CreatedAt       string              `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DiceYml         string              `protobuf:"bytes,8,opt,name=diceYml,proto3" json:"diceYml,omitempty"`
}

func (x *ApplicationReleaseSummary) Reset() {
	*x = ApplicationReleaseSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationReleaseSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationReleaseSummary) ProtoMessage() {}

func (x *ApplicationReleaseSummary) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationReleaseSummary.ProtoReflect.Descriptor instead.
func (*ApplicationReleaseSummary) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{19}
}

func (x *ApplicationReleaseSummary) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ApplicationReleaseSummary) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ApplicationReleaseSummary) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ApplicationReleaseSummary) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ApplicationReleaseSummary) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplicationReleaseSummary) GetServices() []*ServiceImagePair {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ApplicationReleaseSummary) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ApplicationReleaseSummary) GetDiceYml() string {
	if x != nil {
		return x.DiceYml
	}
	return ""
}

// ReleaseListRequest list release API(GET /api/releases)
type ReleaseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// query parameter，fuzzy match by releaseId/releaseName/version
	Query     string `protobuf:"bytes,1,opt,name=query,json=q,proto3" json:"query,omitempty"`
	ReleaseID string `protobuf:"bytes,2,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
	// releaseName exact match by name
	ReleaseName string `protobuf:"bytes,3,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	// cluster name
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// branch name
	Branch           string   `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	IsLatest         bool     `protobuf:"varint,6,opt,name=isLatest,proto3" json:"isLatest,omitempty"`
	IsStable         string   `protobuf:"bytes,7,opt,name=isStable,proto3" json:"isStable,omitempty"`
	IsFormal         string   `protobuf:"bytes,8,opt,name=isFormal,proto3" json:"isFormal,omitempty"`
	IsProjectRelease string   `protobuf:"bytes,9,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	UserID           []string `protobuf:"bytes,10,rep,name=userID,json=userId,proto3" json:"userID,omitempty"`
	Version          string   `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	CommitID         string   `protobuf:"bytes,13,opt,name=commitID,json=commitId,proto3" json:"commitID,omitempty"`
	Tags             string   `protobuf:"bytes,14,opt,name=tags,proto3" json:"tags,omitempty"`
	// only show releases with version
	IsVersion bool `protobuf:"varint,15,opt,name=isVersion,proto3" json:"isVersion,omitempty"`
	// cross cluster
	CrossCluster                 string   `protobuf:"bytes,16,opt,name=crossCluster,proto3" json:"crossCluster,omitempty"`
	CrossClusterOrSpecifyCluster string   `protobuf:"bytes,17,opt,name=crossClusterOrSpecifyCluster,proto3" json:"crossClusterOrSpecifyCluster,omitempty"`
	ApplicationID                []string `protobuf:"bytes,18,rep,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ProjectID                    int64    `protobuf:"varint,19,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	StartTime                    int64    `protobuf:"varint,20,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime                      int64    `protobuf:"varint,21,opt,name=endTime,proto3" json:"endTime,omitempty"`
	PageSize                     int64    `protobuf:"varint,22,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNo                       int64    `protobuf:"varint,23,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	OrderBy                      string   `protobuf:"bytes,24,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Order                        string   `protobuf:"bytes,25,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ReleaseListRequest) Reset() {
	*x = ReleaseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListRequest) ProtoMessage() {}

func (x *ReleaseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListRequest.ProtoReflect.Descriptor instead.
func (*ReleaseListRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{20}
}

func (x *ReleaseListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ReleaseListRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseListRequest) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseListRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ReleaseListRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReleaseListRequest) GetIsLatest() bool {
	if x != nil {
		return x.IsLatest
	}
	return false
}

func (x *ReleaseListRequest) GetIsStable() string {
	if x != nil {
		return x.IsStable
	}
	return ""
}

func (x *ReleaseListRequest) GetIsFormal() string {
	if x != nil {
		return x.IsFormal
	}
	return ""
}

func (x *ReleaseListRequest) GetIsProjectRelease() string {
	if x != nil {
		return x.IsProjectRelease
	}
	return ""
}

func (x *ReleaseListRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *ReleaseListRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseListRequest) GetCommitID() string {
	if x != nil {
		return x.CommitID
	}
	return ""
}

func (x *ReleaseListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ReleaseListRequest) GetIsVersion() bool {
	if x != nil {
		return x.IsVersion
	}
	return false
}

func (x *ReleaseListRequest) GetCrossCluster() string {
	if x != nil {
		return x.CrossCluster
	}
	return ""
}

func (x *ReleaseListRequest) GetCrossClusterOrSpecifyCluster() string {
	if x != nil {
		return x.CrossClusterOrSpecifyCluster
	}
	return ""
}

func (x *ReleaseListRequest) GetApplicationID() []string {
	if x != nil {
		return x.ApplicationID
	}
	return nil
}

func (x *ReleaseListRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ReleaseListRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ReleaseListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReleaseListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ReleaseListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ReleaseListRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

// ReleaseListResponse release list api response data structure
type ReleaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ReleaseListResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string                 `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *ReleaseListResponse) Reset() {
	*x = ReleaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListResponse) ProtoMessage() {}

func (x *ReleaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListResponse.ProtoReflect.Descriptor instead.
func (*ReleaseListResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{21}
}

func (x *ReleaseListResponse) GetData() *ReleaseListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReleaseListResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type ListReleaseNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
}

func (x *ListReleaseNameRequest) Reset() {
	*x = ListReleaseNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseNameRequest) ProtoMessage() {}

func (x *ListReleaseNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseNameRequest.ProtoReflect.Descriptor instead.
func (*ListReleaseNameRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{22}
}

func (x *ListReleaseNameRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type ListReleaseNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListReleaseNameResponse) Reset() {
	*x = ListReleaseNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseNameResponse) ProtoMessage() {}

func (x *ListReleaseNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseNameResponse.ProtoReflect.Descriptor instead.
func (*ListReleaseNameResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{23}
}

func (x *ListReleaseNameResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// ReleaseListResponseData release list api actual response data
type ReleaseListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of releases used for paging
	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ReleaseData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ReleaseListResponseData) Reset() {
	*x = ReleaseListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListResponseData) ProtoMessage() {}

func (x *ReleaseListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListResponseData.ProtoReflect.Descriptor instead.
func (*ReleaseListResponseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{24}
}

func (x *ReleaseListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReleaseListResponseData) GetList() []*ReleaseData {
	if x != nil {
		return x.List
	}
	return nil
}

type ReleaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID              string             `protobuf:"bytes,1,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
	ReleaseName            string             `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	Diceyml                string             `protobuf:"bytes,3,opt,name=diceyml,proto3" json:"diceyml,omitempty"`
	Desc                   string             `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Addon                  string             `protobuf:"bytes,5,opt,name=addon,proto3" json:"addon,omitempty"`
	Changelog              string             `protobuf:"bytes,6,opt,name=changelog,proto3" json:"changelog,omitempty"`
	IsStable               bool               `protobuf:"varint,7,opt,name=isStable,proto3" json:"isStable,omitempty"`
	IsFormal               bool               `protobuf:"varint,8,opt,name=isFormal,proto3" json:"isFormal,omitempty"`
	IsProjectRelease       bool               `protobuf:"varint,9,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	ApplicationReleaseList string             `protobuf:"bytes,10,opt,name=applicationReleaseList,proto3" json:"applicationReleaseList,omitempty"`
	Resources              []*ReleaseResource `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty"`
	Images                 []string           `protobuf:"bytes,12,rep,name=images,proto3" json:"images,omitempty"`
	Labels                 map[string]string  `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags                   string             `protobuf:"bytes,14,opt,name=tags,proto3" json:"tags,omitempty"`
	Version                string             `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	// is it possible to cross cluster
	CrossCluster bool `protobuf:"varint,16,opt,name=crossCluster,proto3" json:"crossCluster,omitempty"`
	// current deployment times
	Reference       int64  `protobuf:"varint,17,opt,name=reference,proto3" json:"reference,omitempty"`
	OrgID           int64  `protobuf:"varint,18,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ProjectID       int64  `protobuf:"varint,19,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ApplicationID   int64  `protobuf:"varint,20,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ProjectName     string `protobuf:"bytes,21,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationName string `protobuf:"bytes,22,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	UserID          string `protobuf:"bytes,23,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	// 集群名称
	ClusterName string                 `protobuf:"bytes,24,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// 是否为分支最新
	IsLatest bool `protobuf:"varint,27,opt,name=isLatest,proto3" json:"isLatest,omitempty"`
}

func (x *ReleaseData) Reset() {
	*x = ReleaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseData) ProtoMessage() {}

func (x *ReleaseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseData.ProtoReflect.Descriptor instead.
func (*ReleaseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{25}
}

func (x *ReleaseData) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseData) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseData) GetDiceyml() string {
	if x != nil {
		return x.Diceyml
	}
	return ""
}

func (x *ReleaseData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseData) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *ReleaseData) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *ReleaseData) GetIsStable() bool {
	if x != nil {
		return x.IsStable
	}
	return false
}

func (x *ReleaseData) GetIsFormal() bool {
	if x != nil {
		return x.IsFormal
	}
	return false
}

func (x *ReleaseData) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *ReleaseData) GetApplicationReleaseList() string {
	if x != nil {
		return x.ApplicationReleaseList
	}
	return ""
}

func (x *ReleaseData) GetResources() []*ReleaseResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ReleaseData) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ReleaseData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ReleaseData) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ReleaseData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseData) GetCrossCluster() bool {
	if x != nil {
		return x.CrossCluster
	}
	return false
}

func (x *ReleaseData) GetReference() int64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *ReleaseData) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ReleaseData) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseData) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ReleaseData) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ReleaseData) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ReleaseData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReleaseData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ReleaseData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReleaseData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReleaseData) GetIsLatest() bool {
	if x != nil {
		return x.IsLatest
	}
	return false
}

// ReleaseNameListRequest release name list request
type ReleaseNameListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationID int64 `protobuf:"varint,1,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
}

func (x *ReleaseNameListRequest) Reset() {
	*x = ReleaseNameListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNameListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNameListRequest) ProtoMessage() {}

func (x *ReleaseNameListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNameListRequest.ProtoReflect.Descriptor instead.
func (*ReleaseNameListRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{26}
}

func (x *ReleaseNameListRequest) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

// ReleaseNameListResponse release name list response
type ReleaseNameListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseNameListResponse) Reset() {
	*x = ReleaseNameListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNameListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNameListResponse) ProtoMessage() {}

func (x *ReleaseNameListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNameListResponse.ProtoReflect.Descriptor instead.
func (*ReleaseNameListResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{27}
}

func (x *ReleaseNameListResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLatestReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetLatestReleasesRequest) Reset() {
	*x = GetLatestReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestReleasesRequest) ProtoMessage() {}

func (x *GetLatestReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestReleasesRequest.ProtoReflect.Descriptor instead.
func (*GetLatestReleasesRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{28}
}

func (x *GetLatestReleasesRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetLatestReleasesRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetLatestReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetLatestReleasesResponseData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetLatestReleasesResponse) Reset() {
	*x = GetLatestReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestReleasesResponse) ProtoMessage() {}

func (x *GetLatestReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestReleasesResponse.ProtoReflect.Descriptor instead.
func (*GetLatestReleasesResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{29}
}

func (x *GetLatestReleasesResponse) GetData() []*GetLatestReleasesResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLatestReleasesResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// releaseID Unique identifier RELEASE, generated by the server when it is created
	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
	// ReleaseName Any character string, easy for users to identify, the maximum length is 255, required
	ReleaseName string `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	// Desc describe this release function in detail,optional
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Dice When the resource type is diceyml, store the content of dice.yml, optional
	Dice string `protobuf:"bytes,4,opt,name=dice,proto3" json:"dice,omitempty"`
	// Addon When the resource type is addonyml, store the content of addon.yml, optional
	Addon string `protobuf:"bytes,5,opt,name=addon,proto3" json:"addon,omitempty"`
	// Labels Used for release classification, description of release category, map type, maximum length 1000, optional
	Labels string `protobuf:"bytes,6,opt,name=labels,proto3" json:"labels,omitempty"`
	// Version Store the release version information, which is unique under the same project and the same application in the same company, the maximum length is 100, optional
	// Version, the labeled Release cannot be deleted
	Version string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	// OrgID Describing the company to which the release belongs, optional
	OrgID int64 `protobuf:"varint,8,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	// ProjectID Describe the project to which the release belongs, optional
	ProjectID int64 `protobuf:"varint,9,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	// ApplicationID Describe the application to which the release belongs, optional
	ApplicationID int64 `protobuf:"varint,10,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	// ProjectName Describe the project to which the release belongs, optional
	ProjectName string `protobuf:"bytes,11,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// ApplicationName Describe the application to which the release belongs, optional
	ApplicationName string `protobuf:"bytes,12,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	// UserID  Describe the user to which the release belongs, the maximum length is 50, optional
	UserID string `protobuf:"bytes,13,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	// ClusterName Describe the cluster to which the release belongs, the maximum length is 80, optional
	ClusterName string `protobuf:"bytes,14,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// Resources Specify the release resource type and resource storage path, to be compatible with the existing diceyml, optional
	Resources string `protobuf:"bytes,15,opt,name=resources,proto3" json:"resources,omitempty"`
	// Reference The number of release deployments, when it is 0, it can be cleared
	Reference int64 `protobuf:"varint,16,opt,name=reference,proto3" json:"reference,omitempty"`
	// CrossCluster Indicates whether the current release can cross clusters, without cluster restrictions
	CrossCluster bool `protobuf:"varint,17,opt,name=crossCluster,proto3" json:"crossCluster,omitempty"`
	// CreatedAt Release creation time, generated by the server when it is created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// UpdatedAt Release update time, updated by the server during update
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *GetLatestReleasesResponseData) Reset() {
	*x = GetLatestReleasesResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestReleasesResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestReleasesResponseData) ProtoMessage() {}

func (x *GetLatestReleasesResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestReleasesResponseData.ProtoReflect.Descriptor instead.
func (*GetLatestReleasesResponseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{30}
}

func (x *GetLatestReleasesResponseData) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetDice() string {
	if x != nil {
		return x.Dice
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetLatestReleasesResponseData) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *GetLatestReleasesResponseData) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *GetLatestReleasesResponseData) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetResources() string {
	if x != nil {
		return x.Resources
	}
	return ""
}

func (x *GetLatestReleasesResponseData) GetReference() int64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *GetLatestReleasesResponseData) GetCrossCluster() bool {
	if x != nil {
		return x.CrossCluster
	}
	return false
}

func (x *GetLatestReleasesResponseData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetLatestReleasesResponseData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ReleaseGCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseGCRequest) Reset() {
	*x = ReleaseGCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseGCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseGCRequest) ProtoMessage() {}

func (x *ReleaseGCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseGCRequest.ProtoReflect.Descriptor instead.
func (*ReleaseGCRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{31}
}

type ReleaseUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceFileID  string `protobuf:"bytes,1,opt,name=diceFileID,proto3" json:"diceFileID,omitempty"`
	ProjectID   int64  `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	OrgID       int64  `protobuf:"varint,4,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	UserID      string `protobuf:"bytes,5,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	ClusterName string `protobuf:"bytes,6,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *ReleaseUploadRequest) Reset() {
	*x = ReleaseUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUploadRequest) ProtoMessage() {}

func (x *ReleaseUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUploadRequest.ProtoReflect.Descriptor instead.
func (*ReleaseUploadRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{32}
}

func (x *ReleaseUploadRequest) GetDiceFileID() string {
	if x != nil {
		return x.DiceFileID
	}
	return ""
}

func (x *ReleaseUploadRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseUploadRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ReleaseUploadRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ReleaseUploadRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReleaseUploadRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ReleaseUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ReleaseCreateResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseUploadResponse) Reset() {
	*x = ReleaseUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUploadResponse) ProtoMessage() {}

func (x *ReleaseUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUploadResponse.ProtoReflect.Descriptor instead.
func (*ReleaseUploadResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{33}
}

func (x *ReleaseUploadResponse) GetData() *ReleaseCreateResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ParseReleaseFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceFileID string `protobuf:"bytes,1,opt,name=diceFileID,proto3" json:"diceFileID,omitempty"`
}

func (x *ParseReleaseFileRequest) Reset() {
	*x = ParseReleaseFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseReleaseFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseReleaseFileRequest) ProtoMessage() {}

func (x *ParseReleaseFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseReleaseFileRequest.ProtoReflect.Descriptor instead.
func (*ParseReleaseFileRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{34}
}

func (x *ParseReleaseFileRequest) GetDiceFileID() string {
	if x != nil {
		return x.DiceFileID
	}
	return ""
}

type ParseReleaseFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ParseReleaseFileResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ParseReleaseFileResponse) Reset() {
	*x = ParseReleaseFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseReleaseFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseReleaseFileResponse) ProtoMessage() {}

func (x *ParseReleaseFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseReleaseFileResponse.ProtoReflect.Descriptor instead.
func (*ParseReleaseFileResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{35}
}

func (x *ParseReleaseFileResponse) GetData() *ParseReleaseFileResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ParseReleaseFileResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ParseReleaseFileResponseData) Reset() {
	*x = ParseReleaseFileResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseReleaseFileResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseReleaseFileResponseData) ProtoMessage() {}

func (x *ParseReleaseFileResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseReleaseFileResponseData.ProtoReflect.Descriptor instead.
func (*ParseReleaseFileResponseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{36}
}

func (x *ParseReleaseFileResponseData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type FormalReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *FormalReleaseRequest) Reset() {
	*x = FormalReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalReleaseRequest) ProtoMessage() {}

func (x *FormalReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalReleaseRequest.ProtoReflect.Descriptor instead.
func (*FormalReleaseRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{37}
}

func (x *FormalReleaseRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type FormalReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FormalReleaseResponse) Reset() {
	*x = FormalReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalReleaseResponse) ProtoMessage() {}

func (x *FormalReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalReleaseResponse.ProtoReflect.Descriptor instead.
func (*FormalReleaseResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{38}
}

func (x *FormalReleaseResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type FormalReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsProjectRelease bool     `protobuf:"varint,1,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	ProjectId        int64    `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ReleaseId        []string `protobuf:"bytes,3,rep,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *FormalReleasesRequest) Reset() {
	*x = FormalReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalReleasesRequest) ProtoMessage() {}

func (x *FormalReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalReleasesRequest.ProtoReflect.Descriptor instead.
func (*FormalReleasesRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{39}
}

func (x *FormalReleasesRequest) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *FormalReleasesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FormalReleasesRequest) GetReleaseId() []string {
	if x != nil {
		return x.ReleaseId
	}
	return nil
}

type FormalReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FormalReleasesResponse) Reset() {
	*x = FormalReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalReleasesResponse) ProtoMessage() {}

func (x *FormalReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalReleasesResponse.ProtoReflect.Descriptor instead.
func (*FormalReleasesResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{40}
}

func (x *FormalReleasesResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ReleasesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsProjectRelease bool     `protobuf:"varint,1,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	ProjectId        int64    `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ReleaseId        []string `protobuf:"bytes,3,rep,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *ReleasesDeleteRequest) Reset() {
	*x = ReleasesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesDeleteRequest) ProtoMessage() {}

func (x *ReleasesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesDeleteRequest.ProtoReflect.Descriptor instead.
func (*ReleasesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{41}
}

func (x *ReleasesDeleteRequest) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *ReleasesDeleteRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ReleasesDeleteRequest) GetReleaseId() []string {
	if x != nil {
		return x.ReleaseId
	}
	return nil
}

type ReleasesDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleasesDeleteResponse) Reset() {
	*x = ReleasesDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasesDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasesDeleteResponse) ProtoMessage() {}

func (x *ReleasesDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasesDeleteResponse.ProtoReflect.Descriptor instead.
func (*ReleasesDeleteResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{42}
}

func (x *ReleasesDeleteResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CheckVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsProjectRelease bool   `protobuf:"varint,1,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	AppID            int64  `protobuf:"varint,2,opt,name=appID,proto3" json:"appID,omitempty"`
	OrgID            int64  `protobuf:"varint,3,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID        int64  `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Version          string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CheckVersionRequest) Reset() {
	*x = CheckVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVersionRequest) ProtoMessage() {}

func (x *CheckVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVersionRequest.ProtoReflect.Descriptor instead.
func (*CheckVersionRequest) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{43}
}

func (x *CheckVersionRequest) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *CheckVersionRequest) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CheckVersionRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CheckVersionRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CheckVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CheckVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CheckVersionResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CheckVersionResponse) Reset() {
	*x = CheckVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVersionResponse) ProtoMessage() {}

func (x *CheckVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVersionResponse.ProtoReflect.Descriptor instead.
func (*CheckVersionResponse) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{44}
}

func (x *CheckVersionResponse) GetData() *CheckVersionResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckVersionResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnique bool `protobuf:"varint,1,opt,name=isUnique,proto3" json:"isUnique,omitempty"`
}

func (x *CheckVersionResponseData) Reset() {
	*x = CheckVersionResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_release_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVersionResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVersionResponseData) ProtoMessage() {}

func (x *CheckVersionResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVersionResponseData.ProtoReflect.Descriptor instead.
func (*CheckVersionResponseData) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{45}
}

func (x *CheckVersionResponseData) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

var File_release_proto protoreflect.FileDescriptor

var file_release_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x21, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xf6, 0x06, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12,
	0x5e, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x5e, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x29, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x59, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x49, 0x6f, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x22,
	0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6f, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x14, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x22, 0x2b, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a,
	0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x22, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a,
	0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64,
	0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xad,
	0x09, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x63,
	0x65, 0x79, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65,
	0x79, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x19, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x59, 0x6d, 0x6c, 0x22, 0xe0, 0x05, 0x0a,
	0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x77, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x3e, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x08, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x65, 0x79, 0x6d, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x79, 0x6d, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x16, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x05, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x12, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x15,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x39, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x18, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a,
	0x14, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7f, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0x2c, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x7f, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa5,
	0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x32,
	0xe6, 0x1c, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x0f, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x1b, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xf7,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x1a, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0xfa,
	0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x2f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xd3, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x49, 0x6f, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6f, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6f, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x6c, 0x69, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b,
	0x2d, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xac,
	0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x1b, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xb5, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x1b, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xa8, 0x05, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9e, 0x04, 0x12, 0x9b,
	0x04, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x3f, 0x71,
	0x3d, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x7d, 0x26, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x3d, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x26, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x7b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x26, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x7b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x7d, 0x26, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x3d, 0x7b, 0x69, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x7d,
	0x26, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3d, 0x7b, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x7d, 0x26, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x3d, 0x7b, 0x69,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x7d, 0x26, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x3d, 0x7b, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x7d, 0x26, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x3d, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x26, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x26, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x44, 0x7d, 0x26, 0x74, 0x61, 0x67, 0x73, 0x3d, 0x7b, 0x74, 0x61, 0x67, 0x73, 0x7d, 0x26, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x7b, 0x69, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x7d, 0x26, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x3d, 0x7b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d,
	0x26, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3d, 0x7b, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x26, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3d, 0x7b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x26, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x3d, 0x7b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x5d, 0x26, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x3d, 0x7b,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x7d, 0x26, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x3d, 0x7b, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x7d, 0x26, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x3d, 0x7b, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x7d, 0x26, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x3d, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x7d, 0x26, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x3d, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x0f, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x12, 0xc5, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x20, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x09, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x43, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x05, 0x22, 0x03, 0x2f, 0x67,
	0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x05, 0x0a, 0x03, 0x2f, 0x67, 0x63, 0x12, 0xbb, 0x01, 0x0a, 0x0d,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xd2, 0x01, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x32,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64,
	0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x2d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xd5,
	0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64,
	0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x1a, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x28, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0xa2, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x1a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x0f, 0x0a, 0x0d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x30,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x0f, 0x0a,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xb1,
	0x02, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8e, 0x01, 0x12, 0x8b, 0x01, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x3f, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x3d, 0x7b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x49, 0x44, 0x3d, 0x7b, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x7d, 0x26, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x3d, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x7d,
	0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3d, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x7b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x14, 0xc2, 0xc4, 0xcb, 0x1c, 0x0f, 0x22, 0x07, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_release_proto_rawDescOnce sync.Once
	file_release_proto_rawDescData = file_release_proto_rawDesc
)

func file_release_proto_rawDescGZIP() []byte {
	file_release_proto_rawDescOnce.Do(func() {
		file_release_proto_rawDescData = protoimpl.X.CompressGZIP(file_release_proto_rawDescData)
	})
	return file_release_proto_rawDescData
}

var file_release_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_release_proto_goTypes = []interface{}{
	(*ReleaseList)(nil),                   // 0: erda.core.dicehub.release.ReleaseList
	(*ReleaseCreateRequest)(nil),          // 1: erda.core.dicehub.release.ReleaseCreateRequest
	(*ReleaseResource)(nil),               // 2: erda.core.dicehub.release.ReleaseResource
	(*ReleaseCreateResponse)(nil),         // 3: erda.core.dicehub.release.ReleaseCreateResponse
	(*ReleaseCreateResponseData)(nil),     // 4: erda.core.dicehub.release.ReleaseCreateResponseData
	(*ReleaseUpdateRequest)(nil),          // 5: erda.core.dicehub.release.ReleaseUpdateRequest
	(*ReleaseDataResponse)(nil),           // 6: erda.core.dicehub.release.ReleaseDataResponse
	(*ReleaseUserDataResponse)(nil),       // 7: erda.core.dicehub.release.ReleaseUserDataResponse
	(*ReleaseUpdateResponse)(nil),         // 8: erda.core.dicehub.release.ReleaseUpdateResponse
	(*ReleaseReferenceUpdateRequest)(nil), // 9: erda.core.dicehub.release.ReleaseReferenceUpdateRequest
	(*GetIosPlistRequest)(nil),            // 10: erda.core.dicehub.release.GetIosPlistRequest
	(*GetIosPlistResponse)(nil),           // 11: erda.core.dicehub.release.GetIosPlistResponse
	(*ReleaseDeleteRequest)(nil),          // 12: erda.core.dicehub.release.ReleaseDeleteRequest
	(*ReleaseDeleteResponse)(nil),         // 13: erda.core.dicehub.release.ReleaseDeleteResponse
	(*ReleaseGetRequest)(nil),             // 14: erda.core.dicehub.release.ReleaseGetRequest
	(*ReleaseGetResponse)(nil),            // 15: erda.core.dicehub.release.ReleaseGetResponse
	(*ReleaseSummaryArray)(nil),           // 16: erda.core.dicehub.release.ReleaseSummaryArray
	(*ReleaseGetResponseData)(nil),        // 17: erda.core.dicehub.release.ReleaseGetResponseData
	(*ServiceImagePair)(nil),              // 18: erda.core.dicehub.release.ServiceImagePair
	(*ApplicationReleaseSummary)(nil),     // 19: erda.core.dicehub.release.ApplicationReleaseSummary
	(*ReleaseListRequest)(nil),            // 20: erda.core.dicehub.release.ReleaseListRequest
	(*ReleaseListResponse)(nil),           // 21: erda.core.dicehub.release.ReleaseListResponse
	(*ListReleaseNameRequest)(nil),        // 22: erda.core.dicehub.release.ListReleaseNameRequest
	(*ListReleaseNameResponse)(nil),       // 23: erda.core.dicehub.release.ListReleaseNameResponse
	(*ReleaseListResponseData)(nil),       // 24: erda.core.dicehub.release.ReleaseListResponseData
	(*ReleaseData)(nil),                   // 25: erda.core.dicehub.release.ReleaseData
	(*ReleaseNameListRequest)(nil),        // 26: erda.core.dicehub.release.ReleaseNameListRequest
	(*ReleaseNameListResponse)(nil),       // 27: erda.core.dicehub.release.ReleaseNameListResponse
	(*GetLatestReleasesRequest)(nil),      // 28: erda.core.dicehub.release.GetLatestReleasesRequest
	(*GetLatestReleasesResponse)(nil),     // 29: erda.core.dicehub.release.GetLatestReleasesResponse
	(*GetLatestReleasesResponseData)(nil), // 30: erda.core.dicehub.release.GetLatestReleasesResponseData
	(*ReleaseGCRequest)(nil),              // 31: erda.core.dicehub.release.ReleaseGCRequest
	(*ReleaseUploadRequest)(nil),          // 32: erda.core.dicehub.release.ReleaseUploadRequest
	(*ReleaseUploadResponse)(nil),         // 33: erda.core.dicehub.release.ReleaseUploadResponse
	(*ParseReleaseFileRequest)(nil),       // 34: erda.core.dicehub.release.ParseReleaseFileRequest
	(*ParseReleaseFileResponse)(nil),      // 35: erda.core.dicehub.release.ParseReleaseFileResponse
	(*ParseReleaseFileResponseData)(nil),  // 36: erda.core.dicehub.release.ParseReleaseFileResponseData
	(*FormalReleaseRequest)(nil),          // 37: erda.core.dicehub.release.FormalReleaseRequest
	(*FormalReleaseResponse)(nil),         // 38: erda.core.dicehub.release.FormalReleaseResponse
	(*FormalReleasesRequest)(nil),         // 39: erda.core.dicehub.release.FormalReleasesRequest
	(*FormalReleasesResponse)(nil),        // 40: erda.core.dicehub.release.FormalReleasesResponse
	(*ReleasesDeleteRequest)(nil),         // 41: erda.core.dicehub.release.ReleasesDeleteRequest
	(*ReleasesDeleteResponse)(nil),        // 42: erda.core.dicehub.release.ReleasesDeleteResponse
	(*CheckVersionRequest)(nil),           // 43: erda.core.dicehub.release.CheckVersionRequest
	(*CheckVersionResponse)(nil),          // 44: erda.core.dicehub.release.CheckVersionResponse
	(*CheckVersionResponseData)(nil),      // 45: erda.core.dicehub.release.CheckVersionResponseData
	nil,                                   // 46: erda.core.dicehub.release.ReleaseCreateRequest.LabelsEntry
	nil,                                   // 47: erda.core.dicehub.release.ReleaseResource.MetaEntry
	nil,                                   // 48: erda.core.dicehub.release.ReleaseGetResponseData.LabelsEntry
	nil,                                   // 49: erda.core.dicehub.release.ReleaseData.LabelsEntry
	(*timestamppb.Timestamp)(nil),         // 50: google.protobuf.Timestamp
	(*structpb.Value)(nil),                // 51: google.protobuf.Value
}
var file_release_proto_depIdxs = []int32{
	0,  // 0: erda.core.dicehub.release.ReleaseCreateRequest.applicationReleaseList:type_name -> erda.core.dicehub.release.ReleaseList
	46, // 1: erda.core.dicehub.release.ReleaseCreateRequest.labels:type_name -> erda.core.dicehub.release.ReleaseCreateRequest.LabelsEntry
	2,  // 2: erda.core.dicehub.release.ReleaseCreateRequest.resources:type_name -> erda.core.dicehub.release.ReleaseResource
	47, // 3: erda.core.dicehub.release.ReleaseResource.meta:type_name -> erda.core.dicehub.release.ReleaseResource.MetaEntry
	4,  // 4: erda.core.dicehub.release.ReleaseCreateResponse.data:type_name -> erda.core.dicehub.release.ReleaseCreateResponseData
	0,  // 5: erda.core.dicehub.release.ReleaseUpdateRequest.applicationReleaseList:type_name -> erda.core.dicehub.release.ReleaseList
	17, // 6: erda.core.dicehub.release.ReleaseGetResponse.data:type_name -> erda.core.dicehub.release.ReleaseGetResponseData
	19, // 7: erda.core.dicehub.release.ReleaseSummaryArray.list:type_name -> erda.core.dicehub.release.ApplicationReleaseSummary
	16, // 8: erda.core.dicehub.release.ReleaseGetResponseData.applicationReleaseList:type_name -> erda.core.dicehub.release.ReleaseSummaryArray
	2,  // 9: erda.core.dicehub.release.ReleaseGetResponseData.resources:type_name -> erda.core.dicehub.release.ReleaseResource
	18, // 10: erda.core.dicehub.release.ReleaseGetResponseData.serviceImages:type_name -> erda.core.dicehub.release.ServiceImagePair
	48, // 11: erda.core.dicehub.release.ReleaseGetResponseData.labels:type_name -> erda.core.dicehub.release.ReleaseGetResponseData.LabelsEntry
	50, // 12: erda.core.dicehub.release.ReleaseGetResponseData.createdAt:type_name -> google.protobuf.Timestamp
	50, // 13: erda.core.dicehub.release.ReleaseGetResponseData.updatedAt:type_name -> google.protobuf.Timestamp
	18, // 14: erda.core.dicehub.release.ApplicationReleaseSummary.services:type_name -> erda.core.dicehub.release.ServiceImagePair
	24, // 15: erda.core.dicehub.release.ReleaseListResponse.data:type_name -> erda.core.dicehub.release.ReleaseListResponseData
	25, // 16: erda.core.dicehub.release.ReleaseListResponseData.list:type_name -> erda.core.dicehub.release.ReleaseData
	2,  // 17: erda.core.dicehub.release.ReleaseData.resources:type_name -> erda.core.dicehub.release.ReleaseResource
	49, // 18: erda.core.dicehub.release.ReleaseData.labels:type_name -> erda.core.dicehub.release.ReleaseData.LabelsEntry
	50, // 19: erda.core.dicehub.release.ReleaseData.createdAt:type_name -> google.protobuf.Timestamp
	50, // 20: erda.core.dicehub.release.ReleaseData.updatedAt:type_name -> google.protobuf.Timestamp
	30, // 21: erda.core.dicehub.release.GetLatestReleasesResponse.data:type_name -> erda.core.dicehub.release.GetLatestReleasesResponseData
	50, // 22: erda.core.dicehub.release.GetLatestReleasesResponseData.createdAt:type_name -> google.protobuf.Timestamp
	50, // 23: erda.core.dicehub.release.GetLatestReleasesResponseData.updatedAt:type_name -> google.protobuf.Timestamp
	4,  // 24: erda.core.dicehub.release.ReleaseUploadResponse.data:type_name -> erda.core.dicehub.release.ReleaseCreateResponseData
	36, // 25: erda.core.dicehub.release.ParseReleaseFileResponse.data:type_name -> erda.core.dicehub.release.ParseReleaseFileResponseData
	45, // 26: erda.core.dicehub.release.CheckVersionResponse.data:type_name -> erda.core.dicehub.release.CheckVersionResponseData
	51, // 27: erda.core.dicehub.release.ReleaseResource.MetaEntry.value:type_name -> google.protobuf.Value
	1,  // 28: erda.core.dicehub.release.ReleaseService.CreateRelease:input_type -> erda.core.dicehub.release.ReleaseCreateRequest
	5,  // 29: erda.core.dicehub.release.ReleaseService.UpdateRelease:input_type -> erda.core.dicehub.release.ReleaseUpdateRequest
	9,  // 30: erda.core.dicehub.release.ReleaseService.UpdateReleaseReference:input_type -> erda.core.dicehub.release.ReleaseReferenceUpdateRequest
	10, // 31: erda.core.dicehub.release.ReleaseService.GetIosPlist:input_type -> erda.core.dicehub.release.GetIosPlistRequest
	14, // 32: erda.core.dicehub.release.ReleaseService.GetRelease:input_type -> erda.core.dicehub.release.ReleaseGetRequest
	12, // 33: erda.core.dicehub.release.ReleaseService.DeleteRelease:input_type -> erda.core.dicehub.release.ReleaseDeleteRequest
	20, // 34: erda.core.dicehub.release.ReleaseService.ListRelease:input_type -> erda.core.dicehub.release.ReleaseListRequest
	22, // 35: erda.core.dicehub.release.ReleaseService.ListReleaseName:input_type -> erda.core.dicehub.release.ListReleaseNameRequest
	28, // 36: erda.core.dicehub.release.ReleaseService.GetLatestReleases:input_type -> erda.core.dicehub.release.GetLatestReleasesRequest
	31, // 37: erda.core.dicehub.release.ReleaseService.ReleaseGC:input_type -> erda.core.dicehub.release.ReleaseGCRequest
	32, // 38: erda.core.dicehub.release.ReleaseService.UploadRelease:input_type -> erda.core.dicehub.release.ReleaseUploadRequest
	34, // 39: erda.core.dicehub.release.ReleaseService.ParseReleaseFile:input_type -> erda.core.dicehub.release.ParseReleaseFileRequest
	37, // 40: erda.core.dicehub.release.ReleaseService.ToFormalRelease:input_type -> erda.core.dicehub.release.FormalReleaseRequest
	39, // 41: erda.core.dicehub.release.ReleaseService.ToFormalReleases:input_type -> erda.core.dicehub.release.FormalReleasesRequest
	41, // 42: erda.core.dicehub.release.ReleaseService.DeleteReleases:input_type -> erda.core.dicehub.release.ReleasesDeleteRequest
	43, // 43: erda.core.dicehub.release.ReleaseService.CheckVersion:input_type -> erda.core.dicehub.release.CheckVersionRequest
	4,  // 44: erda.core.dicehub.release.ReleaseService.CreateRelease:output_type -> erda.core.dicehub.release.ReleaseCreateResponseData
	8,  // 45: erda.core.dicehub.release.ReleaseService.UpdateRelease:output_type -> erda.core.dicehub.release.ReleaseUpdateResponse
	6,  // 46: erda.core.dicehub.release.ReleaseService.UpdateReleaseReference:output_type -> erda.core.dicehub.release.ReleaseDataResponse
	11, // 47: erda.core.dicehub.release.ReleaseService.GetIosPlist:output_type -> erda.core.dicehub.release.GetIosPlistResponse
	15, // 48: erda.core.dicehub.release.ReleaseService.GetRelease:output_type -> erda.core.dicehub.release.ReleaseGetResponse
	13, // 49: erda.core.dicehub.release.ReleaseService.DeleteRelease:output_type -> erda.core.dicehub.release.ReleaseDeleteResponse
	21, // 50: erda.core.dicehub.release.ReleaseService.ListRelease:output_type -> erda.core.dicehub.release.ReleaseListResponse
	23, // 51: erda.core.dicehub.release.ReleaseService.ListReleaseName:output_type -> erda.core.dicehub.release.ListReleaseNameResponse
	29, // 52: erda.core.dicehub.release.ReleaseService.GetLatestReleases:output_type -> erda.core.dicehub.release.GetLatestReleasesResponse
	6,  // 53: erda.core.dicehub.release.ReleaseService.ReleaseGC:output_type -> erda.core.dicehub.release.ReleaseDataResponse
	33, // 54: erda.core.dicehub.release.ReleaseService.UploadRelease:output_type -> erda.core.dicehub.release.ReleaseUploadResponse
	35, // 55: erda.core.dicehub.release.ReleaseService.ParseReleaseFile:output_type -> erda.core.dicehub.release.ParseReleaseFileResponse
	38, // 56: erda.core.dicehub.release.ReleaseService.ToFormalRelease:output_type -> erda.core.dicehub.release.FormalReleaseResponse
	40, // 57: erda.core.dicehub.release.ReleaseService.ToFormalReleases:output_type -> erda.core.dicehub.release.FormalReleasesResponse
	42, // 58: erda.core.dicehub.release.ReleaseService.DeleteReleases:output_type -> erda.core.dicehub.release.ReleasesDeleteResponse
	44, // 59: erda.core.dicehub.release.ReleaseService.CheckVersion:output_type -> erda.core.dicehub.release.CheckVersionResponse
	44, // [44:60] is the sub-list for method output_type
	28, // [28:44] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_release_proto_init() }
func file_release_proto_init() {
	if File_release_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_release_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseReferenceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIosPlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIosPlistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSummaryArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseGetResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceImagePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationReleaseSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseNameListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseNameListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestReleasesResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseGCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseReleaseFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseReleaseFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseReleaseFileResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasesDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_release_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVersionResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_release_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_release_proto_goTypes,
		DependencyIndexes: file_release_proto_depIdxs,
		MessageInfos:      file_release_proto_msgTypes,
	}.Build()
	File_release_proto = out.File
	file_release_proto_rawDesc = nil
	file_release_proto_goTypes = nil
	file_release_proto_depIdxs = nil
}
