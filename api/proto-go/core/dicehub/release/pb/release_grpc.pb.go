// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: release.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ReleaseServiceClient is the client API for ReleaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseServiceClient interface {
	CreateRelease(ctx context.Context, in *ReleaseCreateRequest, opts ...grpc.CallOption) (*ReleaseCreateResponseData, error)
	UpdateRelease(ctx context.Context, in *ReleaseUpdateRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error)
	UpdateReleaseReference(ctx context.Context, in *ReleaseReferenceUpdateRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error)
	GetIosPlist(ctx context.Context, in *GetIosPlistRequest, opts ...grpc.CallOption) (*GetIosPlistResponse, error)
	GetRelease(ctx context.Context, in *GetIosPlistRequest, opts ...grpc.CallOption) (*ReleaseGetResponse, error)
	DeleteRelease(ctx context.Context, in *GetIosPlistRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error)
	ListRelease(ctx context.Context, in *ReleaseListRequest, opts ...grpc.CallOption) (*ReleaseListResponse, error)
	ListReleaseName(ctx context.Context, in *ListReleaseNameRequest, opts ...grpc.CallOption) (*ListReleaseNameResponse, error)
	GetLatestReleases(ctx context.Context, in *GetLatestReleasesRequest, opts ...grpc.CallOption) (*GetLatestReleasesResponse, error)
	ReleaseGC(ctx context.Context, in *ReleaseGCRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error)
}

type releaseServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewReleaseServiceClient(cc grpc1.ClientConnInterface) ReleaseServiceClient {
	return &releaseServiceClient{cc}
}

func (c *releaseServiceClient) CreateRelease(ctx context.Context, in *ReleaseCreateRequest, opts ...grpc.CallOption) (*ReleaseCreateResponseData, error) {
	out := new(ReleaseCreateResponseData)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/CreateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) UpdateRelease(ctx context.Context, in *ReleaseUpdateRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error) {
	out := new(ReleaseDataResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/UpdateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) UpdateReleaseReference(ctx context.Context, in *ReleaseReferenceUpdateRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error) {
	out := new(ReleaseDataResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/UpdateReleaseReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetIosPlist(ctx context.Context, in *GetIosPlistRequest, opts ...grpc.CallOption) (*GetIosPlistResponse, error) {
	out := new(GetIosPlistResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/GetIosPlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetRelease(ctx context.Context, in *GetIosPlistRequest, opts ...grpc.CallOption) (*ReleaseGetResponse, error) {
	out := new(ReleaseGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) DeleteRelease(ctx context.Context, in *GetIosPlistRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error) {
	out := new(ReleaseDataResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/DeleteRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) ListRelease(ctx context.Context, in *ReleaseListRequest, opts ...grpc.CallOption) (*ReleaseListResponse, error) {
	out := new(ReleaseListResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/ListRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) ListReleaseName(ctx context.Context, in *ListReleaseNameRequest, opts ...grpc.CallOption) (*ListReleaseNameResponse, error) {
	out := new(ListReleaseNameResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/ListReleaseName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) GetLatestReleases(ctx context.Context, in *GetLatestReleasesRequest, opts ...grpc.CallOption) (*GetLatestReleasesResponse, error) {
	out := new(GetLatestReleasesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/GetLatestReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) ReleaseGC(ctx context.Context, in *ReleaseGCRequest, opts ...grpc.CallOption) (*ReleaseDataResponse, error) {
	out := new(ReleaseDataResponse)
	err := c.cc.Invoke(ctx, "/erda.core.dicehub.release.ReleaseService/ReleaseGC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseServiceServer is the server API for ReleaseService service.
// All implementations should embed UnimplementedReleaseServiceServer
// for forward compatibility
type ReleaseServiceServer interface {
	CreateRelease(context.Context, *ReleaseCreateRequest) (*ReleaseCreateResponseData, error)
	UpdateRelease(context.Context, *ReleaseUpdateRequest) (*ReleaseDataResponse, error)
	UpdateReleaseReference(context.Context, *ReleaseReferenceUpdateRequest) (*ReleaseDataResponse, error)
	GetIosPlist(context.Context, *GetIosPlistRequest) (*GetIosPlistResponse, error)
	GetRelease(context.Context, *GetIosPlistRequest) (*ReleaseGetResponse, error)
	DeleteRelease(context.Context, *GetIosPlistRequest) (*ReleaseDataResponse, error)
	ListRelease(context.Context, *ReleaseListRequest) (*ReleaseListResponse, error)
	ListReleaseName(context.Context, *ListReleaseNameRequest) (*ListReleaseNameResponse, error)
	GetLatestReleases(context.Context, *GetLatestReleasesRequest) (*GetLatestReleasesResponse, error)
	ReleaseGC(context.Context, *ReleaseGCRequest) (*ReleaseDataResponse, error)
}

// UnimplementedReleaseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReleaseServiceServer struct {
}

func (*UnimplementedReleaseServiceServer) CreateRelease(context.Context, *ReleaseCreateRequest) (*ReleaseCreateResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (*UnimplementedReleaseServiceServer) UpdateRelease(context.Context, *ReleaseUpdateRequest) (*ReleaseDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelease not implemented")
}
func (*UnimplementedReleaseServiceServer) UpdateReleaseReference(context.Context, *ReleaseReferenceUpdateRequest) (*ReleaseDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReleaseReference not implemented")
}
func (*UnimplementedReleaseServiceServer) GetIosPlist(context.Context, *GetIosPlistRequest) (*GetIosPlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIosPlist not implemented")
}
func (*UnimplementedReleaseServiceServer) GetRelease(context.Context, *GetIosPlistRequest) (*ReleaseGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (*UnimplementedReleaseServiceServer) DeleteRelease(context.Context, *GetIosPlistRequest) (*ReleaseDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelease not implemented")
}
func (*UnimplementedReleaseServiceServer) ListRelease(context.Context, *ReleaseListRequest) (*ReleaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelease not implemented")
}
func (*UnimplementedReleaseServiceServer) ListReleaseName(context.Context, *ListReleaseNameRequest) (*ListReleaseNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseName not implemented")
}
func (*UnimplementedReleaseServiceServer) GetLatestReleases(context.Context, *GetLatestReleasesRequest) (*GetLatestReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestReleases not implemented")
}
func (*UnimplementedReleaseServiceServer) ReleaseGC(context.Context, *ReleaseGCRequest) (*ReleaseDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseGC not implemented")
}

func RegisterReleaseServiceServer(s grpc1.ServiceRegistrar, srv ReleaseServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ReleaseService_serviceDesc(srv, opts...), srv)
}

var _ReleaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.dicehub.release.ReleaseService",
	HandlerType: (*ReleaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "release.proto",
}

func _get_ReleaseService_serviceDesc(srv ReleaseServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ReleaseService_CreateRelease_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateRelease(ctx, req.(*ReleaseCreateRequest))
	}
	var _ReleaseService_CreateRelease_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_CreateRelease_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "CreateRelease", srv)
		_ReleaseService_CreateRelease_Handler = h.Interceptor(_ReleaseService_CreateRelease_Handler)
	}

	_ReleaseService_UpdateRelease_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateRelease(ctx, req.(*ReleaseUpdateRequest))
	}
	var _ReleaseService_UpdateRelease_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_UpdateRelease_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "UpdateRelease", srv)
		_ReleaseService_UpdateRelease_Handler = h.Interceptor(_ReleaseService_UpdateRelease_Handler)
	}

	_ReleaseService_UpdateReleaseReference_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateReleaseReference(ctx, req.(*ReleaseReferenceUpdateRequest))
	}
	var _ReleaseService_UpdateReleaseReference_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_UpdateReleaseReference_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "UpdateReleaseReference", srv)
		_ReleaseService_UpdateReleaseReference_Handler = h.Interceptor(_ReleaseService_UpdateReleaseReference_Handler)
	}

	_ReleaseService_GetIosPlist_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIosPlist(ctx, req.(*GetIosPlistRequest))
	}
	var _ReleaseService_GetIosPlist_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_GetIosPlist_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "GetIosPlist", srv)
		_ReleaseService_GetIosPlist_Handler = h.Interceptor(_ReleaseService_GetIosPlist_Handler)
	}

	_ReleaseService_GetRelease_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRelease(ctx, req.(*GetIosPlistRequest))
	}
	var _ReleaseService_GetRelease_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_GetRelease_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "GetRelease", srv)
		_ReleaseService_GetRelease_Handler = h.Interceptor(_ReleaseService_GetRelease_Handler)
	}

	_ReleaseService_DeleteRelease_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteRelease(ctx, req.(*GetIosPlistRequest))
	}
	var _ReleaseService_DeleteRelease_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_DeleteRelease_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "DeleteRelease", srv)
		_ReleaseService_DeleteRelease_Handler = h.Interceptor(_ReleaseService_DeleteRelease_Handler)
	}

	_ReleaseService_ListRelease_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListRelease(ctx, req.(*ReleaseListRequest))
	}
	var _ReleaseService_ListRelease_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_ListRelease_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "ListRelease", srv)
		_ReleaseService_ListRelease_Handler = h.Interceptor(_ReleaseService_ListRelease_Handler)
	}

	_ReleaseService_ListReleaseName_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListReleaseName(ctx, req.(*ListReleaseNameRequest))
	}
	var _ReleaseService_ListReleaseName_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_ListReleaseName_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "ListReleaseName", srv)
		_ReleaseService_ListReleaseName_Handler = h.Interceptor(_ReleaseService_ListReleaseName_Handler)
	}

	_ReleaseService_GetLatestReleases_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetLatestReleases(ctx, req.(*GetLatestReleasesRequest))
	}
	var _ReleaseService_GetLatestReleases_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_GetLatestReleases_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "GetLatestReleases", srv)
		_ReleaseService_GetLatestReleases_Handler = h.Interceptor(_ReleaseService_GetLatestReleases_Handler)
	}

	_ReleaseService_ReleaseGC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ReleaseGC(ctx, req.(*ReleaseGCRequest))
	}
	var _ReleaseService_ReleaseGC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReleaseService_ReleaseGC_info = transport.NewServiceInfo("erda.core.dicehub.release.ReleaseService", "ReleaseGC", srv)
		_ReleaseService_ReleaseGC_Handler = h.Interceptor(_ReleaseService_ReleaseGC_Handler)
	}

	var serviceDesc = _ReleaseService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateRelease",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).CreateRelease(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_CreateRelease_info)
				}
				if interceptor == nil {
					return _ReleaseService_CreateRelease_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/CreateRelease",
				}
				return interceptor(ctx, in, info, _ReleaseService_CreateRelease_Handler)
			},
		},
		{
			MethodName: "UpdateRelease",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).UpdateRelease(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_UpdateRelease_info)
				}
				if interceptor == nil {
					return _ReleaseService_UpdateRelease_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/UpdateRelease",
				}
				return interceptor(ctx, in, info, _ReleaseService_UpdateRelease_Handler)
			},
		},
		{
			MethodName: "UpdateReleaseReference",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseReferenceUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).UpdateReleaseReference(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_UpdateReleaseReference_info)
				}
				if interceptor == nil {
					return _ReleaseService_UpdateReleaseReference_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/UpdateReleaseReference",
				}
				return interceptor(ctx, in, info, _ReleaseService_UpdateReleaseReference_Handler)
			},
		},
		{
			MethodName: "GetIosPlist",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIosPlistRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).GetIosPlist(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_GetIosPlist_info)
				}
				if interceptor == nil {
					return _ReleaseService_GetIosPlist_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/GetIosPlist",
				}
				return interceptor(ctx, in, info, _ReleaseService_GetIosPlist_Handler)
			},
		},
		{
			MethodName: "GetRelease",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIosPlistRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).GetRelease(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_GetRelease_info)
				}
				if interceptor == nil {
					return _ReleaseService_GetRelease_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/GetRelease",
				}
				return interceptor(ctx, in, info, _ReleaseService_GetRelease_Handler)
			},
		},
		{
			MethodName: "DeleteRelease",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIosPlistRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).DeleteRelease(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_DeleteRelease_info)
				}
				if interceptor == nil {
					return _ReleaseService_DeleteRelease_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/DeleteRelease",
				}
				return interceptor(ctx, in, info, _ReleaseService_DeleteRelease_Handler)
			},
		},
		{
			MethodName: "ListRelease",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).ListRelease(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_ListRelease_info)
				}
				if interceptor == nil {
					return _ReleaseService_ListRelease_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/ListRelease",
				}
				return interceptor(ctx, in, info, _ReleaseService_ListRelease_Handler)
			},
		},
		{
			MethodName: "ListReleaseName",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListReleaseNameRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).ListReleaseName(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_ListReleaseName_info)
				}
				if interceptor == nil {
					return _ReleaseService_ListReleaseName_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/ListReleaseName",
				}
				return interceptor(ctx, in, info, _ReleaseService_ListReleaseName_Handler)
			},
		},
		{
			MethodName: "GetLatestReleases",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetLatestReleasesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).GetLatestReleases(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_GetLatestReleases_info)
				}
				if interceptor == nil {
					return _ReleaseService_GetLatestReleases_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/GetLatestReleases",
				}
				return interceptor(ctx, in, info, _ReleaseService_GetLatestReleases_Handler)
			},
		},
		{
			MethodName: "ReleaseGC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseGCRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReleaseServiceServer).ReleaseGC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReleaseService_ReleaseGC_info)
				}
				if interceptor == nil {
					return _ReleaseService_ReleaseGC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.dicehub.release.ReleaseService/ReleaseGC",
				}
				return interceptor(ctx, in, info, _ReleaseService_ReleaseGC_Handler)
			},
		},
	}
	return &serviceDesc
}
