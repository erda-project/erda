// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: getdice.proto, release.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/dicehub/release/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ReleaseGetDiceService getdice.proto
	ReleaseGetDiceService() pb.ReleaseGetDiceServiceClient
	// ReleaseService release.proto
	ReleaseService() pb.ReleaseServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		releaseGetDiceService: pb.NewReleaseGetDiceServiceClient(cc),
		releaseService:        pb.NewReleaseServiceClient(cc),
	}
}

type serviceClients struct {
	releaseGetDiceService pb.ReleaseGetDiceServiceClient
	releaseService        pb.ReleaseServiceClient
}

func (c *serviceClients) ReleaseGetDiceService() pb.ReleaseGetDiceServiceClient {
	return c.releaseGetDiceService
}

func (c *serviceClients) ReleaseService() pb.ReleaseServiceClient {
	return c.releaseService
}

type releaseGetDiceServiceWrapper struct {
	client pb.ReleaseGetDiceServiceClient
	opts   []grpc1.CallOption
}

func (s *releaseGetDiceServiceWrapper) PullDiceYAML(ctx context.Context, req *pb.ReleaseGetDiceYmlRequest) (*pb.ReleaseGetDiceYmlResponse, error) {
	return s.client.PullDiceYAML(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseGetDiceServiceWrapper) GetDiceYAML(ctx context.Context, req *pb.ReleaseGetDiceYmlRequest) (*pb.ReleaseGetDiceYmlResponse, error) {
	return s.client.GetDiceYAML(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

type releaseServiceWrapper struct {
	client pb.ReleaseServiceClient
	opts   []grpc1.CallOption
}

func (s *releaseServiceWrapper) CreateRelease(ctx context.Context, req *pb.ReleaseCreateRequest) (*pb.ReleaseCreateResponseData, error) {
	return s.client.CreateRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) UpdateRelease(ctx context.Context, req *pb.ReleaseUpdateRequest) (*pb.ReleaseUpdateResponse, error) {
	return s.client.UpdateRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) UpdateReleaseReference(ctx context.Context, req *pb.ReleaseReferenceUpdateRequest) (*pb.ReleaseDataResponse, error) {
	return s.client.UpdateReleaseReference(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) GetIosPlist(ctx context.Context, req *pb.GetIosPlistRequest) (*pb.GetIosPlistResponse, error) {
	return s.client.GetIosPlist(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) GetRelease(ctx context.Context, req *pb.ReleaseGetRequest) (*pb.ReleaseGetResponse, error) {
	return s.client.GetRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) DeleteRelease(ctx context.Context, req *pb.ReleaseDeleteRequest) (*pb.ReleaseDeleteResponse, error) {
	return s.client.DeleteRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) ListRelease(ctx context.Context, req *pb.ReleaseListRequest) (*pb.ReleaseListResponse, error) {
	return s.client.ListRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) ListReleaseName(ctx context.Context, req *pb.ListReleaseNameRequest) (*pb.ListReleaseNameResponse, error) {
	return s.client.ListReleaseName(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) GetLatestReleases(ctx context.Context, req *pb.GetLatestReleasesRequest) (*pb.GetLatestReleasesResponse, error) {
	return s.client.GetLatestReleases(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) ReleaseGC(ctx context.Context, req *pb.ReleaseGCRequest) (*pb.ReleaseDataResponse, error) {
	return s.client.ReleaseGC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) UploadRelease(ctx context.Context, req *pb.ReleaseUploadRequest) (*pb.ReleaseUploadResponse, error) {
	return s.client.UploadRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) ParseReleaseFile(ctx context.Context, req *pb.ParseReleaseFileRequest) (*pb.ParseReleaseFileResponse, error) {
	return s.client.ParseReleaseFile(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) ToFormalRelease(ctx context.Context, req *pb.FormalReleaseRequest) (*pb.FormalReleaseResponse, error) {
	return s.client.ToFormalRelease(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) ToFormalReleases(ctx context.Context, req *pb.FormalReleasesRequest) (*pb.FormalReleasesResponse, error) {
	return s.client.ToFormalReleases(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) DeleteReleases(ctx context.Context, req *pb.ReleasesDeleteRequest) (*pb.ReleasesDeleteResponse, error) {
	return s.client.DeleteReleases(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *releaseServiceWrapper) CheckVersion(ctx context.Context, req *pb.CheckVersionRequest) (*pb.CheckVersionResponse, error) {
	return s.client.CheckVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
