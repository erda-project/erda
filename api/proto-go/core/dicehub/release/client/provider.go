// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: getdice.proto, opus.proto, release.proto

package client

import (
	fmt "fmt"
	reflect "reflect"
	strings "strings"

	servicehub "github.com/erda-project/erda-infra/base/servicehub"
	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/dicehub/release/pb"
	grpc1 "google.golang.org/grpc"
)

var dependencies = []string{
	"grpc-client@erda.core.dicehub.release",
	"grpc-client",
}

// +provider
type provider struct {
	client Client
}

func (p *provider) Init(ctx servicehub.Context) error {
	var conn grpc.ClientConnInterface
	for _, dep := range dependencies {
		c, ok := ctx.Service(dep).(grpc.ClientConnInterface)
		if ok {
			conn = c
			break
		}
	}
	if conn == nil {
		return fmt.Errorf("not found connector in (%s)", strings.Join(dependencies, ", "))
	}
	p.client = New(conn)
	return nil
}

var (
	clientsType                     = reflect.TypeOf((*Client)(nil)).Elem()
	releaseGetDiceServiceClientType = reflect.TypeOf((*pb.ReleaseGetDiceServiceClient)(nil)).Elem()
	releaseGetDiceServiceServerType = reflect.TypeOf((*pb.ReleaseGetDiceServiceServer)(nil)).Elem()
	opusClientType                  = reflect.TypeOf((*pb.OpusClient)(nil)).Elem()
	opusServerType                  = reflect.TypeOf((*pb.OpusServer)(nil)).Elem()
	releaseServiceClientType        = reflect.TypeOf((*pb.ReleaseServiceClient)(nil)).Elem()
	releaseServiceServerType        = reflect.TypeOf((*pb.ReleaseServiceServer)(nil)).Elem()
)

func (p *provider) Provide(ctx servicehub.DependencyContext, args ...interface{}) interface{} {
	var opts []grpc1.CallOption
	for _, arg := range args {
		if opt, ok := arg.(grpc1.CallOption); ok {
			opts = append(opts, opt)
		}
	}
	switch ctx.Service() {
	case "erda.core.dicehub.release-client":
		return p.client
	case "erda.core.dicehub.release.Opus":
		return &opusWrapper{client: p.client.Opus(), opts: opts}
	case "erda.core.dicehub.release.Opus.client":
		return p.client.Opus()
	case "erda.core.dicehub.release.ReleaseGetDiceService":
		return &releaseGetDiceServiceWrapper{client: p.client.ReleaseGetDiceService(), opts: opts}
	case "erda.core.dicehub.release.ReleaseGetDiceService.client":
		return p.client.ReleaseGetDiceService()
	case "erda.core.dicehub.release.ReleaseService":
		return &releaseServiceWrapper{client: p.client.ReleaseService(), opts: opts}
	case "erda.core.dicehub.release.ReleaseService.client":
		return p.client.ReleaseService()
	}
	switch ctx.Type() {
	case clientsType:
		return p.client
	case releaseGetDiceServiceClientType:
		return p.client.ReleaseGetDiceService()
	case releaseGetDiceServiceServerType:
		return &releaseGetDiceServiceWrapper{client: p.client.ReleaseGetDiceService(), opts: opts}
	case opusClientType:
		return p.client.Opus()
	case opusServerType:
		return &opusWrapper{client: p.client.Opus(), opts: opts}
	case releaseServiceClientType:
		return p.client.ReleaseService()
	case releaseServiceServerType:
		return &releaseServiceWrapper{client: p.client.ReleaseService(), opts: opts}
	}
	return p
}

func init() {
	servicehub.Register("erda.core.dicehub.release-client", &servicehub.Spec{
		Services: []string{
			"erda.core.dicehub.release.Opus",
			"erda.core.dicehub.release.Opus.client",
			"erda.core.dicehub.release.ReleaseGetDiceService",
			"erda.core.dicehub.release.ReleaseGetDiceService.client",
			"erda.core.dicehub.release.ReleaseService",
			"erda.core.dicehub.release.ReleaseService.client",
			"erda.core.dicehub.release-client",
		},
		Types: []reflect.Type{
			clientsType,
			// client types
			releaseGetDiceServiceClientType,
			opusClientType,
			releaseServiceClientType,
			// server types
			releaseGetDiceServiceServerType,
			opusServerType,
			releaseServiceServerType,
		},
		OptionalDependencies: dependencies,
		Creator: func() servicehub.Provider {
			return &provider{}
		},
	})
}
