// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: global.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetFeaturesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetFeaturesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateTenantResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateTenantRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTenantGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTenantGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HealthModule)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetHealthRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetHealthResponse)(nil)

// GetFeaturesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetFeaturesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetFeaturesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetFeaturesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// CreateTenantResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateTenantResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// CreateTenantRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateTenantRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "az":
				m.Az = vals[0]
			case "env":
				m.Env = vals[0]
			case "projectId":
				m.ProjectId = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			case "adminAddr":
				m.AdminAddr = vals[0]
			case "gatewayEndpoint":
				m.GatewayEndpoint = vals[0]
			case "innerAddr":
				m.InnerAddr = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			case "instanceId":
				m.InstanceId = vals[0]
			}
		}
	}
	return nil
}

// GetTenantGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetTenantGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// GetTenantGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetTenantGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			}
		}
	}
	return nil
}

// HealthModule implement urlenc.URLValuesUnmarshaler.
func (m *HealthModule) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "status":
				m.Status = vals[0]
			case "message":
				m.Message = vals[0]
			}
		}
	}
	return nil
}

// GetHealthRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetHealthRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetHealthResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetHealthResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}
