// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: global.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// GlobalServiceClient is the client API for GlobalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalServiceClient interface {
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
	GetTenantGroup(ctx context.Context, in *GetTenantGroupRequest, opts ...grpc.CallOption) (*GetTenantGroupResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*GetFeaturesResponse, error)
}

type globalServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewGlobalServiceClient(cc grpc1.ClientConnInterface) GlobalServiceClient {
	return &globalServiceClient{cc}
}

func (c *globalServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.global.GlobalService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalServiceClient) GetTenantGroup(ctx context.Context, in *GetTenantGroupRequest, opts ...grpc.CallOption) (*GetTenantGroupResponse, error) {
	out := new(GetTenantGroupResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.global.GlobalService/GetTenantGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.global.GlobalService/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalServiceClient) GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*GetFeaturesResponse, error) {
	out := new(GetFeaturesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.global.GlobalService/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalServiceServer is the server API for GlobalService service.
// All implementations should embed UnimplementedGlobalServiceServer
// for forward compatibility
type GlobalServiceServer interface {
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	GetTenantGroup(context.Context, *GetTenantGroupRequest) (*GetTenantGroupResponse, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesResponse, error)
}

// UnimplementedGlobalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGlobalServiceServer struct {
}

func (*UnimplementedGlobalServiceServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedGlobalServiceServer) GetTenantGroup(context.Context, *GetTenantGroupRequest) (*GetTenantGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantGroup not implemented")
}
func (*UnimplementedGlobalServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (*UnimplementedGlobalServiceServer) GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}

func RegisterGlobalServiceServer(s grpc1.ServiceRegistrar, srv GlobalServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_GlobalService_serviceDesc(srv, opts...), srv)
}

var _GlobalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.global.GlobalService",
	HandlerType: (*GlobalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "global.proto",
}

func _get_GlobalService_serviceDesc(srv GlobalServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_GlobalService_GetHealth_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetHealth(ctx, req.(*GetHealthRequest))
	}
	var _GlobalService_GetHealth_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GlobalService_GetHealth_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "GetHealth", srv)
		_GlobalService_GetHealth_Handler = h.Interceptor(_GlobalService_GetHealth_Handler)
	}

	_GlobalService_GetTenantGroup_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetTenantGroup(ctx, req.(*GetTenantGroupRequest))
	}
	var _GlobalService_GetTenantGroup_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GlobalService_GetTenantGroup_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "GetTenantGroup", srv)
		_GlobalService_GetTenantGroup_Handler = h.Interceptor(_GlobalService_GetTenantGroup_Handler)
	}

	_GlobalService_CreateTenant_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	var _GlobalService_CreateTenant_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GlobalService_CreateTenant_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "CreateTenant", srv)
		_GlobalService_CreateTenant_Handler = h.Interceptor(_GlobalService_CreateTenant_Handler)
	}

	_GlobalService_GetFeatures_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetFeatures(ctx, req.(*GetFeaturesRequest))
	}
	var _GlobalService_GetFeatures_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GlobalService_GetFeatures_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "GetFeatures", srv)
		_GlobalService_GetFeatures_Handler = h.Interceptor(_GlobalService_GetFeatures_Handler)
	}

	var serviceDesc = _GlobalService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetHealthRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GlobalServiceServer).GetHealth(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GlobalService_GetHealth_info)
				}
				if interceptor == nil {
					return _GlobalService_GetHealth_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.global.GlobalService/GetHealth",
				}
				return interceptor(ctx, in, info, _GlobalService_GetHealth_Handler)
			},
		},
		{
			MethodName: "GetTenantGroup",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetTenantGroupRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GlobalServiceServer).GetTenantGroup(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GlobalService_GetTenantGroup_info)
				}
				if interceptor == nil {
					return _GlobalService_GetTenantGroup_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.global.GlobalService/GetTenantGroup",
				}
				return interceptor(ctx, in, info, _GlobalService_GetTenantGroup_Handler)
			},
		},
		{
			MethodName: "CreateTenant",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateTenantRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GlobalServiceServer).CreateTenant(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GlobalService_CreateTenant_info)
				}
				if interceptor == nil {
					return _GlobalService_CreateTenant_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.global.GlobalService/CreateTenant",
				}
				return interceptor(ctx, in, info, _GlobalService_CreateTenant_Handler)
			},
		},
		{
			MethodName: "GetFeatures",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetFeaturesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GlobalServiceServer).GetFeatures(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GlobalService_GetFeatures_info)
				}
				if interceptor == nil {
					return _GlobalService_GetFeatures_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.global.GlobalService/GetFeatures",
				}
				return interceptor(ctx, in, info, _GlobalService_GetFeatures_Handler)
			},
		},
	}
	return &serviceDesc
}
