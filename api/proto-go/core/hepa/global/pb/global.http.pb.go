// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: global.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// GlobalServiceHandler is the server API for GlobalService service.
type GlobalServiceHandler interface {
	// GET /_api/health
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	// GET /api/gateway/tenant-group
	GetTenantGroup(context.Context, *GetTenantGroupRequest) (*GetTenantGroupResponse, error)
	// POST /api/gateway/tenants
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	// GET /api/gateway/openapi/gateway-features/{clusterName}
	GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesResponse, error)
}

// RegisterGlobalServiceHandler register GlobalServiceHandler to http.Router.
func RegisterGlobalServiceHandler(r http.Router, srv GlobalServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GetHealth := func(method, path string, fn func(context.Context, *GetHealthRequest) (*GetHealthResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetHealthRequest))
		}
		var GetHealth_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetHealth_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "GetHealth", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetHealth_info)
				}
				r = r.WithContext(ctx)
				var in GetHealthRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetTenantGroup := func(method, path string, fn func(context.Context, *GetTenantGroupRequest) (*GetTenantGroupResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetTenantGroupRequest))
		}
		var GetTenantGroup_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetTenantGroup_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "GetTenantGroup", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetTenantGroup_info)
				}
				r = r.WithContext(ctx)
				var in GetTenantGroupRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["env"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateTenant := func(method, path string, fn func(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateTenantRequest))
		}
		var CreateTenant_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateTenant_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "CreateTenant", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateTenant_info)
				}
				r = r.WithContext(ctx)
				var in CreateTenantRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetFeatures := func(method, path string, fn func(context.Context, *GetFeaturesRequest) (*GetFeaturesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetFeaturesRequest))
		}
		var GetFeatures_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetFeatures_info = transport.NewServiceInfo("erda.core.hepa.global.GlobalService", "GetFeatures", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetFeatures_info)
				}
				r = r.WithContext(ctx)
				var in GetFeaturesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "clusterName":
							in.ClusterName = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetHealth("GET", "/_api/health", srv.GetHealth)
	add_GetTenantGroup("GET", "/api/gateway/tenant-group", srv.GetTenantGroup)
	add_CreateTenant("POST", "/api/gateway/tenants", srv.CreateTenant)
	add_GetFeatures("GET", "/api/gateway/openapi/gateway-features/{clusterName}", srv.GetFeatures)
}
