// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: domain.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/core/hepa/pb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetTenantDomainsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTenantDomainsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeRuntimeDomainsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeRuntimeDomainsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetRuntimeDomainsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetRuntimeDomainsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeInnerIngressResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ChangeInnerIngressRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RouteOptions)(nil)
var _ urlenc.URLValuesUnmarshaler = (*IngressRoute)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgDomainsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetOrgDomainsResponse)(nil)

// GetTenantDomainsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetTenantDomainsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			}
		}
	}
	return nil
}

// GetTenantDomainsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetTenantDomainsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals
			}
		}
	}
	return nil
}

// ChangeRuntimeDomainsRequest implement urlenc.URLValuesUnmarshaler.
func (m *ChangeRuntimeDomainsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			case "releaseId":
				m.ReleaseId = vals[0]
			case "domains":
				m.Domains = vals
			}
		}
	}
	return nil
}

// ChangeRuntimeDomainsResponse implement urlenc.URLValuesUnmarshaler.
func (m *ChangeRuntimeDomainsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// GetRuntimeDomainsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetRuntimeDomainsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetRuntimeDomainsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetRuntimeDomainsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ChangeInnerIngressResponse implement urlenc.URLValuesUnmarshaler.
func (m *ChangeInnerIngressResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// ChangeInnerIngressRequest implement urlenc.URLValuesUnmarshaler.
func (m *ChangeInnerIngressRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "k8sNamespace":
				m.K8SNamespace = vals[0]
			case "componentName":
				m.ComponentName = vals[0]
			case "componentPort":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ComponentPort = int32(val)
			case "clusterName":
				m.ClusterName = vals[0]
			case "ingressName":
				m.IngressName = vals[0]
			case "routeOptions":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
			case "routeOptions.rewriteHost":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				m.RouteOptions.RewriteHost = vals[0]
			case "routeOptions.rewritePath":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				m.RouteOptions.RewritePath = vals[0]
			case "routeOptions.useRegex":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.RouteOptions.UseRegex = val
			case "routeOptions.enableTls":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.enableTls.null_value":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.enableTls.number_value":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.enableTls.string_value":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.enableTls.bool_value":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.enableTls.struct_value":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.enableTls.list_value":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.RouteOptions.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.RouteOptions.EnableTls = val
					} else {
						m.RouteOptions.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "routeOptions.locationSnippet":
				if m.RouteOptions == nil {
					m.RouteOptions = &RouteOptions{}
				}
				m.RouteOptions.LocationSnippet = vals[0]
			}
		}
	}
	return nil
}

// RouteOptions implement urlenc.URLValuesUnmarshaler.
func (m *RouteOptions) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "rewriteHost":
				m.RewriteHost = vals[0]
			case "rewritePath":
				m.RewritePath = vals[0]
			case "useRegex":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.UseRegex = val
			case "enableTls":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.EnableTls = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.EnableTls = val
					} else {
						m.EnableTls = structpb.NewStringValue(vals[0])
					}
				}
			case "locationSnippet":
				m.LocationSnippet = vals[0]
			}
		}
	}
	return nil
}

// IngressRoute implement urlenc.URLValuesUnmarshaler.
func (m *IngressRoute) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "domain":
				m.Domain = vals[0]
			case "path":
				m.Path = vals[0]
			}
		}
	}
	return nil
}

// GetOrgDomainsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgDomainsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "domain":
				m.Domain = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// GetOrgDomainsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetOrgDomainsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
			case "data.list":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.list.null_value":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.list.number_value":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.list.string_value":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.list.bool_value":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.list.struct_value":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.list.list_value":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.List = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.List = val
					} else {
						m.Data.List = structpb.NewStringValue(vals[0])
					}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &pb.NewPageResult{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}
