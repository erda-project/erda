// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: domain.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// DomainServiceHandler is the server API for DomainService service.
type DomainServiceHandler interface {
	// +publish path:"/api/gateway/domains"
	// GET /api/gateway/domains
	GetOrgDomains(context.Context, *GetOrgDomainsRequest) (*GetOrgDomainsResponse, error)
	// +publish path:"/api/gateway/openapi/tenant-domain"
	// GET /api/gateway/openapi/tenant-domain
	GetTenantDomains(context.Context, *GetTenantDomainsRequest) (*GetTenantDomainsResponse, error)
	// +private
	// PUT /api/gateway/component-ingress
	ChangeInnerIngress(context.Context, *ChangeInnerIngressRequest) (*ChangeInnerIngressResponse, error)
	// +publish path:"/api/gateway/openapi/runtimes/{runtimeId}/domains"
	// GET /api/gateway/openapi/runtimes/{runtimeId}/domains
	GetRuntimeDomains(context.Context, *GetRuntimeDomainsRequest) (*GetRuntimeDomainsResponse, error)
	// +publish path:"/api/gateway/openapi/runtimes/{runtimeId}/services/{serviceName}/domains"
	// PUT /api/gateway/openapi/runtimes/{runtimeId}/services/{serviceName}/domains
	ChangeRuntimeDomains(context.Context, *ChangeRuntimeDomainsRequest) (*ChangeRuntimeDomainsResponse, error)
}

// RegisterDomainServiceHandler register DomainServiceHandler to http.Router.
func RegisterDomainServiceHandler(r http.Router, srv DomainServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GetOrgDomains := func(method, path string, fn func(context.Context, *GetOrgDomainsRequest) (*GetOrgDomainsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetOrgDomainsRequest))
		}
		var GetOrgDomains_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetOrgDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "GetOrgDomains", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetOrgDomains_info)
				}
				r = r.WithContext(ctx)
				var in GetOrgDomainsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["clusterName"]; len(vals) > 0 {
					in.ClusterName = vals[0]
				}
				if vals := params["domain"]; len(vals) > 0 {
					in.Domain = vals[0]
				}
				if vals := params["pageNo"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 64)
					if err != nil {
						return nil, err
					}
					in.PageNo = val
				}
				if vals := params["pageSize"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 64)
					if err != nil {
						return nil, err
					}
					in.PageSize = val
				}
				if vals := params["projectID"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				if vals := params["type"]; len(vals) > 0 {
					in.Type = vals[0]
				}
				if vals := params["workspace"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetTenantDomains := func(method, path string, fn func(context.Context, *GetTenantDomainsRequest) (*GetTenantDomainsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetTenantDomainsRequest))
		}
		var GetTenantDomains_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetTenantDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "GetTenantDomains", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetTenantDomains_info)
				}
				r = r.WithContext(ctx)
				var in GetTenantDomainsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["env"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ChangeInnerIngress := func(method, path string, fn func(context.Context, *ChangeInnerIngressRequest) (*ChangeInnerIngressResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ChangeInnerIngressRequest))
		}
		var ChangeInnerIngress_info transport.ServiceInfo
		if h.Interceptor != nil {
			ChangeInnerIngress_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "ChangeInnerIngress", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ChangeInnerIngress_info)
				}
				r = r.WithContext(ctx)
				var in ChangeInnerIngressRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetRuntimeDomains := func(method, path string, fn func(context.Context, *GetRuntimeDomainsRequest) (*GetRuntimeDomainsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetRuntimeDomainsRequest))
		}
		var GetRuntimeDomains_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetRuntimeDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "GetRuntimeDomains", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetRuntimeDomains_info)
				}
				r = r.WithContext(ctx)
				var in GetRuntimeDomainsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "runtimeId":
							in.RuntimeId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ChangeRuntimeDomains := func(method, path string, fn func(context.Context, *ChangeRuntimeDomainsRequest) (*ChangeRuntimeDomainsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ChangeRuntimeDomainsRequest))
		}
		var ChangeRuntimeDomains_info transport.ServiceInfo
		if h.Interceptor != nil {
			ChangeRuntimeDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "ChangeRuntimeDomains", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ChangeRuntimeDomains_info)
				}
				r = r.WithContext(ctx)
				var in ChangeRuntimeDomainsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "runtimeId":
							in.RuntimeId = val
						case "serviceName":
							in.ServiceName = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetOrgDomains("GET", "/api/gateway/domains", srv.GetOrgDomains)
	add_GetTenantDomains("GET", "/api/gateway/openapi/tenant-domain", srv.GetTenantDomains)
	add_ChangeInnerIngress("PUT", "/api/gateway/component-ingress", srv.ChangeInnerIngress)
	add_GetRuntimeDomains("GET", "/api/gateway/openapi/runtimes/{runtimeId}/domains", srv.GetRuntimeDomains)
	add_ChangeRuntimeDomains("PUT", "/api/gateway/openapi/runtimes/{runtimeId}/services/{serviceName}/domains", srv.ChangeRuntimeDomains)
}
