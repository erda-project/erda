// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: domain.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DomainServiceClient is the client API for DomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainServiceClient interface {
	// +publish path:"/api/gateway/domains"
	GetOrgDomains(ctx context.Context, in *GetOrgDomainsRequest, opts ...grpc.CallOption) (*GetOrgDomainsResponse, error)
	// +publish path:"/api/gateway/openapi/tenant-domain"
	GetTenantDomains(ctx context.Context, in *GetTenantDomainsRequest, opts ...grpc.CallOption) (*GetTenantDomainsResponse, error)
	// +private
	ChangeInnerIngress(ctx context.Context, in *ChangeInnerIngressRequest, opts ...grpc.CallOption) (*ChangeInnerIngressResponse, error)
	// +publish path:"/api/gateway/openapi/runtimes/{runtimeId}/domains"
	GetRuntimeDomains(ctx context.Context, in *GetRuntimeDomainsRequest, opts ...grpc.CallOption) (*GetRuntimeDomainsResponse, error)
	// +publish path:"/api/gateway/openapi/runtimes/{runtimeId}/services/{serviceName}/domains"
	ChangeRuntimeDomains(ctx context.Context, in *ChangeRuntimeDomainsRequest, opts ...grpc.CallOption) (*ChangeRuntimeDomainsResponse, error)
}

type domainServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDomainServiceClient(cc grpc1.ClientConnInterface) DomainServiceClient {
	return &domainServiceClient{cc}
}

func (c *domainServiceClient) GetOrgDomains(ctx context.Context, in *GetOrgDomainsRequest, opts ...grpc.CallOption) (*GetOrgDomainsResponse, error) {
	out := new(GetOrgDomainsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.domain.DomainService/GetOrgDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) GetTenantDomains(ctx context.Context, in *GetTenantDomainsRequest, opts ...grpc.CallOption) (*GetTenantDomainsResponse, error) {
	out := new(GetTenantDomainsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.domain.DomainService/GetTenantDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) ChangeInnerIngress(ctx context.Context, in *ChangeInnerIngressRequest, opts ...grpc.CallOption) (*ChangeInnerIngressResponse, error) {
	out := new(ChangeInnerIngressResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.domain.DomainService/ChangeInnerIngress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) GetRuntimeDomains(ctx context.Context, in *GetRuntimeDomainsRequest, opts ...grpc.CallOption) (*GetRuntimeDomainsResponse, error) {
	out := new(GetRuntimeDomainsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.domain.DomainService/GetRuntimeDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) ChangeRuntimeDomains(ctx context.Context, in *ChangeRuntimeDomainsRequest, opts ...grpc.CallOption) (*ChangeRuntimeDomainsResponse, error) {
	out := new(ChangeRuntimeDomainsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.domain.DomainService/ChangeRuntimeDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServiceServer is the server API for DomainService service.
// All implementations should embed UnimplementedDomainServiceServer
// for forward compatibility
type DomainServiceServer interface {
	// +publish path:"/api/gateway/domains"
	GetOrgDomains(context.Context, *GetOrgDomainsRequest) (*GetOrgDomainsResponse, error)
	// +publish path:"/api/gateway/openapi/tenant-domain"
	GetTenantDomains(context.Context, *GetTenantDomainsRequest) (*GetTenantDomainsResponse, error)
	// +private
	ChangeInnerIngress(context.Context, *ChangeInnerIngressRequest) (*ChangeInnerIngressResponse, error)
	// +publish path:"/api/gateway/openapi/runtimes/{runtimeId}/domains"
	GetRuntimeDomains(context.Context, *GetRuntimeDomainsRequest) (*GetRuntimeDomainsResponse, error)
	// +publish path:"/api/gateway/openapi/runtimes/{runtimeId}/services/{serviceName}/domains"
	ChangeRuntimeDomains(context.Context, *ChangeRuntimeDomainsRequest) (*ChangeRuntimeDomainsResponse, error)
}

// UnimplementedDomainServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDomainServiceServer struct {
}

func (*UnimplementedDomainServiceServer) GetOrgDomains(context.Context, *GetOrgDomainsRequest) (*GetOrgDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgDomains not implemented")
}
func (*UnimplementedDomainServiceServer) GetTenantDomains(context.Context, *GetTenantDomainsRequest) (*GetTenantDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDomains not implemented")
}
func (*UnimplementedDomainServiceServer) ChangeInnerIngress(context.Context, *ChangeInnerIngressRequest) (*ChangeInnerIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInnerIngress not implemented")
}
func (*UnimplementedDomainServiceServer) GetRuntimeDomains(context.Context, *GetRuntimeDomainsRequest) (*GetRuntimeDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeDomains not implemented")
}
func (*UnimplementedDomainServiceServer) ChangeRuntimeDomains(context.Context, *ChangeRuntimeDomainsRequest) (*ChangeRuntimeDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRuntimeDomains not implemented")
}

func RegisterDomainServiceServer(s grpc1.ServiceRegistrar, srv DomainServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DomainService_serviceDesc(srv, opts...), srv)
}

var _DomainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.domain.DomainService",
	HandlerType: (*DomainServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "domain.proto",
}

func _get_DomainService_serviceDesc(srv DomainServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DomainService_GetOrgDomains_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgDomains(ctx, req.(*GetOrgDomainsRequest))
	}
	var _DomainService_GetOrgDomains_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DomainService_GetOrgDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "GetOrgDomains", srv)
		_DomainService_GetOrgDomains_Handler = h.Interceptor(_DomainService_GetOrgDomains_Handler)
	}

	_DomainService_GetTenantDomains_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetTenantDomains(ctx, req.(*GetTenantDomainsRequest))
	}
	var _DomainService_GetTenantDomains_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DomainService_GetTenantDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "GetTenantDomains", srv)
		_DomainService_GetTenantDomains_Handler = h.Interceptor(_DomainService_GetTenantDomains_Handler)
	}

	_DomainService_ChangeInnerIngress_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ChangeInnerIngress(ctx, req.(*ChangeInnerIngressRequest))
	}
	var _DomainService_ChangeInnerIngress_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DomainService_ChangeInnerIngress_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "ChangeInnerIngress", srv)
		_DomainService_ChangeInnerIngress_Handler = h.Interceptor(_DomainService_ChangeInnerIngress_Handler)
	}

	_DomainService_GetRuntimeDomains_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRuntimeDomains(ctx, req.(*GetRuntimeDomainsRequest))
	}
	var _DomainService_GetRuntimeDomains_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DomainService_GetRuntimeDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "GetRuntimeDomains", srv)
		_DomainService_GetRuntimeDomains_Handler = h.Interceptor(_DomainService_GetRuntimeDomains_Handler)
	}

	_DomainService_ChangeRuntimeDomains_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ChangeRuntimeDomains(ctx, req.(*ChangeRuntimeDomainsRequest))
	}
	var _DomainService_ChangeRuntimeDomains_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DomainService_ChangeRuntimeDomains_info = transport.NewServiceInfo("erda.core.hepa.domain.DomainService", "ChangeRuntimeDomains", srv)
		_DomainService_ChangeRuntimeDomains_Handler = h.Interceptor(_DomainService_ChangeRuntimeDomains_Handler)
	}

	var serviceDesc = _DomainService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetOrgDomains",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgDomainsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DomainServiceServer).GetOrgDomains(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DomainService_GetOrgDomains_info)
				}
				if interceptor == nil {
					return _DomainService_GetOrgDomains_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.domain.DomainService/GetOrgDomains",
				}
				return interceptor(ctx, in, info, _DomainService_GetOrgDomains_Handler)
			},
		},
		{
			MethodName: "GetTenantDomains",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetTenantDomainsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DomainServiceServer).GetTenantDomains(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DomainService_GetTenantDomains_info)
				}
				if interceptor == nil {
					return _DomainService_GetTenantDomains_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.domain.DomainService/GetTenantDomains",
				}
				return interceptor(ctx, in, info, _DomainService_GetTenantDomains_Handler)
			},
		},
		{
			MethodName: "ChangeInnerIngress",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ChangeInnerIngressRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DomainServiceServer).ChangeInnerIngress(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DomainService_ChangeInnerIngress_info)
				}
				if interceptor == nil {
					return _DomainService_ChangeInnerIngress_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.domain.DomainService/ChangeInnerIngress",
				}
				return interceptor(ctx, in, info, _DomainService_ChangeInnerIngress_Handler)
			},
		},
		{
			MethodName: "GetRuntimeDomains",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetRuntimeDomainsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DomainServiceServer).GetRuntimeDomains(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DomainService_GetRuntimeDomains_info)
				}
				if interceptor == nil {
					return _DomainService_GetRuntimeDomains_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.domain.DomainService/GetRuntimeDomains",
				}
				return interceptor(ctx, in, info, _DomainService_GetRuntimeDomains_Handler)
			},
		},
		{
			MethodName: "ChangeRuntimeDomains",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ChangeRuntimeDomainsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DomainServiceServer).ChangeRuntimeDomains(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DomainService_ChangeRuntimeDomains_info)
				}
				if interceptor == nil {
					return _DomainService_ChangeRuntimeDomains_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.domain.DomainService/ChangeRuntimeDomains",
				}
				return interceptor(ctx, in, info, _DomainService_ChangeRuntimeDomains_Handler)
			},
		},
	}
	return &serviceDesc
}
