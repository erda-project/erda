// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: legacy_consumer.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// LegacyConsumerServiceClient is the client API for LegacyConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LegacyConsumerServiceClient interface {
	// +publish path:"/api/gateway/consumer"
	GetConsumer(ctx context.Context, in *GetConsumerRequest, opts ...grpc.CallOption) (*GetConsumerResponse, error)
}

type legacyConsumerServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewLegacyConsumerServiceClient(cc grpc1.ClientConnInterface) LegacyConsumerServiceClient {
	return &legacyConsumerServiceClient{cc}
}

func (c *legacyConsumerServiceClient) GetConsumer(ctx context.Context, in *GetConsumerRequest, opts ...grpc.CallOption) (*GetConsumerResponse, error) {
	out := new(GetConsumerResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.consumer.LegacyConsumerService/GetConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegacyConsumerServiceServer is the server API for LegacyConsumerService service.
// All implementations should embed UnimplementedLegacyConsumerServiceServer
// for forward compatibility
type LegacyConsumerServiceServer interface {
	// +publish path:"/api/gateway/consumer"
	GetConsumer(context.Context, *GetConsumerRequest) (*GetConsumerResponse, error)
}

// UnimplementedLegacyConsumerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLegacyConsumerServiceServer struct {
}

func (*UnimplementedLegacyConsumerServiceServer) GetConsumer(context.Context, *GetConsumerRequest) (*GetConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumer not implemented")
}

func RegisterLegacyConsumerServiceServer(s grpc1.ServiceRegistrar, srv LegacyConsumerServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_LegacyConsumerService_serviceDesc(srv, opts...), srv)
}

var _LegacyConsumerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.consumer.LegacyConsumerService",
	HandlerType: (*LegacyConsumerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "legacy_consumer.proto",
}

func _get_LegacyConsumerService_serviceDesc(srv LegacyConsumerServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_LegacyConsumerService_GetConsumer_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetConsumer(ctx, req.(*GetConsumerRequest))
	}
	var _LegacyConsumerService_GetConsumer_info transport.ServiceInfo
	if h.Interceptor != nil {
		_LegacyConsumerService_GetConsumer_info = transport.NewServiceInfo("erda.core.hepa.consumer.LegacyConsumerService", "GetConsumer", srv)
		_LegacyConsumerService_GetConsumer_Handler = h.Interceptor(_LegacyConsumerService_GetConsumer_Handler)
	}

	var serviceDesc = _LegacyConsumerService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetConsumer",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetConsumerRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(LegacyConsumerServiceServer).GetConsumer(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _LegacyConsumerService_GetConsumer_info)
				}
				if interceptor == nil {
					return _LegacyConsumerService_GetConsumer_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.consumer.LegacyConsumerService/GetConsumer",
				}
				return interceptor(ctx, in, info, _LegacyConsumerService_GetConsumer_Handler)
			},
		},
	}
	return &serviceDesc
}
