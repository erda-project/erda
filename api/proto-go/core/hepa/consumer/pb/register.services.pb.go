// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: legacy_consumer.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterLegacyConsumerServiceImp legacy_consumer.proto
func RegisterLegacyConsumerServiceImp(regester transport.Register, srv LegacyConsumerServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterLegacyConsumerServiceHandler(regester, LegacyConsumerServiceHandler(srv), _ops.HTTP...)
	RegisterLegacyConsumerServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.hepa.consumer.LegacyConsumerService",
	)
}

var (
	legacyConsumerServiceClientType  = reflect.TypeOf((*LegacyConsumerServiceClient)(nil)).Elem()
	legacyConsumerServiceServerType  = reflect.TypeOf((*LegacyConsumerServiceServer)(nil)).Elem()
	legacyConsumerServiceHandlerType = reflect.TypeOf((*LegacyConsumerServiceHandler)(nil)).Elem()
)

// LegacyConsumerServiceClientType .
func LegacyConsumerServiceClientType() reflect.Type { return legacyConsumerServiceClientType }

// LegacyConsumerServiceServerType .
func LegacyConsumerServiceServerType() reflect.Type { return legacyConsumerServiceServerType }

// LegacyConsumerServiceHandlerType .
func LegacyConsumerServiceHandlerType() reflect.Type { return legacyConsumerServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		legacyConsumerServiceClientType,
		// server types
		legacyConsumerServiceServerType,
		// handler types
		legacyConsumerServiceHandlerType,
	}
}
