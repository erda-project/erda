// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: legacy_upstream_lb.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/hepa/legacy_upstream_lb/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// UpstreamLbService legacy_upstream_lb.proto
	UpstreamLbService() pb.UpstreamLbServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		upstreamLbService: pb.NewUpstreamLbServiceClient(cc),
	}
}

type serviceClients struct {
	upstreamLbService pb.UpstreamLbServiceClient
}

func (c *serviceClients) UpstreamLbService() pb.UpstreamLbServiceClient {
	return c.upstreamLbService
}

type upstreamLbServiceWrapper struct {
	client pb.UpstreamLbServiceClient
	opts   []grpc1.CallOption
}

func (s *upstreamLbServiceWrapper) TargetOnline(ctx context.Context, req *pb.TargetOnlineRequest) (*pb.TargetOnlineResponse, error) {
	return s.client.TargetOnline(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *upstreamLbServiceWrapper) TargetOffline(ctx context.Context, req *pb.TargetOfflineRequest) (*pb.TargetOfflineResponse, error) {
	return s.client.TargetOffline(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
