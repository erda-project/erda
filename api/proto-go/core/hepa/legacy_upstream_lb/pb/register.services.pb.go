// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: legacy_upstream_lb.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterUpstreamLbServiceImp legacy_upstream_lb.proto
func RegisterUpstreamLbServiceImp(regester transport.Register, srv UpstreamLbServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterUpstreamLbServiceHandler(regester, UpstreamLbServiceHandler(srv), _ops.HTTP...)
	RegisterUpstreamLbServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.hepa.legacy_upstream_lb.UpstreamLbService",
	)
}

var (
	upstreamLbServiceClientType  = reflect.TypeOf((*UpstreamLbServiceClient)(nil)).Elem()
	upstreamLbServiceServerType  = reflect.TypeOf((*UpstreamLbServiceServer)(nil)).Elem()
	upstreamLbServiceHandlerType = reflect.TypeOf((*UpstreamLbServiceHandler)(nil)).Elem()
)

// UpstreamLbServiceClientType .
func UpstreamLbServiceClientType() reflect.Type { return upstreamLbServiceClientType }

// UpstreamLbServiceServerType .
func UpstreamLbServiceServerType() reflect.Type { return upstreamLbServiceServerType }

// UpstreamLbServiceHandlerType .
func UpstreamLbServiceHandlerType() reflect.Type { return upstreamLbServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		upstreamLbServiceClientType,
		// server types
		upstreamLbServiceServerType,
		// handler types
		upstreamLbServiceHandlerType,
	}
}
