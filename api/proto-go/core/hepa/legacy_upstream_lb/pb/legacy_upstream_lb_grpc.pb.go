// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: legacy_upstream_lb.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// UpstreamLbServiceClient is the client API for UpstreamLbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpstreamLbServiceClient interface {
	TargetOnline(ctx context.Context, in *TargetOnlineRequest, opts ...grpc.CallOption) (*TargetOnlineResponse, error)
	TargetOffline(ctx context.Context, in *TargetOfflineRequest, opts ...grpc.CallOption) (*TargetOfflineResponse, error)
}

type upstreamLbServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewUpstreamLbServiceClient(cc grpc1.ClientConnInterface) UpstreamLbServiceClient {
	return &upstreamLbServiceClient{cc}
}

func (c *upstreamLbServiceClient) TargetOnline(ctx context.Context, in *TargetOnlineRequest, opts ...grpc.CallOption) (*TargetOnlineResponse, error) {
	out := new(TargetOnlineResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.legacy_upstream_lb.UpstreamLbService/TargetOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamLbServiceClient) TargetOffline(ctx context.Context, in *TargetOfflineRequest, opts ...grpc.CallOption) (*TargetOfflineResponse, error) {
	out := new(TargetOfflineResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.legacy_upstream_lb.UpstreamLbService/TargetOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamLbServiceServer is the server API for UpstreamLbService service.
// All implementations should embed UnimplementedUpstreamLbServiceServer
// for forward compatibility
type UpstreamLbServiceServer interface {
	TargetOnline(context.Context, *TargetOnlineRequest) (*TargetOnlineResponse, error)
	TargetOffline(context.Context, *TargetOfflineRequest) (*TargetOfflineResponse, error)
}

// UnimplementedUpstreamLbServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUpstreamLbServiceServer struct {
}

func (*UnimplementedUpstreamLbServiceServer) TargetOnline(context.Context, *TargetOnlineRequest) (*TargetOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetOnline not implemented")
}
func (*UnimplementedUpstreamLbServiceServer) TargetOffline(context.Context, *TargetOfflineRequest) (*TargetOfflineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetOffline not implemented")
}

func RegisterUpstreamLbServiceServer(s grpc1.ServiceRegistrar, srv UpstreamLbServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_UpstreamLbService_serviceDesc(srv, opts...), srv)
}

var _UpstreamLbService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.legacy_upstream_lb.UpstreamLbService",
	HandlerType: (*UpstreamLbServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "legacy_upstream_lb.proto",
}

func _get_UpstreamLbService_serviceDesc(srv UpstreamLbServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_UpstreamLbService_TargetOnline_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.TargetOnline(ctx, req.(*TargetOnlineRequest))
	}
	var _UpstreamLbService_TargetOnline_info transport.ServiceInfo
	if h.Interceptor != nil {
		_UpstreamLbService_TargetOnline_info = transport.NewServiceInfo("erda.core.hepa.legacy_upstream_lb.UpstreamLbService", "TargetOnline", srv)
		_UpstreamLbService_TargetOnline_Handler = h.Interceptor(_UpstreamLbService_TargetOnline_Handler)
	}

	_UpstreamLbService_TargetOffline_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.TargetOffline(ctx, req.(*TargetOfflineRequest))
	}
	var _UpstreamLbService_TargetOffline_info transport.ServiceInfo
	if h.Interceptor != nil {
		_UpstreamLbService_TargetOffline_info = transport.NewServiceInfo("erda.core.hepa.legacy_upstream_lb.UpstreamLbService", "TargetOffline", srv)
		_UpstreamLbService_TargetOffline_Handler = h.Interceptor(_UpstreamLbService_TargetOffline_Handler)
	}

	var serviceDesc = _UpstreamLbService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "TargetOnline",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TargetOnlineRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UpstreamLbServiceServer).TargetOnline(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _UpstreamLbService_TargetOnline_info)
				}
				if interceptor == nil {
					return _UpstreamLbService_TargetOnline_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.legacy_upstream_lb.UpstreamLbService/TargetOnline",
				}
				return interceptor(ctx, in, info, _UpstreamLbService_TargetOnline_Handler)
			},
		},
		{
			MethodName: "TargetOffline",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TargetOfflineRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UpstreamLbServiceServer).TargetOffline(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _UpstreamLbService_TargetOffline_info)
				}
				if interceptor == nil {
					return _UpstreamLbService_TargetOffline_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.legacy_upstream_lb.UpstreamLbService/TargetOffline",
				}
				return interceptor(ctx, in, info, _UpstreamLbService_TargetOffline_Handler)
			},
		},
	}
	return &serviceDesc
}
