// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: runtime_service.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	// +publish path:"/api/gateway/runtime-services"
	ChangeRuntime(ctx context.Context, in *ChangeRuntimeRequest, opts ...grpc.CallOption) (*ChangeRuntimeResponse, error)
	// +publish path:"/api/gateway/runtime-services/{runtimeId}"
	DeleteRuntime(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error)
	// +publish path:"/api/gateway/register-apps"
	GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error)
	// +publish path:"/api/gateway/openapi/service-runtime"
	GetServiceRuntimes(ctx context.Context, in *GetServiceRuntimesRequest, opts ...grpc.CallOption) (*GetServiceRuntimesResponse, error)
	// +publish path:"/api/gateway/openapi/service-api-prefix"
	GetServiceApiPrefix(ctx context.Context, in *GetServiceApiPrefixRequest, opts ...grpc.CallOption) (*GetServiceApiPrefixResponse, error)
}

type runtimeServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc1.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) ChangeRuntime(ctx context.Context, in *ChangeRuntimeRequest, opts ...grpc.CallOption) (*ChangeRuntimeResponse, error) {
	out := new(ChangeRuntimeResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.runtime_service.RuntimeService/ChangeRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteRuntime(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error) {
	out := new(DeleteRuntimeResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.runtime_service.RuntimeService/DeleteRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.runtime_service.RuntimeService/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetServiceRuntimes(ctx context.Context, in *GetServiceRuntimesRequest, opts ...grpc.CallOption) (*GetServiceRuntimesResponse, error) {
	out := new(GetServiceRuntimesResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.runtime_service.RuntimeService/GetServiceRuntimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetServiceApiPrefix(ctx context.Context, in *GetServiceApiPrefixRequest, opts ...grpc.CallOption) (*GetServiceApiPrefixResponse, error) {
	out := new(GetServiceApiPrefixResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.runtime_service.RuntimeService/GetServiceApiPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations should embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	// +publish path:"/api/gateway/runtime-services"
	ChangeRuntime(context.Context, *ChangeRuntimeRequest) (*ChangeRuntimeResponse, error)
	// +publish path:"/api/gateway/runtime-services/{runtimeId}"
	DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error)
	// +publish path:"/api/gateway/register-apps"
	GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	// +publish path:"/api/gateway/openapi/service-runtime"
	GetServiceRuntimes(context.Context, *GetServiceRuntimesRequest) (*GetServiceRuntimesResponse, error)
	// +publish path:"/api/gateway/openapi/service-api-prefix"
	GetServiceApiPrefix(context.Context, *GetServiceApiPrefixRequest) (*GetServiceApiPrefixResponse, error)
}

// UnimplementedRuntimeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (*UnimplementedRuntimeServiceServer) ChangeRuntime(context.Context, *ChangeRuntimeRequest) (*ChangeRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRuntime not implemented")
}
func (*UnimplementedRuntimeServiceServer) DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntime not implemented")
}
func (*UnimplementedRuntimeServiceServer) GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (*UnimplementedRuntimeServiceServer) GetServiceRuntimes(context.Context, *GetServiceRuntimesRequest) (*GetServiceRuntimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRuntimes not implemented")
}
func (*UnimplementedRuntimeServiceServer) GetServiceApiPrefix(context.Context, *GetServiceApiPrefixRequest) (*GetServiceApiPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceApiPrefix not implemented")
}

func RegisterRuntimeServiceServer(s grpc1.ServiceRegistrar, srv RuntimeServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_RuntimeService_serviceDesc(srv, opts...), srv)
}

var _RuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.runtime_service.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "runtime_service.proto",
}

func _get_RuntimeService_serviceDesc(srv RuntimeServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_RuntimeService_ChangeRuntime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ChangeRuntime(ctx, req.(*ChangeRuntimeRequest))
	}
	var _RuntimeService_ChangeRuntime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_ChangeRuntime_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "ChangeRuntime", srv)
		_RuntimeService_ChangeRuntime_Handler = h.Interceptor(_RuntimeService_ChangeRuntime_Handler)
	}

	_RuntimeService_DeleteRuntime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteRuntime(ctx, req.(*DeleteRuntimeRequest))
	}
	var _RuntimeService_DeleteRuntime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_DeleteRuntime_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "DeleteRuntime", srv)
		_RuntimeService_DeleteRuntime_Handler = h.Interceptor(_RuntimeService_DeleteRuntime_Handler)
	}

	_RuntimeService_GetApps_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetApps(ctx, req.(*GetAppsRequest))
	}
	var _RuntimeService_GetApps_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_GetApps_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "GetApps", srv)
		_RuntimeService_GetApps_Handler = h.Interceptor(_RuntimeService_GetApps_Handler)
	}

	_RuntimeService_GetServiceRuntimes_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetServiceRuntimes(ctx, req.(*GetServiceRuntimesRequest))
	}
	var _RuntimeService_GetServiceRuntimes_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_GetServiceRuntimes_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "GetServiceRuntimes", srv)
		_RuntimeService_GetServiceRuntimes_Handler = h.Interceptor(_RuntimeService_GetServiceRuntimes_Handler)
	}

	_RuntimeService_GetServiceApiPrefix_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetServiceApiPrefix(ctx, req.(*GetServiceApiPrefixRequest))
	}
	var _RuntimeService_GetServiceApiPrefix_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_GetServiceApiPrefix_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "GetServiceApiPrefix", srv)
		_RuntimeService_GetServiceApiPrefix_Handler = h.Interceptor(_RuntimeService_GetServiceApiPrefix_Handler)
	}

	var serviceDesc = _RuntimeService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ChangeRuntime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ChangeRuntimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).ChangeRuntime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_ChangeRuntime_info)
				}
				if interceptor == nil {
					return _RuntimeService_ChangeRuntime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.runtime_service.RuntimeService/ChangeRuntime",
				}
				return interceptor(ctx, in, info, _RuntimeService_ChangeRuntime_Handler)
			},
		},
		{
			MethodName: "DeleteRuntime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteRuntimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).DeleteRuntime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_DeleteRuntime_info)
				}
				if interceptor == nil {
					return _RuntimeService_DeleteRuntime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.runtime_service.RuntimeService/DeleteRuntime",
				}
				return interceptor(ctx, in, info, _RuntimeService_DeleteRuntime_Handler)
			},
		},
		{
			MethodName: "GetApps",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAppsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).GetApps(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_GetApps_info)
				}
				if interceptor == nil {
					return _RuntimeService_GetApps_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.runtime_service.RuntimeService/GetApps",
				}
				return interceptor(ctx, in, info, _RuntimeService_GetApps_Handler)
			},
		},
		{
			MethodName: "GetServiceRuntimes",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetServiceRuntimesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).GetServiceRuntimes(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_GetServiceRuntimes_info)
				}
				if interceptor == nil {
					return _RuntimeService_GetServiceRuntimes_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.runtime_service.RuntimeService/GetServiceRuntimes",
				}
				return interceptor(ctx, in, info, _RuntimeService_GetServiceRuntimes_Handler)
			},
		},
		{
			MethodName: "GetServiceApiPrefix",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetServiceApiPrefixRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).GetServiceApiPrefix(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_GetServiceApiPrefix_info)
				}
				if interceptor == nil {
					return _RuntimeService_GetServiceApiPrefix_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.runtime_service.RuntimeService/GetServiceApiPrefix",
				}
				return interceptor(ctx, in, info, _RuntimeService_GetServiceApiPrefix_Handler)
			},
		},
	}
	return &serviceDesc
}
