// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: runtime_service.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// RuntimeServiceHandler is the server API for RuntimeService service.
type RuntimeServiceHandler interface {
	// +publish path:"/api/gateway/runtime-services"
	// PUT /api/gateway/runtime-services
	ChangeRuntime(context.Context, *ChangeRuntimeRequest) (*ChangeRuntimeResponse, error)
	// +publish path:"/api/gateway/runtime-services/{runtimeId}"
	// DELETE /api/gateway/runtime-services/{runtimeId}
	DeleteRuntime(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error)
	// +publish path:"/api/gateway/register-apps"
	// GET /api/gateway/register-apps
	GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	// +publish path:"/api/gateway/openapi/service-runtime"
	// GET /api/gateway/openapi/service-runtime
	GetServiceRuntimes(context.Context, *GetServiceRuntimesRequest) (*GetServiceRuntimesResponse, error)
	// +publish path:"/api/gateway/openapi/service-api-prefix"
	// GET /api/gateway/openapi/service-api-prefix
	GetServiceApiPrefix(context.Context, *GetServiceApiPrefixRequest) (*GetServiceApiPrefixResponse, error)
}

// RegisterRuntimeServiceHandler register RuntimeServiceHandler to http.Router.
func RegisterRuntimeServiceHandler(r http.Router, srv RuntimeServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ChangeRuntime := func(method, path string, fn func(context.Context, *ChangeRuntimeRequest) (*ChangeRuntimeResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ChangeRuntimeRequest))
		}
		var ChangeRuntime_info transport.ServiceInfo
		if h.Interceptor != nil {
			ChangeRuntime_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "ChangeRuntime", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ChangeRuntime_info)
				}
				r = r.WithContext(ctx)
				var in ChangeRuntimeRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteRuntime := func(method, path string, fn func(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteRuntimeRequest))
		}
		var DeleteRuntime_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteRuntime_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "DeleteRuntime", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteRuntime_info)
				}
				r = r.WithContext(ctx)
				var in DeleteRuntimeRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "runtimeId":
							in.RuntimeId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetApps := func(method, path string, fn func(context.Context, *GetAppsRequest) (*GetAppsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetAppsRequest))
		}
		var GetApps_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetApps_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "GetApps", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetApps_info)
				}
				r = r.WithContext(ctx)
				var in GetAppsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["env"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetServiceRuntimes := func(method, path string, fn func(context.Context, *GetServiceRuntimesRequest) (*GetServiceRuntimesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetServiceRuntimesRequest))
		}
		var GetServiceRuntimes_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetServiceRuntimes_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "GetServiceRuntimes", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetServiceRuntimes_info)
				}
				r = r.WithContext(ctx)
				var in GetServiceRuntimesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["app"]; len(vals) > 0 {
					in.App = vals[0]
				}
				if vals := params["env"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				if vals := params["service"]; len(vals) > 0 {
					in.Service = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetServiceApiPrefix := func(method, path string, fn func(context.Context, *GetServiceApiPrefixRequest) (*GetServiceApiPrefixResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetServiceApiPrefixRequest))
		}
		var GetServiceApiPrefix_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetServiceApiPrefix_info = transport.NewServiceInfo("erda.core.hepa.runtime_service.RuntimeService", "GetServiceApiPrefix", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetServiceApiPrefix_info)
				}
				r = r.WithContext(ctx)
				var in GetServiceApiPrefixRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["app"]; len(vals) > 0 {
					in.App = vals[0]
				}
				if vals := params["env"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				if vals := params["runtimeId"]; len(vals) > 0 {
					in.RuntimeId = vals[0]
				}
				if vals := params["service"]; len(vals) > 0 {
					in.Service = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ChangeRuntime("PUT", "/api/gateway/runtime-services", srv.ChangeRuntime)
	add_DeleteRuntime("DELETE", "/api/gateway/runtime-services/{runtimeId}", srv.DeleteRuntime)
	add_GetApps("GET", "/api/gateway/register-apps", srv.GetApps)
	add_GetServiceRuntimes("GET", "/api/gateway/openapi/service-runtime", srv.GetServiceRuntimes)
	add_GetServiceApiPrefix("GET", "/api/gateway/openapi/service-api-prefix", srv.GetServiceApiPrefix)
}
