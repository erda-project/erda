// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: runtime_service.proto

package pb

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetServiceApiPrefixRequest) Validate() error {
	return nil
}
func (this *GetServiceApiPrefixResponse) Validate() error {
	return nil
}
func (this *ServiceRuntime) Validate() error {
	return nil
}
func (this *GetServiceRuntimesResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *GetServiceRuntimesRequest) Validate() error {
	return nil
}
func (this *DeleteRuntimeRequest) Validate() error {
	return nil
}
func (this *DeleteRuntimeResponse) Validate() error {
	return nil
}
func (this *App) Validate() error {
	return nil
}
func (this *GetAppsResponse) Validate() error {
	for _, item := range this.Apps {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Apps", err)
			}
		}
	}
	return nil
}
func (this *GetAppsRequest) Validate() error {
	return nil
}
func (this *ChangeRuntimeResponse) Validate() error {
	return nil
}
func (this *EndpointDomain) Validate() error {
	return nil
}
func (this *ServiceDetail) Validate() error {
	for _, item := range this.EndpointDomains {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("EndpointDomains", err)
			}
		}
	}
	return nil
}
func (this *ChangeRuntimeRequest) Validate() error {
	for _, item := range this.Services {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Services", err)
			}
		}
	}
	return nil
}
