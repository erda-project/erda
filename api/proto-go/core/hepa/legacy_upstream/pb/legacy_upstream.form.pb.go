// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: legacy_upstream.proto

package pb

import (
	json "encoding/json"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
	url "net/url"
	strconv "strconv"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*AsyncRegisterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AsyncRegisterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RegisterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RegisterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpstreamApi)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Upstream)(nil)

// AsyncRegisterResponse implement urlenc.URLValuesUnmarshaler.
func (m *AsyncRegisterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// AsyncRegisterRequest implement urlenc.URLValuesUnmarshaler.
func (m *AsyncRegisterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "upstream":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
			case "upstream.az":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.Az = vals[0]
			case "upstream.diceAppId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.DiceAppId = vals[0]
			case "upstream.diceService":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.DiceService = vals[0]
			case "upstream.runtimeName":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.RuntimeName = vals[0]
			case "upstream.runtimeId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.RuntimeId = vals[0]
			case "upstream.appName":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.AppName = vals[0]
			case "upstream.serviceName":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.ServiceName = vals[0]
			case "upstream.orgId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.OrgId = vals[0]
			case "upstream.projectId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.ProjectId = vals[0]
			case "upstream.env":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.Env = vals[0]
			case "upstream.registerId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Upstream.RegisterId = int32(val)
			case "upstream.registerTag":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.RegisterTag = vals[0]
			case "upstream.pathPrefix":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.PathPrefix = vals[0]
			}
		}
	}
	return nil
}

// RegisterResponse implement urlenc.URLValuesUnmarshaler.
func (m *RegisterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// RegisterRequest implement urlenc.URLValuesUnmarshaler.
func (m *RegisterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "upstream":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
			case "upstream.az":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.Az = vals[0]
			case "upstream.diceAppId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.DiceAppId = vals[0]
			case "upstream.diceService":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.DiceService = vals[0]
			case "upstream.runtimeName":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.RuntimeName = vals[0]
			case "upstream.runtimeId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.RuntimeId = vals[0]
			case "upstream.appName":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.AppName = vals[0]
			case "upstream.serviceName":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.ServiceName = vals[0]
			case "upstream.orgId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.OrgId = vals[0]
			case "upstream.projectId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.ProjectId = vals[0]
			case "upstream.env":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.Env = vals[0]
			case "upstream.registerId":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Upstream.RegisterId = int32(val)
			case "upstream.registerTag":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.RegisterTag = vals[0]
			case "upstream.pathPrefix":
				if m.Upstream == nil {
					m.Upstream = &Upstream{}
				}
				m.Upstream.PathPrefix = vals[0]
			}
		}
	}
	return nil
}

// UpstreamApi implement urlenc.URLValuesUnmarshaler.
func (m *UpstreamApi) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "path":
				m.Path = vals[0]
			case "gatewayPath":
				m.GatewayPath = vals[0]
			case "method":
				m.Method = vals[0]
			case "address":
				m.Address = vals[0]
			case "isInner":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsInner = val
			case "isCustom":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsCustom = val
			case "doc":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Doc = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Doc = val
					} else {
						m.Doc = structpb.NewStringValue(vals[0])
					}
				}
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// Upstream implement urlenc.URLValuesUnmarshaler.
func (m *Upstream) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "az":
				m.Az = vals[0]
			case "diceAppId":
				m.DiceAppId = vals[0]
			case "diceService":
				m.DiceService = vals[0]
			case "runtimeName":
				m.RuntimeName = vals[0]
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "appName":
				m.AppName = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			case "orgId":
				m.OrgId = vals[0]
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			case "registerId":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.RegisterId = int32(val)
			case "registerTag":
				m.RegisterTag = vals[0]
			case "pathPrefix":
				m.PathPrefix = vals[0]
			}
		}
	}
	return nil
}
