// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: micro_api.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	// +publish path:"/api/gateway/api"
	GetApis(ctx context.Context, in *GetApisRequest, opts ...grpc.CallOption) (*GetApisResponse, error)
	// +publish path:"/api/gateway/api"
	CreateApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*CreateApiResponse, error)
	// +publish path:"/api/gateway/api/{apiId}"
	UpdateApi(ctx context.Context, in *UpdateApiRequest, opts ...grpc.CallOption) (*UpdateApiResponse, error)
	// +publish path:"/api/gateway/api/{apiId}"
	DeleteApi(ctx context.Context, in *DeleteApiRequest, opts ...grpc.CallOption) (*DeleteApiResponse, error)
}

type apiServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewApiServiceClient(cc grpc1.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetApis(ctx context.Context, in *GetApisRequest, opts ...grpc.CallOption) (*GetApisResponse, error) {
	out := new(GetApisResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.api.ApiService/GetApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*CreateApiResponse, error) {
	out := new(CreateApiResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.api.ApiService/CreateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateApi(ctx context.Context, in *UpdateApiRequest, opts ...grpc.CallOption) (*UpdateApiResponse, error) {
	out := new(UpdateApiResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.api.ApiService/UpdateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteApi(ctx context.Context, in *DeleteApiRequest, opts ...grpc.CallOption) (*DeleteApiResponse, error) {
	out := new(DeleteApiResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.api.ApiService/DeleteApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations should embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	// +publish path:"/api/gateway/api"
	GetApis(context.Context, *GetApisRequest) (*GetApisResponse, error)
	// +publish path:"/api/gateway/api"
	CreateApi(context.Context, *CreateApiRequest) (*CreateApiResponse, error)
	// +publish path:"/api/gateway/api/{apiId}"
	UpdateApi(context.Context, *UpdateApiRequest) (*UpdateApiResponse, error)
	// +publish path:"/api/gateway/api/{apiId}"
	DeleteApi(context.Context, *DeleteApiRequest) (*DeleteApiResponse, error)
}

// UnimplementedApiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (*UnimplementedApiServiceServer) GetApis(context.Context, *GetApisRequest) (*GetApisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApis not implemented")
}
func (*UnimplementedApiServiceServer) CreateApi(context.Context, *CreateApiRequest) (*CreateApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (*UnimplementedApiServiceServer) UpdateApi(context.Context, *UpdateApiRequest) (*UpdateApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (*UnimplementedApiServiceServer) DeleteApi(context.Context, *DeleteApiRequest) (*DeleteApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}

func RegisterApiServiceServer(s grpc1.ServiceRegistrar, srv ApiServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ApiService_serviceDesc(srv, opts...), srv)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.api.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "micro_api.proto",
}

func _get_ApiService_serviceDesc(srv ApiServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ApiService_GetApis_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetApis(ctx, req.(*GetApisRequest))
	}
	var _ApiService_GetApis_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiService_GetApis_info = transport.NewServiceInfo("erda.core.hepa.api.ApiService", "GetApis", srv)
		_ApiService_GetApis_Handler = h.Interceptor(_ApiService_GetApis_Handler)
	}

	_ApiService_CreateApi_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateApi(ctx, req.(*CreateApiRequest))
	}
	var _ApiService_CreateApi_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiService_CreateApi_info = transport.NewServiceInfo("erda.core.hepa.api.ApiService", "CreateApi", srv)
		_ApiService_CreateApi_Handler = h.Interceptor(_ApiService_CreateApi_Handler)
	}

	_ApiService_UpdateApi_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateApi(ctx, req.(*UpdateApiRequest))
	}
	var _ApiService_UpdateApi_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiService_UpdateApi_info = transport.NewServiceInfo("erda.core.hepa.api.ApiService", "UpdateApi", srv)
		_ApiService_UpdateApi_Handler = h.Interceptor(_ApiService_UpdateApi_Handler)
	}

	_ApiService_DeleteApi_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteApi(ctx, req.(*DeleteApiRequest))
	}
	var _ApiService_DeleteApi_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiService_DeleteApi_info = transport.NewServiceInfo("erda.core.hepa.api.ApiService", "DeleteApi", srv)
		_ApiService_DeleteApi_Handler = h.Interceptor(_ApiService_DeleteApi_Handler)
	}

	var serviceDesc = _ApiService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetApis",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetApisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiServiceServer).GetApis(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiService_GetApis_info)
				}
				if interceptor == nil {
					return _ApiService_GetApis_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.api.ApiService/GetApis",
				}
				return interceptor(ctx, in, info, _ApiService_GetApis_Handler)
			},
		},
		{
			MethodName: "CreateApi",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateApiRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiServiceServer).CreateApi(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiService_CreateApi_info)
				}
				if interceptor == nil {
					return _ApiService_CreateApi_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.api.ApiService/CreateApi",
				}
				return interceptor(ctx, in, info, _ApiService_CreateApi_Handler)
			},
		},
		{
			MethodName: "UpdateApi",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateApiRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiServiceServer).UpdateApi(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiService_UpdateApi_info)
				}
				if interceptor == nil {
					return _ApiService_UpdateApi_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.api.ApiService/UpdateApi",
				}
				return interceptor(ctx, in, info, _ApiService_UpdateApi_Handler)
			},
		},
		{
			MethodName: "DeleteApi",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteApiRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiServiceServer).DeleteApi(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiService_DeleteApi_info)
				}
				if interceptor == nil {
					return _ApiService_DeleteApi_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.api.ApiService/DeleteApi",
				}
				return interceptor(ctx, in, info, _ApiService_DeleteApi_Handler)
			},
		},
	}
	return &serviceDesc
}
