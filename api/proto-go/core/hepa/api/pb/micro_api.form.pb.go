// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: micro_api.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/core/hepa/pb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*DeleteApiRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteApiResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ApiRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateApiRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Policy)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateApiResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetApisRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetApisResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateApiRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateApiResponse)(nil)

// DeleteApiRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteApiRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "apiId":
				m.ApiId = vals[0]
			}
		}
	}
	return nil
}

// DeleteApiResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteApiResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// ApiRequest implement urlenc.URLValuesUnmarshaler.
func (m *ApiRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "path":
				m.Path = vals[0]
			case "method":
				m.Method = vals[0]
			case "redirectType":
				m.RedirectType = vals[0]
			case "redirectAddr":
				m.RedirectAddr = vals[0]
			case "redirectPath":
				m.RedirectPath = vals[0]
			case "hosts":
				m.Hosts = vals
			case "projectId":
				m.ProjectId = vals[0]
			case "description":
				m.Description = vals[0]
			case "diceApp":
				m.DiceApp = vals[0]
			case "diceService":
				m.DiceService = vals[0]
			case "outerNetEnable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OuterNetEnable = val
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "env":
				m.Env = vals[0]
			case "policies":
				m.Policies = vals
			case "consumerId":
				m.ConsumerId = vals[0]
			}
		}
	}
	return nil
}

// UpdateApiRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateApiRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "apiRequest":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
			case "apiRequest.path":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Path = vals[0]
			case "apiRequest.method":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Method = vals[0]
			case "apiRequest.redirectType":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RedirectType = vals[0]
			case "apiRequest.redirectAddr":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RedirectAddr = vals[0]
			case "apiRequest.redirectPath":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RedirectPath = vals[0]
			case "apiRequest.hosts":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Hosts = vals
			case "apiRequest.projectId":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.ProjectId = vals[0]
			case "apiRequest.description":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Description = vals[0]
			case "apiRequest.diceApp":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.DiceApp = vals[0]
			case "apiRequest.diceService":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.DiceService = vals[0]
			case "apiRequest.outerNetEnable":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.ApiRequest.OuterNetEnable = val
			case "apiRequest.runtimeId":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RuntimeId = vals[0]
			case "apiRequest.env":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Env = vals[0]
			case "apiRequest.policies":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Policies = vals
			case "apiRequest.consumerId":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.ConsumerId = vals[0]
			case "apiId":
				m.ApiId = vals[0]
			}
		}
	}
	return nil
}

// Policy implement urlenc.URLValuesUnmarshaler.
func (m *Policy) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "category":
				m.Category = vals[0]
			case "policyId":
				m.PolicyId = vals[0]
			case "policyName":
				m.PolicyName = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "createAt":
				m.CreateAt = vals[0]
			}
		}
	}
	return nil
}

// UpdateApiResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateApiResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "apiId":
				m.ApiId = vals[0]
			case "path":
				m.Path = vals[0]
			case "displayPath":
				m.DisplayPath = vals[0]
			case "displayPathPrefix":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.DisplayPathPrefix = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.DisplayPathPrefix = val
					} else {
						m.DisplayPathPrefix = structpb.NewStringValue(vals[0])
					}
				}
			case "outerNetEnable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OuterNetEnable = val
			case "registerType":
				m.RegisterType = vals[0]
			case "needAuth":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.NeedAuth = val
			case "method":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Method = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Method = val
					} else {
						m.Method = structpb.NewStringValue(vals[0])
					}
				}
			case "description":
				m.Description = vals[0]
			case "redirectAddr":
				m.RedirectAddr = vals[0]
			case "redirectPath":
				m.RedirectPath = vals[0]
			case "redirectType":
				m.RedirectType = vals[0]
			case "monitorPath":
				m.MonitorPath = vals[0]
			case "createAt":
				m.CreateAt = vals[0]
			}
		}
	}
	return nil
}

// GetApisRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetApisRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "from":
				m.From = vals[0]
			case "method":
				m.Method = vals[0]
			case "diceApp":
				m.DiceApp = vals[0]
			case "diceService":
				m.DiceService = vals[0]
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "apiPath":
				m.ApiPath = vals[0]
			case "registerType":
				m.RegisterType = vals[0]
			case "netType":
				m.NetType = vals[0]
			case "needAuth":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.NeedAuth = int32(val)
			case "sortField":
				m.SortField = vals[0]
			case "sortType":
				m.SortType = vals[0]
			case "orgId":
				m.OrgId = vals[0]
			case "projectId":
				m.ProjectId = vals[0]
			case "env":
				m.Env = vals[0]
			case "page":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Page = val
			case "size":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Size = val
			}
		}
	}
	return nil
}

// GetApisResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetApisResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
			case "data.result":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result.null_value":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result.number_value":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result.string_value":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result.bool_value":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result.struct_value":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.result.list_value":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data.Result = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data.Result = val
					} else {
						m.Data.Result = structpb.NewStringValue(vals[0])
					}
				}
			case "data.page":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if m.Data.Page == nil {
					m.Data.Page = &pb.Page{}
				}
			case "data.page.pageSize":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if m.Data.Page == nil {
					m.Data.Page = &pb.Page{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Page.PageSize = val
			case "data.page.curPage":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if m.Data.Page == nil {
					m.Data.Page = &pb.Page{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Page.CurPage = val
			case "data.page.totalNum":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if m.Data.Page == nil {
					m.Data.Page = &pb.Page{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Page.TotalNum = val
			case "data.page.startIndex":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if m.Data.Page == nil {
					m.Data.Page = &pb.Page{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Page.StartIndex = val
			case "data.page.endIndex":
				if m.Data == nil {
					m.Data = &pb.PageResult{}
				}
				if m.Data.Page == nil {
					m.Data.Page = &pb.Page{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Page.EndIndex = val
			}
		}
	}
	return nil
}

// CreateApiRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateApiRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "apiRequest":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
			case "apiRequest.path":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Path = vals[0]
			case "apiRequest.method":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Method = vals[0]
			case "apiRequest.redirectType":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RedirectType = vals[0]
			case "apiRequest.redirectAddr":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RedirectAddr = vals[0]
			case "apiRequest.redirectPath":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RedirectPath = vals[0]
			case "apiRequest.hosts":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Hosts = vals
			case "apiRequest.projectId":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.ProjectId = vals[0]
			case "apiRequest.description":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Description = vals[0]
			case "apiRequest.diceApp":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.DiceApp = vals[0]
			case "apiRequest.diceService":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.DiceService = vals[0]
			case "apiRequest.outerNetEnable":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.ApiRequest.OuterNetEnable = val
			case "apiRequest.runtimeId":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.RuntimeId = vals[0]
			case "apiRequest.env":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Env = vals[0]
			case "apiRequest.policies":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.Policies = vals
			case "apiRequest.consumerId":
				if m.ApiRequest == nil {
					m.ApiRequest = &ApiRequest{}
				}
				m.ApiRequest.ConsumerId = vals[0]
			}
		}
	}
	return nil
}

// CreateApiResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateApiResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "apiId":
				m.ApiId = vals[0]
			}
		}
	}
	return nil
}
