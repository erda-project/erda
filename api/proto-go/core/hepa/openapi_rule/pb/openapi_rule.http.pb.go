// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: openapi_rule.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// OpenapiRuleServiceHandler is the server API for OpenapiRuleService service.
type OpenapiRuleServiceHandler interface {
	// GET /api/gateway/openapi/limits
	GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error)
	// POST /api/gateway/openapi/limits
	CreateLimit(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error)
	// PATCH /api/gateway/openapi/limits/{ruleId}
	UpdateLimit(context.Context, *UpdateLimitRequest) (*UpdateLimitResponse, error)
	// DELETE /api/gateway/openapi/limits/{ruleId}
	DeleteLimit(context.Context, *DeleteLimitRequest) (*DeleteLimitResponse, error)
}

// RegisterOpenapiRuleServiceHandler register OpenapiRuleServiceHandler to http.Router.
func RegisterOpenapiRuleServiceHandler(r http.Router, srv OpenapiRuleServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GetLimits := func(method, path string, fn func(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetLimitsRequest))
		}
		var GetLimits_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetLimits_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "GetLimits", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetLimits_info)
				}
				r = r.WithContext(ctx)
				var in GetLimitsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["consumerId"]; len(vals) > 0 {
					in.ConsumerId = vals[0]
				}
				if vals := params["packageId"]; len(vals) > 0 {
					in.PackageId = vals[0]
				}
				if vals := params["pageNo"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 64)
					if err != nil {
						return nil, err
					}
					in.PageNo = val
				}
				if vals := params["pageSize"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 64)
					if err != nil {
						return nil, err
					}
					in.PageSize = val
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateLimit := func(method, path string, fn func(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateLimitRequest))
		}
		var CreateLimit_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateLimit_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "CreateLimit", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateLimit_info)
				}
				r = r.WithContext(ctx)
				var in CreateLimitRequest
				if err := h.Decode(r, &in.LimitRequest); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["env"]; len(vals) > 0 {
					in.Env = vals[0]
				}
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectId = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateLimit := func(method, path string, fn func(context.Context, *UpdateLimitRequest) (*UpdateLimitResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateLimitRequest))
		}
		var UpdateLimit_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateLimit_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "UpdateLimit", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateLimit_info)
				}
				r = r.WithContext(ctx)
				var in UpdateLimitRequest
				if err := h.Decode(r, &in.LimitRequest); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "ruleId":
							in.RuleId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteLimit := func(method, path string, fn func(context.Context, *DeleteLimitRequest) (*DeleteLimitResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteLimitRequest))
		}
		var DeleteLimit_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteLimit_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "DeleteLimit", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteLimit_info)
				}
				r = r.WithContext(ctx)
				var in DeleteLimitRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "ruleId":
							in.RuleId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetLimits("GET", "/api/gateway/openapi/limits", srv.GetLimits)
	add_CreateLimit("POST", "/api/gateway/openapi/limits", srv.CreateLimit)
	add_UpdateLimit("PATCH", "/api/gateway/openapi/limits/{ruleId}", srv.UpdateLimit)
	add_DeleteLimit("DELETE", "/api/gateway/openapi/limits/{ruleId}", srv.DeleteLimit)
}
