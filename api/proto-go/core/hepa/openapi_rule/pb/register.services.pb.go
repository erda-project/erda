// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: openapi_rule.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterOpenapiRuleServiceImp openapi_rule.proto
func RegisterOpenapiRuleServiceImp(regester transport.Register, srv OpenapiRuleServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterOpenapiRuleServiceHandler(regester, OpenapiRuleServiceHandler(srv), _ops.HTTP...)
	RegisterOpenapiRuleServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.hepa.openapi_rule.OpenapiRuleService",
	)
}

var (
	openapiRuleServiceClientType  = reflect.TypeOf((*OpenapiRuleServiceClient)(nil)).Elem()
	openapiRuleServiceServerType  = reflect.TypeOf((*OpenapiRuleServiceServer)(nil)).Elem()
	openapiRuleServiceHandlerType = reflect.TypeOf((*OpenapiRuleServiceHandler)(nil)).Elem()
)

// OpenapiRuleServiceClientType .
func OpenapiRuleServiceClientType() reflect.Type { return openapiRuleServiceClientType }

// OpenapiRuleServiceServerType .
func OpenapiRuleServiceServerType() reflect.Type { return openapiRuleServiceServerType }

// OpenapiRuleServiceHandlerType .
func OpenapiRuleServiceHandlerType() reflect.Type { return openapiRuleServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		openapiRuleServiceClientType,
		// server types
		openapiRuleServiceServerType,
		// handler types
		openapiRuleServiceHandlerType,
	}
}
