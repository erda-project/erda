// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: openapi_rule.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/core/hepa/pb"
	proto "github.com/golang/protobuf/proto"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/structpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *DeleteLimitResponse) Validate() error {
	return nil
}
func (this *DeleteLimitRequest) Validate() error {
	return nil
}
func (this *LimitRuleInfo) Validate() error {
	if this.Limit != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Limit); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Limit", err)
		}
	}
	return nil
}
func (this *UpdateLimitResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *UpdateLimitRequest) Validate() error {
	if this.LimitRequest != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.LimitRequest); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("LimitRequest", err)
		}
	}
	return nil
}
func (this *CreateLimitResponse) Validate() error {
	return nil
}
func (this *LimitType) Validate() error {
	return nil
}
func (this *LimitRequest) Validate() error {
	if this.Limit != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Limit); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Limit", err)
		}
	}
	return nil
}
func (this *CreateLimitRequest) Validate() error {
	if this.LimitRequest != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.LimitRequest); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("LimitRequest", err)
		}
	}
	return nil
}
func (this *GetLimitsRequest) Validate() error {
	return nil
}
func (this *GetLimitsResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
