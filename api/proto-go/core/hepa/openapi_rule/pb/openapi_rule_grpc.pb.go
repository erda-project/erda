// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: openapi_rule.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// OpenapiRuleServiceClient is the client API for OpenapiRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenapiRuleServiceClient interface {
	GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error)
	CreateLimit(ctx context.Context, in *CreateLimitRequest, opts ...grpc.CallOption) (*CreateLimitResponse, error)
	UpdateLimit(ctx context.Context, in *UpdateLimitRequest, opts ...grpc.CallOption) (*UpdateLimitResponse, error)
	DeleteLimit(ctx context.Context, in *DeleteLimitRequest, opts ...grpc.CallOption) (*DeleteLimitResponse, error)
}

type openapiRuleServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewOpenapiRuleServiceClient(cc grpc1.ClientConnInterface) OpenapiRuleServiceClient {
	return &openapiRuleServiceClient{cc}
}

func (c *openapiRuleServiceClient) GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error) {
	out := new(GetLimitsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.openapi_rule.OpenapiRuleService/GetLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiRuleServiceClient) CreateLimit(ctx context.Context, in *CreateLimitRequest, opts ...grpc.CallOption) (*CreateLimitResponse, error) {
	out := new(CreateLimitResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.openapi_rule.OpenapiRuleService/CreateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiRuleServiceClient) UpdateLimit(ctx context.Context, in *UpdateLimitRequest, opts ...grpc.CallOption) (*UpdateLimitResponse, error) {
	out := new(UpdateLimitResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.openapi_rule.OpenapiRuleService/UpdateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiRuleServiceClient) DeleteLimit(ctx context.Context, in *DeleteLimitRequest, opts ...grpc.CallOption) (*DeleteLimitResponse, error) {
	out := new(DeleteLimitResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.openapi_rule.OpenapiRuleService/DeleteLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenapiRuleServiceServer is the server API for OpenapiRuleService service.
// All implementations should embed UnimplementedOpenapiRuleServiceServer
// for forward compatibility
type OpenapiRuleServiceServer interface {
	GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error)
	CreateLimit(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error)
	UpdateLimit(context.Context, *UpdateLimitRequest) (*UpdateLimitResponse, error)
	DeleteLimit(context.Context, *DeleteLimitRequest) (*DeleteLimitResponse, error)
}

// UnimplementedOpenapiRuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpenapiRuleServiceServer struct {
}

func (*UnimplementedOpenapiRuleServiceServer) GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (*UnimplementedOpenapiRuleServiceServer) CreateLimit(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLimit not implemented")
}
func (*UnimplementedOpenapiRuleServiceServer) UpdateLimit(context.Context, *UpdateLimitRequest) (*UpdateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLimit not implemented")
}
func (*UnimplementedOpenapiRuleServiceServer) DeleteLimit(context.Context, *DeleteLimitRequest) (*DeleteLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLimit not implemented")
}

func RegisterOpenapiRuleServiceServer(s grpc1.ServiceRegistrar, srv OpenapiRuleServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_OpenapiRuleService_serviceDesc(srv, opts...), srv)
}

var _OpenapiRuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.openapi_rule.OpenapiRuleService",
	HandlerType: (*OpenapiRuleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "openapi_rule.proto",
}

func _get_OpenapiRuleService_serviceDesc(srv OpenapiRuleServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_OpenapiRuleService_GetLimits_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetLimits(ctx, req.(*GetLimitsRequest))
	}
	var _OpenapiRuleService_GetLimits_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OpenapiRuleService_GetLimits_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "GetLimits", srv)
		_OpenapiRuleService_GetLimits_Handler = h.Interceptor(_OpenapiRuleService_GetLimits_Handler)
	}

	_OpenapiRuleService_CreateLimit_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateLimit(ctx, req.(*CreateLimitRequest))
	}
	var _OpenapiRuleService_CreateLimit_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OpenapiRuleService_CreateLimit_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "CreateLimit", srv)
		_OpenapiRuleService_CreateLimit_Handler = h.Interceptor(_OpenapiRuleService_CreateLimit_Handler)
	}

	_OpenapiRuleService_UpdateLimit_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateLimit(ctx, req.(*UpdateLimitRequest))
	}
	var _OpenapiRuleService_UpdateLimit_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OpenapiRuleService_UpdateLimit_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "UpdateLimit", srv)
		_OpenapiRuleService_UpdateLimit_Handler = h.Interceptor(_OpenapiRuleService_UpdateLimit_Handler)
	}

	_OpenapiRuleService_DeleteLimit_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteLimit(ctx, req.(*DeleteLimitRequest))
	}
	var _OpenapiRuleService_DeleteLimit_info transport.ServiceInfo
	if h.Interceptor != nil {
		_OpenapiRuleService_DeleteLimit_info = transport.NewServiceInfo("erda.core.hepa.openapi_rule.OpenapiRuleService", "DeleteLimit", srv)
		_OpenapiRuleService_DeleteLimit_Handler = h.Interceptor(_OpenapiRuleService_DeleteLimit_Handler)
	}

	var serviceDesc = _OpenapiRuleService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetLimits",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetLimitsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpenapiRuleServiceServer).GetLimits(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OpenapiRuleService_GetLimits_info)
				}
				if interceptor == nil {
					return _OpenapiRuleService_GetLimits_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.openapi_rule.OpenapiRuleService/GetLimits",
				}
				return interceptor(ctx, in, info, _OpenapiRuleService_GetLimits_Handler)
			},
		},
		{
			MethodName: "CreateLimit",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateLimitRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpenapiRuleServiceServer).CreateLimit(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OpenapiRuleService_CreateLimit_info)
				}
				if interceptor == nil {
					return _OpenapiRuleService_CreateLimit_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.openapi_rule.OpenapiRuleService/CreateLimit",
				}
				return interceptor(ctx, in, info, _OpenapiRuleService_CreateLimit_Handler)
			},
		},
		{
			MethodName: "UpdateLimit",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateLimitRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpenapiRuleServiceServer).UpdateLimit(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OpenapiRuleService_UpdateLimit_info)
				}
				if interceptor == nil {
					return _OpenapiRuleService_UpdateLimit_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.openapi_rule.OpenapiRuleService/UpdateLimit",
				}
				return interceptor(ctx, in, info, _OpenapiRuleService_UpdateLimit_Handler)
			},
		},
		{
			MethodName: "DeleteLimit",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteLimitRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OpenapiRuleServiceServer).DeleteLimit(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _OpenapiRuleService_DeleteLimit_info)
				}
				if interceptor == nil {
					return _OpenapiRuleService_DeleteLimit_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.openapi_rule.OpenapiRuleService/DeleteLimit",
				}
				return interceptor(ctx, in, info, _OpenapiRuleService_DeleteLimit_Handler)
			},
		},
	}
	return &serviceDesc
}
