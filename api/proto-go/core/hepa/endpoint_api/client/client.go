// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: endpoint_api.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/hepa/endpoint_api/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// EndpointApiService endpoint_api.proto
	EndpointApiService() pb.EndpointApiServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		endpointApiService: pb.NewEndpointApiServiceClient(cc),
	}
}

type serviceClients struct {
	endpointApiService pb.EndpointApiServiceClient
}

func (c *serviceClients) EndpointApiService() pb.EndpointApiServiceClient {
	return c.endpointApiService
}

type endpointApiServiceWrapper struct {
	client pb.EndpointApiServiceClient
	opts   []grpc1.CallOption
}

func (s *endpointApiServiceWrapper) GetEndpointsName(ctx context.Context, req *pb.GetEndpointsNameRequest) (*pb.GetEndpointsNameResponse, error) {
	return s.client.GetEndpointsName(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) GetEndpoints(ctx context.Context, req *pb.GetEndpointsRequest) (*pb.GetEndpointsResponse, error) {
	return s.client.GetEndpoints(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) GetEndpoint(ctx context.Context, req *pb.GetEndpointRequest) (*pb.GetEndpointResponse, error) {
	return s.client.GetEndpoint(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) CreateEndpoint(ctx context.Context, req *pb.CreateEndpointRequest) (*pb.CreateEndpointResponse, error) {
	return s.client.CreateEndpoint(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) UpdateEndpoint(ctx context.Context, req *pb.UpdateEndpointRequest) (*pb.UpdateEndpointResponse, error) {
	return s.client.UpdateEndpoint(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) DeleteEndpoint(ctx context.Context, req *pb.DeleteEndpointRequest) (*pb.DeleteEndpointResponse, error) {
	return s.client.DeleteEndpoint(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) GetEndpointApis(ctx context.Context, req *pb.GetEndpointApisRequest) (*pb.GetEndpointApisResponse, error) {
	return s.client.GetEndpointApis(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) CreateEndpointApi(ctx context.Context, req *pb.CreateEndpointApiRequest) (*pb.CreateEndpointApiResponse, error) {
	return s.client.CreateEndpointApi(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) UpdateEndpointApi(ctx context.Context, req *pb.UpdateEndpointApiRequest) (*pb.UpdateEndpointApiResponse, error) {
	return s.client.UpdateEndpointApi(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) DeleteEndpointApi(ctx context.Context, req *pb.DeleteEndpointApiRequest) (*pb.DeleteEndpointApiResponse, error) {
	return s.client.DeleteEndpointApi(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *endpointApiServiceWrapper) ChangeEndpointRoot(ctx context.Context, req *pb.ChangeEndpointRootRequest) (*pb.ChangeEndpointRootResponse, error) {
	return s.client.ChangeEndpointRoot(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
