// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: endpoint_api.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterEndpointApiServiceImp endpoint_api.proto
func RegisterEndpointApiServiceImp(regester transport.Register, srv EndpointApiServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterEndpointApiServiceHandler(regester, EndpointApiServiceHandler(srv), _ops.HTTP...)
	RegisterEndpointApiServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.hepa.endpoint_api.EndpointApiService",
	)
}

var (
	endpointApiServiceClientType  = reflect.TypeOf((*EndpointApiServiceClient)(nil)).Elem()
	endpointApiServiceServerType  = reflect.TypeOf((*EndpointApiServiceServer)(nil)).Elem()
	endpointApiServiceHandlerType = reflect.TypeOf((*EndpointApiServiceHandler)(nil)).Elem()
)

// EndpointApiServiceClientType .
func EndpointApiServiceClientType() reflect.Type { return endpointApiServiceClientType }

// EndpointApiServiceServerType .
func EndpointApiServiceServerType() reflect.Type { return endpointApiServiceServerType }

// EndpointApiServiceHandlerType .
func EndpointApiServiceHandlerType() reflect.Type { return endpointApiServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		endpointApiServiceClientType,
		// server types
		endpointApiServiceServerType,
		// handler types
		endpointApiServiceHandlerType,
	}
}
