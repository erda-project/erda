// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: endpoint_api.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// EndpointApiServiceClient is the client API for EndpointApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointApiServiceClient interface {
	// +publish path: "/api/gateway/openapi/packages-name"
	GetEndpointsName(ctx context.Context, in *GetEndpointsNameRequest, opts ...grpc.CallOption) (*GetEndpointsNameResponse, error)
	// +publish path: "/api/gateway/openapi/packages"
	GetEndpoints(ctx context.Context, in *GetEndpointsRequest, opts ...grpc.CallOption) (*GetEndpointsResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}"
	GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages"
	CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*CreateEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}"
	UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*UpdateEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}"
	DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*DeleteEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis"
	GetEndpointApis(ctx context.Context, in *GetEndpointApisRequest, opts ...grpc.CallOption) (*GetEndpointApisResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis"
	CreateEndpointApi(ctx context.Context, in *CreateEndpointApiRequest, opts ...grpc.CallOption) (*CreateEndpointApiResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis/{apiId}"
	UpdateEndpointApi(ctx context.Context, in *UpdateEndpointApiRequest, opts ...grpc.CallOption) (*UpdateEndpointApiResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis/{apiId}"
	DeleteEndpointApi(ctx context.Context, in *DeleteEndpointApiRequest, opts ...grpc.CallOption) (*DeleteEndpointApiResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/root-api"
	ChangeEndpointRoot(ctx context.Context, in *ChangeEndpointRootRequest, opts ...grpc.CallOption) (*ChangeEndpointRootResponse, error)
}

type endpointApiServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewEndpointApiServiceClient(cc grpc1.ClientConnInterface) EndpointApiServiceClient {
	return &endpointApiServiceClient{cc}
}

func (c *endpointApiServiceClient) GetEndpointsName(ctx context.Context, in *GetEndpointsNameRequest, opts ...grpc.CallOption) (*GetEndpointsNameResponse, error) {
	out := new(GetEndpointsNameResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpointsName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) GetEndpoints(ctx context.Context, in *GetEndpointsRequest, opts ...grpc.CallOption) (*GetEndpointsResponse, error) {
	out := new(GetEndpointsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error) {
	out := new(GetEndpointResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*CreateEndpointResponse, error) {
	out := new(CreateEndpointResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/CreateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*UpdateEndpointResponse, error) {
	out := new(UpdateEndpointResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/UpdateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*DeleteEndpointResponse, error) {
	out := new(DeleteEndpointResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) GetEndpointApis(ctx context.Context, in *GetEndpointApisRequest, opts ...grpc.CallOption) (*GetEndpointApisResponse, error) {
	out := new(GetEndpointApisResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpointApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) CreateEndpointApi(ctx context.Context, in *CreateEndpointApiRequest, opts ...grpc.CallOption) (*CreateEndpointApiResponse, error) {
	out := new(CreateEndpointApiResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/CreateEndpointApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) UpdateEndpointApi(ctx context.Context, in *UpdateEndpointApiRequest, opts ...grpc.CallOption) (*UpdateEndpointApiResponse, error) {
	out := new(UpdateEndpointApiResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/UpdateEndpointApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) DeleteEndpointApi(ctx context.Context, in *DeleteEndpointApiRequest, opts ...grpc.CallOption) (*DeleteEndpointApiResponse, error) {
	out := new(DeleteEndpointApiResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/DeleteEndpointApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiServiceClient) ChangeEndpointRoot(ctx context.Context, in *ChangeEndpointRootRequest, opts ...grpc.CallOption) (*ChangeEndpointRootResponse, error) {
	out := new(ChangeEndpointRootResponse)
	err := c.cc.Invoke(ctx, "/erda.core.hepa.endpoint_api.EndpointApiService/ChangeEndpointRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointApiServiceServer is the server API for EndpointApiService service.
// All implementations should embed UnimplementedEndpointApiServiceServer
// for forward compatibility
type EndpointApiServiceServer interface {
	// +publish path: "/api/gateway/openapi/packages-name"
	GetEndpointsName(context.Context, *GetEndpointsNameRequest) (*GetEndpointsNameResponse, error)
	// +publish path: "/api/gateway/openapi/packages"
	GetEndpoints(context.Context, *GetEndpointsRequest) (*GetEndpointsResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}"
	GetEndpoint(context.Context, *GetEndpointRequest) (*GetEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages"
	CreateEndpoint(context.Context, *CreateEndpointRequest) (*CreateEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}"
	UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*UpdateEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}"
	DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*DeleteEndpointResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis"
	GetEndpointApis(context.Context, *GetEndpointApisRequest) (*GetEndpointApisResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis"
	CreateEndpointApi(context.Context, *CreateEndpointApiRequest) (*CreateEndpointApiResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis/{apiId}"
	UpdateEndpointApi(context.Context, *UpdateEndpointApiRequest) (*UpdateEndpointApiResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/apis/{apiId}"
	DeleteEndpointApi(context.Context, *DeleteEndpointApiRequest) (*DeleteEndpointApiResponse, error)
	// +publish path: "/api/gateway/openapi/packages/{packageId}/root-api"
	ChangeEndpointRoot(context.Context, *ChangeEndpointRootRequest) (*ChangeEndpointRootResponse, error)
}

// UnimplementedEndpointApiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEndpointApiServiceServer struct {
}

func (*UnimplementedEndpointApiServiceServer) GetEndpointsName(context.Context, *GetEndpointsNameRequest) (*GetEndpointsNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointsName not implemented")
}
func (*UnimplementedEndpointApiServiceServer) GetEndpoints(context.Context, *GetEndpointsRequest) (*GetEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoints not implemented")
}
func (*UnimplementedEndpointApiServiceServer) GetEndpoint(context.Context, *GetEndpointRequest) (*GetEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (*UnimplementedEndpointApiServiceServer) CreateEndpoint(context.Context, *CreateEndpointRequest) (*CreateEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (*UnimplementedEndpointApiServiceServer) UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*UpdateEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoint not implemented")
}
func (*UnimplementedEndpointApiServiceServer) DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*DeleteEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpoint not implemented")
}
func (*UnimplementedEndpointApiServiceServer) GetEndpointApis(context.Context, *GetEndpointApisRequest) (*GetEndpointApisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointApis not implemented")
}
func (*UnimplementedEndpointApiServiceServer) CreateEndpointApi(context.Context, *CreateEndpointApiRequest) (*CreateEndpointApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointApi not implemented")
}
func (*UnimplementedEndpointApiServiceServer) UpdateEndpointApi(context.Context, *UpdateEndpointApiRequest) (*UpdateEndpointApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointApi not implemented")
}
func (*UnimplementedEndpointApiServiceServer) DeleteEndpointApi(context.Context, *DeleteEndpointApiRequest) (*DeleteEndpointApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpointApi not implemented")
}
func (*UnimplementedEndpointApiServiceServer) ChangeEndpointRoot(context.Context, *ChangeEndpointRootRequest) (*ChangeEndpointRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEndpointRoot not implemented")
}

func RegisterEndpointApiServiceServer(s grpc1.ServiceRegistrar, srv EndpointApiServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_EndpointApiService_serviceDesc(srv, opts...), srv)
}

var _EndpointApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.hepa.endpoint_api.EndpointApiService",
	HandlerType: (*EndpointApiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "endpoint_api.proto",
}

func _get_EndpointApiService_serviceDesc(srv EndpointApiServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_EndpointApiService_GetEndpointsName_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetEndpointsName(ctx, req.(*GetEndpointsNameRequest))
	}
	var _EndpointApiService_GetEndpointsName_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_GetEndpointsName_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "GetEndpointsName", srv)
		_EndpointApiService_GetEndpointsName_Handler = h.Interceptor(_EndpointApiService_GetEndpointsName_Handler)
	}

	_EndpointApiService_GetEndpoints_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetEndpoints(ctx, req.(*GetEndpointsRequest))
	}
	var _EndpointApiService_GetEndpoints_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_GetEndpoints_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "GetEndpoints", srv)
		_EndpointApiService_GetEndpoints_Handler = h.Interceptor(_EndpointApiService_GetEndpoints_Handler)
	}

	_EndpointApiService_GetEndpoint_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetEndpoint(ctx, req.(*GetEndpointRequest))
	}
	var _EndpointApiService_GetEndpoint_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_GetEndpoint_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "GetEndpoint", srv)
		_EndpointApiService_GetEndpoint_Handler = h.Interceptor(_EndpointApiService_GetEndpoint_Handler)
	}

	_EndpointApiService_CreateEndpoint_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateEndpoint(ctx, req.(*CreateEndpointRequest))
	}
	var _EndpointApiService_CreateEndpoint_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_CreateEndpoint_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "CreateEndpoint", srv)
		_EndpointApiService_CreateEndpoint_Handler = h.Interceptor(_EndpointApiService_CreateEndpoint_Handler)
	}

	_EndpointApiService_UpdateEndpoint_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateEndpoint(ctx, req.(*UpdateEndpointRequest))
	}
	var _EndpointApiService_UpdateEndpoint_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_UpdateEndpoint_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "UpdateEndpoint", srv)
		_EndpointApiService_UpdateEndpoint_Handler = h.Interceptor(_EndpointApiService_UpdateEndpoint_Handler)
	}

	_EndpointApiService_DeleteEndpoint_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteEndpoint(ctx, req.(*DeleteEndpointRequest))
	}
	var _EndpointApiService_DeleteEndpoint_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_DeleteEndpoint_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "DeleteEndpoint", srv)
		_EndpointApiService_DeleteEndpoint_Handler = h.Interceptor(_EndpointApiService_DeleteEndpoint_Handler)
	}

	_EndpointApiService_GetEndpointApis_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetEndpointApis(ctx, req.(*GetEndpointApisRequest))
	}
	var _EndpointApiService_GetEndpointApis_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_GetEndpointApis_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "GetEndpointApis", srv)
		_EndpointApiService_GetEndpointApis_Handler = h.Interceptor(_EndpointApiService_GetEndpointApis_Handler)
	}

	_EndpointApiService_CreateEndpointApi_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateEndpointApi(ctx, req.(*CreateEndpointApiRequest))
	}
	var _EndpointApiService_CreateEndpointApi_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_CreateEndpointApi_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "CreateEndpointApi", srv)
		_EndpointApiService_CreateEndpointApi_Handler = h.Interceptor(_EndpointApiService_CreateEndpointApi_Handler)
	}

	_EndpointApiService_UpdateEndpointApi_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateEndpointApi(ctx, req.(*UpdateEndpointApiRequest))
	}
	var _EndpointApiService_UpdateEndpointApi_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_UpdateEndpointApi_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "UpdateEndpointApi", srv)
		_EndpointApiService_UpdateEndpointApi_Handler = h.Interceptor(_EndpointApiService_UpdateEndpointApi_Handler)
	}

	_EndpointApiService_DeleteEndpointApi_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteEndpointApi(ctx, req.(*DeleteEndpointApiRequest))
	}
	var _EndpointApiService_DeleteEndpointApi_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_DeleteEndpointApi_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "DeleteEndpointApi", srv)
		_EndpointApiService_DeleteEndpointApi_Handler = h.Interceptor(_EndpointApiService_DeleteEndpointApi_Handler)
	}

	_EndpointApiService_ChangeEndpointRoot_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ChangeEndpointRoot(ctx, req.(*ChangeEndpointRootRequest))
	}
	var _EndpointApiService_ChangeEndpointRoot_info transport.ServiceInfo
	if h.Interceptor != nil {
		_EndpointApiService_ChangeEndpointRoot_info = transport.NewServiceInfo("erda.core.hepa.endpoint_api.EndpointApiService", "ChangeEndpointRoot", srv)
		_EndpointApiService_ChangeEndpointRoot_Handler = h.Interceptor(_EndpointApiService_ChangeEndpointRoot_Handler)
	}

	var serviceDesc = _EndpointApiService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetEndpointsName",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetEndpointsNameRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).GetEndpointsName(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_GetEndpointsName_info)
				}
				if interceptor == nil {
					return _EndpointApiService_GetEndpointsName_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpointsName",
				}
				return interceptor(ctx, in, info, _EndpointApiService_GetEndpointsName_Handler)
			},
		},
		{
			MethodName: "GetEndpoints",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetEndpointsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).GetEndpoints(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_GetEndpoints_info)
				}
				if interceptor == nil {
					return _EndpointApiService_GetEndpoints_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpoints",
				}
				return interceptor(ctx, in, info, _EndpointApiService_GetEndpoints_Handler)
			},
		},
		{
			MethodName: "GetEndpoint",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetEndpointRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).GetEndpoint(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_GetEndpoint_info)
				}
				if interceptor == nil {
					return _EndpointApiService_GetEndpoint_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpoint",
				}
				return interceptor(ctx, in, info, _EndpointApiService_GetEndpoint_Handler)
			},
		},
		{
			MethodName: "CreateEndpoint",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateEndpointRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).CreateEndpoint(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_CreateEndpoint_info)
				}
				if interceptor == nil {
					return _EndpointApiService_CreateEndpoint_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/CreateEndpoint",
				}
				return interceptor(ctx, in, info, _EndpointApiService_CreateEndpoint_Handler)
			},
		},
		{
			MethodName: "UpdateEndpoint",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateEndpointRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).UpdateEndpoint(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_UpdateEndpoint_info)
				}
				if interceptor == nil {
					return _EndpointApiService_UpdateEndpoint_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/UpdateEndpoint",
				}
				return interceptor(ctx, in, info, _EndpointApiService_UpdateEndpoint_Handler)
			},
		},
		{
			MethodName: "DeleteEndpoint",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteEndpointRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).DeleteEndpoint(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_DeleteEndpoint_info)
				}
				if interceptor == nil {
					return _EndpointApiService_DeleteEndpoint_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/DeleteEndpoint",
				}
				return interceptor(ctx, in, info, _EndpointApiService_DeleteEndpoint_Handler)
			},
		},
		{
			MethodName: "GetEndpointApis",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetEndpointApisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).GetEndpointApis(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_GetEndpointApis_info)
				}
				if interceptor == nil {
					return _EndpointApiService_GetEndpointApis_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/GetEndpointApis",
				}
				return interceptor(ctx, in, info, _EndpointApiService_GetEndpointApis_Handler)
			},
		},
		{
			MethodName: "CreateEndpointApi",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateEndpointApiRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).CreateEndpointApi(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_CreateEndpointApi_info)
				}
				if interceptor == nil {
					return _EndpointApiService_CreateEndpointApi_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/CreateEndpointApi",
				}
				return interceptor(ctx, in, info, _EndpointApiService_CreateEndpointApi_Handler)
			},
		},
		{
			MethodName: "UpdateEndpointApi",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateEndpointApiRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).UpdateEndpointApi(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_UpdateEndpointApi_info)
				}
				if interceptor == nil {
					return _EndpointApiService_UpdateEndpointApi_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/UpdateEndpointApi",
				}
				return interceptor(ctx, in, info, _EndpointApiService_UpdateEndpointApi_Handler)
			},
		},
		{
			MethodName: "DeleteEndpointApi",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteEndpointApiRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).DeleteEndpointApi(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_DeleteEndpointApi_info)
				}
				if interceptor == nil {
					return _EndpointApiService_DeleteEndpointApi_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/DeleteEndpointApi",
				}
				return interceptor(ctx, in, info, _EndpointApiService_DeleteEndpointApi_Handler)
			},
		},
		{
			MethodName: "ChangeEndpointRoot",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ChangeEndpointRootRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(EndpointApiServiceServer).ChangeEndpointRoot(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _EndpointApiService_ChangeEndpointRoot_info)
				}
				if interceptor == nil {
					return _EndpointApiService_ChangeEndpointRoot_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.hepa.endpoint_api.EndpointApiService/ChangeEndpointRoot",
				}
				return interceptor(ctx, in, info, _EndpointApiService_ChangeEndpointRoot_Handler)
			},
		},
	}
	return &serviceDesc
}
