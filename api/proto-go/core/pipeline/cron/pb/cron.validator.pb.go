// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cron.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Cron) Validate() error {
	if this.TimeCreated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeCreated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeCreated", err)
		}
	}
	if this.TimeUpdated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeUpdated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeUpdated", err)
		}
	}
	if this.CronStartTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CronStartTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CronStartTime", err)
		}
	}
	return nil
}
func (this *CronPagingRequest) Validate() error {
	return nil
}
func (this *CronPagingResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *CronStartRequest) Validate() error {
	return nil
}
func (this *CronStartResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CronStopRequest) Validate() error {
	return nil
}
func (this *CronStopResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CronCreateRequestV1) Validate() error {
	if this.PipelineYml == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PipelineYml", fmt.Errorf(`value '%v' must not be an empty string`, this.PipelineYml))
	}
	if this.ClusterName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ClusterName", fmt.Errorf(`value '%v' must not be an empty string`, this.ClusterName))
	}
	if this.PipelineYmlName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PipelineYmlName", fmt.Errorf(`value '%v' must not be an empty string`, this.PipelineYmlName))
	}
	if this.PipelineSource == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PipelineSource", fmt.Errorf(`value '%v' must not be an empty string`, this.PipelineSource))
	}
	// Validation of proto3 map<> fields is unsupported.
	// Validation of proto3 map<> fields is unsupported.
	// Validation of proto3 map<> fields is unsupported.
	if this.CronStartFrom != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CronStartFrom); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CronStartFrom", err)
		}
	}
	return nil
}
func (this *CronCreateRequest) Validate() error {
	if this.PipelineCreateRequest != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PipelineCreateRequest); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PipelineCreateRequest", err)
		}
	}
	return nil
}
func (this *CronCreateResponse) Validate() error {
	return nil
}
func (this *CronDeleteRequest) Validate() error {
	return nil
}
func (this *CronDeleteResponse) Validate() error {
	return nil
}
func (this *CronGetRequest) Validate() error {
	return nil
}
func (this *CronGetResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *CronUpdateRequest) Validate() error {
	return nil
}
func (this *CronUpdateResponse) Validate() error {
	return nil
}
