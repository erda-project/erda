// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: cron.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	pb1 "github.com/erda-project/erda-proto-go/core/pipeline/base/pb"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// paging
type CronPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllSources           bool                  `protobuf:"varint,1,opt,name=allSources,proto3" json:"allSources,omitempty"`
	Sources              []string              `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`   // ?source=cdp-dev&source=cdp-test
	YmlNames             []string              `protobuf:"bytes,3,rep,name=ymlNames,proto3" json:"ymlNames,omitempty"` // ?ymlName=11&ymlName=22
	PageSize             int64                 `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageNo               int64                 `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	Enable               *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=enable,proto3" json:"enable,omitempty"`
	PipelineDefinitionID []string              `protobuf:"bytes,7,rep,name=pipelineDefinitionID,proto3" json:"pipelineDefinitionID,omitempty"`
}

func (x *CronPagingRequest) Reset() {
	*x = CronPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronPagingRequest) ProtoMessage() {}

func (x *CronPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronPagingRequest.ProtoReflect.Descriptor instead.
func (*CronPagingRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{0}
}

func (x *CronPagingRequest) GetAllSources() bool {
	if x != nil {
		return x.AllSources
	}
	return false
}

func (x *CronPagingRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *CronPagingRequest) GetYmlNames() []string {
	if x != nil {
		return x.YmlNames
	}
	return nil
}

func (x *CronPagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CronPagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CronPagingRequest) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CronPagingRequest) GetPipelineDefinitionID() []string {
	if x != nil {
		return x.PipelineDefinitionID
	}
	return nil
}

type CronPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*pb.Cron `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CronPagingResponse) Reset() {
	*x = CronPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronPagingResponse) ProtoMessage() {}

func (x *CronPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronPagingResponse.ProtoReflect.Descriptor instead.
func (*CronPagingResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{1}
}

func (x *CronPagingResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CronPagingResponse) GetData() []*pb.Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

// start cron
type CronStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronStartRequest) Reset() {
	*x = CronStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStartRequest) ProtoMessage() {}

func (x *CronStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStartRequest.ProtoReflect.Descriptor instead.
func (*CronStartRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{2}
}

func (x *CronStartRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.Cron `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronStartResponse) Reset() {
	*x = CronStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStartResponse) ProtoMessage() {}

func (x *CronStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStartResponse.ProtoReflect.Descriptor instead.
func (*CronStartResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{3}
}

func (x *CronStartResponse) GetData() *pb.Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

// stop cron
type CronStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronStopRequest) Reset() {
	*x = CronStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStopRequest) ProtoMessage() {}

func (x *CronStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStopRequest.ProtoReflect.Descriptor instead.
func (*CronStopRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{4}
}

func (x *CronStopRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.Cron `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronStopResponse) Reset() {
	*x = CronStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronStopResponse) ProtoMessage() {}

func (x *CronStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronStopResponse.ProtoReflect.Descriptor instead.
func (*CronStopResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{5}
}

func (x *CronStopResponse) GetData() *pb.Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

// cron create
type CronCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineCreateRequest *pb1.PipelineCreateRequest `protobuf:"bytes,1,opt,name=pipelineCreateRequest,proto3" json:"pipelineCreateRequest,omitempty"`
}

func (x *CronCreateRequest) Reset() {
	*x = CronCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCreateRequest) ProtoMessage() {}

func (x *CronCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCreateRequest.ProtoReflect.Descriptor instead.
func (*CronCreateRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{6}
}

func (x *CronCreateRequest) GetPipelineCreateRequest() *pb1.PipelineCreateRequest {
	if x != nil {
		return x.PipelineCreateRequest
	}
	return nil
}

type CronCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronCreateResponse) Reset() {
	*x = CronCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCreateResponse) ProtoMessage() {}

func (x *CronCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCreateResponse.ProtoReflect.Descriptor instead.
func (*CronCreateResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{7}
}

func (x *CronCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

// cron delete
type CronDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronDeleteRequest) Reset() {
	*x = CronDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronDeleteRequest) ProtoMessage() {}

func (x *CronDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronDeleteRequest.ProtoReflect.Descriptor instead.
func (*CronDeleteRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{8}
}

func (x *CronDeleteRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CronDeleteResponse) Reset() {
	*x = CronDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronDeleteResponse) ProtoMessage() {}

func (x *CronDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronDeleteResponse.ProtoReflect.Descriptor instead.
func (*CronDeleteResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{9}
}

// cron get
type CronGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID uint64 `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
}

func (x *CronGetRequest) Reset() {
	*x = CronGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronGetRequest) ProtoMessage() {}

func (x *CronGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronGetRequest.ProtoReflect.Descriptor instead.
func (*CronGetRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{10}
}

func (x *CronGetRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

type CronGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.Cron `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CronGetResponse) Reset() {
	*x = CronGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronGetResponse) ProtoMessage() {}

func (x *CronGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronGetResponse.ProtoReflect.Descriptor instead.
func (*CronGetResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{11}
}

func (x *CronGetResponse) GetData() *pb.Cron {
	if x != nil {
		return x.Data
	}
	return nil
}

// cron update
type CronUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronID                 uint64   `protobuf:"varint,1,opt,name=cronID,proto3" json:"cronID,omitempty"`
	PipelineYml            string   `protobuf:"bytes,2,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	CronExpr               string   `protobuf:"bytes,3,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
	ConfigManageNamespaces []string `protobuf:"bytes,4,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	PipelineDefinitionID   string   `protobuf:"bytes,5,opt,name=pipelineDefinitionID,proto3" json:"pipelineDefinitionID,omitempty"`
}

func (x *CronUpdateRequest) Reset() {
	*x = CronUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronUpdateRequest) ProtoMessage() {}

func (x *CronUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronUpdateRequest.ProtoReflect.Descriptor instead.
func (*CronUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{12}
}

func (x *CronUpdateRequest) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

func (x *CronUpdateRequest) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *CronUpdateRequest) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

func (x *CronUpdateRequest) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *CronUpdateRequest) GetPipelineDefinitionID() string {
	if x != nil {
		return x.PipelineDefinitionID
	}
	return ""
}

type CronUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CronUpdateResponse) Reset() {
	*x = CronUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronUpdateResponse) ProtoMessage() {}

func (x *CronUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronUpdateResponse.ProtoReflect.Descriptor instead.
func (*CronUpdateResponse) Descriptor() ([]byte, []int) {
	return file_cron_proto_rawDescGZIP(), []int{13}
}

var File_cron_proto protoreflect.FileDescriptor

var file_cron_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x6f,
	0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x58, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x72,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x6f,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x72,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x15, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x11, 0x43,
	0x72, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8a, 0x08, 0x0a, 0x0b, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0xa6, 0x01, 0x0a,
	0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e,
	0x73, 0x3f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x7d, 0x26, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x7b, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x1a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x92,
	0x01, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44,
	0x7d, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x72, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f,
	0x6e, 0x49, 0x44, 0x7d, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cron_proto_rawDescOnce sync.Once
	file_cron_proto_rawDescData = file_cron_proto_rawDesc
)

func file_cron_proto_rawDescGZIP() []byte {
	file_cron_proto_rawDescOnce.Do(func() {
		file_cron_proto_rawDescData = protoimpl.X.CompressGZIP(file_cron_proto_rawDescData)
	})
	return file_cron_proto_rawDescData
}

var file_cron_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cron_proto_goTypes = []interface{}{
	(*CronPagingRequest)(nil),         // 0: erda.core.pipeline.cron.CronPagingRequest
	(*CronPagingResponse)(nil),        // 1: erda.core.pipeline.cron.CronPagingResponse
	(*CronStartRequest)(nil),          // 2: erda.core.pipeline.cron.CronStartRequest
	(*CronStartResponse)(nil),         // 3: erda.core.pipeline.cron.CronStartResponse
	(*CronStopRequest)(nil),           // 4: erda.core.pipeline.cron.CronStopRequest
	(*CronStopResponse)(nil),          // 5: erda.core.pipeline.cron.CronStopResponse
	(*CronCreateRequest)(nil),         // 6: erda.core.pipeline.cron.CronCreateRequest
	(*CronCreateResponse)(nil),        // 7: erda.core.pipeline.cron.CronCreateResponse
	(*CronDeleteRequest)(nil),         // 8: erda.core.pipeline.cron.CronDeleteRequest
	(*CronDeleteResponse)(nil),        // 9: erda.core.pipeline.cron.CronDeleteResponse
	(*CronGetRequest)(nil),            // 10: erda.core.pipeline.cron.CronGetRequest
	(*CronGetResponse)(nil),           // 11: erda.core.pipeline.cron.CronGetResponse
	(*CronUpdateRequest)(nil),         // 12: erda.core.pipeline.cron.CronUpdateRequest
	(*CronUpdateResponse)(nil),        // 13: erda.core.pipeline.cron.CronUpdateResponse
	(*wrapperspb.BoolValue)(nil),      // 14: google.protobuf.BoolValue
	(*pb.Cron)(nil),                   // 15: erda.core.pipeline.Cron
	(*pb1.PipelineCreateRequest)(nil), // 16: erda.core.pipeline.base.PipelineCreateRequest
}
var file_cron_proto_depIdxs = []int32{
	14, // 0: erda.core.pipeline.cron.CronPagingRequest.enable:type_name -> google.protobuf.BoolValue
	15, // 1: erda.core.pipeline.cron.CronPagingResponse.data:type_name -> erda.core.pipeline.Cron
	15, // 2: erda.core.pipeline.cron.CronStartResponse.data:type_name -> erda.core.pipeline.Cron
	15, // 3: erda.core.pipeline.cron.CronStopResponse.data:type_name -> erda.core.pipeline.Cron
	16, // 4: erda.core.pipeline.cron.CronCreateRequest.pipelineCreateRequest:type_name -> erda.core.pipeline.base.PipelineCreateRequest
	15, // 5: erda.core.pipeline.cron.CronGetResponse.data:type_name -> erda.core.pipeline.Cron
	6,  // 6: erda.core.pipeline.cron.CronService.CronCreate:input_type -> erda.core.pipeline.cron.CronCreateRequest
	0,  // 7: erda.core.pipeline.cron.CronService.CronPaging:input_type -> erda.core.pipeline.cron.CronPagingRequest
	2,  // 8: erda.core.pipeline.cron.CronService.CronStart:input_type -> erda.core.pipeline.cron.CronStartRequest
	4,  // 9: erda.core.pipeline.cron.CronService.CronStop:input_type -> erda.core.pipeline.cron.CronStopRequest
	8,  // 10: erda.core.pipeline.cron.CronService.CronDelete:input_type -> erda.core.pipeline.cron.CronDeleteRequest
	10, // 11: erda.core.pipeline.cron.CronService.CronGet:input_type -> erda.core.pipeline.cron.CronGetRequest
	12, // 12: erda.core.pipeline.cron.CronService.CronUpdate:input_type -> erda.core.pipeline.cron.CronUpdateRequest
	7,  // 13: erda.core.pipeline.cron.CronService.CronCreate:output_type -> erda.core.pipeline.cron.CronCreateResponse
	1,  // 14: erda.core.pipeline.cron.CronService.CronPaging:output_type -> erda.core.pipeline.cron.CronPagingResponse
	3,  // 15: erda.core.pipeline.cron.CronService.CronStart:output_type -> erda.core.pipeline.cron.CronStartResponse
	5,  // 16: erda.core.pipeline.cron.CronService.CronStop:output_type -> erda.core.pipeline.cron.CronStopResponse
	9,  // 17: erda.core.pipeline.cron.CronService.CronDelete:output_type -> erda.core.pipeline.cron.CronDeleteResponse
	11, // 18: erda.core.pipeline.cron.CronService.CronGet:output_type -> erda.core.pipeline.cron.CronGetResponse
	13, // 19: erda.core.pipeline.cron.CronService.CronUpdate:output_type -> erda.core.pipeline.cron.CronUpdateResponse
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cron_proto_init() }
func file_cron_proto_init() {
	if File_cron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cron_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cron_proto_goTypes,
		DependencyIndexes: file_cron_proto_depIdxs,
		MessageInfos:      file_cron_proto_msgTypes,
	}.Build()
	File_cron_proto = out.File
	file_cron_proto_rawDesc = nil
	file_cron_proto_goTypes = nil
	file_cron_proto_depIdxs = nil
}
