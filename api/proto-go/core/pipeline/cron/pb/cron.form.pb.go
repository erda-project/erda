// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: cron.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb3 "github.com/erda-project/erda-proto-go/common/pb"
	pb1 "github.com/erda-project/erda-proto-go/core/pipeline/base/pb"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/pb"
	pb2 "github.com/erda-project/erda-proto-go/core/pipeline/queue/pb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CronPagingRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronPagingResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStartRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStartResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStopRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStopResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronDeleteRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronDeleteResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronGetRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronUpdateResponse)(nil)

// CronPagingRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronPagingRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "allSources":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AllSources = val
			case "sources":
				m.Sources = vals
			case "ymlNames":
				m.YmlNames = vals
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "enable":
				if m.Enable == nil {
					m.Enable = &wrapperspb.BoolValue{}
				}
			case "enable.value":
				if m.Enable == nil {
					m.Enable = &wrapperspb.BoolValue{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable.Value = val
			case "pipelineDefinitionID":
				m.PipelineDefinitionID = vals
			}
		}
	}
	return nil
}

// CronPagingResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronPagingResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CronStartRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronStartRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronStartResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronStartResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.applicationID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ApplicationID = val
			case "data.branch":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.Branch = vals[0]
			case "data.cronExpr":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.CronExpr = vals[0]
			case "data.cronStartTime":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
			case "data.cronStartTime.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Seconds = val
			case "data.cronStartTime.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Nanos = int32(val)
			case "data.pipelineYmlName":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineYmlName = vals[0]
			case "data.basePipelineID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.BasePipelineID = val
			case "data.enable":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.Enable == nil {
					m.Data.Enable = &wrapperspb.BoolValue{}
				}
			case "data.enable.value":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.Enable == nil {
					m.Data.Enable = &wrapperspb.BoolValue{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Enable.Value = val
			case "data.pipelineYml":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineYml = vals[0]
			case "data.configManageNamespaces":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.ConfigManageNamespaces = vals
			case "data.userID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.UserID = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.pipelineDefinitionID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineDefinitionID = vals[0]
			case "data.pipelineSource":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineSource = vals[0]
			}
		}
	}
	return nil
}

// CronStopRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronStopRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronStopResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronStopResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.applicationID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ApplicationID = val
			case "data.branch":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.Branch = vals[0]
			case "data.cronExpr":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.CronExpr = vals[0]
			case "data.cronStartTime":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
			case "data.cronStartTime.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Seconds = val
			case "data.cronStartTime.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Nanos = int32(val)
			case "data.pipelineYmlName":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineYmlName = vals[0]
			case "data.basePipelineID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.BasePipelineID = val
			case "data.enable":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.Enable == nil {
					m.Data.Enable = &wrapperspb.BoolValue{}
				}
			case "data.enable.value":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.Enable == nil {
					m.Data.Enable = &wrapperspb.BoolValue{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Enable.Value = val
			case "data.pipelineYml":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineYml = vals[0]
			case "data.configManageNamespaces":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.ConfigManageNamespaces = vals
			case "data.userID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.UserID = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.pipelineDefinitionID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineDefinitionID = vals[0]
			case "data.pipelineSource":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineSource = vals[0]
			}
		}
	}
	return nil
}

// CronCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineCreateRequest":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
			case "pipelineCreateRequest.pipelineYml":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.PipelineYml = vals[0]
			case "pipelineCreateRequest.clusterName":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.ClusterName = vals[0]
			case "pipelineCreateRequest.namespace":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.Namespace = vals[0]
			case "pipelineCreateRequest.pipelineYmlName":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.PipelineYmlName = vals[0]
			case "pipelineCreateRequest.pipelineSource":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.PipelineSource = vals[0]
			case "pipelineCreateRequest.configManageNamespaces":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.ConfigManageNamespaces = vals
			case "pipelineCreateRequest.autoRun":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.AutoRun = val
			case "pipelineCreateRequest.forceRun":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.ForceRun = val
			case "pipelineCreateRequest.autoRunAtOnce":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.AutoRunAtOnce = val
			case "pipelineCreateRequest.autoStartCron":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.AutoStartCron = val
			case "pipelineCreateRequest.cronStartFrom":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.CronStartFrom == nil {
					m.PipelineCreateRequest.CronStartFrom = &timestamppb.Timestamp{}
				}
			case "pipelineCreateRequest.cronStartFrom.seconds":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.CronStartFrom == nil {
					m.PipelineCreateRequest.CronStartFrom = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.CronStartFrom.Seconds = val
			case "pipelineCreateRequest.cronStartFrom.nanos":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.CronStartFrom == nil {
					m.PipelineCreateRequest.CronStartFrom = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.CronStartFrom.Nanos = int32(val)
			case "pipelineCreateRequest.GC":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
			case "pipelineCreateRequest.GC.resourceGC":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.ResourceGC == nil {
					m.PipelineCreateRequest.GC.ResourceGC = &pb1.PipelineResourceGC{}
				}
			case "pipelineCreateRequest.GC.resourceGC.successTTLSecond":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.ResourceGC == nil {
					m.PipelineCreateRequest.GC.ResourceGC = &pb1.PipelineResourceGC{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.GC.ResourceGC.SuccessTTLSecond = val
			case "pipelineCreateRequest.GC.resourceGC.failedTTLSecond":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.ResourceGC == nil {
					m.PipelineCreateRequest.GC.ResourceGC = &pb1.PipelineResourceGC{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.GC.ResourceGC.FailedTTLSecond = val
			case "pipelineCreateRequest.GC.databaseGC":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
			case "pipelineCreateRequest.GC.databaseGC.analyzed":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC.Analyzed == nil {
					m.PipelineCreateRequest.GC.DatabaseGC.Analyzed = &pb1.PipelineDBGCItem{}
				}
			case "pipelineCreateRequest.GC.databaseGC.analyzed.needArchive":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC.Analyzed == nil {
					m.PipelineCreateRequest.GC.DatabaseGC.Analyzed = &pb1.PipelineDBGCItem{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.GC.DatabaseGC.Analyzed.NeedArchive = val
			case "pipelineCreateRequest.GC.databaseGC.analyzed.TTLSecond":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC.Analyzed == nil {
					m.PipelineCreateRequest.GC.DatabaseGC.Analyzed = &pb1.PipelineDBGCItem{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.GC.DatabaseGC.Analyzed.TTLSecond = val
			case "pipelineCreateRequest.GC.databaseGC.finished":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC.Finished == nil {
					m.PipelineCreateRequest.GC.DatabaseGC.Finished = &pb1.PipelineDBGCItem{}
				}
			case "pipelineCreateRequest.GC.databaseGC.finished.needArchive":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC.Finished == nil {
					m.PipelineCreateRequest.GC.DatabaseGC.Finished = &pb1.PipelineDBGCItem{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.GC.DatabaseGC.Finished.NeedArchive = val
			case "pipelineCreateRequest.GC.databaseGC.finished.TTLSecond":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.GC == nil {
					m.PipelineCreateRequest.GC = &pb1.PipelineGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC == nil {
					m.PipelineCreateRequest.GC.DatabaseGC = &pb1.PipelineDatabaseGC{}
				}
				if m.PipelineCreateRequest.GC.DatabaseGC.Finished == nil {
					m.PipelineCreateRequest.GC.DatabaseGC.Finished = &pb1.PipelineDBGCItem{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.GC.DatabaseGC.Finished.TTLSecond = val
			case "pipelineCreateRequest.bindQueue":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
			case "pipelineCreateRequest.bindQueue.ID":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.ID = val
			case "pipelineCreateRequest.bindQueue.name":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				m.PipelineCreateRequest.BindQueue.Name = vals[0]
			case "pipelineCreateRequest.bindQueue.pipelineSource":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				m.PipelineCreateRequest.BindQueue.PipelineSource = vals[0]
			case "pipelineCreateRequest.bindQueue.clusterName":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				m.PipelineCreateRequest.BindQueue.ClusterName = vals[0]
			case "pipelineCreateRequest.bindQueue.scheduleStrategy":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				m.PipelineCreateRequest.BindQueue.ScheduleStrategy = vals[0]
			case "pipelineCreateRequest.bindQueue.mode":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				m.PipelineCreateRequest.BindQueue.Mode = vals[0]
			case "pipelineCreateRequest.bindQueue.priority":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Priority = val
			case "pipelineCreateRequest.bindQueue.concurrency":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Concurrency = val
			case "pipelineCreateRequest.bindQueue.maxCPU":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.MaxCPU = val
			case "pipelineCreateRequest.bindQueue.maxMemoryMB":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.MaxMemoryMB = val
			case "pipelineCreateRequest.bindQueue.timeCreated":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.TimeCreated == nil {
					m.PipelineCreateRequest.BindQueue.TimeCreated = &timestamppb.Timestamp{}
				}
			case "pipelineCreateRequest.bindQueue.timeCreated.seconds":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.TimeCreated == nil {
					m.PipelineCreateRequest.BindQueue.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.TimeCreated.Seconds = val
			case "pipelineCreateRequest.bindQueue.timeCreated.nanos":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.TimeCreated == nil {
					m.PipelineCreateRequest.BindQueue.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.TimeCreated.Nanos = int32(val)
			case "pipelineCreateRequest.bindQueue.timeUpdated":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.TimeUpdated == nil {
					m.PipelineCreateRequest.BindQueue.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "pipelineCreateRequest.bindQueue.timeUpdated.seconds":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.TimeUpdated == nil {
					m.PipelineCreateRequest.BindQueue.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.TimeUpdated.Seconds = val
			case "pipelineCreateRequest.bindQueue.timeUpdated.nanos":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.TimeUpdated == nil {
					m.PipelineCreateRequest.BindQueue.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.TimeUpdated.Nanos = int32(val)
			case "pipelineCreateRequest.bindQueue.usage":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
			case "pipelineCreateRequest.bindQueue.usage.inUseCPU":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Usage.InUseCPU = val
			case "pipelineCreateRequest.bindQueue.usage.inUseMemoryMB":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Usage.InUseMemoryMB = val
			case "pipelineCreateRequest.bindQueue.usage.remainingCPU":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Usage.RemainingCPU = val
			case "pipelineCreateRequest.bindQueue.usage.remainingMemoryMB":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Usage.RemainingMemoryMB = val
			case "pipelineCreateRequest.bindQueue.usage.processingCount":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Usage.ProcessingCount = val
			case "pipelineCreateRequest.bindQueue.usage.pendingCount":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.BindQueue == nil {
					m.PipelineCreateRequest.BindQueue = &pb2.Queue{}
				}
				if m.PipelineCreateRequest.BindQueue.Usage == nil {
					m.PipelineCreateRequest.BindQueue.Usage = &pb2.QueueUsage{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.BindQueue.Usage.PendingCount = val
			case "pipelineCreateRequest.definitionID":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				m.PipelineCreateRequest.DefinitionID = vals[0]
			case "pipelineCreateRequest.identityInfo":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.IdentityInfo == nil {
					m.PipelineCreateRequest.IdentityInfo = &pb3.IdentityInfo{}
				}
			case "pipelineCreateRequest.identityInfo.userID":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.IdentityInfo == nil {
					m.PipelineCreateRequest.IdentityInfo = &pb3.IdentityInfo{}
				}
				m.PipelineCreateRequest.IdentityInfo.UserID = vals[0]
			case "pipelineCreateRequest.identityInfo.internalClient":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.IdentityInfo == nil {
					m.PipelineCreateRequest.IdentityInfo = &pb3.IdentityInfo{}
				}
				m.PipelineCreateRequest.IdentityInfo.InternalClient = vals[0]
			case "pipelineCreateRequest.identityInfo.orgID":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &pb1.PipelineCreateRequest{}
				}
				if m.PipelineCreateRequest.IdentityInfo == nil {
					m.PipelineCreateRequest.IdentityInfo = &pb3.IdentityInfo{}
				}
				m.PipelineCreateRequest.IdentityInfo.OrgID = vals[0]
			}
		}
	}
	return nil
}

// CronCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// CronDeleteRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronDeleteRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronDeleteResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronDeleteResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CronGetRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronGetRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.applicationID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ApplicationID = val
			case "data.branch":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.Branch = vals[0]
			case "data.cronExpr":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.CronExpr = vals[0]
			case "data.cronStartTime":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
			case "data.cronStartTime.seconds":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Seconds = val
			case "data.cronStartTime.nanos":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Nanos = int32(val)
			case "data.pipelineYmlName":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineYmlName = vals[0]
			case "data.basePipelineID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.BasePipelineID = val
			case "data.enable":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.Enable == nil {
					m.Data.Enable = &wrapperspb.BoolValue{}
				}
			case "data.enable.value":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				if m.Data.Enable == nil {
					m.Data.Enable = &wrapperspb.BoolValue{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Enable.Value = val
			case "data.pipelineYml":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineYml = vals[0]
			case "data.configManageNamespaces":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.ConfigManageNamespaces = vals
			case "data.userID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.UserID = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.pipelineDefinitionID":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineDefinitionID = vals[0]
			case "data.pipelineSource":
				if m.Data == nil {
					m.Data = &pb.Cron{}
				}
				m.Data.PipelineSource = vals[0]
			}
		}
	}
	return nil
}

// CronUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			case "pipelineYml":
				m.PipelineYml = vals[0]
			case "cronExpr":
				m.CronExpr = vals[0]
			case "configManageNamespaces":
				m.ConfigManageNamespaces = vals
			case "pipelineDefinitionID":
				m.PipelineDefinitionID = vals[0]
			}
		}
	}
	return nil
}

// CronUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
