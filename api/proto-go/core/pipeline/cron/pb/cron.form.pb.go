// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: cron.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*Cron)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronPagingRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronPagingResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStartRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStartResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStopRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronStopResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronCreateRequestV1)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronDeleteRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronDeleteResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronGetRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CronUpdateResponse)(nil)

// Cron implement urlenc.URLValuesUnmarshaler.
func (m *Cron) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			case "cronExpr":
				m.CronExpr = vals[0]
			case "cronStartTime":
				if m.CronStartTime == nil {
					m.CronStartTime = &timestamppb.Timestamp{}
				}
			case "cronStartTime.seconds":
				if m.CronStartTime == nil {
					m.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronStartTime.Seconds = val
			case "cronStartTime.nanos":
				if m.CronStartTime == nil {
					m.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CronStartTime.Nanos = int32(val)
			case "pipelineYmlName":
				m.PipelineYmlName = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			}
		}
	}
	return nil
}

// CronPagingRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronPagingRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "allSources":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AllSources = val
			case "sources":
				m.Sources = vals
			case "ymlNames":
				m.YmlNames = vals
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			}
		}
	}
	return nil
}

// CronPagingResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronPagingResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CronStartRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronStartRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronStartResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronStartResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Cron{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.cronExpr":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				m.Data.CronExpr = vals[0]
			case "data.cronStartTime":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
			case "data.cronStartTime.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Seconds = val
			case "data.cronStartTime.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Nanos = int32(val)
			case "data.pipelineYmlName":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				m.Data.PipelineYmlName = vals[0]
			case "data.enable":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Enable = val
			}
		}
	}
	return nil
}

// CronStopRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronStopRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronStopResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronStopResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Cron{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.cronExpr":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				m.Data.CronExpr = vals[0]
			case "data.cronStartTime":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
			case "data.cronStartTime.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Seconds = val
			case "data.cronStartTime.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Nanos = int32(val)
			case "data.pipelineYmlName":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				m.Data.PipelineYmlName = vals[0]
			case "data.enable":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Enable = val
			}
		}
	}
	return nil
}

// CronCreateRequestV1 implement urlenc.URLValuesUnmarshaler.
func (m *CronCreateRequestV1) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineYml":
				m.PipelineYml = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "pipelineYmlName":
				m.PipelineYmlName = vals[0]
			case "pipelineSource":
				m.PipelineSource = vals[0]
			case "configManageNamespaces":
				m.ConfigManageNamespaces = vals
			case "autoStartCron":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.AutoStartCron = val
			case "cronStartFrom":
				if m.CronStartFrom == nil {
					m.CronStartFrom = &timestamppb.Timestamp{}
				}
			case "cronStartFrom.seconds":
				if m.CronStartFrom == nil {
					m.CronStartFrom = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronStartFrom.Seconds = val
			case "cronStartFrom.nanos":
				if m.CronStartFrom == nil {
					m.CronStartFrom = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CronStartFrom.Nanos = int32(val)
			}
		}
	}
	return nil
}

// CronCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineCreateRequest":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
			case "pipelineCreateRequest.pipelineYml":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				m.PipelineCreateRequest.PipelineYml = vals[0]
			case "pipelineCreateRequest.clusterName":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				m.PipelineCreateRequest.ClusterName = vals[0]
			case "pipelineCreateRequest.pipelineYmlName":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				m.PipelineCreateRequest.PipelineYmlName = vals[0]
			case "pipelineCreateRequest.pipelineSource":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				m.PipelineCreateRequest.PipelineSource = vals[0]
			case "pipelineCreateRequest.configManageNamespaces":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				m.PipelineCreateRequest.ConfigManageNamespaces = vals
			case "pipelineCreateRequest.autoStartCron":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.AutoStartCron = val
			case "pipelineCreateRequest.cronStartFrom":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				if m.PipelineCreateRequest.CronStartFrom == nil {
					m.PipelineCreateRequest.CronStartFrom = &timestamppb.Timestamp{}
				}
			case "pipelineCreateRequest.cronStartFrom.seconds":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				if m.PipelineCreateRequest.CronStartFrom == nil {
					m.PipelineCreateRequest.CronStartFrom = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.CronStartFrom.Seconds = val
			case "pipelineCreateRequest.cronStartFrom.nanos":
				if m.PipelineCreateRequest == nil {
					m.PipelineCreateRequest = &CronCreateRequestV1{}
				}
				if m.PipelineCreateRequest.CronStartFrom == nil {
					m.PipelineCreateRequest.CronStartFrom = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineCreateRequest.CronStartFrom.Nanos = int32(val)
			}
		}
	}
	return nil
}

// CronCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// CronDeleteRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronDeleteRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronDeleteResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronDeleteResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CronGetRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronGetRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			}
		}
	}
	return nil
}

// CronGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Cron{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.cronExpr":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				m.Data.CronExpr = vals[0]
			case "data.cronStartTime":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
			case "data.cronStartTime.seconds":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Seconds = val
			case "data.cronStartTime.nanos":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				if m.Data.CronStartTime == nil {
					m.Data.CronStartTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CronStartTime.Nanos = int32(val)
			case "data.pipelineYmlName":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				m.Data.PipelineYmlName = vals[0]
			case "data.enable":
				if m.Data == nil {
					m.Data = &Cron{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Enable = val
			}
		}
	}
	return nil
}

// CronUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CronUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cronID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CronID = val
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "pipelineYml":
				m.PipelineYml = vals[0]
			case "cronExpr":
				m.CronExpr = vals[0]
			}
		}
	}
	return nil
}

// CronUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CronUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
