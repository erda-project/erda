// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: report.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// ReportServiceHandler is the server API for ReportService service.
type ReportServiceHandler interface {
	// GET /api/pipeline-reportsets/{pipelineID}
	QueryPipelineReportSet(context.Context, *PipelineReportSetQueryRequest) (*PipelineReportSetQueryResponse, error)
	// GET /api/pipeline-reportsets
	PagingPipelineReportSet(context.Context, *PipelineReportSetPagingRequest) (*PipelineReportSetPagingResponse, error)
}

// RegisterReportServiceHandler register ReportServiceHandler to http.Router.
func RegisterReportServiceHandler(r http.Router, srv ReportServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_QueryPipelineReportSet := func(method, path string, fn func(context.Context, *PipelineReportSetQueryRequest) (*PipelineReportSetQueryResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineReportSetQueryRequest))
		}
		var QueryPipelineReportSet_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryPipelineReportSet_info = transport.NewServiceInfo("erda.core.pipeline.report.ReportService", "QueryPipelineReportSet", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryPipelineReportSet_info)
				}
				r = r.WithContext(ctx)
				var in PipelineReportSetQueryRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["type"]; len(vals) > 0 {
					in.Types = vals
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "pipelineID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PipelineID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PagingPipelineReportSet := func(method, path string, fn func(context.Context, *PipelineReportSetPagingRequest) (*PipelineReportSetPagingResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineReportSetPagingRequest))
		}
		var PagingPipelineReportSet_info transport.ServiceInfo
		if h.Interceptor != nil {
			PagingPipelineReportSet_info = transport.NewServiceInfo("erda.core.pipeline.report.ReportService", "PagingPipelineReportSet", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PagingPipelineReportSet_info)
				}
				r = r.WithContext(ctx)
				var in PipelineReportSetPagingRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["mustMatchLabel"]; len(vals) > 0 {
					in.MustMatchLabelsQueryParams = vals
				}
				if vals := params["source"]; len(vals) > 0 {
					in.Sources = vals
				}
				if vals := params["type"]; len(vals) > 0 {
					in.Types = vals
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryPipelineReportSet("GET", "/api/pipeline-reportsets/{pipelineID}", srv.QueryPipelineReportSet)
	add_PagingPipelineReportSet("GET", "/api/pipeline-reportsets", srv.PagingPipelineReportSet)
}
