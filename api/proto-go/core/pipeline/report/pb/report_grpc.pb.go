// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: report.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	QueryPipelineReportSet(ctx context.Context, in *PipelineReportSetQueryRequest, opts ...grpc.CallOption) (*PipelineReportSetQueryResponse, error)
	PagingPipelineReportSet(ctx context.Context, in *PipelineReportSetPagingRequest, opts ...grpc.CallOption) (*PipelineReportSetPagingResponse, error)
}

type reportServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewReportServiceClient(cc grpc1.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) QueryPipelineReportSet(ctx context.Context, in *PipelineReportSetQueryRequest, opts ...grpc.CallOption) (*PipelineReportSetQueryResponse, error) {
	out := new(PipelineReportSetQueryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.report.ReportService/QueryPipelineReportSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) PagingPipelineReportSet(ctx context.Context, in *PipelineReportSetPagingRequest, opts ...grpc.CallOption) (*PipelineReportSetPagingResponse, error) {
	out := new(PipelineReportSetPagingResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.report.ReportService/PagingPipelineReportSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations should embed UnimplementedReportServiceServer
// for forward compatibility
type ReportServiceServer interface {
	QueryPipelineReportSet(context.Context, *PipelineReportSetQueryRequest) (*PipelineReportSetQueryResponse, error)
	PagingPipelineReportSet(context.Context, *PipelineReportSetPagingRequest) (*PipelineReportSetPagingResponse, error)
}

// UnimplementedReportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (*UnimplementedReportServiceServer) QueryPipelineReportSet(context.Context, *PipelineReportSetQueryRequest) (*PipelineReportSetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPipelineReportSet not implemented")
}
func (*UnimplementedReportServiceServer) PagingPipelineReportSet(context.Context, *PipelineReportSetPagingRequest) (*PipelineReportSetPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingPipelineReportSet not implemented")
}

func RegisterReportServiceServer(s grpc1.ServiceRegistrar, srv ReportServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ReportService_serviceDesc(srv, opts...), srv)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.report.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "report.proto",
}

func _get_ReportService_serviceDesc(srv ReportServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ReportService_QueryPipelineReportSet_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryPipelineReportSet(ctx, req.(*PipelineReportSetQueryRequest))
	}
	var _ReportService_QueryPipelineReportSet_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReportService_QueryPipelineReportSet_info = transport.NewServiceInfo("erda.core.pipeline.report.ReportService", "QueryPipelineReportSet", srv)
		_ReportService_QueryPipelineReportSet_Handler = h.Interceptor(_ReportService_QueryPipelineReportSet_Handler)
	}

	_ReportService_PagingPipelineReportSet_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PagingPipelineReportSet(ctx, req.(*PipelineReportSetPagingRequest))
	}
	var _ReportService_PagingPipelineReportSet_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ReportService_PagingPipelineReportSet_info = transport.NewServiceInfo("erda.core.pipeline.report.ReportService", "PagingPipelineReportSet", srv)
		_ReportService_PagingPipelineReportSet_Handler = h.Interceptor(_ReportService_PagingPipelineReportSet_Handler)
	}

	var serviceDesc = _ReportService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "QueryPipelineReportSet",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineReportSetQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReportServiceServer).QueryPipelineReportSet(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReportService_QueryPipelineReportSet_info)
				}
				if interceptor == nil {
					return _ReportService_QueryPipelineReportSet_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.report.ReportService/QueryPipelineReportSet",
				}
				return interceptor(ctx, in, info, _ReportService_QueryPipelineReportSet_Handler)
			},
		},
		{
			MethodName: "PagingPipelineReportSet",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineReportSetPagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ReportServiceServer).PagingPipelineReportSet(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ReportService_PagingPipelineReportSet_info)
				}
				if interceptor == nil {
					return _ReportService_PagingPipelineReportSet_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.report.ReportService/PagingPipelineReportSet",
				}
				return interceptor(ctx, in, info, _ReportService_PagingPipelineReportSet_Handler)
			},
		},
	}
	return &serviceDesc
}
