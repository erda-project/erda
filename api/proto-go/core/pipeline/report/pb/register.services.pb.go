// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: report.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterReportServiceImp report.proto
func RegisterReportServiceImp(regester transport.Register, srv ReportServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterReportServiceHandler(regester, ReportServiceHandler(srv), _ops.HTTP...)
	RegisterReportServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.pipeline.report.ReportService",
	)
}

var (
	reportServiceClientType  = reflect.TypeOf((*ReportServiceClient)(nil)).Elem()
	reportServiceServerType  = reflect.TypeOf((*ReportServiceServer)(nil)).Elem()
	reportServiceHandlerType = reflect.TypeOf((*ReportServiceHandler)(nil)).Elem()
)

// ReportServiceClientType .
func ReportServiceClientType() reflect.Type { return reportServiceClientType }

// ReportServiceServerType .
func ReportServiceServerType() reflect.Type { return reportServiceServerType }

// ReportServiceHandlerType .
func ReportServiceHandlerType() reflect.Type { return reportServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		reportServiceClientType,
		// server types
		reportServiceServerType,
		// handler types
		reportServiceHandlerType,
	}
}
