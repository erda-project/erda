// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: build.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*BuildCacheReportRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BuildCacheReportResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BuildArtifactRegisterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BuildArtifactRegisterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BuildArtifactQueryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BuildArtifactQueryResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BuildArtifact)(nil)

// BuildCacheReportRequest implement urlenc.URLValuesUnmarshaler.
func (m *BuildCacheReportRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "action":
				m.Action = vals[0]
			case "name":
				m.Name = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// BuildCacheReportResponse implement urlenc.URLValuesUnmarshaler.
func (m *BuildCacheReportResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// BuildArtifactRegisterRequest implement urlenc.URLValuesUnmarshaler.
func (m *BuildArtifactRegisterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "sha":
				m.Sha = vals[0]
			case "identityText":
				m.IdentityText = vals[0]
			case "type":
				m.Type = vals[0]
			case "content":
				m.Content = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			}
		}
	}
	return nil
}

// BuildArtifactRegisterResponse implement urlenc.URLValuesUnmarshaler.
func (m *BuildArtifactRegisterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.sha256":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.Sha256 = vals[0]
			case "data.identityText":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.IdentityText = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.Type = vals[0]
			case "data.content":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.Content = vals[0]
			case "data.clusterName":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.ClusterName = vals[0]
			case "data.pipelineID":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PipelineID = val
			}
		}
	}
	return nil
}

// BuildArtifactQueryRequest implement urlenc.URLValuesUnmarshaler.
func (m *BuildArtifactQueryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "sha":
				m.Sha = vals[0]
			}
		}
	}
	return nil
}

// BuildArtifactQueryResponse implement urlenc.URLValuesUnmarshaler.
func (m *BuildArtifactQueryResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ID = val
			case "data.sha256":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.Sha256 = vals[0]
			case "data.identityText":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.IdentityText = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.Type = vals[0]
			case "data.content":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.Content = vals[0]
			case "data.clusterName":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				m.Data.ClusterName = vals[0]
			case "data.pipelineID":
				if m.Data == nil {
					m.Data = &BuildArtifact{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.PipelineID = val
			}
		}
	}
	return nil
}

// BuildArtifact implement urlenc.URLValuesUnmarshaler.
func (m *BuildArtifact) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "sha256":
				m.Sha256 = vals[0]
			case "identityText":
				m.IdentityText = vals[0]
			case "type":
				m.Type = vals[0]
			case "content":
				m.Content = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			}
		}
	}
	return nil
}
