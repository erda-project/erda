// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: queue.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	CreateQueue(ctx context.Context, in *QueueCreateRequest, opts ...grpc.CallOption) (*QueueCreateResponse, error)
	GetQueue(ctx context.Context, in *QueueGetRequest, opts ...grpc.CallOption) (*QueueGetResponse, error)
	PagingQueue(ctx context.Context, in *QueuePagingRequest, opts ...grpc.CallOption) (*QueuePagingResponse, error)
	UpdateQueue(ctx context.Context, in *QueueUpdateRequest, opts ...grpc.CallOption) (*QueueUpdateResponse, error)
	DeleteQueue(ctx context.Context, in *QueueDeleteRequest, opts ...grpc.CallOption) (*QueueDeleteResponse, error)
}

type queueServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewQueueServiceClient(cc grpc1.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) CreateQueue(ctx context.Context, in *QueueCreateRequest, opts ...grpc.CallOption) (*QueueCreateResponse, error) {
	out := new(QueueCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.queue.QueueService/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) GetQueue(ctx context.Context, in *QueueGetRequest, opts ...grpc.CallOption) (*QueueGetResponse, error) {
	out := new(QueueGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.queue.QueueService/GetQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) PagingQueue(ctx context.Context, in *QueuePagingRequest, opts ...grpc.CallOption) (*QueuePagingResponse, error) {
	out := new(QueuePagingResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.queue.QueueService/PagingQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) UpdateQueue(ctx context.Context, in *QueueUpdateRequest, opts ...grpc.CallOption) (*QueueUpdateResponse, error) {
	out := new(QueueUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.queue.QueueService/UpdateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) DeleteQueue(ctx context.Context, in *QueueDeleteRequest, opts ...grpc.CallOption) (*QueueDeleteResponse, error) {
	out := new(QueueDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.queue.QueueService/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations should embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	CreateQueue(context.Context, *QueueCreateRequest) (*QueueCreateResponse, error)
	GetQueue(context.Context, *QueueGetRequest) (*QueueGetResponse, error)
	PagingQueue(context.Context, *QueuePagingRequest) (*QueuePagingResponse, error)
	UpdateQueue(context.Context, *QueueUpdateRequest) (*QueueUpdateResponse, error)
	DeleteQueue(context.Context, *QueueDeleteRequest) (*QueueDeleteResponse, error)
}

// UnimplementedQueueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (*UnimplementedQueueServiceServer) CreateQueue(context.Context, *QueueCreateRequest) (*QueueCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (*UnimplementedQueueServiceServer) GetQueue(context.Context, *QueueGetRequest) (*QueueGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (*UnimplementedQueueServiceServer) PagingQueue(context.Context, *QueuePagingRequest) (*QueuePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingQueue not implemented")
}
func (*UnimplementedQueueServiceServer) UpdateQueue(context.Context, *QueueUpdateRequest) (*QueueUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueue not implemented")
}
func (*UnimplementedQueueServiceServer) DeleteQueue(context.Context, *QueueDeleteRequest) (*QueueDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}

func RegisterQueueServiceServer(s grpc1.ServiceRegistrar, srv QueueServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_QueueService_serviceDesc(srv, opts...), srv)
}

var _QueueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.queue.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "queue.proto",
}

func _get_QueueService_serviceDesc(srv QueueServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_QueueService_CreateQueue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateQueue(ctx, req.(*QueueCreateRequest))
	}
	var _QueueService_CreateQueue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_QueueService_CreateQueue_info = transport.NewServiceInfo("erda.core.pipeline.queue.QueueService", "CreateQueue", srv)
		_QueueService_CreateQueue_Handler = h.Interceptor(_QueueService_CreateQueue_Handler)
	}

	_QueueService_GetQueue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetQueue(ctx, req.(*QueueGetRequest))
	}
	var _QueueService_GetQueue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_QueueService_GetQueue_info = transport.NewServiceInfo("erda.core.pipeline.queue.QueueService", "GetQueue", srv)
		_QueueService_GetQueue_Handler = h.Interceptor(_QueueService_GetQueue_Handler)
	}

	_QueueService_PagingQueue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PagingQueue(ctx, req.(*QueuePagingRequest))
	}
	var _QueueService_PagingQueue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_QueueService_PagingQueue_info = transport.NewServiceInfo("erda.core.pipeline.queue.QueueService", "PagingQueue", srv)
		_QueueService_PagingQueue_Handler = h.Interceptor(_QueueService_PagingQueue_Handler)
	}

	_QueueService_UpdateQueue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateQueue(ctx, req.(*QueueUpdateRequest))
	}
	var _QueueService_UpdateQueue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_QueueService_UpdateQueue_info = transport.NewServiceInfo("erda.core.pipeline.queue.QueueService", "UpdateQueue", srv)
		_QueueService_UpdateQueue_Handler = h.Interceptor(_QueueService_UpdateQueue_Handler)
	}

	_QueueService_DeleteQueue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteQueue(ctx, req.(*QueueDeleteRequest))
	}
	var _QueueService_DeleteQueue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_QueueService_DeleteQueue_info = transport.NewServiceInfo("erda.core.pipeline.queue.QueueService", "DeleteQueue", srv)
		_QueueService_DeleteQueue_Handler = h.Interceptor(_QueueService_DeleteQueue_Handler)
	}

	var serviceDesc = _QueueService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueueCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(QueueServiceServer).CreateQueue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _QueueService_CreateQueue_info)
				}
				if interceptor == nil {
					return _QueueService_CreateQueue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.queue.QueueService/CreateQueue",
				}
				return interceptor(ctx, in, info, _QueueService_CreateQueue_Handler)
			},
		},
		{
			MethodName: "GetQueue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueueGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(QueueServiceServer).GetQueue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _QueueService_GetQueue_info)
				}
				if interceptor == nil {
					return _QueueService_GetQueue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.queue.QueueService/GetQueue",
				}
				return interceptor(ctx, in, info, _QueueService_GetQueue_Handler)
			},
		},
		{
			MethodName: "PagingQueue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueuePagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(QueueServiceServer).PagingQueue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _QueueService_PagingQueue_info)
				}
				if interceptor == nil {
					return _QueueService_PagingQueue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.queue.QueueService/PagingQueue",
				}
				return interceptor(ctx, in, info, _QueueService_PagingQueue_Handler)
			},
		},
		{
			MethodName: "UpdateQueue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueueUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(QueueServiceServer).UpdateQueue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _QueueService_UpdateQueue_info)
				}
				if interceptor == nil {
					return _QueueService_UpdateQueue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.queue.QueueService/UpdateQueue",
				}
				return interceptor(ctx, in, info, _QueueService_UpdateQueue_Handler)
			},
		},
		{
			MethodName: "DeleteQueue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueueDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(QueueServiceServer).DeleteQueue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _QueueService_DeleteQueue_info)
				}
				if interceptor == nil {
					return _QueueService_DeleteQueue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.queue.QueueService/DeleteQueue",
				}
				return interceptor(ctx, in, info, _QueueService_DeleteQueue_Handler)
			},
		},
	}
	return &serviceDesc
}
