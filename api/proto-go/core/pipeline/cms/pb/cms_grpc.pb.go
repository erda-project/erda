// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: cms.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// CmsServiceClient is the client API for CmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsServiceClient interface {
	CreateNs(ctx context.Context, in *CmsCreateNsRequest, opts ...grpc.CallOption) (*CmsCreateNsResponse, error)
	ListCmsNs(ctx context.Context, in *CmsListNsRequest, opts ...grpc.CallOption) (*CmsListNsResponse, error)
	UpdateCmsNsConfigs(ctx context.Context, in *CmsNsConfigsUpdateRequest, opts ...grpc.CallOption) (*CmsNsConfigsUpdateResponse, error)
	DeleteCmsNsConfigs(ctx context.Context, in *CmsNsConfigsDeleteRequest, opts ...grpc.CallOption) (*CmsNsConfigsDeleteResponse, error)
	GetCmsNsConfigs(ctx context.Context, in *CmsNsConfigsGetRequest, opts ...grpc.CallOption) (*CmsNsConfigsGetResponse, error)
	BatchGetCmsNsConfigs(ctx context.Context, in *CmsNsConfigsBatchGetRequest, opts ...grpc.CallOption) (*CmsNsConfigsBatchGetResponse, error)
}

type cmsServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewCmsServiceClient(cc grpc1.ClientConnInterface) CmsServiceClient {
	return &cmsServiceClient{cc}
}

func (c *cmsServiceClient) CreateNs(ctx context.Context, in *CmsCreateNsRequest, opts ...grpc.CallOption) (*CmsCreateNsResponse, error) {
	out := new(CmsCreateNsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.cms.CmsService/CreateNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) ListCmsNs(ctx context.Context, in *CmsListNsRequest, opts ...grpc.CallOption) (*CmsListNsResponse, error) {
	out := new(CmsListNsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.cms.CmsService/ListCmsNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) UpdateCmsNsConfigs(ctx context.Context, in *CmsNsConfigsUpdateRequest, opts ...grpc.CallOption) (*CmsNsConfigsUpdateResponse, error) {
	out := new(CmsNsConfigsUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.cms.CmsService/UpdateCmsNsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) DeleteCmsNsConfigs(ctx context.Context, in *CmsNsConfigsDeleteRequest, opts ...grpc.CallOption) (*CmsNsConfigsDeleteResponse, error) {
	out := new(CmsNsConfigsDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.cms.CmsService/DeleteCmsNsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) GetCmsNsConfigs(ctx context.Context, in *CmsNsConfigsGetRequest, opts ...grpc.CallOption) (*CmsNsConfigsGetResponse, error) {
	out := new(CmsNsConfigsGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.cms.CmsService/GetCmsNsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) BatchGetCmsNsConfigs(ctx context.Context, in *CmsNsConfigsBatchGetRequest, opts ...grpc.CallOption) (*CmsNsConfigsBatchGetResponse, error) {
	out := new(CmsNsConfigsBatchGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.cms.CmsService/BatchGetCmsNsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsServiceServer is the server API for CmsService service.
// All implementations should embed UnimplementedCmsServiceServer
// for forward compatibility
type CmsServiceServer interface {
	CreateNs(context.Context, *CmsCreateNsRequest) (*CmsCreateNsResponse, error)
	ListCmsNs(context.Context, *CmsListNsRequest) (*CmsListNsResponse, error)
	UpdateCmsNsConfigs(context.Context, *CmsNsConfigsUpdateRequest) (*CmsNsConfigsUpdateResponse, error)
	DeleteCmsNsConfigs(context.Context, *CmsNsConfigsDeleteRequest) (*CmsNsConfigsDeleteResponse, error)
	GetCmsNsConfigs(context.Context, *CmsNsConfigsGetRequest) (*CmsNsConfigsGetResponse, error)
	BatchGetCmsNsConfigs(context.Context, *CmsNsConfigsBatchGetRequest) (*CmsNsConfigsBatchGetResponse, error)
}

// UnimplementedCmsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCmsServiceServer struct {
}

func (*UnimplementedCmsServiceServer) CreateNs(context.Context, *CmsCreateNsRequest) (*CmsCreateNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNs not implemented")
}
func (*UnimplementedCmsServiceServer) ListCmsNs(context.Context, *CmsListNsRequest) (*CmsListNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCmsNs not implemented")
}
func (*UnimplementedCmsServiceServer) UpdateCmsNsConfigs(context.Context, *CmsNsConfigsUpdateRequest) (*CmsNsConfigsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCmsNsConfigs not implemented")
}
func (*UnimplementedCmsServiceServer) DeleteCmsNsConfigs(context.Context, *CmsNsConfigsDeleteRequest) (*CmsNsConfigsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCmsNsConfigs not implemented")
}
func (*UnimplementedCmsServiceServer) GetCmsNsConfigs(context.Context, *CmsNsConfigsGetRequest) (*CmsNsConfigsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCmsNsConfigs not implemented")
}
func (*UnimplementedCmsServiceServer) BatchGetCmsNsConfigs(context.Context, *CmsNsConfigsBatchGetRequest) (*CmsNsConfigsBatchGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetCmsNsConfigs not implemented")
}

func RegisterCmsServiceServer(s grpc1.ServiceRegistrar, srv CmsServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_CmsService_serviceDesc(srv, opts...), srv)
}

var _CmsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.cms.CmsService",
	HandlerType: (*CmsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "cms.proto",
}

func _get_CmsService_serviceDesc(srv CmsServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_CmsService_CreateNs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateNs(ctx, req.(*CmsCreateNsRequest))
	}
	var _CmsService_CreateNs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CmsService_CreateNs_info = transport.NewServiceInfo("erda.core.pipeline.cms.CmsService", "CreateNs", srv)
		_CmsService_CreateNs_Handler = h.Interceptor(_CmsService_CreateNs_Handler)
	}

	_CmsService_ListCmsNs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListCmsNs(ctx, req.(*CmsListNsRequest))
	}
	var _CmsService_ListCmsNs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CmsService_ListCmsNs_info = transport.NewServiceInfo("erda.core.pipeline.cms.CmsService", "ListCmsNs", srv)
		_CmsService_ListCmsNs_Handler = h.Interceptor(_CmsService_ListCmsNs_Handler)
	}

	_CmsService_UpdateCmsNsConfigs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCmsNsConfigs(ctx, req.(*CmsNsConfigsUpdateRequest))
	}
	var _CmsService_UpdateCmsNsConfigs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CmsService_UpdateCmsNsConfigs_info = transport.NewServiceInfo("erda.core.pipeline.cms.CmsService", "UpdateCmsNsConfigs", srv)
		_CmsService_UpdateCmsNsConfigs_Handler = h.Interceptor(_CmsService_UpdateCmsNsConfigs_Handler)
	}

	_CmsService_DeleteCmsNsConfigs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteCmsNsConfigs(ctx, req.(*CmsNsConfigsDeleteRequest))
	}
	var _CmsService_DeleteCmsNsConfigs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CmsService_DeleteCmsNsConfigs_info = transport.NewServiceInfo("erda.core.pipeline.cms.CmsService", "DeleteCmsNsConfigs", srv)
		_CmsService_DeleteCmsNsConfigs_Handler = h.Interceptor(_CmsService_DeleteCmsNsConfigs_Handler)
	}

	_CmsService_GetCmsNsConfigs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCmsNsConfigs(ctx, req.(*CmsNsConfigsGetRequest))
	}
	var _CmsService_GetCmsNsConfigs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CmsService_GetCmsNsConfigs_info = transport.NewServiceInfo("erda.core.pipeline.cms.CmsService", "GetCmsNsConfigs", srv)
		_CmsService_GetCmsNsConfigs_Handler = h.Interceptor(_CmsService_GetCmsNsConfigs_Handler)
	}

	_CmsService_BatchGetCmsNsConfigs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BatchGetCmsNsConfigs(ctx, req.(*CmsNsConfigsBatchGetRequest))
	}
	var _CmsService_BatchGetCmsNsConfigs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CmsService_BatchGetCmsNsConfigs_info = transport.NewServiceInfo("erda.core.pipeline.cms.CmsService", "BatchGetCmsNsConfigs", srv)
		_CmsService_BatchGetCmsNsConfigs_Handler = h.Interceptor(_CmsService_BatchGetCmsNsConfigs_Handler)
	}

	var serviceDesc = _CmsService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateNs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CmsCreateNsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmsServiceServer).CreateNs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CmsService_CreateNs_info)
				}
				if interceptor == nil {
					return _CmsService_CreateNs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.cms.CmsService/CreateNs",
				}
				return interceptor(ctx, in, info, _CmsService_CreateNs_Handler)
			},
		},
		{
			MethodName: "ListCmsNs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CmsListNsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmsServiceServer).ListCmsNs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CmsService_ListCmsNs_info)
				}
				if interceptor == nil {
					return _CmsService_ListCmsNs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.cms.CmsService/ListCmsNs",
				}
				return interceptor(ctx, in, info, _CmsService_ListCmsNs_Handler)
			},
		},
		{
			MethodName: "UpdateCmsNsConfigs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CmsNsConfigsUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmsServiceServer).UpdateCmsNsConfigs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CmsService_UpdateCmsNsConfigs_info)
				}
				if interceptor == nil {
					return _CmsService_UpdateCmsNsConfigs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.cms.CmsService/UpdateCmsNsConfigs",
				}
				return interceptor(ctx, in, info, _CmsService_UpdateCmsNsConfigs_Handler)
			},
		},
		{
			MethodName: "DeleteCmsNsConfigs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CmsNsConfigsDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmsServiceServer).DeleteCmsNsConfigs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CmsService_DeleteCmsNsConfigs_info)
				}
				if interceptor == nil {
					return _CmsService_DeleteCmsNsConfigs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.cms.CmsService/DeleteCmsNsConfigs",
				}
				return interceptor(ctx, in, info, _CmsService_DeleteCmsNsConfigs_Handler)
			},
		},
		{
			MethodName: "GetCmsNsConfigs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CmsNsConfigsGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmsServiceServer).GetCmsNsConfigs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CmsService_GetCmsNsConfigs_info)
				}
				if interceptor == nil {
					return _CmsService_GetCmsNsConfigs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.cms.CmsService/GetCmsNsConfigs",
				}
				return interceptor(ctx, in, info, _CmsService_GetCmsNsConfigs_Handler)
			},
		},
		{
			MethodName: "BatchGetCmsNsConfigs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CmsNsConfigsBatchGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmsServiceServer).BatchGetCmsNsConfigs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CmsService_BatchGetCmsNsConfigs_info)
				}
				if interceptor == nil {
					return _CmsService_BatchGetCmsNsConfigs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.cms.CmsService/BatchGetCmsNsConfigs",
				}
				return interceptor(ctx, in, info, _CmsService_BatchGetCmsNsConfigs_Handler)
			},
		},
	}
	return &serviceDesc
}
