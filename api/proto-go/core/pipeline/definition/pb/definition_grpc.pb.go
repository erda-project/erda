// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: definition.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DefinitionServiceClient is the client API for DefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefinitionServiceClient interface {
	Process(ctx context.Context, in *PipelineDefinitionProcessRequest, opts ...grpc.CallOption) (*PipelineDefinitionProcessResponse, error)
	Version(ctx context.Context, in *PipelineDefinitionProcessVersionRequest, opts ...grpc.CallOption) (*PipelineDefinitionProcessVersionResponse, error)
}

type definitionServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDefinitionServiceClient(cc grpc1.ClientConnInterface) DefinitionServiceClient {
	return &definitionServiceClient{cc}
}

func (c *definitionServiceClient) Process(ctx context.Context, in *PipelineDefinitionProcessRequest, opts ...grpc.CallOption) (*PipelineDefinitionProcessResponse, error) {
	out := new(PipelineDefinitionProcessResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.definition.DefinitionService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *definitionServiceClient) Version(ctx context.Context, in *PipelineDefinitionProcessVersionRequest, opts ...grpc.CallOption) (*PipelineDefinitionProcessVersionResponse, error) {
	out := new(PipelineDefinitionProcessVersionResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.definition.DefinitionService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefinitionServiceServer is the server API for DefinitionService service.
// All implementations should embed UnimplementedDefinitionServiceServer
// for forward compatibility
type DefinitionServiceServer interface {
	Process(context.Context, *PipelineDefinitionProcessRequest) (*PipelineDefinitionProcessResponse, error)
	Version(context.Context, *PipelineDefinitionProcessVersionRequest) (*PipelineDefinitionProcessVersionResponse, error)
}

// UnimplementedDefinitionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDefinitionServiceServer struct {
}

func (*UnimplementedDefinitionServiceServer) Process(context.Context, *PipelineDefinitionProcessRequest) (*PipelineDefinitionProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (*UnimplementedDefinitionServiceServer) Version(context.Context, *PipelineDefinitionProcessVersionRequest) (*PipelineDefinitionProcessVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterDefinitionServiceServer(s grpc1.ServiceRegistrar, srv DefinitionServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DefinitionService_serviceDesc(srv, opts...), srv)
}

var _DefinitionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.definition.DefinitionService",
	HandlerType: (*DefinitionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "definition.proto",
}

func _get_DefinitionService_serviceDesc(srv DefinitionServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DefinitionService_Process_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Process(ctx, req.(*PipelineDefinitionProcessRequest))
	}
	var _DefinitionService_Process_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DefinitionService_Process_info = transport.NewServiceInfo("erda.core.pipeline.definition.DefinitionService", "Process", srv)
		_DefinitionService_Process_Handler = h.Interceptor(_DefinitionService_Process_Handler)
	}

	_DefinitionService_Version_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Version(ctx, req.(*PipelineDefinitionProcessVersionRequest))
	}
	var _DefinitionService_Version_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DefinitionService_Version_info = transport.NewServiceInfo("erda.core.pipeline.definition.DefinitionService", "Version", srv)
		_DefinitionService_Version_Handler = h.Interceptor(_DefinitionService_Version_Handler)
	}

	var serviceDesc = _DefinitionService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineDefinitionProcessRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DefinitionServiceServer).Process(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DefinitionService_Process_info)
				}
				if interceptor == nil {
					return _DefinitionService_Process_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.definition.DefinitionService/Process",
				}
				return interceptor(ctx, in, info, _DefinitionService_Process_Handler)
			},
		},
		{
			MethodName: "Version",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineDefinitionProcessVersionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DefinitionServiceServer).Version(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DefinitionService_Version_info)
				}
				if interceptor == nil {
					return _DefinitionService_Version_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.definition.DefinitionService/Version",
				}
				return interceptor(ctx, in, info, _DefinitionService_Version_Handler)
			},
		},
	}
	return &serviceDesc
}
