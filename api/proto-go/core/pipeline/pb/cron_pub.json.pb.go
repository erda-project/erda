// Code generated by protoc-gen-go-json. DO NOT EDIT.
// Source: cron_pub.proto

package pb

import (
	bytes "bytes"
	json "encoding/json"

	jsonpb "github.com/erda-project/erda-infra/pkg/transport/http/encoding/jsonpb"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "encoding/json" package it is being compiled against.
var _ json.Marshaler = (*Cron)(nil)
var _ json.Unmarshaler = (*Cron)(nil)
var _ json.Marshaler = (*CronExtra)(nil)
var _ json.Unmarshaler = (*CronExtra)(nil)
var _ json.Marshaler = (*CronCompensator)(nil)
var _ json.Unmarshaler = (*CronCompensator)(nil)

// Cron implement json.Marshaler.
func (m *Cron) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// Cron implement json.Marshaler.
func (m *Cron) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// CronExtra implement json.Marshaler.
func (m *CronExtra) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// CronExtra implement json.Marshaler.
func (m *CronExtra) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// CronCompensator implement json.Marshaler.
func (m *CronCompensator) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// CronCompensator implement json.Marshaler.
func (m *CronCompensator) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}
