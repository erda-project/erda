// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: cron_pub.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	TimeCreated            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	ApplicationID          uint64                 `protobuf:"varint,4,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	Branch                 string                 `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	CronExpr               string                 `protobuf:"bytes,6,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
	CronStartTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=cronStartTime,proto3" json:"cronStartTime,omitempty"`
	PipelineYmlName        string                 `protobuf:"bytes,8,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	BasePipelineID         uint64                 `protobuf:"varint,9,opt,name=basePipelineID,proto3" json:"basePipelineID,omitempty"`
	Enable                 *wrapperspb.BoolValue  `protobuf:"bytes,10,opt,name=enable,proto3" json:"enable,omitempty"`
	PipelineYml            string                 `protobuf:"bytes,11,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	ConfigManageNamespaces []string               `protobuf:"bytes,12,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	UserID                 string                 `protobuf:"bytes,13,opt,name=userID,proto3" json:"userID,omitempty"`
	OrgID                  uint64                 `protobuf:"varint,14,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PipelineDefinitionID   string                 `protobuf:"bytes,15,opt,name=pipelineDefinitionID,proto3" json:"pipelineDefinitionID,omitempty"`
	PipelineSource         string                 `protobuf:"bytes,16,opt,name=pipelineSource,proto3" json:"pipelineSource,omitempty"`
}

func (x *Cron) Reset() {
	*x = Cron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cron_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cron) ProtoMessage() {}

func (x *Cron) ProtoReflect() protoreflect.Message {
	mi := &file_cron_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cron.ProtoReflect.Descriptor instead.
func (*Cron) Descriptor() ([]byte, []int) {
	return file_cron_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Cron) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Cron) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *Cron) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *Cron) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Cron) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Cron) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

func (x *Cron) GetCronStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CronStartTime
	}
	return nil
}

func (x *Cron) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *Cron) GetBasePipelineID() uint64 {
	if x != nil {
		return x.BasePipelineID
	}
	return 0
}

func (x *Cron) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *Cron) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *Cron) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *Cron) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Cron) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *Cron) GetPipelineDefinitionID() string {
	if x != nil {
		return x.PipelineDefinitionID
	}
	return ""
}

func (x *Cron) GetPipelineSource() string {
	if x != nil {
		return x.PipelineSource
	}
	return ""
}

var File_cron_pub_proto protoreflect.FileDescriptor

var file_cron_pub_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x05, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cron_pub_proto_rawDescOnce sync.Once
	file_cron_pub_proto_rawDescData = file_cron_pub_proto_rawDesc
)

func file_cron_pub_proto_rawDescGZIP() []byte {
	file_cron_pub_proto_rawDescOnce.Do(func() {
		file_cron_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_cron_pub_proto_rawDescData)
	})
	return file_cron_pub_proto_rawDescData
}

var file_cron_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cron_pub_proto_goTypes = []interface{}{
	(*Cron)(nil),                  // 0: erda.core.pipeline.Cron
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),  // 2: google.protobuf.BoolValue
}
var file_cron_pub_proto_depIdxs = []int32{
	1, // 0: erda.core.pipeline.Cron.timeCreated:type_name -> google.protobuf.Timestamp
	1, // 1: erda.core.pipeline.Cron.timeUpdated:type_name -> google.protobuf.Timestamp
	1, // 2: erda.core.pipeline.Cron.cronStartTime:type_name -> google.protobuf.Timestamp
	2, // 3: erda.core.pipeline.Cron.enable:type_name -> google.protobuf.BoolValue
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cron_pub_proto_init() }
func file_cron_pub_proto_init() {
	if File_cron_pub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cron_pub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cron_pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cron_pub_proto_goTypes,
		DependencyIndexes: file_cron_pub_proto_depIdxs,
		MessageInfos:      file_cron_pub_proto_msgTypes,
	}.Build()
	File_cron_pub_proto = out.File
	file_cron_pub_proto_rawDesc = nil
	file_cron_pub_proto_goTypes = nil
	file_cron_pub_proto_depIdxs = nil
}
