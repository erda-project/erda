// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: base.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/pipeline/base/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// BaseService base.proto
	BaseService() pb.BaseServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		baseService: pb.NewBaseServiceClient(cc),
	}
}

type serviceClients struct {
	baseService pb.BaseServiceClient
}

func (c *serviceClients) BaseService() pb.BaseServiceClient {
	return c.baseService
}

type baseServiceWrapper struct {
	client pb.BaseServiceClient
	opts   []grpc1.CallOption
}

func (s *baseServiceWrapper) PipelineCreate(ctx context.Context, req *pb.PipelineCreateRequest) (*pb.PipelineCreateResponse, error) {
	return s.client.PipelineCreate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelinePaging(ctx context.Context, req *pb.PipelinePagingRequest) (*pb.PipelinePagingResponse, error) {
	return s.client.PipelinePaging(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineDetail(ctx context.Context, req *pb.PipelineDetailRequest) (*pb.PipelineDetailResponse, error) {
	return s.client.PipelineDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineOperate(ctx context.Context, req *pb.PipelineOperateRequest) (*pb.PipelineOperateResponse, error) {
	return s.client.PipelineOperate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineDelete(ctx context.Context, req *pb.PipelineDeleteRequest) (*pb.PipelineDeleteResponse, error) {
	return s.client.PipelineDelete(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineRun(ctx context.Context, req *pb.PipelineRunRequest) (*pb.PipelineRunResponse, error) {
	return s.client.PipelineRun(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineCancel(ctx context.Context, req *pb.PipelineCancelRequest) (*pb.PipelineCancelResponse, error) {
	return s.client.PipelineCancel(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineRerun(ctx context.Context, req *pb.PipelineRerunRequest) (*pb.PipelineRerunResponse, error) {
	return s.client.PipelineRerun(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineRerunFailed(ctx context.Context, req *pb.PipelineRerunFailedRequest) (*pb.PipelineRerunFailedResponse, error) {
	return s.client.PipelineRerunFailed(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) DeprecatedPipelineBatchCreate(ctx context.Context, req *pb.DeprecatedPipelineBatchCreateRequest) (*pb.DeprecatedPipelineBatchCreateResponse, error) {
	return s.client.DeprecatedPipelineBatchCreate(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineYmlGraph(ctx context.Context, req *pb.PipelineYmlGraphRequest) (*pb.PipelineYmlGraphResponse, error) {
	return s.client.PipelineYmlGraph(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineTaskDetail(ctx context.Context, req *pb.PipelineTaskDetailRequest) (*pb.PipelineTaskDetailResponse, error) {
	return s.client.PipelineTaskDetail(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineTaskGetBootstrapInfo(ctx context.Context, req *pb.PipelineTaskGetBootstrapInfoRequest) (*pb.PipelineTaskGetBootstrapInfoResponse, error) {
	return s.client.PipelineTaskGetBootstrapInfo(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) PipelineCallback(ctx context.Context, req *pb.PipelineCallbackRequest) (*pb.PipelineCallbackResponse, error) {
	return s.client.PipelineCallback(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *baseServiceWrapper) QueryPipelineSnippet(ctx context.Context, req *pb.PipelineSnippetQueryRequest) (*pb.PipelineSnippetQueryRequest, error) {
	return s.client.QueryPipelineSnippet(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
