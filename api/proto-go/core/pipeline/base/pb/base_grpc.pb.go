// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: base.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseServiceClient interface {
	////////// pipelines
	PipelineCreate(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (*PipelineCreateResponse, error)
	PipelinePaging(ctx context.Context, in *PipelinePagingRequest, opts ...grpc.CallOption) (*PipelinePagingResponse, error)
	PipelineDetail(ctx context.Context, in *PipelineDetailRequest, opts ...grpc.CallOption) (*PipelineDetailResponse, error)
	PipelineOperate(ctx context.Context, in *PipelineOperateRequest, opts ...grpc.CallOption) (*PipelineOperateResponse, error)
	PipelineDelete(ctx context.Context, in *PipelineDeleteRequest, opts ...grpc.CallOption) (*PipelineDeleteResponse, error)
	PipelineRun(ctx context.Context, in *PipelineRunRequest, opts ...grpc.CallOption) (*PipelineRunResponse, error)
	PipelineCancel(ctx context.Context, in *PipelineCancelRequest, opts ...grpc.CallOption) (*PipelineCancelResponse, error)
	PipelineRerun(ctx context.Context, in *PipelineRerunRequest, opts ...grpc.CallOption) (*PipelineRerunResponse, error)
	PipelineRerunFailed(ctx context.Context, in *PipelineRerunFailedRequest, opts ...grpc.CallOption) (*PipelineRerunFailedResponse, error)
	DeprecatedPipelineBatchCreate(ctx context.Context, in *DeprecatedPipelineBatchCreateRequest, opts ...grpc.CallOption) (*DeprecatedPipelineBatchCreateResponse, error)
	PipelineYmlGraph(ctx context.Context, in *PipelineYmlGraphRequest, opts ...grpc.CallOption) (*PipelineYmlGraphResponse, error)
	// task
	PipelineTaskDetail(ctx context.Context, in *PipelineTaskDetailRequest, opts ...grpc.CallOption) (*PipelineTaskDetailResponse, error)
	PipelineTaskGetBootstrapInfo(ctx context.Context, in *PipelineTaskGetBootstrapInfoRequest, opts ...grpc.CallOption) (*PipelineTaskGetBootstrapInfoResponse, error)
	PipelineCallback(ctx context.Context, in *PipelineCallbackRequest, opts ...grpc.CallOption) (*PipelineCallbackResponse, error)
	QueryPipelineSnippet(ctx context.Context, in *PipelineSnippetQueryRequest, opts ...grpc.CallOption) (*PipelineSnippetQueryRequest, error)
}

type baseServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewBaseServiceClient(cc grpc1.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) PipelineCreate(ctx context.Context, in *PipelineCreateRequest, opts ...grpc.CallOption) (*PipelineCreateResponse, error) {
	out := new(PipelineCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelinePaging(ctx context.Context, in *PipelinePagingRequest, opts ...grpc.CallOption) (*PipelinePagingResponse, error) {
	out := new(PipelinePagingResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelinePaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineDetail(ctx context.Context, in *PipelineDetailRequest, opts ...grpc.CallOption) (*PipelineDetailResponse, error) {
	out := new(PipelineDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineOperate(ctx context.Context, in *PipelineOperateRequest, opts ...grpc.CallOption) (*PipelineOperateResponse, error) {
	out := new(PipelineOperateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineOperate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineDelete(ctx context.Context, in *PipelineDeleteRequest, opts ...grpc.CallOption) (*PipelineDeleteResponse, error) {
	out := new(PipelineDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineRun(ctx context.Context, in *PipelineRunRequest, opts ...grpc.CallOption) (*PipelineRunResponse, error) {
	out := new(PipelineRunResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineCancel(ctx context.Context, in *PipelineCancelRequest, opts ...grpc.CallOption) (*PipelineCancelResponse, error) {
	out := new(PipelineCancelResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineRerun(ctx context.Context, in *PipelineRerunRequest, opts ...grpc.CallOption) (*PipelineRerunResponse, error) {
	out := new(PipelineRerunResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineRerun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineRerunFailed(ctx context.Context, in *PipelineRerunFailedRequest, opts ...grpc.CallOption) (*PipelineRerunFailedResponse, error) {
	out := new(PipelineRerunFailedResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineRerunFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) DeprecatedPipelineBatchCreate(ctx context.Context, in *DeprecatedPipelineBatchCreateRequest, opts ...grpc.CallOption) (*DeprecatedPipelineBatchCreateResponse, error) {
	out := new(DeprecatedPipelineBatchCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/DeprecatedPipelineBatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineYmlGraph(ctx context.Context, in *PipelineYmlGraphRequest, opts ...grpc.CallOption) (*PipelineYmlGraphResponse, error) {
	out := new(PipelineYmlGraphResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineYmlGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineTaskDetail(ctx context.Context, in *PipelineTaskDetailRequest, opts ...grpc.CallOption) (*PipelineTaskDetailResponse, error) {
	out := new(PipelineTaskDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineTaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineTaskGetBootstrapInfo(ctx context.Context, in *PipelineTaskGetBootstrapInfoRequest, opts ...grpc.CallOption) (*PipelineTaskGetBootstrapInfoResponse, error) {
	out := new(PipelineTaskGetBootstrapInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineTaskGetBootstrapInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PipelineCallback(ctx context.Context, in *PipelineCallbackRequest, opts ...grpc.CallOption) (*PipelineCallbackResponse, error) {
	out := new(PipelineCallbackResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/PipelineCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) QueryPipelineSnippet(ctx context.Context, in *PipelineSnippetQueryRequest, opts ...grpc.CallOption) (*PipelineSnippetQueryRequest, error) {
	out := new(PipelineSnippetQueryRequest)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.base.BaseService/QueryPipelineSnippet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServiceServer is the server API for BaseService service.
// All implementations should embed UnimplementedBaseServiceServer
// for forward compatibility
type BaseServiceServer interface {
	////////// pipelines
	PipelineCreate(context.Context, *PipelineCreateRequest) (*PipelineCreateResponse, error)
	PipelinePaging(context.Context, *PipelinePagingRequest) (*PipelinePagingResponse, error)
	PipelineDetail(context.Context, *PipelineDetailRequest) (*PipelineDetailResponse, error)
	PipelineOperate(context.Context, *PipelineOperateRequest) (*PipelineOperateResponse, error)
	PipelineDelete(context.Context, *PipelineDeleteRequest) (*PipelineDeleteResponse, error)
	PipelineRun(context.Context, *PipelineRunRequest) (*PipelineRunResponse, error)
	PipelineCancel(context.Context, *PipelineCancelRequest) (*PipelineCancelResponse, error)
	PipelineRerun(context.Context, *PipelineRerunRequest) (*PipelineRerunResponse, error)
	PipelineRerunFailed(context.Context, *PipelineRerunFailedRequest) (*PipelineRerunFailedResponse, error)
	DeprecatedPipelineBatchCreate(context.Context, *DeprecatedPipelineBatchCreateRequest) (*DeprecatedPipelineBatchCreateResponse, error)
	PipelineYmlGraph(context.Context, *PipelineYmlGraphRequest) (*PipelineYmlGraphResponse, error)
	// task
	PipelineTaskDetail(context.Context, *PipelineTaskDetailRequest) (*PipelineTaskDetailResponse, error)
	PipelineTaskGetBootstrapInfo(context.Context, *PipelineTaskGetBootstrapInfoRequest) (*PipelineTaskGetBootstrapInfoResponse, error)
	PipelineCallback(context.Context, *PipelineCallbackRequest) (*PipelineCallbackResponse, error)
	QueryPipelineSnippet(context.Context, *PipelineSnippetQueryRequest) (*PipelineSnippetQueryRequest, error)
}

// UnimplementedBaseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBaseServiceServer struct {
}

func (*UnimplementedBaseServiceServer) PipelineCreate(context.Context, *PipelineCreateRequest) (*PipelineCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCreate not implemented")
}
func (*UnimplementedBaseServiceServer) PipelinePaging(context.Context, *PipelinePagingRequest) (*PipelinePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelinePaging not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineDetail(context.Context, *PipelineDetailRequest) (*PipelineDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineDetail not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineOperate(context.Context, *PipelineOperateRequest) (*PipelineOperateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineOperate not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineDelete(context.Context, *PipelineDeleteRequest) (*PipelineDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineDelete not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineRun(context.Context, *PipelineRunRequest) (*PipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineRun not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineCancel(context.Context, *PipelineCancelRequest) (*PipelineCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCancel not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineRerun(context.Context, *PipelineRerunRequest) (*PipelineRerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineRerun not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineRerunFailed(context.Context, *PipelineRerunFailedRequest) (*PipelineRerunFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineRerunFailed not implemented")
}
func (*UnimplementedBaseServiceServer) DeprecatedPipelineBatchCreate(context.Context, *DeprecatedPipelineBatchCreateRequest) (*DeprecatedPipelineBatchCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprecatedPipelineBatchCreate not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineYmlGraph(context.Context, *PipelineYmlGraphRequest) (*PipelineYmlGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineYmlGraph not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineTaskDetail(context.Context, *PipelineTaskDetailRequest) (*PipelineTaskDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineTaskDetail not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineTaskGetBootstrapInfo(context.Context, *PipelineTaskGetBootstrapInfoRequest) (*PipelineTaskGetBootstrapInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineTaskGetBootstrapInfo not implemented")
}
func (*UnimplementedBaseServiceServer) PipelineCallback(context.Context, *PipelineCallbackRequest) (*PipelineCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineCallback not implemented")
}
func (*UnimplementedBaseServiceServer) QueryPipelineSnippet(context.Context, *PipelineSnippetQueryRequest) (*PipelineSnippetQueryRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPipelineSnippet not implemented")
}

func RegisterBaseServiceServer(s grpc1.ServiceRegistrar, srv BaseServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_BaseService_serviceDesc(srv, opts...), srv)
}

var _BaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.base.BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "base.proto",
}

func _get_BaseService_serviceDesc(srv BaseServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_BaseService_PipelineCreate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCreate(ctx, req.(*PipelineCreateRequest))
	}
	var _BaseService_PipelineCreate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineCreate_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineCreate", srv)
		_BaseService_PipelineCreate_Handler = h.Interceptor(_BaseService_PipelineCreate_Handler)
	}

	_BaseService_PipelinePaging_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelinePaging(ctx, req.(*PipelinePagingRequest))
	}
	var _BaseService_PipelinePaging_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelinePaging_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelinePaging", srv)
		_BaseService_PipelinePaging_Handler = h.Interceptor(_BaseService_PipelinePaging_Handler)
	}

	_BaseService_PipelineDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineDetail(ctx, req.(*PipelineDetailRequest))
	}
	var _BaseService_PipelineDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineDetail_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineDetail", srv)
		_BaseService_PipelineDetail_Handler = h.Interceptor(_BaseService_PipelineDetail_Handler)
	}

	_BaseService_PipelineOperate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineOperate(ctx, req.(*PipelineOperateRequest))
	}
	var _BaseService_PipelineOperate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineOperate_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineOperate", srv)
		_BaseService_PipelineOperate_Handler = h.Interceptor(_BaseService_PipelineOperate_Handler)
	}

	_BaseService_PipelineDelete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineDelete(ctx, req.(*PipelineDeleteRequest))
	}
	var _BaseService_PipelineDelete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineDelete_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineDelete", srv)
		_BaseService_PipelineDelete_Handler = h.Interceptor(_BaseService_PipelineDelete_Handler)
	}

	_BaseService_PipelineRun_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineRun(ctx, req.(*PipelineRunRequest))
	}
	var _BaseService_PipelineRun_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineRun_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineRun", srv)
		_BaseService_PipelineRun_Handler = h.Interceptor(_BaseService_PipelineRun_Handler)
	}

	_BaseService_PipelineCancel_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCancel(ctx, req.(*PipelineCancelRequest))
	}
	var _BaseService_PipelineCancel_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineCancel_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineCancel", srv)
		_BaseService_PipelineCancel_Handler = h.Interceptor(_BaseService_PipelineCancel_Handler)
	}

	_BaseService_PipelineRerun_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineRerun(ctx, req.(*PipelineRerunRequest))
	}
	var _BaseService_PipelineRerun_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineRerun_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineRerun", srv)
		_BaseService_PipelineRerun_Handler = h.Interceptor(_BaseService_PipelineRerun_Handler)
	}

	_BaseService_PipelineRerunFailed_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineRerunFailed(ctx, req.(*PipelineRerunFailedRequest))
	}
	var _BaseService_PipelineRerunFailed_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineRerunFailed_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineRerunFailed", srv)
		_BaseService_PipelineRerunFailed_Handler = h.Interceptor(_BaseService_PipelineRerunFailed_Handler)
	}

	_BaseService_DeprecatedPipelineBatchCreate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeprecatedPipelineBatchCreate(ctx, req.(*DeprecatedPipelineBatchCreateRequest))
	}
	var _BaseService_DeprecatedPipelineBatchCreate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_DeprecatedPipelineBatchCreate_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "DeprecatedPipelineBatchCreate", srv)
		_BaseService_DeprecatedPipelineBatchCreate_Handler = h.Interceptor(_BaseService_DeprecatedPipelineBatchCreate_Handler)
	}

	_BaseService_PipelineYmlGraph_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineYmlGraph(ctx, req.(*PipelineYmlGraphRequest))
	}
	var _BaseService_PipelineYmlGraph_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineYmlGraph_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineYmlGraph", srv)
		_BaseService_PipelineYmlGraph_Handler = h.Interceptor(_BaseService_PipelineYmlGraph_Handler)
	}

	_BaseService_PipelineTaskDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineTaskDetail(ctx, req.(*PipelineTaskDetailRequest))
	}
	var _BaseService_PipelineTaskDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineTaskDetail_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineTaskDetail", srv)
		_BaseService_PipelineTaskDetail_Handler = h.Interceptor(_BaseService_PipelineTaskDetail_Handler)
	}

	_BaseService_PipelineTaskGetBootstrapInfo_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineTaskGetBootstrapInfo(ctx, req.(*PipelineTaskGetBootstrapInfoRequest))
	}
	var _BaseService_PipelineTaskGetBootstrapInfo_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineTaskGetBootstrapInfo_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineTaskGetBootstrapInfo", srv)
		_BaseService_PipelineTaskGetBootstrapInfo_Handler = h.Interceptor(_BaseService_PipelineTaskGetBootstrapInfo_Handler)
	}

	_BaseService_PipelineCallback_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PipelineCallback(ctx, req.(*PipelineCallbackRequest))
	}
	var _BaseService_PipelineCallback_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_PipelineCallback_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "PipelineCallback", srv)
		_BaseService_PipelineCallback_Handler = h.Interceptor(_BaseService_PipelineCallback_Handler)
	}

	_BaseService_QueryPipelineSnippet_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryPipelineSnippet(ctx, req.(*PipelineSnippetQueryRequest))
	}
	var _BaseService_QueryPipelineSnippet_info transport.ServiceInfo
	if h.Interceptor != nil {
		_BaseService_QueryPipelineSnippet_info = transport.NewServiceInfo("erda.core.pipeline.base.BaseService", "QueryPipelineSnippet", srv)
		_BaseService_QueryPipelineSnippet_Handler = h.Interceptor(_BaseService_QueryPipelineSnippet_Handler)
	}

	var serviceDesc = _BaseService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "PipelineCreate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineCreate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineCreate_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineCreate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineCreate",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineCreate_Handler)
			},
		},
		{
			MethodName: "PipelinePaging",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelinePagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelinePaging(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelinePaging_info)
				}
				if interceptor == nil {
					return _BaseService_PipelinePaging_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelinePaging",
				}
				return interceptor(ctx, in, info, _BaseService_PipelinePaging_Handler)
			},
		},
		{
			MethodName: "PipelineDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineDetail_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineDetail",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineDetail_Handler)
			},
		},
		{
			MethodName: "PipelineOperate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineOperateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineOperate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineOperate_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineOperate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineOperate",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineOperate_Handler)
			},
		},
		{
			MethodName: "PipelineDelete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineDelete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineDelete_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineDelete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineDelete",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineDelete_Handler)
			},
		},
		{
			MethodName: "PipelineRun",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRunRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineRun(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineRun_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineRun_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineRun",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineRun_Handler)
			},
		},
		{
			MethodName: "PipelineCancel",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCancelRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineCancel(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineCancel_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineCancel_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineCancel",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineCancel_Handler)
			},
		},
		{
			MethodName: "PipelineRerun",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRerunRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineRerun(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineRerun_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineRerun_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineRerun",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineRerun_Handler)
			},
		},
		{
			MethodName: "PipelineRerunFailed",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineRerunFailedRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineRerunFailed(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineRerunFailed_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineRerunFailed_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineRerunFailed",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineRerunFailed_Handler)
			},
		},
		{
			MethodName: "DeprecatedPipelineBatchCreate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeprecatedPipelineBatchCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).DeprecatedPipelineBatchCreate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_DeprecatedPipelineBatchCreate_info)
				}
				if interceptor == nil {
					return _BaseService_DeprecatedPipelineBatchCreate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/DeprecatedPipelineBatchCreate",
				}
				return interceptor(ctx, in, info, _BaseService_DeprecatedPipelineBatchCreate_Handler)
			},
		},
		{
			MethodName: "PipelineYmlGraph",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineYmlGraphRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineYmlGraph(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineYmlGraph_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineYmlGraph_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineYmlGraph",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineYmlGraph_Handler)
			},
		},
		{
			MethodName: "PipelineTaskDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineTaskDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineTaskDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineTaskDetail_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineTaskDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineTaskDetail",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineTaskDetail_Handler)
			},
		},
		{
			MethodName: "PipelineTaskGetBootstrapInfo",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineTaskGetBootstrapInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineTaskGetBootstrapInfo(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineTaskGetBootstrapInfo_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineTaskGetBootstrapInfo_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineTaskGetBootstrapInfo",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineTaskGetBootstrapInfo_Handler)
			},
		},
		{
			MethodName: "PipelineCallback",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineCallbackRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).PipelineCallback(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_PipelineCallback_info)
				}
				if interceptor == nil {
					return _BaseService_PipelineCallback_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/PipelineCallback",
				}
				return interceptor(ctx, in, info, _BaseService_PipelineCallback_Handler)
			},
		},
		{
			MethodName: "QueryPipelineSnippet",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSnippetQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(BaseServiceServer).QueryPipelineSnippet(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _BaseService_QueryPipelineSnippet_info)
				}
				if interceptor == nil {
					return _BaseService_QueryPipelineSnippet_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.base.BaseService/QueryPipelineSnippet",
				}
				return interceptor(ctx, in, info, _BaseService_QueryPipelineSnippet_Handler)
			},
		},
	}
	return &serviceDesc
}
