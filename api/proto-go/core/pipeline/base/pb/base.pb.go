// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: base.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	pb "github.com/erda-project/erda-proto-go/common/pb"
	pb1 "github.com/erda-project/erda-proto-go/core/pipeline/cron/pb"
	pb2 "github.com/erda-project/erda-proto-go/core/pipeline/queue/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PipelineSnippetQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnippetConfigs []*SnippetDetailQuery `protobuf:"bytes,1,rep,name=snippetConfigs,proto3" json:"snippetConfigs,omitempty"`
}

func (x *PipelineSnippetQueryRequest) Reset() {
	*x = PipelineSnippetQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSnippetQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSnippetQueryRequest) ProtoMessage() {}

func (x *PipelineSnippetQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSnippetQueryRequest.ProtoReflect.Descriptor instead.
func (*PipelineSnippetQueryRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineSnippetQueryRequest) GetSnippetConfigs() []*SnippetDetailQuery {
	if x != nil {
		return x.SnippetConfigs
	}
	return nil
}

type PipelineSnippetQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*SnippetQueryDetail `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PipelineSnippetQueryResponse) Reset() {
	*x = PipelineSnippetQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSnippetQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSnippetQueryResponse) ProtoMessage() {}

func (x *PipelineSnippetQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSnippetQueryResponse.ProtoReflect.Descriptor instead.
func (*PipelineSnippetQueryResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineSnippetQueryResponse) GetData() map[string]*SnippetQueryDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type SnippetDetailQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Alias  string            `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *SnippetDetailQuery) Reset() {
	*x = SnippetDetailQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetDetailQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetDetailQuery) ProtoMessage() {}

func (x *SnippetDetailQuery) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetDetailQuery.ProtoReflect.Descriptor instead.
func (*SnippetDetailQuery) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

func (x *SnippetDetailQuery) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SnippetDetailQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnippetDetailQuery) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SnippetDetailQuery) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type SnippetQueryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params  []*PipelineParam `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Outputs []string         `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *SnippetQueryDetail) Reset() {
	*x = SnippetQueryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetQueryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetQueryDetail) ProtoMessage() {}

func (x *SnippetQueryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetQueryDetail.ProtoReflect.Descriptor instead.
func (*SnippetQueryDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

func (x *SnippetQueryDetail) GetParams() []*PipelineParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SnippetQueryDetail) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type PipelineInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base
	ID          uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Source      string            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	YmlName     string            `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	Namespace   string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterName string            `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status      string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Type        string            `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	TriggerMode string            `protobuf:"bytes,8,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	CronID      uint64            `protobuf:"varint,9,opt,name=cronID,proto3" json:"cronID,omitempty"`
	Labels      map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	YmlSource   string            `protobuf:"bytes,11,opt,name=ymlSource,proto3" json:"ymlSource,omitempty"`
	YmlContent  string            `protobuf:"bytes,12,opt,name=ymlContent,proto3" json:"ymlContent,omitempty"`
	Extra       *PipelineExtra    `protobuf:"bytes,13,opt,name=extra,proto3" json:"extra,omitempty"`
	// app related info
	OrgID           uint64           `protobuf:"varint,14,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName         string           `protobuf:"bytes,15,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID       uint64           `protobuf:"varint,16,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName     string           `protobuf:"bytes,17,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationID   uint64           `protobuf:"varint,18,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ApplicationName string           `protobuf:"bytes,19,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Branch          string           `protobuf:"bytes,20,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit          string           `protobuf:"bytes,21,opt,name=commit,proto3" json:"commit,omitempty"`
	CommitDetail    *pb.CommitDetail `protobuf:"bytes,22,opt,name=commitDetail,proto3" json:"commitDetail,omitempty"`
	// runtime info
	Progress    float64                `protobuf:"fixed64,23,opt,name=progress,proto3" json:"progress,omitempty"`
	CostTimeSec int64                  `protobuf:"varint,24,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
}

func (x *PipelineInstance) Reset() {
	*x = PipelineInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInstance) ProtoMessage() {}

func (x *PipelineInstance) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInstance.ProtoReflect.Descriptor instead.
func (*PipelineInstance) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineInstance) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineInstance) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineInstance) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PipelineInstance) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PipelineInstance) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PipelineInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineInstance) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineInstance) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineInstance) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

func (x *PipelineInstance) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineInstance) GetYmlSource() string {
	if x != nil {
		return x.YmlSource
	}
	return ""
}

func (x *PipelineInstance) GetYmlContent() string {
	if x != nil {
		return x.YmlContent
	}
	return ""
}

func (x *PipelineInstance) GetExtra() *PipelineExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PipelineInstance) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PipelineInstance) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *PipelineInstance) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PipelineInstance) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PipelineInstance) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *PipelineInstance) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PipelineInstance) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineInstance) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PipelineInstance) GetCommitDetail() *pb.CommitDetail {
	if x != nil {
		return x.CommitDetail
	}
	return nil
}

func (x *PipelineInstance) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PipelineInstance) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineInstance) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineInstance) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineInstance) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineInstance) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

type PipelineExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceWorkspace          string                 `protobuf:"bytes,1,opt,name=diceWorkspace,proto3" json:"diceWorkspace,omitempty"`
	SubmitUser             *PipelineUser          `protobuf:"bytes,2,opt,name=submitUser,proto3" json:"submitUser,omitempty"`
	RunUser                *PipelineUser          `protobuf:"bytes,3,opt,name=runUser,proto3" json:"runUser,omitempty"`
	CancelUser             *PipelineUser          `protobuf:"bytes,4,opt,name=cancelUser,proto3" json:"cancelUser,omitempty"`
	CronExpr               string                 `protobuf:"bytes,5,opt,name=cronExpr,proto3" json:"cronExpr,omitempty"`
	CronTriggerTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=cronTriggerTime,proto3" json:"cronTriggerTime,omitempty"`
	ShowMessage            *ShowMessage           `protobuf:"bytes,7,opt,name=show_message,json=showMessage,proto3" json:"show_message,omitempty"`
	ConfigManageNamespaces []string               `protobuf:"bytes,8,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	IsAutoRun              bool                   `protobuf:"varint,9,opt,name=isAutoRun,proto3" json:"isAutoRun,omitempty"`
	CallbackURLs           []string               `protobuf:"bytes,10,rep,name=callbackURLs,proto3" json:"callbackURLs,omitempty"`
}

func (x *PipelineExtra) Reset() {
	*x = PipelineExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineExtra) ProtoMessage() {}

func (x *PipelineExtra) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineExtra.ProtoReflect.Descriptor instead.
func (*PipelineExtra) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineExtra) GetDiceWorkspace() string {
	if x != nil {
		return x.DiceWorkspace
	}
	return ""
}

func (x *PipelineExtra) GetSubmitUser() *PipelineUser {
	if x != nil {
		return x.SubmitUser
	}
	return nil
}

func (x *PipelineExtra) GetRunUser() *PipelineUser {
	if x != nil {
		return x.RunUser
	}
	return nil
}

func (x *PipelineExtra) GetCancelUser() *PipelineUser {
	if x != nil {
		return x.CancelUser
	}
	return nil
}

func (x *PipelineExtra) GetCronExpr() string {
	if x != nil {
		return x.CronExpr
	}
	return ""
}

func (x *PipelineExtra) GetCronTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CronTriggerTime
	}
	return nil
}

func (x *PipelineExtra) GetShowMessage() *ShowMessage {
	if x != nil {
		return x.ShowMessage
	}
	return nil
}

func (x *PipelineExtra) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *PipelineExtra) GetIsAutoRun() bool {
	if x != nil {
		return x.IsAutoRun
	}
	return false
}

func (x *PipelineExtra) GetCallbackURLs() []string {
	if x != nil {
		return x.CallbackURLs
	}
	return nil
}

type PipelineInstanceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO embed
	// base
	ID          uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Source      string            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	YmlName     string            `protobuf:"bytes,3,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	Namespace   string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterName string            `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status      string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Type        string            `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	TriggerMode string            `protobuf:"bytes,8,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	CronID      uint64            `protobuf:"varint,9,opt,name=cronID,proto3" json:"cronID,omitempty"`
	Labels      map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	YmlSource   string            `protobuf:"bytes,11,opt,name=ymlSource,proto3" json:"ymlSource,omitempty"`
	YmlContent  string            `protobuf:"bytes,12,opt,name=ymlContent,proto3" json:"ymlContent,omitempty"`
	Extra       *PipelineExtra    `protobuf:"bytes,13,opt,name=extra,proto3" json:"extra,omitempty"`
	// app related info
	OrgID           uint64           `protobuf:"varint,14,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName         string           `protobuf:"bytes,15,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID       uint64           `protobuf:"varint,16,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName     string           `protobuf:"bytes,17,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationID   uint64           `protobuf:"varint,18,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ApplicationName string           `protobuf:"bytes,19,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Branch          string           `protobuf:"bytes,20,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit          string           `protobuf:"bytes,21,opt,name=commit,proto3" json:"commit,omitempty"`
	CommitDetail    *pb.CommitDetail `protobuf:"bytes,22,opt,name=commitDetail,proto3" json:"commitDetail,omitempty"`
	// runtime info
	Progress    float64                `protobuf:"fixed64,23,opt,name=progress,proto3" json:"progress,omitempty"`
	CostTimeSec int64                  `protobuf:"varint,24,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	// additional fields
	PipelineStages            []*PipelineStageDetail               `protobuf:"bytes,29,rep,name=pipelineStages,proto3" json:"pipelineStages,omitempty"`
	PipelineSnippetStages     []*PipelineStageDetail               `protobuf:"bytes,30,rep,name=pipelineSnippetStages,proto3" json:"pipelineSnippetStages,omitempty"`
	PipelineCron              *pb1.Cron                            `protobuf:"bytes,31,opt,name=pipelineCron,proto3" json:"pipelineCron,omitempty"`
	PipelineButton            *PipelineButton                      `protobuf:"bytes,32,opt,name=pipelineButton,proto3" json:"pipelineButton,omitempty"`
	PipelineTaskActionDetails map[string]*PipelineTaskActionDetail `protobuf:"bytes,33,rep,name=pipelineTaskActionDetails,proto3" json:"pipelineTaskActionDetails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RunParams                 []*PipelineParamWithValue            `protobuf:"bytes,34,rep,name=runParams,proto3" json:"runParams,omitempty"`
	Events                    []*PipelineEvent                     `protobuf:"bytes,35,rep,name=events,proto3" json:"events,omitempty"`
	NeedApproval              bool                                 `protobuf:"varint,36,opt,name=needApproval,proto3" json:"needApproval,omitempty"`
}

func (x *PipelineInstanceDetail) Reset() {
	*x = PipelineInstanceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInstanceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInstanceDetail) ProtoMessage() {}

func (x *PipelineInstanceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInstanceDetail.ProtoReflect.Descriptor instead.
func (*PipelineInstanceDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{6}
}

func (x *PipelineInstanceDetail) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineInstanceDetail) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PipelineInstanceDetail) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PipelineInstanceDetail) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PipelineInstanceDetail) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PipelineInstanceDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineInstanceDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineInstanceDetail) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineInstanceDetail) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

func (x *PipelineInstanceDetail) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineInstanceDetail) GetYmlSource() string {
	if x != nil {
		return x.YmlSource
	}
	return ""
}

func (x *PipelineInstanceDetail) GetYmlContent() string {
	if x != nil {
		return x.YmlContent
	}
	return ""
}

func (x *PipelineInstanceDetail) GetExtra() *PipelineExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PipelineInstanceDetail) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PipelineInstanceDetail) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *PipelineInstanceDetail) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PipelineInstanceDetail) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PipelineInstanceDetail) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *PipelineInstanceDetail) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PipelineInstanceDetail) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineInstanceDetail) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PipelineInstanceDetail) GetCommitDetail() *pb.CommitDetail {
	if x != nil {
		return x.CommitDetail
	}
	return nil
}

func (x *PipelineInstanceDetail) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PipelineInstanceDetail) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineInstanceDetail) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineInstanceDetail) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineInstanceDetail) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineInstanceDetail) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineInstanceDetail) GetPipelineStages() []*PipelineStageDetail {
	if x != nil {
		return x.PipelineStages
	}
	return nil
}

func (x *PipelineInstanceDetail) GetPipelineSnippetStages() []*PipelineStageDetail {
	if x != nil {
		return x.PipelineSnippetStages
	}
	return nil
}

func (x *PipelineInstanceDetail) GetPipelineCron() *pb1.Cron {
	if x != nil {
		return x.PipelineCron
	}
	return nil
}

func (x *PipelineInstanceDetail) GetPipelineButton() *PipelineButton {
	if x != nil {
		return x.PipelineButton
	}
	return nil
}

func (x *PipelineInstanceDetail) GetPipelineTaskActionDetails() map[string]*PipelineTaskActionDetail {
	if x != nil {
		return x.PipelineTaskActionDetails
	}
	return nil
}

func (x *PipelineInstanceDetail) GetRunParams() []*PipelineParamWithValue {
	if x != nil {
		return x.RunParams
	}
	return nil
}

func (x *PipelineInstanceDetail) GetEvents() []*PipelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PipelineInstanceDetail) GetNeedApproval() bool {
	if x != nil {
		return x.NeedApproval
	}
	return false
}

type PipelineGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGC *PipelineResourceGC `protobuf:"bytes,1,opt,name=resourceGC,proto3" json:"resourceGC,omitempty"`
	DatabaseGC *PipelineDatabaseGC `protobuf:"bytes,2,opt,name=databaseGC,proto3" json:"databaseGC,omitempty"`
}

func (x *PipelineGC) Reset() {
	*x = PipelineGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineGC) ProtoMessage() {}

func (x *PipelineGC) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineGC.ProtoReflect.Descriptor instead.
func (*PipelineGC) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{7}
}

func (x *PipelineGC) GetResourceGC() *PipelineResourceGC {
	if x != nil {
		return x.ResourceGC
	}
	return nil
}

func (x *PipelineGC) GetDatabaseGC() *PipelineDatabaseGC {
	if x != nil {
		return x.DatabaseGC
	}
	return nil
}

// PipelineResourceGC releases occupied resource by pipeline, such as:
// - k8s pv (netdata volume)
// - k8s pod
// - k8s namespace
type PipelineResourceGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SuccessTTLSecond means when to release resource if pipeline status is Success.
	// Normally success ttl should be small even to zero, because everything is ok and don't need to rerun.
	// Default is 1800s(30min)
	SuccessTTLSecond uint64 `protobuf:"varint,1,opt,name=successTTLSecond,proto3" json:"successTTLSecond,omitempty"`
	// FailedTTLSecond means when to release resource if pipeline status is Failed.
	// Normally failed ttl should larger than SuccessTTLSecond, because you may want to rerun this failed pipeline,
	// which need these resource.
	// Default is 1800s.
	FailedTTLSecond uint64 `protobuf:"varint,2,opt,name=failedTTLSecond,proto3" json:"failedTTLSecond,omitempty"`
}

func (x *PipelineResourceGC) Reset() {
	*x = PipelineResourceGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineResourceGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineResourceGC) ProtoMessage() {}

func (x *PipelineResourceGC) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineResourceGC.ProtoReflect.Descriptor instead.
func (*PipelineResourceGC) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{8}
}

func (x *PipelineResourceGC) GetSuccessTTLSecond() uint64 {
	if x != nil {
		return x.SuccessTTLSecond
	}
	return 0
}

func (x *PipelineResourceGC) GetFailedTTLSecond() uint64 {
	if x != nil {
		return x.FailedTTLSecond
	}
	return 0
}

// PipelineDatabaseGC represents database record gc strategy.
type PipelineDatabaseGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzed *PipelineDBGCItem `protobuf:"bytes,1,opt,name=analyzed,proto3" json:"analyzed,omitempty"`
	Finished *PipelineDBGCItem `protobuf:"bytes,2,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *PipelineDatabaseGC) Reset() {
	*x = PipelineDatabaseGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDatabaseGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDatabaseGC) ProtoMessage() {}

func (x *PipelineDatabaseGC) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDatabaseGC.ProtoReflect.Descriptor instead.
func (*PipelineDatabaseGC) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{9}
}

func (x *PipelineDatabaseGC) GetAnalyzed() *PipelineDBGCItem {
	if x != nil {
		return x.Analyzed
	}
	return nil
}

func (x *PipelineDatabaseGC) GetFinished() *PipelineDBGCItem {
	if x != nil {
		return x.Finished
	}
	return nil
}

type PipelineDBGCItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NeedArchive means whether this record need be archived:
	// If true, archive record to specific archive table;
	// If false, delete record and cannot be found anymore.
	NeedArchive bool `protobuf:"varint,1,opt,name=needArchive,proto3" json:"needArchive,omitempty"`
	// TTLSecond means when to do archive or delete operation.
	TTLSecond uint64 `protobuf:"varint,2,opt,name=TTLSecond,json=ttlSecond,proto3" json:"TTLSecond,omitempty"`
}

func (x *PipelineDBGCItem) Reset() {
	*x = PipelineDBGCItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDBGCItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDBGCItem) ProtoMessage() {}

func (x *PipelineDBGCItem) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDBGCItem.ProtoReflect.Descriptor instead.
func (*PipelineDBGCItem) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{10}
}

func (x *PipelineDBGCItem) GetNeedArchive() bool {
	if x != nil {
		return x.NeedArchive
	}
	return false
}

func (x *PipelineDBGCItem) GetTTLSecond() uint64 {
	if x != nil {
		return x.TTLSecond
	}
	return 0
}

type PipelineRunParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineRunParam) Reset() {
	*x = PipelineRunParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunParam) ProtoMessage() {}

func (x *PipelineRunParam) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunParam.ProtoReflect.Descriptor instead.
func (*PipelineRunParam) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{11}
}

func (x *PipelineRunParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRunParam) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PipelineRunParamWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value     *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`         // parsed from pipeline.yml
	TrueValue *structpb.Value `protobuf:"bytes,3,opt,name=trueValue,proto3" json:"trueValue,omitempty"` // true value: placeholders will be replaced
}

func (x *PipelineRunParamWithValue) Reset() {
	*x = PipelineRunParamWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunParamWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunParamWithValue) ProtoMessage() {}

func (x *PipelineRunParamWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunParamWithValue.ProtoReflect.Descriptor instead.
func (*PipelineRunParamWithValue) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12}
}

func (x *PipelineRunParamWithValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRunParamWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PipelineRunParamWithValue) GetTrueValue() *structpb.Value {
	if x != nil {
		return x.TrueValue
	}
	return nil
}

type PipelineUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *PipelineUser) Reset() {
	*x = PipelineUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUser) ProtoMessage() {}

func (x *PipelineUser) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUser.ProtoReflect.Descriptor instead.
func (*PipelineUser) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{13}
}

func (x *PipelineUser) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PipelineUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type ShowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg      string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Stacks   []string `protobuf:"bytes,2,rep,name=stacks,proto3" json:"stacks,omitempty"`
	AbortRun bool     `protobuf:"varint,3,opt,name=abortRun,proto3" json:"abortRun,omitempty"` // if false, canManualRun should be false
}

func (x *ShowMessage) Reset() {
	*x = ShowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowMessage) ProtoMessage() {}

func (x *ShowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowMessage.ProtoReflect.Descriptor instead.
func (*ShowMessage) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{14}
}

func (x *ShowMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ShowMessage) GetStacks() []string {
	if x != nil {
		return x.Stacks
	}
	return nil
}

func (x *ShowMessage) GetAbortRun() bool {
	if x != nil {
		return x.AbortRun
	}
	return false
}

type StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableNFS   bool `protobuf:"varint,1,opt,name=enableNFS,proto3" json:"enableNFS,omitempty"`
	EnableLocal bool `protobuf:"varint,2,opt,name=enableLocal,proto3" json:"enableLocal,omitempty"`
}

func (x *StorageConfig) Reset() {
	*x = StorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfig) ProtoMessage() {}

func (x *StorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfig.ProtoReflect.Descriptor instead.
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{15}
}

func (x *StorageConfig) GetEnableNFS() bool {
	if x != nil {
		return x.EnableNFS
	}
	return false
}

func (x *StorageConfig) GetEnableLocal() bool {
	if x != nil {
		return x.EnableLocal
	}
	return false
}

type PipelineButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanManualRun   bool `protobuf:"varint,1,opt,name=canManualRun,proto3" json:"canManualRun,omitempty"`
	CanCancel      bool `protobuf:"varint,2,opt,name=canCancel,proto3" json:"canCancel,omitempty"`
	CanForceCancel bool `protobuf:"varint,3,opt,name=canForceCancel,proto3" json:"canForceCancel,omitempty"`
	CanRerun       bool `protobuf:"varint,4,opt,name=canRerun,proto3" json:"canRerun,omitempty"`
	CanRerunFailed bool `protobuf:"varint,5,opt,name=canRerunFailed,proto3" json:"canRerunFailed,omitempty"`
	CanStartCron   bool `protobuf:"varint,6,opt,name=canStartCron,proto3" json:"canStartCron,omitempty"`
	CanStopCron    bool `protobuf:"varint,7,opt,name=canStopCron,proto3" json:"canStopCron,omitempty"`
	CanPause       bool `protobuf:"varint,8,opt,name=canPause,proto3" json:"canPause,omitempty"`
	CanUnpause     bool `protobuf:"varint,9,opt,name=canUnpause,proto3" json:"canUnpause,omitempty"`
	CanDelete      bool `protobuf:"varint,10,opt,name=canDelete,proto3" json:"canDelete,omitempty"`
}

func (x *PipelineButton) Reset() {
	*x = PipelineButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineButton) ProtoMessage() {}

func (x *PipelineButton) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineButton.ProtoReflect.Descriptor instead.
func (*PipelineButton) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{16}
}

func (x *PipelineButton) GetCanManualRun() bool {
	if x != nil {
		return x.CanManualRun
	}
	return false
}

func (x *PipelineButton) GetCanCancel() bool {
	if x != nil {
		return x.CanCancel
	}
	return false
}

func (x *PipelineButton) GetCanForceCancel() bool {
	if x != nil {
		return x.CanForceCancel
	}
	return false
}

func (x *PipelineButton) GetCanRerun() bool {
	if x != nil {
		return x.CanRerun
	}
	return false
}

func (x *PipelineButton) GetCanRerunFailed() bool {
	if x != nil {
		return x.CanRerunFailed
	}
	return false
}

func (x *PipelineButton) GetCanStartCron() bool {
	if x != nil {
		return x.CanStartCron
	}
	return false
}

func (x *PipelineButton) GetCanStopCron() bool {
	if x != nil {
		return x.CanStopCron
	}
	return false
}

func (x *PipelineButton) GetCanPause() bool {
	if x != nil {
		return x.CanPause
	}
	return false
}

func (x *PipelineButton) GetCanUnpause() bool {
	if x != nil {
		return x.CanUnpause
	}
	return false
}

func (x *PipelineButton) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

type PipelineExecuteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID  uint64                 `protobuf:"varint,1,opt,name=PipelineID,proto3" json:"PipelineID,omitempty"`
	Status      string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TriggerMode string                 `protobuf:"bytes,3,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
}

func (x *PipelineExecuteRecord) Reset() {
	*x = PipelineExecuteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineExecuteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineExecuteRecord) ProtoMessage() {}

func (x *PipelineExecuteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineExecuteRecord.ProtoReflect.Descriptor instead.
func (*PipelineExecuteRecord) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{17}
}

func (x *PipelineExecuteRecord) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineExecuteRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineExecuteRecord) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PipelineExecuteRecord) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineExecuteRecord) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineExecuteRecord) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

///////////// event
// PipelineEvent is k8s-event-like stream event.
type PipelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional; this should be a short, machine understandable string that gives the reason
	// for this event being generated. For example, if the event is reporting that a container
	// can't start, the Reason might be "ImageNotFound".
	// +optional
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// Optional. A human-readable description of the status of this operation.
	// +optional
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Optional. The component reporting this event. Should be a short machine understandable string.
	// +optional
	Source *PipelineEventSource `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	// +optional
	FirstTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=firstTimestamp,proto3" json:"firstTimestamp,omitempty"`
	// The time at which the most recent occurrence of this event was recorded.
	// +optional
	LastTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastTimestamp,proto3" json:"lastTimestamp,omitempty"`
	// The number of times this event has occurred.
	// +optional
	Count int32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// Type of this event (Normal, Warning), new types could be added in the future.
	// +optional
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PipelineEvent) Reset() {
	*x = PipelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEvent) ProtoMessage() {}

func (x *PipelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEvent.ProtoReflect.Descriptor instead.
func (*PipelineEvent) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{18}
}

func (x *PipelineEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PipelineEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PipelineEvent) GetSource() *PipelineEventSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PipelineEvent) GetFirstTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTimestamp
	}
	return nil
}

func (x *PipelineEvent) GetLastTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTimestamp
	}
	return nil
}

func (x *PipelineEvent) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PipelineEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// PipelineEventSource represents the source from which an event is generated
type PipelineEventSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component from which the event is generated.
	// +optional
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Node name on which the event is generated.
	// +optional
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *PipelineEventSource) Reset() {
	*x = PipelineEventSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineEventSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEventSource) ProtoMessage() {}

func (x *PipelineEventSource) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEventSource.ProtoReflect.Descriptor instead.
func (*PipelineEventSource) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{19}
}

func (x *PipelineEventSource) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PipelineEventSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

////////////// metadata
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string          `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Ctx  *structpb.Value `protobuf:"bytes,3,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{20}
}

func (x *ErrorResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ErrorResponse) GetCtx() *structpb.Value {
	if x != nil {
		return x.Ctx
	}
	return nil
}

///////////// pipelineyaml
type PipelineOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Ref  string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *PipelineOutput) Reset() {
	*x = PipelineOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOutput) ProtoMessage() {}

func (x *PipelineOutput) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOutput.ProtoReflect.Descriptor instead.
func (*PipelineOutput) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{21}
}

func (x *PipelineOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineOutput) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineOutput) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type PipelineOutputWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc  string          `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Ref   string          `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Value *structpb.Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineOutputWithValue) Reset() {
	*x = PipelineOutputWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOutputWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOutputWithValue) ProtoMessage() {}

func (x *PipelineOutputWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOutputWithValue.ProtoReflect.Descriptor instead.
func (*PipelineOutputWithValue) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{22}
}

func (x *PipelineOutputWithValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineOutputWithValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineOutputWithValue) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *PipelineOutputWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PipelineParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool            `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Default  *structpb.Value `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Desc     string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PipelineParam) Reset() {
	*x = PipelineParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineParam) ProtoMessage() {}

func (x *PipelineParam) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineParam.ProtoReflect.Descriptor instead.
func (*PipelineParam) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{23}
}

func (x *PipelineParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineParam) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *PipelineParam) GetDefault() *structpb.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *PipelineParam) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PipelineParamWithValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required bool            `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Default  *structpb.Value `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Desc     string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Type     string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Value    *structpb.Value `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineParamWithValue) Reset() {
	*x = PipelineParamWithValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineParamWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineParamWithValue) ProtoMessage() {}

func (x *PipelineParamWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineParamWithValue.ProtoReflect.Descriptor instead.
func (*PipelineParamWithValue) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{24}
}

func (x *PipelineParamWithValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineParamWithValue) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *PipelineParamWithValue) GetDefault() *structpb.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *PipelineParamWithValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineParamWithValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineParamWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PipelineYml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// used to generated pipeline yaml
	Version         string               `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Envs            map[string]string    `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cron            string               `protobuf:"bytes,3,opt,name=cron,proto3" json:"cron,omitempty"`
	CronCompensator *CronCompensator     `protobuf:"bytes,4,opt,name=cronCompensator,proto3" json:"cronCompensator,omitempty"`
	Stages          *structpb.ListValue  `protobuf:"bytes,5,opt,name=stages,proto3" json:"stages,omitempty"` // [][]*PipelineYmlAction
	FlatActions     []*PipelineYmlAction `protobuf:"bytes,6,rep,name=flatActions,proto3" json:"flatActions,omitempty"`
	Params          []*PipelineParam     `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty"`
	Outputs         []*PipelineOutput    `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// 1.0 升级相关
	NeedUpgrade bool `protobuf:"varint,9,opt,name=needUpgrade,proto3" json:"needUpgrade,omitempty"` // pipeline yml 是否需要升级
	// YmlContent:
	// 1) 当 needUpgrade 为 true  时，ymlContent 返回升级后的 yml
	// 2) 当 needUpgrade 为 false 时：
	//    1) 用户传入的为 YAML(apistructs.PipelineYml) 时，ymlContent 返回 YAML(spec.PipelineYml)
	//    2) 用户传入的为 YAML(spec.PipelineYml) 时，返回优化后的 YAML(spec.PipelineYml)
	YmlContent string         `protobuf:"bytes,10,opt,name=ymlContent,proto3" json:"ymlContent,omitempty"`
	On         *TriggerConfig `protobuf:"bytes,11,opt,name=on,proto3" json:"on,omitempty"`
	// describe the use of network hooks in the pipeline
	Lifecycle []*NetworkHookInfo `protobuf:"bytes,12,rep,name=lifecycle,proto3" json:"lifecycle,omitempty"`
}

func (x *PipelineYml) Reset() {
	*x = PipelineYml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineYml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineYml) ProtoMessage() {}

func (x *PipelineYml) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineYml.ProtoReflect.Descriptor instead.
func (*PipelineYml) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{25}
}

func (x *PipelineYml) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PipelineYml) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PipelineYml) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *PipelineYml) GetCronCompensator() *CronCompensator {
	if x != nil {
		return x.CronCompensator
	}
	return nil
}

func (x *PipelineYml) GetStages() *structpb.ListValue {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *PipelineYml) GetFlatActions() []*PipelineYmlAction {
	if x != nil {
		return x.FlatActions
	}
	return nil
}

func (x *PipelineYml) GetParams() []*PipelineParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PipelineYml) GetOutputs() []*PipelineOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *PipelineYml) GetNeedUpgrade() bool {
	if x != nil {
		return x.NeedUpgrade
	}
	return false
}

func (x *PipelineYml) GetYmlContent() string {
	if x != nil {
		return x.YmlContent
	}
	return ""
}

func (x *PipelineYml) GetOn() *TriggerConfig {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *PipelineYml) GetLifecycle() []*NetworkHookInfo {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

type TriggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Push  *PushTrigger  `protobuf:"bytes,1,opt,name=push,proto3" json:"push,omitempty"`
	Merge *MergeTrigger `protobuf:"bytes,2,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (x *TriggerConfig) Reset() {
	*x = TriggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerConfig) ProtoMessage() {}

func (x *TriggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerConfig.ProtoReflect.Descriptor instead.
func (*TriggerConfig) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{26}
}

func (x *TriggerConfig) GetPush() *PushTrigger {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *TriggerConfig) GetMerge() *MergeTrigger {
	if x != nil {
		return x.Merge
	}
	return nil
}

type PushTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PushTrigger) Reset() {
	*x = PushTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTrigger) ProtoMessage() {}

func (x *PushTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTrigger.ProtoReflect.Descriptor instead.
func (*PushTrigger) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{27}
}

func (x *PushTrigger) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *PushTrigger) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type MergeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *MergeTrigger) Reset() {
	*x = MergeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTrigger) ProtoMessage() {}

func (x *MergeTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTrigger.ProtoReflect.Descriptor instead.
func (*MergeTrigger) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{28}
}

func (x *MergeTrigger) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

type NetworkHookInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hook   string                     `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`                                                                                             // hook type
	Client string                     `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`                                                                                         // use network client
	Labels map[string]*structpb.Value `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // additional information
}

func (x *NetworkHookInfo) Reset() {
	*x = NetworkHookInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHookInfo) ProtoMessage() {}

func (x *NetworkHookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHookInfo.ProtoReflect.Descriptor instead.
func (*NetworkHookInfo) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{29}
}

func (x *NetworkHookInfo) GetHook() string {
	if x != nil {
		return x.Hook
	}
	return ""
}

func (x *NetworkHookInfo) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *NetworkHookInfo) GetLabels() map[string]*structpb.Value {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PipelineYmlAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias         string                     `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Type          string                     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description   string                     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version       string                     `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Params        map[string]*structpb.Value `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image         string                     `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	Commands      []string                   `protobuf:"bytes,7,rep,name=commands,proto3" json:"commands,omitempty"`
	Timeout       int64                      `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Namespaces    []string                   `protobuf:"bytes,9,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Resources     *Resources                 `protobuf:"bytes,10,opt,name=resources,proto3" json:"resources,omitempty"`
	DisplayName   string                     `protobuf:"bytes,11,opt,name=displayName,proto3" json:"displayName,omitempty"`
	LogoUrl       string                     `protobuf:"bytes,12,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	Caches        []*ActionCache             `protobuf:"bytes,13,rep,name=caches,proto3" json:"caches,omitempty"`
	SnippetConfig *SnippetConfig             `protobuf:"bytes,14,opt,name=snippetConfig,proto3" json:"snippetConfig,omitempty"`
	If            string                     `protobuf:"bytes,15,opt,name=if,proto3" json:"if,omitempty"`
	Loop          *TaskLoop                  `protobuf:"bytes,16,opt,name=loop,proto3" json:"loop,omitempty"`
	SnippetStages *SnippetStages             `protobuf:"bytes,17,opt,name=snippetStages,proto3" json:"snippetStages,omitempty"`
}

func (x *PipelineYmlAction) Reset() {
	*x = PipelineYmlAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineYmlAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineYmlAction) ProtoMessage() {}

func (x *PipelineYmlAction) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineYmlAction.ProtoReflect.Descriptor instead.
func (*PipelineYmlAction) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{30}
}

func (x *PipelineYmlAction) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PipelineYmlAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineYmlAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineYmlAction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PipelineYmlAction) GetParams() map[string]*structpb.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PipelineYmlAction) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PipelineYmlAction) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *PipelineYmlAction) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PipelineYmlAction) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *PipelineYmlAction) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PipelineYmlAction) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PipelineYmlAction) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PipelineYmlAction) GetCaches() []*ActionCache {
	if x != nil {
		return x.Caches
	}
	return nil
}

func (x *PipelineYmlAction) GetSnippetConfig() *SnippetConfig {
	if x != nil {
		return x.SnippetConfig
	}
	return nil
}

func (x *PipelineYmlAction) GetIf() string {
	if x != nil {
		return x.If
	}
	return ""
}

func (x *PipelineYmlAction) GetLoop() *TaskLoop {
	if x != nil {
		return x.Loop
	}
	return nil
}

func (x *PipelineYmlAction) GetSnippetStages() *SnippetStages {
	if x != nil {
		return x.SnippetStages
	}
	return nil
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu  float64 `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem  float64 `protobuf:"fixed64,2,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk float64 `protobuf:"fixed64,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{31}
}

func (x *Resources) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Resources) GetMem() float64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Resources) GetDisk() float64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

type CronCompensator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	LatestFirst          bool `protobuf:"varint,2,opt,name=latestFirst,proto3" json:"latestFirst,omitempty"`
	StopIfLatterExecuted bool `protobuf:"varint,3,opt,name=stopIfLatterExecuted,proto3" json:"stopIfLatterExecuted,omitempty"`
}

func (x *CronCompensator) Reset() {
	*x = CronCompensator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCompensator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCompensator) ProtoMessage() {}

func (x *CronCompensator) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCompensator.ProtoReflect.Descriptor instead.
func (*CronCompensator) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{32}
}

func (x *CronCompensator) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CronCompensator) GetLatestFirst() bool {
	if x != nil {
		return x.LatestFirst
	}
	return false
}

func (x *CronCompensator) GetStopIfLatterExecuted() bool {
	if x != nil {
		return x.StopIfLatterExecuted
	}
	return false
}

type ActionCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 缓存生成的 key 或者是用户指定的 key
	// 用户指定的话 需要 {{basePath}}/路径/{{endPath}} 来自定义 key
	// 用户没有指定 key 有一定的生成规则, 具体生成规则看 prepare.go 的 setActionCacheStorageAndBinds 方法
	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // 指定那个目录被缓存, 只能是由 / 开始的绝对路径
}

func (x *ActionCache) Reset() {
	*x = ActionCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCache) ProtoMessage() {}

func (x *ActionCache) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCache.ProtoReflect.Descriptor instead.
func (*ActionCache) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{33}
}

func (x *ActionCache) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ActionCache) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TaskLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Break    string            `protobuf:"bytes,1,opt,name=break,proto3" json:"break,omitempty"`
	Strategy *TaskLoopStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *TaskLoop) Reset() {
	*x = TaskLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLoop) ProtoMessage() {}

func (x *TaskLoop) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLoop.ProtoReflect.Descriptor instead.
func (*TaskLoop) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{34}
}

func (x *TaskLoop) GetBreak() string {
	if x != nil {
		return x.Break
	}
	return ""
}

func (x *TaskLoop) GetStrategy() *TaskLoopStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type TaskLoopStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTimes        int64   `protobuf:"varint,1,opt,name=maxTimes,proto3" json:"maxTimes,omitempty"`               // 最大重试次数，-1 表示不限制
	DeclineRatio    float64 `protobuf:"fixed64,2,opt,name=declineRatio,proto3" json:"declineRatio,omitempty"`      // 重试衰退速率  2s - 4s - 8s - 16s
	DeclineLimitSec int64   `protobuf:"varint,3,opt,name=declineLimitSec,proto3" json:"declineLimitSec,omitempty"` // 重试衰退最大值  2s - 4s - 8s - 8s - 8s
	IntervalSec     uint64  `protobuf:"varint,4,opt,name=intervalSec,proto3" json:"intervalSec,omitempty"`         // 重试间隔时间 2s - 2s - 2s - 2s
}

func (x *TaskLoopStrategy) Reset() {
	*x = TaskLoopStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLoopStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLoopStrategy) ProtoMessage() {}

func (x *TaskLoopStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLoopStrategy.ProtoReflect.Descriptor instead.
func (*TaskLoopStrategy) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{35}
}

func (x *TaskLoopStrategy) GetMaxTimes() int64 {
	if x != nil {
		return x.MaxTimes
	}
	return 0
}

func (x *TaskLoopStrategy) GetDeclineRatio() float64 {
	if x != nil {
		return x.DeclineRatio
	}
	return 0
}

func (x *TaskLoopStrategy) GetDeclineLimitSec() int64 {
	if x != nil {
		return x.DeclineLimitSec
	}
	return 0
}

func (x *TaskLoopStrategy) GetIntervalSec() uint64 {
	if x != nil {
		return x.IntervalSec
	}
	return 0
}

type SnippetStages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params  []*PipelineParam    `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Outputs []*PipelineOutput   `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Stages  *structpb.ListValue `protobuf:"bytes,3,opt,name=stages,proto3" json:"stages,omitempty"` // [][]*PipelineYmlAction
}

func (x *SnippetStages) Reset() {
	*x = SnippetStages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetStages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetStages) ProtoMessage() {}

func (x *SnippetStages) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetStages.ProtoReflect.Descriptor instead.
func (*SnippetStages) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{36}
}

func (x *SnippetStages) GetParams() []*PipelineParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SnippetStages) GetOutputs() []*PipelineOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *SnippetStages) GetStages() *structpb.ListValue {
	if x != nil {
		return x.Stages
	}
	return nil
}

///////////// stage
type PipelineStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PipelineID  uint64                 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CostTimeSec int64                  `protobuf:"varint,5,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
}

func (x *PipelineStage) Reset() {
	*x = PipelineStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStage) ProtoMessage() {}

func (x *PipelineStage) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStage.ProtoReflect.Descriptor instead.
func (*PipelineStage) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{37}
}

func (x *PipelineStage) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineStage) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineStage) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineStage) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineStage) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineStage) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineStage) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

type PipelineStageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PipelineID    uint64                 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CostTimeSec   int64                  `protobuf:"varint,5,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	PipelineTasks []*PipelineTask        `protobuf:"bytes,10,rep,name=pipelineTasks,proto3" json:"pipelineTasks,omitempty"`
}

func (x *PipelineStageDetail) Reset() {
	*x = PipelineStageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStageDetail) ProtoMessage() {}

func (x *PipelineStageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStageDetail.ProtoReflect.Descriptor instead.
func (*PipelineStageDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{38}
}

func (x *PipelineStageDetail) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineStageDetail) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineStageDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStageDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineStageDetail) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineStageDetail) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineStageDetail) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineStageDetail) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineStageDetail) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *PipelineStageDetail) GetPipelineTasks() []*PipelineTask {
	if x != nil {
		return x.PipelineTasks
	}
	return nil
}

/////////////
type PipelineTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint64                     `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	PipelineID            uint64                     `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	StageID               uint64                     `protobuf:"varint,3,opt,name=stageID,proto3" json:"stageID,omitempty"`
	Name                  string                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                  string                     `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Status                string                     `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Extra                 *PipelineTaskExtra         `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	Labels                map[string]string          `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Result                *PipelineTaskResult        `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	IsSnippet             bool                       `protobuf:"varint,10,opt,name=isSnippet,proto3" json:"isSnippet,omitempty"`
	SnippetPipelineID     uint64                     `protobuf:"varint,11,opt,name=snippetPipelineID,proto3" json:"snippetPipelineID,omitempty"`
	SnippetPipelineDetail *PipelineTaskSnippetDetail `protobuf:"bytes,12,opt,name=snippetPipelineDetail,proto3" json:"snippetPipelineDetail,omitempty"` // detail of snippet pipeline
	CostTimeSec           int64                      `protobuf:"varint,13,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`                    // -1 means no cost info, 0 means cost 0s exactly
	QueueTimeSec          int64                      `protobuf:"varint,14,opt,name=queueTimeSec,proto3" json:"queueTimeSec,omitempty"`
	TimeBegin             *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd               *timestamppb.Timestamp     `protobuf:"bytes,16,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated           *timestamppb.Timestamp     `protobuf:"bytes,17,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated           *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
}

func (x *PipelineTask) Reset() {
	*x = PipelineTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTask) ProtoMessage() {}

func (x *PipelineTask) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTask.ProtoReflect.Descriptor instead.
func (*PipelineTask) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{39}
}

func (x *PipelineTask) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PipelineTask) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineTask) GetStageID() uint64 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *PipelineTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PipelineTask) GetExtra() *PipelineTaskExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PipelineTask) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineTask) GetResult() *PipelineTaskResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PipelineTask) GetIsSnippet() bool {
	if x != nil {
		return x.IsSnippet
	}
	return false
}

func (x *PipelineTask) GetSnippetPipelineID() uint64 {
	if x != nil {
		return x.SnippetPipelineID
	}
	return 0
}

func (x *PipelineTask) GetSnippetPipelineDetail() *PipelineTaskSnippetDetail {
	if x != nil {
		return x.SnippetPipelineDetail
	}
	return nil
}

func (x *PipelineTask) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PipelineTask) GetQueueTimeSec() int64 {
	if x != nil {
		return x.QueueTimeSec
	}
	return 0
}

func (x *PipelineTask) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PipelineTask) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PipelineTask) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PipelineTask) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

type PipelineTaskExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID         string `protobuf:"bytes,1,opt,name=UUID,json=uuid,proto3" json:"UUID,omitempty"`
	AllowFailure bool   `protobuf:"varint,2,opt,name=allowFailure,proto3" json:"allowFailure,omitempty"`
}

func (x *PipelineTaskExtra) Reset() {
	*x = PipelineTaskExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskExtra) ProtoMessage() {}

func (x *PipelineTaskExtra) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskExtra.ProtoReflect.Descriptor instead.
func (*PipelineTaskExtra) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{40}
}

func (x *PipelineTaskExtra) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *PipelineTaskExtra) GetAllowFailure() bool {
	if x != nil {
		return x.AllowFailure
	}
	return false
}

type PipelineTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    []*pb.MetadataField      `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Errors      []*ErrorResponse         `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	MachineStat *PipelineTaskMachineStat `protobuf:"bytes,3,opt,name=machineStat,proto3" json:"machineStat,omitempty"`
}

func (x *PipelineTaskResult) Reset() {
	*x = PipelineTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskResult) ProtoMessage() {}

func (x *PipelineTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskResult.ProtoReflect.Descriptor instead.
func (*PipelineTaskResult) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{41}
}

func (x *PipelineTaskResult) GetMetadata() []*pb.MetadataField {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PipelineTaskResult) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PipelineTaskResult) GetMachineStat() *PipelineTaskMachineStat {
	if x != nil {
		return x.MachineStat
	}
	return nil
}

type PipelineTaskSnippetDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*PipelineOutputWithValue `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// direct snippet task number, won't query recursively.
	// -1 means UNKNOWN, concrete value assigned when reconcile.
	DirectSnippetTaskNum int64 `protobuf:"varint,2,opt,name=directSnippetTaskNum,proto3" json:"directSnippetTaskNum,omitempty"`
	// recursive snippet task number, i.e. the whole expanded tasks number.
	// -1 means UNKNOWN, concrete value will be reported by AOP.
	RecursiveSnippetTaskNum int64 `protobuf:"varint,3,opt,name=recursiveSnippetTaskNum,proto3" json:"recursiveSnippetTaskNum,omitempty"`
}

func (x *PipelineTaskSnippetDetail) Reset() {
	*x = PipelineTaskSnippetDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskSnippetDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskSnippetDetail) ProtoMessage() {}

func (x *PipelineTaskSnippetDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskSnippetDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskSnippetDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{42}
}

func (x *PipelineTaskSnippetDetail) GetOutputs() []*PipelineOutputWithValue {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *PipelineTaskSnippetDetail) GetDirectSnippetTaskNum() int64 {
	if x != nil {
		return x.DirectSnippetTaskNum
	}
	return 0
}

func (x *PipelineTaskSnippetDetail) GetRecursiveSnippetTaskNum() int64 {
	if x != nil {
		return x.RecursiveSnippetTaskNum
	}
	return 0
}

type PipelineTaskMachineStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *PipelineTaskMachineHostStat `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Pod  *PipelineTaskMachinePodStat  `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty"`
	Load *PipelineTaskMachineLoadStat `protobuf:"bytes,3,opt,name=load,proto3" json:"load,omitempty"`
	Mem  *PipelineTaskMachineMemStat  `protobuf:"bytes,4,opt,name=mem,proto3" json:"mem,omitempty"`
	Swap *PipelineTaskMachineSwapStat `protobuf:"bytes,5,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (x *PipelineTaskMachineStat) Reset() {
	*x = PipelineTaskMachineStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineStat) ProtoMessage() {}

func (x *PipelineTaskMachineStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{43}
}

func (x *PipelineTaskMachineStat) GetHost() *PipelineTaskMachineHostStat {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetPod() *PipelineTaskMachinePodStat {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetLoad() *PipelineTaskMachineLoadStat {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetMem() *PipelineTaskMachineMemStat {
	if x != nil {
		return x.Mem
	}
	return nil
}

func (x *PipelineTaskMachineStat) GetSwap() *PipelineTaskMachineSwapStat {
	if x != nil {
		return x.Swap
	}
	return nil
}

type PipelineTaskMachineHostStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIP          string `protobuf:"bytes,1,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	Hostname        string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	UptimeSec       uint64 `protobuf:"varint,3,opt,name=uptimeSec,proto3" json:"uptimeSec,omitempty"`
	BootTimeSec     uint64 `protobuf:"varint,4,opt,name=bootTimeSec,proto3" json:"bootTimeSec,omitempty"`
	OS              string `protobuf:"bytes,5,opt,name=OS,json=os,proto3" json:"OS,omitempty"`
	Platform        string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformVersion string `protobuf:"bytes,7,opt,name=platformVersion,proto3" json:"platformVersion,omitempty"`
	KernelVersion   string `protobuf:"bytes,8,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	KernelArch      string `protobuf:"bytes,9,opt,name=kernelArch,proto3" json:"kernelArch,omitempty"`
}

func (x *PipelineTaskMachineHostStat) Reset() {
	*x = PipelineTaskMachineHostStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineHostStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineHostStat) ProtoMessage() {}

func (x *PipelineTaskMachineHostStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineHostStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineHostStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{44}
}

func (x *PipelineTaskMachineHostStat) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetUptimeSec() uint64 {
	if x != nil {
		return x.UptimeSec
	}
	return 0
}

func (x *PipelineTaskMachineHostStat) GetBootTimeSec() uint64 {
	if x != nil {
		return x.BootTimeSec
	}
	return 0
}

func (x *PipelineTaskMachineHostStat) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *PipelineTaskMachineHostStat) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

type PipelineTaskMachinePodStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIP string `protobuf:"bytes,1,opt,name=podIP,proto3" json:"podIP,omitempty"`
}

func (x *PipelineTaskMachinePodStat) Reset() {
	*x = PipelineTaskMachinePodStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachinePodStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachinePodStat) ProtoMessage() {}

func (x *PipelineTaskMachinePodStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachinePodStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachinePodStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{45}
}

func (x *PipelineTaskMachinePodStat) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

type PipelineTaskMachineLoadStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load1  float64 `protobuf:"fixed64,1,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5  float64 `protobuf:"fixed64,2,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15 float64 `protobuf:"fixed64,3,opt,name=load15,proto3" json:"load15,omitempty"`
}

func (x *PipelineTaskMachineLoadStat) Reset() {
	*x = PipelineTaskMachineLoadStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineLoadStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineLoadStat) ProtoMessage() {}

func (x *PipelineTaskMachineLoadStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineLoadStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineLoadStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{46}
}

func (x *PipelineTaskMachineLoadStat) GetLoad1() float64 {
	if x != nil {
		return x.Load1
	}
	return 0
}

func (x *PipelineTaskMachineLoadStat) GetLoad5() float64 {
	if x != nil {
		return x.Load5
	}
	return 0
}

func (x *PipelineTaskMachineLoadStat) GetLoad15() float64 {
	if x != nil {
		return x.Load15
	}
	return 0
}

type PipelineTaskMachineMemStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       uint64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available   uint64  `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Used        uint64  `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	Free        uint64  `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,5,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	Buffers     uint64  `protobuf:"varint,6,opt,name=buffers,proto3" json:"buffers,omitempty"`
	Cached      uint64  `protobuf:"varint,7,opt,name=cached,proto3" json:"cached,omitempty"`
}

func (x *PipelineTaskMachineMemStat) Reset() {
	*x = PipelineTaskMachineMemStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineMemStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineMemStat) ProtoMessage() {}

func (x *PipelineTaskMachineMemStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineMemStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineMemStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{47}
}

func (x *PipelineTaskMachineMemStat) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetBuffers() uint64 {
	if x != nil {
		return x.Buffers
	}
	return 0
}

func (x *PipelineTaskMachineMemStat) GetCached() uint64 {
	if x != nil {
		return x.Cached
	}
	return 0
}

type PipelineTaskMachineSwapStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       uint64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Used        uint64  `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	Free        uint64  `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
}

func (x *PipelineTaskMachineSwapStat) Reset() {
	*x = PipelineTaskMachineSwapStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskMachineSwapStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskMachineSwapStat) ProtoMessage() {}

func (x *PipelineTaskMachineSwapStat) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskMachineSwapStat.ProtoReflect.Descriptor instead.
func (*PipelineTaskMachineSwapStat) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{48}
}

func (x *PipelineTaskMachineSwapStat) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineTaskMachineSwapStat) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *PipelineTaskMachineSwapStat) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *PipelineTaskMachineSwapStat) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

type PipelineTaskActionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoUrl     string `protobuf:"bytes,1,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PipelineTaskActionDetail) Reset() {
	*x = PipelineTaskActionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskActionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskActionDetail) ProtoMessage() {}

func (x *PipelineTaskActionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskActionDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskActionDetail) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{49}
}

func (x *PipelineTaskActionDetail) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PipelineTaskActionDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

////////////// request & response
type PipelineCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PipelineYml is pipeline yaml content.
	// +required
	PipelineYml string `protobuf:"bytes,1,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	// ClusterName represents the cluster the pipeline will be executed.
	// +required
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// PipelineYmlName
	// Equal to `Name`.
	// Default is `pipeline.yml`.
	// +optional
	PipelineYmlName string `protobuf:"bytes,3,opt,name=pipelineYmlName,proto3" json:"pipelineYmlName,omitempty"`
	// PipelineSource represents the source where pipeline created from.
	// Equal to `Namespace`.
	// +required
	PipelineSource string `protobuf:"bytes,4,opt,name=pipelineSource,proto3" json:"pipelineSource,omitempty"`
	// Labels is Map of string keys and values, can be used to filter pipeline.
	// If label key or value is too long, it will be moved to NormalLabels automatically and overwrite value if key already exists in NormalLabels.
	// +optional
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// NormalLabels is Map of string keys and values, cannot be used to filter pipeline.
	// +optional
	NormalLabels map[string]string `protobuf:"bytes,6,rep,name=normalLabels,proto3" json:"normalLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Envs is Map of string keys and values.
	// +optional
	Envs map[string]string `protobuf:"bytes,7,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ConfigManageNamespaces pipeline fetch configs from cms by namespaces in order.
	// Pipeline won't generate default ns.
	// +optional
	ConfigManageNamespaces []string `protobuf:"bytes,8,rep,name=configManageNamespaces,proto3" json:"configManageNamespaces,omitempty"`
	// AutoRun represents whether auto run the created pipeline.
	// Default is false.
	// +optional
	// Deprecated, please use `AutoRunAtOnce` or `AutoStartCron`.
	// Alias for AutoRunAtOnce.
	AutoRun bool `protobuf:"varint,9,opt,name=autoRun,proto3" json:"autoRun,omitempty"`
	// ForceRun represents stop other running pipelines to run.
	// Default is false.
	// +optional
	ForceRun bool `protobuf:"varint,10,opt,name=forceRun,proto3" json:"forceRun,omitempty"`
	// AutoRunAtOnce alias for `AutoRun`.
	// AutoRunAtOnce represents whether auto run the created pipeline.
	// Default is false.
	// +optional
	AutoRunAtOnce bool `protobuf:"varint,11,opt,name=autoRunAtOnce,proto3" json:"autoRunAtOnce,omitempty"`
	// AutoStartCron represents whether auto start cron.
	// If a pipeline doesn't have `cron` field, ignore.
	// Default is false.
	// +optional
	AutoStartCron bool `protobuf:"varint,12,opt,name=autoStartCron,proto3" json:"autoStartCron,omitempty"`
	// CronStartFrom specify time when to start
	// +optional
	CronStartFrom *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=cronStartFrom,proto3" json:"cronStartFrom,omitempty"`
	// GC represents pipeline gc configs.
	// If config is empty, will use default config.
	// +optional
	GC *PipelineGC `protobuf:"bytes,14,opt,name=GC,json=gc,proto3" json:"GC,omitempty"`
	// RunPipelineParams represents pipeline params runtime input
	// if pipeline have params runPipelineParams can not be empty
	// +optional
	RunParams []*PipelineRunParam `protobuf:"bytes,15,rep,name=runParams,proto3" json:"runParams,omitempty"`
	// BindQueue represents the queue pipeline binds, internal use only, parsed from Labels: LabelBindPipelineQueueID
	BindQueue    *pb2.Queue       `protobuf:"bytes,16,opt,name=bindQueue,json=-,proto3" json:"bindQueue,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,17,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *PipelineCreateRequest) Reset() {
	*x = PipelineCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateRequest) ProtoMessage() {}

func (x *PipelineCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateRequest.ProtoReflect.Descriptor instead.
func (*PipelineCreateRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{50}
}

func (x *PipelineCreateRequest) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *PipelineCreateRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineYmlName() string {
	if x != nil {
		return x.PipelineYmlName
	}
	return ""
}

func (x *PipelineCreateRequest) GetPipelineSource() string {
	if x != nil {
		return x.PipelineSource
	}
	return ""
}

func (x *PipelineCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PipelineCreateRequest) GetNormalLabels() map[string]string {
	if x != nil {
		return x.NormalLabels
	}
	return nil
}

func (x *PipelineCreateRequest) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PipelineCreateRequest) GetConfigManageNamespaces() []string {
	if x != nil {
		return x.ConfigManageNamespaces
	}
	return nil
}

func (x *PipelineCreateRequest) GetAutoRun() bool {
	if x != nil {
		return x.AutoRun
	}
	return false
}

func (x *PipelineCreateRequest) GetForceRun() bool {
	if x != nil {
		return x.ForceRun
	}
	return false
}

func (x *PipelineCreateRequest) GetAutoRunAtOnce() bool {
	if x != nil {
		return x.AutoRunAtOnce
	}
	return false
}

func (x *PipelineCreateRequest) GetAutoStartCron() bool {
	if x != nil {
		return x.AutoStartCron
	}
	return false
}

func (x *PipelineCreateRequest) GetCronStartFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CronStartFrom
	}
	return nil
}

func (x *PipelineCreateRequest) GetGC() *PipelineGC {
	if x != nil {
		return x.GC
	}
	return nil
}

func (x *PipelineCreateRequest) GetRunParams() []*PipelineRunParam {
	if x != nil {
		return x.RunParams
	}
	return nil
}

func (x *PipelineCreateRequest) GetBindQueue() *pb2.Queue {
	if x != nil {
		return x.BindQueue
	}
	return nil
}

func (x *PipelineCreateRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type PipelineCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineCreateResponse) Reset() {
	*x = PipelineCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCreateResponse) ProtoMessage() {}

func (x *PipelineCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCreateResponse.ProtoReflect.Descriptor instead.
func (*PipelineCreateResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{51}
}

func (x *PipelineCreateResponse) GetData() *PipelineInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelinePagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum       int64    `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize      int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	LargePageSize bool     `protobuf:"varint,3,opt,name=largePageSize,proto3" json:"largePageSize,omitempty"`
	CountOnly     bool     `protobuf:"varint,4,opt,name=countOnly,proto3" json:"countOnly,omitempty"` // only total
	AllSources    bool     `protobuf:"varint,5,opt,name=allSources,proto3" json:"allSources,omitempty"`
	Sources       []string `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`
	YmlNames      []string `protobuf:"bytes,7,rep,name=ymlNames,proto3" json:"ymlNames,omitempty"`
	Statuses      []string `protobuf:"bytes,8,rep,name=statuses,proto3" json:"statuses,omitempty"`
	NotStatuses   []string `protobuf:"bytes,9,rep,name=notStatuses,proto3" json:"notStatuses,omitempty"`
	TriggerModes  []string `protobuf:"bytes,10,rep,name=triggerModes,proto3" json:"triggerModes,omitempty"`
	ClusterNames  []string `protobuf:"bytes,11,rep,name=clusterNames,proto3" json:"clusterNames,omitempty"`
	// IncludeSnippet whether include snippet, default is false.
	IncludeSnippet bool `protobuf:"varint,12,opt,name=includeSnippet,proto3" json:"includeSnippet,omitempty"`
	// 开始执行时间 左闭区间
	// http GET query param 请赋值该字段
	StartTimeBeginTimestamp int64 `protobuf:"varint,13,opt,name=startTimeBeginTimestamp,proto3" json:"startTimeBeginTimestamp,omitempty"`
	// Deprecated, use `StartedAtTimestamp`.
	// format: 2006-01-02T15:04:05, TZ: CST
	StartTimeBeginCST string `protobuf:"bytes,14,opt,name=startTimeBeginCST,proto3" json:"startTimeBeginCST,omitempty"`
	// 开始执行时间 右闭区间
	// http GET query param 请赋值该字段
	EndTimeBeginTimestamp int64 `protobuf:"varint,15,opt,name=endTimeBeginTimestamp,proto3" json:"endTimeBeginTimestamp,omitempty"`
	// Deprecated, use `StartedAtTimestamp`.
	// format: 2006-01-02T15:04:05, TZ: CST
	EndTimeBeginCST string `protobuf:"bytes,16,opt,name=endTimeBeginCST,proto3" json:"endTimeBeginCST,omitempty"`
	// 创建时间 左闭区间
	// http GET query param 请赋值该字段
	StartTimeCreatedTimestamp int64 `protobuf:"varint,17,opt,name=startTimeCreatedTimestamp,proto3" json:"startTimeCreatedTimestamp,omitempty"`
	// 创建时间 右闭区间
	// http GET query param 请赋值该字段
	EndTimeCreatedTimestamp int64 `protobuf:"varint,18,opt,name=endTimeCreatedTimestamp,proto3" json:"endTimeCreatedTimestamp,omitempty"`
	// Deprecated
	// 供 CDP 工作流明细查询使用，JSON(map[string]string)
	MustMatchLabelsJSON string `protobuf:"bytes,19,opt,name=mustMatchLabelsJSON,proto3" json:"mustMatchLabelsJSON,omitempty"`
	// ?mustMatchLabel=key1=value1
	// &mustMatchLabel=key1=value2
	// &mustMatchLabel=key2=value3
	MustMatchLabelsQueryParams []string `protobuf:"bytes,20,rep,name=mustMatchLabelsQueryParams,proto3" json:"mustMatchLabelsQueryParams,omitempty"`
	// Deprecated
	// 供 CDP 工作流明细查询使用，JSON(map[string]string)
	AnyMatchLabelsJSON string `protobuf:"bytes,21,opt,name=anyMatchLabelsJSON,proto3" json:"anyMatchLabelsJSON,omitempty"`
	// ?anyMatchLabel=key1=value1
	// &anyMatchLabel=key1=value2
	// &anyMatchLabel=key2=value3
	AnyMatchLabelsQueryParams []string `protobuf:"bytes,22,rep,name=anyMatchLabelsQueryParams,proto3" json:"anyMatchLabelsQueryParams,omitempty"`
	// Deprecated, use schema `branch`
	CommaBranches string `protobuf:"bytes,23,opt,name=commaBranches,proto3" json:"commaBranches,omitempty"`
	// Deprecated, use schema `source`
	CommaSources string `protobuf:"bytes,24,opt,name=commaSources,proto3" json:"commaSources,omitempty"`
	// Deprecated, use schema `ymlName`
	CommaYmlNames string `protobuf:"bytes,25,opt,name=commaYmlNames,proto3" json:"commaYmlNames,omitempty"`
	// Deprecated, use schema `status`
	CommaStatuses string `protobuf:"bytes,26,opt,name=commaStatuses,proto3" json:"commaStatuses,omitempty"`
	// Deprecated, use mustMatchLabels, key=appID
	AppID uint64 `protobuf:"varint,27,opt,name=appID,proto3" json:"appID,omitempty"`
	// Deprecated, use mustMatchLabels, key=branch
	Branches []string `protobuf:"bytes,28,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *PipelinePagingRequest) Reset() {
	*x = PipelinePagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePagingRequest) ProtoMessage() {}

func (x *PipelinePagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePagingRequest.ProtoReflect.Descriptor instead.
func (*PipelinePagingRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{52}
}

func (x *PipelinePagingRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PipelinePagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PipelinePagingRequest) GetLargePageSize() bool {
	if x != nil {
		return x.LargePageSize
	}
	return false
}

func (x *PipelinePagingRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

func (x *PipelinePagingRequest) GetAllSources() bool {
	if x != nil {
		return x.AllSources
	}
	return false
}

func (x *PipelinePagingRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *PipelinePagingRequest) GetYmlNames() []string {
	if x != nil {
		return x.YmlNames
	}
	return nil
}

func (x *PipelinePagingRequest) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *PipelinePagingRequest) GetNotStatuses() []string {
	if x != nil {
		return x.NotStatuses
	}
	return nil
}

func (x *PipelinePagingRequest) GetTriggerModes() []string {
	if x != nil {
		return x.TriggerModes
	}
	return nil
}

func (x *PipelinePagingRequest) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

func (x *PipelinePagingRequest) GetIncludeSnippet() bool {
	if x != nil {
		return x.IncludeSnippet
	}
	return false
}

func (x *PipelinePagingRequest) GetStartTimeBeginTimestamp() int64 {
	if x != nil {
		return x.StartTimeBeginTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetStartTimeBeginCST() string {
	if x != nil {
		return x.StartTimeBeginCST
	}
	return ""
}

func (x *PipelinePagingRequest) GetEndTimeBeginTimestamp() int64 {
	if x != nil {
		return x.EndTimeBeginTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetEndTimeBeginCST() string {
	if x != nil {
		return x.EndTimeBeginCST
	}
	return ""
}

func (x *PipelinePagingRequest) GetStartTimeCreatedTimestamp() int64 {
	if x != nil {
		return x.StartTimeCreatedTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetEndTimeCreatedTimestamp() int64 {
	if x != nil {
		return x.EndTimeCreatedTimestamp
	}
	return 0
}

func (x *PipelinePagingRequest) GetMustMatchLabelsJSON() string {
	if x != nil {
		return x.MustMatchLabelsJSON
	}
	return ""
}

func (x *PipelinePagingRequest) GetMustMatchLabelsQueryParams() []string {
	if x != nil {
		return x.MustMatchLabelsQueryParams
	}
	return nil
}

func (x *PipelinePagingRequest) GetAnyMatchLabelsJSON() string {
	if x != nil {
		return x.AnyMatchLabelsJSON
	}
	return ""
}

func (x *PipelinePagingRequest) GetAnyMatchLabelsQueryParams() []string {
	if x != nil {
		return x.AnyMatchLabelsQueryParams
	}
	return nil
}

func (x *PipelinePagingRequest) GetCommaBranches() string {
	if x != nil {
		return x.CommaBranches
	}
	return ""
}

func (x *PipelinePagingRequest) GetCommaSources() string {
	if x != nil {
		return x.CommaSources
	}
	return ""
}

func (x *PipelinePagingRequest) GetCommaYmlNames() string {
	if x != nil {
		return x.CommaYmlNames
	}
	return ""
}

func (x *PipelinePagingRequest) GetCommaStatuses() string {
	if x != nil {
		return x.CommaStatuses
	}
	return ""
}

func (x *PipelinePagingRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *PipelinePagingRequest) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

type PipelinePagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineListResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelinePagingResponse) Reset() {
	*x = PipelinePagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePagingResponse) ProtoMessage() {}

func (x *PipelinePagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePagingResponse.ProtoReflect.Descriptor instead.
func (*PipelinePagingResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{53}
}

func (x *PipelinePagingResponse) GetData() *PipelineListResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines       []*PagePipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	Total           int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CurrentPageSize int64           `protobuf:"varint,3,opt,name=currentPageSize,proto3" json:"currentPageSize,omitempty"`
}

func (x *PipelineListResponseData) Reset() {
	*x = PipelineListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineListResponseData) ProtoMessage() {}

func (x *PipelineListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineListResponseData.ProtoReflect.Descriptor instead.
func (*PipelineListResponseData) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{54}
}

func (x *PipelineListResponseData) GetPipelines() []*PagePipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *PipelineListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PipelineListResponseData) GetCurrentPageSize() int64 {
	if x != nil {
		return x.CurrentPageSize
	}
	return 0
}

type PagePipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	CronID       uint64            `protobuf:"varint,2,opt,name=cronID,proto3" json:"cronID,omitempty"`
	Commit       string            `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Source       string            `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	YmlName      string            `protobuf:"bytes,5,opt,name=ymlName,proto3" json:"ymlName,omitempty"`
	Extra        *PipelineExtra    `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	FilterLabels map[string]string `protobuf:"bytes,7,rep,name=filterLabels,proto3" json:"filterLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NormalLabels map[string]string `protobuf:"bytes,8,rep,name=normalLabels,proto3" json:"normalLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// runtime
	Type        string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	TriggerMode string  `protobuf:"bytes,10,opt,name=triggerMode,proto3" json:"triggerMode,omitempty"`
	ClusterName string  `protobuf:"bytes,11,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status      string  `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Progress    float64 `protobuf:"fixed64,13,opt,name=progress,proto3" json:"progress,omitempty"` // eg: 0.8 = 80%
	// snippet
	IsSnippet        bool   `protobuf:"varint,14,opt,name=isSnippet,proto3" json:"isSnippet,omitempty"`
	ParentPipelineID uint64 `protobuf:"varint,15,opt,name=parentPipelineID,proto3" json:"parentPipelineID,omitempty"`
	ParentTaskID     uint64 `protobuf:"varint,16,opt,name=parentTaskID,proto3" json:"parentTaskID,omitempty"`
	// time
	CostTimeSec int64                  `protobuf:"varint,17,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	TimeBegin   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
}

func (x *PagePipeline) Reset() {
	*x = PagePipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagePipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagePipeline) ProtoMessage() {}

func (x *PagePipeline) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagePipeline.ProtoReflect.Descriptor instead.
func (*PagePipeline) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{55}
}

func (x *PagePipeline) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PagePipeline) GetCronID() uint64 {
	if x != nil {
		return x.CronID
	}
	return 0
}

func (x *PagePipeline) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PagePipeline) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PagePipeline) GetYmlName() string {
	if x != nil {
		return x.YmlName
	}
	return ""
}

func (x *PagePipeline) GetExtra() *PipelineExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PagePipeline) GetFilterLabels() map[string]string {
	if x != nil {
		return x.FilterLabels
	}
	return nil
}

func (x *PagePipeline) GetNormalLabels() map[string]string {
	if x != nil {
		return x.NormalLabels
	}
	return nil
}

func (x *PagePipeline) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PagePipeline) GetTriggerMode() string {
	if x != nil {
		return x.TriggerMode
	}
	return ""
}

func (x *PagePipeline) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PagePipeline) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PagePipeline) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *PagePipeline) GetIsSnippet() bool {
	if x != nil {
		return x.IsSnippet
	}
	return false
}

func (x *PagePipeline) GetParentPipelineID() uint64 {
	if x != nil {
		return x.ParentPipelineID
	}
	return 0
}

func (x *PagePipeline) GetParentTaskID() uint64 {
	if x != nil {
		return x.ParentTaskID
	}
	return 0
}

func (x *PagePipeline) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *PagePipeline) GetTimeBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeBegin
	}
	return nil
}

func (x *PagePipeline) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *PagePipeline) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *PagePipeline) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

type SnippetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SnippetConfig) Reset() {
	*x = SnippetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetConfig) ProtoMessage() {}

func (x *SnippetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetConfig.ProtoReflect.Descriptor instead.
func (*SnippetConfig) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{56}
}

func (x *SnippetConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SnippetConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnippetConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PipelineDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimplePipelineBaseResult bool   `protobuf:"varint,1,opt,name=simplePipelineBaseResult,proto3" json:"simplePipelineBaseResult,omitempty"`
	PipelineID               uint64 `protobuf:"varint,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
}

func (x *PipelineDetailRequest) Reset() {
	*x = PipelineDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetailRequest) ProtoMessage() {}

func (x *PipelineDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetailRequest.ProtoReflect.Descriptor instead.
func (*PipelineDetailRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{57}
}

func (x *PipelineDetailRequest) GetSimplePipelineBaseResult() bool {
	if x != nil {
		return x.SimplePipelineBaseResult
	}
	return false
}

func (x *PipelineDetailRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

type PipelineDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineInstanceDetail `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineDetailResponse) Reset() {
	*x = PipelineDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetailResponse) ProtoMessage() {}

func (x *PipelineDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetailResponse.ProtoReflect.Descriptor instead.
func (*PipelineDetailResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{58}
}

func (x *PipelineDetailResponse) GetData() *PipelineInstanceDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineTaskOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  uint64          `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Disable *structpb.Value `protobuf:"bytes,2,opt,name=disable,proto3" json:"disable,omitempty"`
	Pause   *structpb.Value `protobuf:"bytes,3,opt,name=pause,proto3" json:"pause,omitempty"`
}

func (x *PipelineTaskOperateRequest) Reset() {
	*x = PipelineTaskOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskOperateRequest) ProtoMessage() {}

func (x *PipelineTaskOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskOperateRequest.ProtoReflect.Descriptor instead.
func (*PipelineTaskOperateRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{59}
}

func (x *PipelineTaskOperateRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PipelineTaskOperateRequest) GetDisable() *structpb.Value {
	if x != nil {
		return x.Disable
	}
	return nil
}

func (x *PipelineTaskOperateRequest) GetPause() *structpb.Value {
	if x != nil {
		return x.Pause
	}
	return nil
}

type PipelineOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID   uint64                        `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	TaskOperates []*PipelineTaskOperateRequest `protobuf:"bytes,2,rep,name=taskOperates,proto3" json:"taskOperates,omitempty"`
}

func (x *PipelineOperateRequest) Reset() {
	*x = PipelineOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOperateRequest) ProtoMessage() {}

func (x *PipelineOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOperateRequest.ProtoReflect.Descriptor instead.
func (*PipelineOperateRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{60}
}

func (x *PipelineOperateRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineOperateRequest) GetTaskOperates() []*PipelineTaskOperateRequest {
	if x != nil {
		return x.TaskOperates
	}
	return nil
}

type PipelineOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineOperateResponse) Reset() {
	*x = PipelineOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineOperateResponse) ProtoMessage() {}

func (x *PipelineOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineOperateResponse.ProtoReflect.Descriptor instead.
func (*PipelineOperateResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{61}
}

type PipelineDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID uint64 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
}

func (x *PipelineDeleteRequest) Reset() {
	*x = PipelineDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDeleteRequest) ProtoMessage() {}

func (x *PipelineDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDeleteRequest.ProtoReflect.Descriptor instead.
func (*PipelineDeleteRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{62}
}

func (x *PipelineDeleteRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

type PipelineDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineDeleteResponse) Reset() {
	*x = PipelineDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDeleteResponse) ProtoMessage() {}

func (x *PipelineDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDeleteResponse.ProtoReflect.Descriptor instead.
func (*PipelineDeleteResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{63}
}

type PipelineRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID        uint64              `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // get from path variable
	ForceRun          bool                `protobuf:"varint,2,opt,name=forceRun,proto3" json:"forceRun,omitempty"`
	PipelineRunParams []*PipelineRunParam `protobuf:"bytes,3,rep,name=pipelineRunParams,proto3" json:"pipelineRunParams,omitempty"`
	IdentityInfo      *pb.IdentityInfo    `protobuf:"bytes,4,opt,name=identityInfo,proto3" json:"identityInfo,omitempty"`
}

func (x *PipelineRunRequest) Reset() {
	*x = PipelineRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunRequest) ProtoMessage() {}

func (x *PipelineRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunRequest.ProtoReflect.Descriptor instead.
func (*PipelineRunRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{64}
}

func (x *PipelineRunRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineRunRequest) GetForceRun() bool {
	if x != nil {
		return x.ForceRun
	}
	return false
}

func (x *PipelineRunRequest) GetPipelineRunParams() []*PipelineRunParam {
	if x != nil {
		return x.PipelineRunParams
	}
	return nil
}

func (x *PipelineRunRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type PipelineRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineRunResponse) Reset() {
	*x = PipelineRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunResponse) ProtoMessage() {}

func (x *PipelineRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunResponse.ProtoReflect.Descriptor instead.
func (*PipelineRunResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{65}
}

type PipelineCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID   uint64           `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,2,opt,name=identityInfo,proto3" json:"identityInfo,omitempty"`
}

func (x *PipelineCancelRequest) Reset() {
	*x = PipelineCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCancelRequest) ProtoMessage() {}

func (x *PipelineCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCancelRequest.ProtoReflect.Descriptor instead.
func (*PipelineCancelRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{66}
}

func (x *PipelineCancelRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineCancelRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type PipelineCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineCancelResponse) Reset() {
	*x = PipelineCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCancelResponse) ProtoMessage() {}

func (x *PipelineCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCancelResponse.ProtoReflect.Descriptor instead.
func (*PipelineCancelResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{67}
}

type PipelineRerunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID    uint64           `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	AutoRunAtOnce bool             `protobuf:"varint,2,opt,name=autoRunAtOnce,proto3" json:"autoRunAtOnce,omitempty"`
	IdentityInfo  *pb.IdentityInfo `protobuf:"bytes,3,opt,name=identityInfo,proto3" json:"identityInfo,omitempty"`
}

func (x *PipelineRerunRequest) Reset() {
	*x = PipelineRerunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunRequest) ProtoMessage() {}

func (x *PipelineRerunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunRequest.ProtoReflect.Descriptor instead.
func (*PipelineRerunRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{68}
}

func (x *PipelineRerunRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineRerunRequest) GetAutoRunAtOnce() bool {
	if x != nil {
		return x.AutoRunAtOnce
	}
	return false
}

func (x *PipelineRerunRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type PipelineRerunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineRerunResponse) Reset() {
	*x = PipelineRerunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunResponse) ProtoMessage() {}

func (x *PipelineRerunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunResponse.ProtoReflect.Descriptor instead.
func (*PipelineRerunResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{69}
}

func (x *PipelineRerunResponse) GetData() *PipelineInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineRerunFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID    uint64           `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	AutoRunAtOnce bool             `protobuf:"varint,2,opt,name=autoRunAtOnce,proto3" json:"autoRunAtOnce,omitempty"`
	IdentityInfo  *pb.IdentityInfo `protobuf:"bytes,3,opt,name=identityInfo,proto3" json:"identityInfo,omitempty"`
}

func (x *PipelineRerunFailedRequest) Reset() {
	*x = PipelineRerunFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunFailedRequest) ProtoMessage() {}

func (x *PipelineRerunFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunFailedRequest.ProtoReflect.Descriptor instead.
func (*PipelineRerunFailedRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{70}
}

func (x *PipelineRerunFailedRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineRerunFailedRequest) GetAutoRunAtOnce() bool {
	if x != nil {
		return x.AutoRunAtOnce
	}
	return false
}

func (x *PipelineRerunFailedRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type PipelineRerunFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineRerunFailedResponse) Reset() {
	*x = PipelineRerunFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRerunFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRerunFailedResponse) ProtoMessage() {}

func (x *PipelineRerunFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRerunFailedResponse.ProtoReflect.Descriptor instead.
func (*PipelineRerunFailedResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{71}
}

func (x *PipelineRerunFailedResponse) GetData() *PipelineInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineTaskDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID uint64 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	TaskID     uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *PipelineTaskDetailRequest) Reset() {
	*x = PipelineTaskDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetailRequest) ProtoMessage() {}

func (x *PipelineTaskDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetailRequest.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetailRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{72}
}

func (x *PipelineTaskDetailRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineTaskDetailRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type PipelineTaskDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineTask `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineTaskDetailResponse) Reset() {
	*x = PipelineTaskDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetailResponse) ProtoMessage() {}

func (x *PipelineTaskDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetailResponse.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetailResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{73}
}

func (x *PipelineTaskDetailResponse) GetData() *PipelineTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineTaskGetBootstrapInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID uint64 `protobuf:"varint,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	TaskID     uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *PipelineTaskGetBootstrapInfoRequest) Reset() {
	*x = PipelineTaskGetBootstrapInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskGetBootstrapInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskGetBootstrapInfoRequest) ProtoMessage() {}

func (x *PipelineTaskGetBootstrapInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskGetBootstrapInfoRequest.ProtoReflect.Descriptor instead.
func (*PipelineTaskGetBootstrapInfoRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{74}
}

func (x *PipelineTaskGetBootstrapInfoRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *PipelineTaskGetBootstrapInfoRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type PipelineTaskGetBootstrapInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineTaskGetBootstrapInfoResponse) Reset() {
	*x = PipelineTaskGetBootstrapInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTaskGetBootstrapInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskGetBootstrapInfoResponse) ProtoMessage() {}

func (x *PipelineTaskGetBootstrapInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskGetBootstrapInfoResponse.ProtoReflect.Descriptor instead.
func (*PipelineTaskGetBootstrapInfoResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{75}
}

func (x *PipelineTaskGetBootstrapInfoResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeprecatedPipelineBatchCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID                 uint64   `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	Branch                string   `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Source                string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	BatchPipelineYmlPaths []string `protobuf:"bytes,4,rep,name=batchPipelineYmlPaths,proto3" json:"batchPipelineYmlPaths,omitempty"`
	AutoRun               bool     `protobuf:"varint,5,opt,name=autoRun,proto3" json:"autoRun,omitempty"`
	CallbackURLs          []string `protobuf:"bytes,6,rep,name=callbackURLs,proto3" json:"callbackURLs,omitempty"`
	UserID                string   `protobuf:"bytes,7,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DeprecatedPipelineBatchCreateRequest) Reset() {
	*x = DeprecatedPipelineBatchCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedPipelineBatchCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedPipelineBatchCreateRequest) ProtoMessage() {}

func (x *DeprecatedPipelineBatchCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedPipelineBatchCreateRequest.ProtoReflect.Descriptor instead.
func (*DeprecatedPipelineBatchCreateRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{76}
}

func (x *DeprecatedPipelineBatchCreateRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *DeprecatedPipelineBatchCreateRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *DeprecatedPipelineBatchCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeprecatedPipelineBatchCreateRequest) GetBatchPipelineYmlPaths() []string {
	if x != nil {
		return x.BatchPipelineYmlPaths
	}
	return nil
}

func (x *DeprecatedPipelineBatchCreateRequest) GetAutoRun() bool {
	if x != nil {
		return x.AutoRun
	}
	return false
}

func (x *DeprecatedPipelineBatchCreateRequest) GetCallbackURLs() []string {
	if x != nil {
		return x.CallbackURLs
	}
	return nil
}

func (x *DeprecatedPipelineBatchCreateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeprecatedPipelineBatchCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*PipelineInstance `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeprecatedPipelineBatchCreateResponse) Reset() {
	*x = DeprecatedPipelineBatchCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedPipelineBatchCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedPipelineBatchCreateResponse) ProtoMessage() {}

func (x *DeprecatedPipelineBatchCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedPipelineBatchCreateResponse.ProtoReflect.Descriptor instead.
func (*DeprecatedPipelineBatchCreateResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{77}
}

func (x *DeprecatedPipelineBatchCreateResponse) GetData() map[string]*PipelineInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineYmlGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineYmlContent        string            `protobuf:"bytes,1,opt,name=pipelineYmlContent,proto3" json:"pipelineYmlContent,omitempty"`
	GlobalSnippetConfigLabels map[string]string `protobuf:"bytes,2,rep,name=globalSnippetConfigLabels,proto3" json:"globalSnippetConfigLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SnippetConfig             *SnippetConfig    `protobuf:"bytes,3,opt,name=snippetConfig,proto3" json:"snippetConfig,omitempty"`
}

func (x *PipelineYmlGraphRequest) Reset() {
	*x = PipelineYmlGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineYmlGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineYmlGraphRequest) ProtoMessage() {}

func (x *PipelineYmlGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineYmlGraphRequest.ProtoReflect.Descriptor instead.
func (*PipelineYmlGraphRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{78}
}

func (x *PipelineYmlGraphRequest) GetPipelineYmlContent() string {
	if x != nil {
		return x.PipelineYmlContent
	}
	return ""
}

func (x *PipelineYmlGraphRequest) GetGlobalSnippetConfigLabels() map[string]string {
	if x != nil {
		return x.GlobalSnippetConfigLabels
	}
	return nil
}

func (x *PipelineYmlGraphRequest) GetSnippetConfig() *SnippetConfig {
	if x != nil {
		return x.SnippetConfig
	}
	return nil
}

type PipelineYmlGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PipelineYml `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineYmlGraphResponse) Reset() {
	*x = PipelineYmlGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineYmlGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineYmlGraphResponse) ProtoMessage() {}

func (x *PipelineYmlGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineYmlGraphResponse.ProtoReflect.Descriptor instead.
func (*PipelineYmlGraphResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{79}
}

func (x *PipelineYmlGraphResponse) GetData() *PipelineYml {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineCallbackRequest) Reset() {
	*x = PipelineCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCallbackRequest) ProtoMessage() {}

func (x *PipelineCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCallbackRequest.ProtoReflect.Descriptor instead.
func (*PipelineCallbackRequest) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{80}
}

func (x *PipelineCallbackRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PipelineCallbackRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PipelineCallbackResponse) Reset() {
	*x = PipelineCallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCallbackResponse) ProtoMessage() {}

func (x *PipelineCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCallbackResponse.ProtoReflect.Descriptor instead.
func (*PipelineCallbackResponse) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{81}
}

var File_base_proto protoreflect.FileDescriptor

var file_base_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a,
	0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0e,
	0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x64, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01,
	0x0a, 0x12, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6e, 0x0a, 0x12, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x22, 0xd9, 0x08, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x79, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x79, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9,
	0x04, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x63, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x22, 0xf6, 0x0e, 0x0a, 0x16, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x53, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x6d, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x62, 0x0a,
	0x15, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x15, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x7f, 0x0a, 0x1e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x47, 0x43, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x43,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x43, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x43, 0x12,
	0x4b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x43, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x43,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x43, 0x22, 0x6a, 0x0a, 0x12,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x43, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x54, 0x4c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x43, 0x12,
	0x45, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x47, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x52, 0x0a,
	0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x54, 0x4c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x74, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a,
	0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x53, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x22, 0x4f,
	0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x46, 0x53, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x46, 0x53, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22,
	0xde, 0x02, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x72, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x72, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x9f, 0x02, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x13,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x63, 0x74, 0x78, 0x22, 0x4a, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x59, 0x6d, 0x6c, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x79, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48,
	0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x0d,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x05, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x2a, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22,
	0xde, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x51, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa7, 0x06, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59,
	0x6d, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x06, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x66, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x6f, 0x70, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22,
	0x7f, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x74, 0x6f, 0x70, 0x49, 0x66, 0x4c, 0x61, 0x74, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x70,
	0x49, 0x66, 0x4c, 0x61, 0x74, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x22, 0x33, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x67, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x9e,
	0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x22,
	0xc6, 0x01, 0x0a, 0x0d, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x0d, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xcc, 0x03, 0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x8d, 0x07, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x68, 0x0a, 0x15,
	0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x15, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x22, 0xe0, 0x01, 0x0a, 0x12, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x52, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75,
	0x6d, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x85, 0x03, 0x0a, 0x17,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x45, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x04, 0x73, 0x77, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73,
	0x77, 0x61, 0x70, 0x22, 0xad, 0x02, 0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x22, 0x32, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x22, 0x61, 0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x61, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61,
	0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x1b, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xef, 0x08, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x04,
	0x65, 0x6e, 0x76, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f,
	0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x72, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x02, 0x47, 0x43, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x43, 0x52, 0x02, 0x67, 0x63, 0x12, 0x47, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x01, 0x2d, 0x12, 0x32, 0x0a, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x45,
	0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x08,
	0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x79,
	0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x43, 0x53, 0x54, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x53, 0x54, 0x12, 0x34, 0x0a,
	0x15, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x43, 0x53, 0x54, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x53, 0x54, 0x12, 0x3c, 0x0a,
	0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x75, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x75, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6e, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x6e, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6e, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x59, 0x6d, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x5f, 0x0a,
	0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f,
	0x01, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x09, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x82, 0x08, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6d, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6d, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x5b, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5b,
	0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x15, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22,
	0x5d, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94,
	0x01, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x57, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x73,
	0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x18, 0x0a,
	0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x15, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x14,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41,
	0x74, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x15, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x4f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e,
	0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x1b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5d, 0x0a, 0x23, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x22, 0x3a, 0x0a, 0x24, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x01, 0x0a,
	0x24, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xe9, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x62, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf5, 0x02, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x59, 0x6d, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x8d, 0x01, 0x0a, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x4c, 0x0a, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x4c, 0x0a,
	0x1e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x18, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x41, 0x0a, 0x17, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xb0, 0x17, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0xa4, 0x04, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb0, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xa9, 0x03, 0x12, 0xa6, 0x03,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x3f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x7d, 0x26,
	0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x7b, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x7d, 0x26, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3d, 0x7b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x7d, 0x26, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3d, 0x7b,
	0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x7d, 0x26, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3d, 0x7b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x7d, 0x26, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x7d, 0x26, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x3d, 0x7b, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x7d, 0x26, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x3d, 0x7b, 0x6d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x7d, 0x26, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x3d, 0x7b, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x7d, 0x26, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x3d, 0x7b, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x7d, 0x26, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x3d, 0x7b, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x7d, 0x26, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x3d, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x7d, 0x26, 0x79, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x3d, 0x7b, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x59, 0x6d, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x7d, 0x26, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x3d, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x7d, 0x26, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7b, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x12,
	0x99, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x0e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x75, 0x6e, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e,
	0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x12, 0xba, 0x01, 0x0a,
	0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x72, 0x75,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x72,
	0x75, 0x6e, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0xcb, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59,
	0x6d, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x59, 0x6d, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x79, 0x6d, 0x6c, 0x2d, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x12, 0xb1, 0x01, 0x0a, 0x12, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x12, 0xea, 0x01, 0x0a, 0x1c, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65,
	0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_proto_rawDescOnce sync.Once
	file_base_proto_rawDescData = file_base_proto_rawDesc
)

func file_base_proto_rawDescGZIP() []byte {
	file_base_proto_rawDescOnce.Do(func() {
		file_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_proto_rawDescData)
	})
	return file_base_proto_rawDescData
}

var file_base_proto_msgTypes = make([]protoimpl.MessageInfo, 99)
var file_base_proto_goTypes = []interface{}{
	(*PipelineSnippetQueryRequest)(nil),           // 0: erda.core.pipeline.base.PipelineSnippetQueryRequest
	(*PipelineSnippetQueryResponse)(nil),          // 1: erda.core.pipeline.base.PipelineSnippetQueryResponse
	(*SnippetDetailQuery)(nil),                    // 2: erda.core.pipeline.base.SnippetDetailQuery
	(*SnippetQueryDetail)(nil),                    // 3: erda.core.pipeline.base.SnippetQueryDetail
	(*PipelineInstance)(nil),                      // 4: erda.core.pipeline.base.PipelineInstance
	(*PipelineExtra)(nil),                         // 5: erda.core.pipeline.base.PipelineExtra
	(*PipelineInstanceDetail)(nil),                // 6: erda.core.pipeline.base.PipelineInstanceDetail
	(*PipelineGC)(nil),                            // 7: erda.core.pipeline.base.PipelineGC
	(*PipelineResourceGC)(nil),                    // 8: erda.core.pipeline.base.PipelineResourceGC
	(*PipelineDatabaseGC)(nil),                    // 9: erda.core.pipeline.base.PipelineDatabaseGC
	(*PipelineDBGCItem)(nil),                      // 10: erda.core.pipeline.base.PipelineDBGCItem
	(*PipelineRunParam)(nil),                      // 11: erda.core.pipeline.base.PipelineRunParam
	(*PipelineRunParamWithValue)(nil),             // 12: erda.core.pipeline.base.PipelineRunParamWithValue
	(*PipelineUser)(nil),                          // 13: erda.core.pipeline.base.PipelineUser
	(*ShowMessage)(nil),                           // 14: erda.core.pipeline.base.ShowMessage
	(*StorageConfig)(nil),                         // 15: erda.core.pipeline.base.StorageConfig
	(*PipelineButton)(nil),                        // 16: erda.core.pipeline.base.PipelineButton
	(*PipelineExecuteRecord)(nil),                 // 17: erda.core.pipeline.base.PipelineExecuteRecord
	(*PipelineEvent)(nil),                         // 18: erda.core.pipeline.base.PipelineEvent
	(*PipelineEventSource)(nil),                   // 19: erda.core.pipeline.base.PipelineEventSource
	(*ErrorResponse)(nil),                         // 20: erda.core.pipeline.base.ErrorResponse
	(*PipelineOutput)(nil),                        // 21: erda.core.pipeline.base.PipelineOutput
	(*PipelineOutputWithValue)(nil),               // 22: erda.core.pipeline.base.PipelineOutputWithValue
	(*PipelineParam)(nil),                         // 23: erda.core.pipeline.base.PipelineParam
	(*PipelineParamWithValue)(nil),                // 24: erda.core.pipeline.base.PipelineParamWithValue
	(*PipelineYml)(nil),                           // 25: erda.core.pipeline.base.PipelineYml
	(*TriggerConfig)(nil),                         // 26: erda.core.pipeline.base.TriggerConfig
	(*PushTrigger)(nil),                           // 27: erda.core.pipeline.base.PushTrigger
	(*MergeTrigger)(nil),                          // 28: erda.core.pipeline.base.MergeTrigger
	(*NetworkHookInfo)(nil),                       // 29: erda.core.pipeline.base.NetworkHookInfo
	(*PipelineYmlAction)(nil),                     // 30: erda.core.pipeline.base.PipelineYmlAction
	(*Resources)(nil),                             // 31: erda.core.pipeline.base.Resources
	(*CronCompensator)(nil),                       // 32: erda.core.pipeline.base.CronCompensator
	(*ActionCache)(nil),                           // 33: erda.core.pipeline.base.ActionCache
	(*TaskLoop)(nil),                              // 34: erda.core.pipeline.base.TaskLoop
	(*TaskLoopStrategy)(nil),                      // 35: erda.core.pipeline.base.TaskLoopStrategy
	(*SnippetStages)(nil),                         // 36: erda.core.pipeline.base.SnippetStages
	(*PipelineStage)(nil),                         // 37: erda.core.pipeline.base.PipelineStage
	(*PipelineStageDetail)(nil),                   // 38: erda.core.pipeline.base.PipelineStageDetail
	(*PipelineTask)(nil),                          // 39: erda.core.pipeline.base.PipelineTask
	(*PipelineTaskExtra)(nil),                     // 40: erda.core.pipeline.base.PipelineTaskExtra
	(*PipelineTaskResult)(nil),                    // 41: erda.core.pipeline.base.PipelineTaskResult
	(*PipelineTaskSnippetDetail)(nil),             // 42: erda.core.pipeline.base.PipelineTaskSnippetDetail
	(*PipelineTaskMachineStat)(nil),               // 43: erda.core.pipeline.base.PipelineTaskMachineStat
	(*PipelineTaskMachineHostStat)(nil),           // 44: erda.core.pipeline.base.PipelineTaskMachineHostStat
	(*PipelineTaskMachinePodStat)(nil),            // 45: erda.core.pipeline.base.PipelineTaskMachinePodStat
	(*PipelineTaskMachineLoadStat)(nil),           // 46: erda.core.pipeline.base.PipelineTaskMachineLoadStat
	(*PipelineTaskMachineMemStat)(nil),            // 47: erda.core.pipeline.base.PipelineTaskMachineMemStat
	(*PipelineTaskMachineSwapStat)(nil),           // 48: erda.core.pipeline.base.PipelineTaskMachineSwapStat
	(*PipelineTaskActionDetail)(nil),              // 49: erda.core.pipeline.base.PipelineTaskActionDetail
	(*PipelineCreateRequest)(nil),                 // 50: erda.core.pipeline.base.PipelineCreateRequest
	(*PipelineCreateResponse)(nil),                // 51: erda.core.pipeline.base.PipelineCreateResponse
	(*PipelinePagingRequest)(nil),                 // 52: erda.core.pipeline.base.PipelinePagingRequest
	(*PipelinePagingResponse)(nil),                // 53: erda.core.pipeline.base.PipelinePagingResponse
	(*PipelineListResponseData)(nil),              // 54: erda.core.pipeline.base.PipelineListResponseData
	(*PagePipeline)(nil),                          // 55: erda.core.pipeline.base.PagePipeline
	(*SnippetConfig)(nil),                         // 56: erda.core.pipeline.base.SnippetConfig
	(*PipelineDetailRequest)(nil),                 // 57: erda.core.pipeline.base.PipelineDetailRequest
	(*PipelineDetailResponse)(nil),                // 58: erda.core.pipeline.base.PipelineDetailResponse
	(*PipelineTaskOperateRequest)(nil),            // 59: erda.core.pipeline.base.PipelineTaskOperateRequest
	(*PipelineOperateRequest)(nil),                // 60: erda.core.pipeline.base.PipelineOperateRequest
	(*PipelineOperateResponse)(nil),               // 61: erda.core.pipeline.base.PipelineOperateResponse
	(*PipelineDeleteRequest)(nil),                 // 62: erda.core.pipeline.base.PipelineDeleteRequest
	(*PipelineDeleteResponse)(nil),                // 63: erda.core.pipeline.base.PipelineDeleteResponse
	(*PipelineRunRequest)(nil),                    // 64: erda.core.pipeline.base.PipelineRunRequest
	(*PipelineRunResponse)(nil),                   // 65: erda.core.pipeline.base.PipelineRunResponse
	(*PipelineCancelRequest)(nil),                 // 66: erda.core.pipeline.base.PipelineCancelRequest
	(*PipelineCancelResponse)(nil),                // 67: erda.core.pipeline.base.PipelineCancelResponse
	(*PipelineRerunRequest)(nil),                  // 68: erda.core.pipeline.base.PipelineRerunRequest
	(*PipelineRerunResponse)(nil),                 // 69: erda.core.pipeline.base.PipelineRerunResponse
	(*PipelineRerunFailedRequest)(nil),            // 70: erda.core.pipeline.base.PipelineRerunFailedRequest
	(*PipelineRerunFailedResponse)(nil),           // 71: erda.core.pipeline.base.PipelineRerunFailedResponse
	(*PipelineTaskDetailRequest)(nil),             // 72: erda.core.pipeline.base.PipelineTaskDetailRequest
	(*PipelineTaskDetailResponse)(nil),            // 73: erda.core.pipeline.base.PipelineTaskDetailResponse
	(*PipelineTaskGetBootstrapInfoRequest)(nil),   // 74: erda.core.pipeline.base.PipelineTaskGetBootstrapInfoRequest
	(*PipelineTaskGetBootstrapInfoResponse)(nil),  // 75: erda.core.pipeline.base.PipelineTaskGetBootstrapInfoResponse
	(*DeprecatedPipelineBatchCreateRequest)(nil),  // 76: erda.core.pipeline.base.DeprecatedPipelineBatchCreateRequest
	(*DeprecatedPipelineBatchCreateResponse)(nil), // 77: erda.core.pipeline.base.DeprecatedPipelineBatchCreateResponse
	(*PipelineYmlGraphRequest)(nil),               // 78: erda.core.pipeline.base.PipelineYmlGraphRequest
	(*PipelineYmlGraphResponse)(nil),              // 79: erda.core.pipeline.base.PipelineYmlGraphResponse
	(*PipelineCallbackRequest)(nil),               // 80: erda.core.pipeline.base.PipelineCallbackRequest
	(*PipelineCallbackResponse)(nil),              // 81: erda.core.pipeline.base.PipelineCallbackResponse
	nil,                                           // 82: erda.core.pipeline.base.PipelineSnippetQueryResponse.DataEntry
	nil,                                           // 83: erda.core.pipeline.base.SnippetDetailQuery.LabelsEntry
	nil,                                           // 84: erda.core.pipeline.base.PipelineInstance.LabelsEntry
	nil,                                           // 85: erda.core.pipeline.base.PipelineInstanceDetail.LabelsEntry
	nil,                                           // 86: erda.core.pipeline.base.PipelineInstanceDetail.PipelineTaskActionDetailsEntry
	nil,                                           // 87: erda.core.pipeline.base.PipelineYml.EnvsEntry
	nil,                                           // 88: erda.core.pipeline.base.NetworkHookInfo.LabelsEntry
	nil,                                           // 89: erda.core.pipeline.base.PipelineYmlAction.ParamsEntry
	nil,                                           // 90: erda.core.pipeline.base.PipelineTask.LabelsEntry
	nil,                                           // 91: erda.core.pipeline.base.PipelineCreateRequest.LabelsEntry
	nil,                                           // 92: erda.core.pipeline.base.PipelineCreateRequest.NormalLabelsEntry
	nil,                                           // 93: erda.core.pipeline.base.PipelineCreateRequest.EnvsEntry
	nil,                                           // 94: erda.core.pipeline.base.PagePipeline.FilterLabelsEntry
	nil,                                           // 95: erda.core.pipeline.base.PagePipeline.NormalLabelsEntry
	nil,                                           // 96: erda.core.pipeline.base.SnippetConfig.LabelsEntry
	nil,                                           // 97: erda.core.pipeline.base.DeprecatedPipelineBatchCreateResponse.DataEntry
	nil,                                           // 98: erda.core.pipeline.base.PipelineYmlGraphRequest.GlobalSnippetConfigLabelsEntry
	(*pb.CommitDetail)(nil),                       // 99: erda.common.CommitDetail
	(*timestamppb.Timestamp)(nil),                 // 100: google.protobuf.Timestamp
	(*pb1.Cron)(nil),                              // 101: erda.core.pipeline.cron.Cron
	(*structpb.Value)(nil),                        // 102: google.protobuf.Value
	(*structpb.ListValue)(nil),                    // 103: google.protobuf.ListValue
	(*pb.MetadataField)(nil),                      // 104: erda.common.MetadataField
	(*pb2.Queue)(nil),                             // 105: erda.core.pipeline.queue.Queue
	(*pb.IdentityInfo)(nil),                       // 106: erda.common.IdentityInfo
}
var file_base_proto_depIdxs = []int32{
	2,   // 0: erda.core.pipeline.base.PipelineSnippetQueryRequest.snippetConfigs:type_name -> erda.core.pipeline.base.SnippetDetailQuery
	82,  // 1: erda.core.pipeline.base.PipelineSnippetQueryResponse.data:type_name -> erda.core.pipeline.base.PipelineSnippetQueryResponse.DataEntry
	83,  // 2: erda.core.pipeline.base.SnippetDetailQuery.labels:type_name -> erda.core.pipeline.base.SnippetDetailQuery.LabelsEntry
	23,  // 3: erda.core.pipeline.base.SnippetQueryDetail.params:type_name -> erda.core.pipeline.base.PipelineParam
	84,  // 4: erda.core.pipeline.base.PipelineInstance.labels:type_name -> erda.core.pipeline.base.PipelineInstance.LabelsEntry
	5,   // 5: erda.core.pipeline.base.PipelineInstance.extra:type_name -> erda.core.pipeline.base.PipelineExtra
	99,  // 6: erda.core.pipeline.base.PipelineInstance.commitDetail:type_name -> erda.common.CommitDetail
	100, // 7: erda.core.pipeline.base.PipelineInstance.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 8: erda.core.pipeline.base.PipelineInstance.timeEnd:type_name -> google.protobuf.Timestamp
	100, // 9: erda.core.pipeline.base.PipelineInstance.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 10: erda.core.pipeline.base.PipelineInstance.timeUpdated:type_name -> google.protobuf.Timestamp
	13,  // 11: erda.core.pipeline.base.PipelineExtra.submitUser:type_name -> erda.core.pipeline.base.PipelineUser
	13,  // 12: erda.core.pipeline.base.PipelineExtra.runUser:type_name -> erda.core.pipeline.base.PipelineUser
	13,  // 13: erda.core.pipeline.base.PipelineExtra.cancelUser:type_name -> erda.core.pipeline.base.PipelineUser
	100, // 14: erda.core.pipeline.base.PipelineExtra.cronTriggerTime:type_name -> google.protobuf.Timestamp
	14,  // 15: erda.core.pipeline.base.PipelineExtra.show_message:type_name -> erda.core.pipeline.base.ShowMessage
	85,  // 16: erda.core.pipeline.base.PipelineInstanceDetail.labels:type_name -> erda.core.pipeline.base.PipelineInstanceDetail.LabelsEntry
	5,   // 17: erda.core.pipeline.base.PipelineInstanceDetail.extra:type_name -> erda.core.pipeline.base.PipelineExtra
	99,  // 18: erda.core.pipeline.base.PipelineInstanceDetail.commitDetail:type_name -> erda.common.CommitDetail
	100, // 19: erda.core.pipeline.base.PipelineInstanceDetail.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 20: erda.core.pipeline.base.PipelineInstanceDetail.timeEnd:type_name -> google.protobuf.Timestamp
	100, // 21: erda.core.pipeline.base.PipelineInstanceDetail.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 22: erda.core.pipeline.base.PipelineInstanceDetail.timeUpdated:type_name -> google.protobuf.Timestamp
	38,  // 23: erda.core.pipeline.base.PipelineInstanceDetail.pipelineStages:type_name -> erda.core.pipeline.base.PipelineStageDetail
	38,  // 24: erda.core.pipeline.base.PipelineInstanceDetail.pipelineSnippetStages:type_name -> erda.core.pipeline.base.PipelineStageDetail
	101, // 25: erda.core.pipeline.base.PipelineInstanceDetail.pipelineCron:type_name -> erda.core.pipeline.cron.Cron
	16,  // 26: erda.core.pipeline.base.PipelineInstanceDetail.pipelineButton:type_name -> erda.core.pipeline.base.PipelineButton
	86,  // 27: erda.core.pipeline.base.PipelineInstanceDetail.pipelineTaskActionDetails:type_name -> erda.core.pipeline.base.PipelineInstanceDetail.PipelineTaskActionDetailsEntry
	24,  // 28: erda.core.pipeline.base.PipelineInstanceDetail.runParams:type_name -> erda.core.pipeline.base.PipelineParamWithValue
	18,  // 29: erda.core.pipeline.base.PipelineInstanceDetail.events:type_name -> erda.core.pipeline.base.PipelineEvent
	8,   // 30: erda.core.pipeline.base.PipelineGC.resourceGC:type_name -> erda.core.pipeline.base.PipelineResourceGC
	9,   // 31: erda.core.pipeline.base.PipelineGC.databaseGC:type_name -> erda.core.pipeline.base.PipelineDatabaseGC
	10,  // 32: erda.core.pipeline.base.PipelineDatabaseGC.analyzed:type_name -> erda.core.pipeline.base.PipelineDBGCItem
	10,  // 33: erda.core.pipeline.base.PipelineDatabaseGC.finished:type_name -> erda.core.pipeline.base.PipelineDBGCItem
	102, // 34: erda.core.pipeline.base.PipelineRunParam.value:type_name -> google.protobuf.Value
	102, // 35: erda.core.pipeline.base.PipelineRunParamWithValue.value:type_name -> google.protobuf.Value
	102, // 36: erda.core.pipeline.base.PipelineRunParamWithValue.trueValue:type_name -> google.protobuf.Value
	100, // 37: erda.core.pipeline.base.PipelineExecuteRecord.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 38: erda.core.pipeline.base.PipelineExecuteRecord.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 39: erda.core.pipeline.base.PipelineExecuteRecord.timeEnd:type_name -> google.protobuf.Timestamp
	19,  // 40: erda.core.pipeline.base.PipelineEvent.source:type_name -> erda.core.pipeline.base.PipelineEventSource
	100, // 41: erda.core.pipeline.base.PipelineEvent.firstTimestamp:type_name -> google.protobuf.Timestamp
	100, // 42: erda.core.pipeline.base.PipelineEvent.lastTimestamp:type_name -> google.protobuf.Timestamp
	102, // 43: erda.core.pipeline.base.ErrorResponse.ctx:type_name -> google.protobuf.Value
	102, // 44: erda.core.pipeline.base.PipelineOutputWithValue.value:type_name -> google.protobuf.Value
	102, // 45: erda.core.pipeline.base.PipelineParam.default:type_name -> google.protobuf.Value
	102, // 46: erda.core.pipeline.base.PipelineParamWithValue.default:type_name -> google.protobuf.Value
	102, // 47: erda.core.pipeline.base.PipelineParamWithValue.value:type_name -> google.protobuf.Value
	87,  // 48: erda.core.pipeline.base.PipelineYml.envs:type_name -> erda.core.pipeline.base.PipelineYml.EnvsEntry
	32,  // 49: erda.core.pipeline.base.PipelineYml.cronCompensator:type_name -> erda.core.pipeline.base.CronCompensator
	103, // 50: erda.core.pipeline.base.PipelineYml.stages:type_name -> google.protobuf.ListValue
	30,  // 51: erda.core.pipeline.base.PipelineYml.flatActions:type_name -> erda.core.pipeline.base.PipelineYmlAction
	23,  // 52: erda.core.pipeline.base.PipelineYml.params:type_name -> erda.core.pipeline.base.PipelineParam
	21,  // 53: erda.core.pipeline.base.PipelineYml.outputs:type_name -> erda.core.pipeline.base.PipelineOutput
	26,  // 54: erda.core.pipeline.base.PipelineYml.on:type_name -> erda.core.pipeline.base.TriggerConfig
	29,  // 55: erda.core.pipeline.base.PipelineYml.lifecycle:type_name -> erda.core.pipeline.base.NetworkHookInfo
	27,  // 56: erda.core.pipeline.base.TriggerConfig.push:type_name -> erda.core.pipeline.base.PushTrigger
	28,  // 57: erda.core.pipeline.base.TriggerConfig.merge:type_name -> erda.core.pipeline.base.MergeTrigger
	88,  // 58: erda.core.pipeline.base.NetworkHookInfo.labels:type_name -> erda.core.pipeline.base.NetworkHookInfo.LabelsEntry
	89,  // 59: erda.core.pipeline.base.PipelineYmlAction.params:type_name -> erda.core.pipeline.base.PipelineYmlAction.ParamsEntry
	31,  // 60: erda.core.pipeline.base.PipelineYmlAction.resources:type_name -> erda.core.pipeline.base.Resources
	33,  // 61: erda.core.pipeline.base.PipelineYmlAction.caches:type_name -> erda.core.pipeline.base.ActionCache
	56,  // 62: erda.core.pipeline.base.PipelineYmlAction.snippetConfig:type_name -> erda.core.pipeline.base.SnippetConfig
	34,  // 63: erda.core.pipeline.base.PipelineYmlAction.loop:type_name -> erda.core.pipeline.base.TaskLoop
	36,  // 64: erda.core.pipeline.base.PipelineYmlAction.snippetStages:type_name -> erda.core.pipeline.base.SnippetStages
	35,  // 65: erda.core.pipeline.base.TaskLoop.strategy:type_name -> erda.core.pipeline.base.TaskLoopStrategy
	23,  // 66: erda.core.pipeline.base.SnippetStages.params:type_name -> erda.core.pipeline.base.PipelineParam
	21,  // 67: erda.core.pipeline.base.SnippetStages.outputs:type_name -> erda.core.pipeline.base.PipelineOutput
	103, // 68: erda.core.pipeline.base.SnippetStages.stages:type_name -> google.protobuf.ListValue
	100, // 69: erda.core.pipeline.base.PipelineStage.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 70: erda.core.pipeline.base.PipelineStage.timeEnd:type_name -> google.protobuf.Timestamp
	100, // 71: erda.core.pipeline.base.PipelineStage.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 72: erda.core.pipeline.base.PipelineStage.timeUpdated:type_name -> google.protobuf.Timestamp
	100, // 73: erda.core.pipeline.base.PipelineStageDetail.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 74: erda.core.pipeline.base.PipelineStageDetail.timeEnd:type_name -> google.protobuf.Timestamp
	100, // 75: erda.core.pipeline.base.PipelineStageDetail.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 76: erda.core.pipeline.base.PipelineStageDetail.timeUpdated:type_name -> google.protobuf.Timestamp
	39,  // 77: erda.core.pipeline.base.PipelineStageDetail.pipelineTasks:type_name -> erda.core.pipeline.base.PipelineTask
	40,  // 78: erda.core.pipeline.base.PipelineTask.extra:type_name -> erda.core.pipeline.base.PipelineTaskExtra
	90,  // 79: erda.core.pipeline.base.PipelineTask.labels:type_name -> erda.core.pipeline.base.PipelineTask.LabelsEntry
	41,  // 80: erda.core.pipeline.base.PipelineTask.result:type_name -> erda.core.pipeline.base.PipelineTaskResult
	42,  // 81: erda.core.pipeline.base.PipelineTask.snippetPipelineDetail:type_name -> erda.core.pipeline.base.PipelineTaskSnippetDetail
	100, // 82: erda.core.pipeline.base.PipelineTask.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 83: erda.core.pipeline.base.PipelineTask.timeEnd:type_name -> google.protobuf.Timestamp
	100, // 84: erda.core.pipeline.base.PipelineTask.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 85: erda.core.pipeline.base.PipelineTask.timeUpdated:type_name -> google.protobuf.Timestamp
	104, // 86: erda.core.pipeline.base.PipelineTaskResult.metadata:type_name -> erda.common.MetadataField
	20,  // 87: erda.core.pipeline.base.PipelineTaskResult.errors:type_name -> erda.core.pipeline.base.ErrorResponse
	43,  // 88: erda.core.pipeline.base.PipelineTaskResult.machineStat:type_name -> erda.core.pipeline.base.PipelineTaskMachineStat
	22,  // 89: erda.core.pipeline.base.PipelineTaskSnippetDetail.outputs:type_name -> erda.core.pipeline.base.PipelineOutputWithValue
	44,  // 90: erda.core.pipeline.base.PipelineTaskMachineStat.host:type_name -> erda.core.pipeline.base.PipelineTaskMachineHostStat
	45,  // 91: erda.core.pipeline.base.PipelineTaskMachineStat.pod:type_name -> erda.core.pipeline.base.PipelineTaskMachinePodStat
	46,  // 92: erda.core.pipeline.base.PipelineTaskMachineStat.load:type_name -> erda.core.pipeline.base.PipelineTaskMachineLoadStat
	47,  // 93: erda.core.pipeline.base.PipelineTaskMachineStat.mem:type_name -> erda.core.pipeline.base.PipelineTaskMachineMemStat
	48,  // 94: erda.core.pipeline.base.PipelineTaskMachineStat.swap:type_name -> erda.core.pipeline.base.PipelineTaskMachineSwapStat
	91,  // 95: erda.core.pipeline.base.PipelineCreateRequest.labels:type_name -> erda.core.pipeline.base.PipelineCreateRequest.LabelsEntry
	92,  // 96: erda.core.pipeline.base.PipelineCreateRequest.normalLabels:type_name -> erda.core.pipeline.base.PipelineCreateRequest.NormalLabelsEntry
	93,  // 97: erda.core.pipeline.base.PipelineCreateRequest.envs:type_name -> erda.core.pipeline.base.PipelineCreateRequest.EnvsEntry
	100, // 98: erda.core.pipeline.base.PipelineCreateRequest.cronStartFrom:type_name -> google.protobuf.Timestamp
	7,   // 99: erda.core.pipeline.base.PipelineCreateRequest.GC:type_name -> erda.core.pipeline.base.PipelineGC
	11,  // 100: erda.core.pipeline.base.PipelineCreateRequest.runParams:type_name -> erda.core.pipeline.base.PipelineRunParam
	105, // 101: erda.core.pipeline.base.PipelineCreateRequest.bindQueue:type_name -> erda.core.pipeline.queue.Queue
	106, // 102: erda.core.pipeline.base.PipelineCreateRequest.identityInfo:type_name -> erda.common.IdentityInfo
	4,   // 103: erda.core.pipeline.base.PipelineCreateResponse.data:type_name -> erda.core.pipeline.base.PipelineInstance
	54,  // 104: erda.core.pipeline.base.PipelinePagingResponse.data:type_name -> erda.core.pipeline.base.PipelineListResponseData
	55,  // 105: erda.core.pipeline.base.PipelineListResponseData.pipelines:type_name -> erda.core.pipeline.base.PagePipeline
	5,   // 106: erda.core.pipeline.base.PagePipeline.extra:type_name -> erda.core.pipeline.base.PipelineExtra
	94,  // 107: erda.core.pipeline.base.PagePipeline.filterLabels:type_name -> erda.core.pipeline.base.PagePipeline.FilterLabelsEntry
	95,  // 108: erda.core.pipeline.base.PagePipeline.normalLabels:type_name -> erda.core.pipeline.base.PagePipeline.NormalLabelsEntry
	100, // 109: erda.core.pipeline.base.PagePipeline.timeBegin:type_name -> google.protobuf.Timestamp
	100, // 110: erda.core.pipeline.base.PagePipeline.timeEnd:type_name -> google.protobuf.Timestamp
	100, // 111: erda.core.pipeline.base.PagePipeline.timeCreated:type_name -> google.protobuf.Timestamp
	100, // 112: erda.core.pipeline.base.PagePipeline.timeUpdated:type_name -> google.protobuf.Timestamp
	96,  // 113: erda.core.pipeline.base.SnippetConfig.labels:type_name -> erda.core.pipeline.base.SnippetConfig.LabelsEntry
	6,   // 114: erda.core.pipeline.base.PipelineDetailResponse.data:type_name -> erda.core.pipeline.base.PipelineInstanceDetail
	102, // 115: erda.core.pipeline.base.PipelineTaskOperateRequest.disable:type_name -> google.protobuf.Value
	102, // 116: erda.core.pipeline.base.PipelineTaskOperateRequest.pause:type_name -> google.protobuf.Value
	59,  // 117: erda.core.pipeline.base.PipelineOperateRequest.taskOperates:type_name -> erda.core.pipeline.base.PipelineTaskOperateRequest
	11,  // 118: erda.core.pipeline.base.PipelineRunRequest.pipelineRunParams:type_name -> erda.core.pipeline.base.PipelineRunParam
	106, // 119: erda.core.pipeline.base.PipelineRunRequest.identityInfo:type_name -> erda.common.IdentityInfo
	106, // 120: erda.core.pipeline.base.PipelineCancelRequest.identityInfo:type_name -> erda.common.IdentityInfo
	106, // 121: erda.core.pipeline.base.PipelineRerunRequest.identityInfo:type_name -> erda.common.IdentityInfo
	4,   // 122: erda.core.pipeline.base.PipelineRerunResponse.data:type_name -> erda.core.pipeline.base.PipelineInstance
	106, // 123: erda.core.pipeline.base.PipelineRerunFailedRequest.identityInfo:type_name -> erda.common.IdentityInfo
	4,   // 124: erda.core.pipeline.base.PipelineRerunFailedResponse.data:type_name -> erda.core.pipeline.base.PipelineInstance
	39,  // 125: erda.core.pipeline.base.PipelineTaskDetailResponse.data:type_name -> erda.core.pipeline.base.PipelineTask
	97,  // 126: erda.core.pipeline.base.DeprecatedPipelineBatchCreateResponse.data:type_name -> erda.core.pipeline.base.DeprecatedPipelineBatchCreateResponse.DataEntry
	98,  // 127: erda.core.pipeline.base.PipelineYmlGraphRequest.globalSnippetConfigLabels:type_name -> erda.core.pipeline.base.PipelineYmlGraphRequest.GlobalSnippetConfigLabelsEntry
	56,  // 128: erda.core.pipeline.base.PipelineYmlGraphRequest.snippetConfig:type_name -> erda.core.pipeline.base.SnippetConfig
	25,  // 129: erda.core.pipeline.base.PipelineYmlGraphResponse.data:type_name -> erda.core.pipeline.base.PipelineYml
	3,   // 130: erda.core.pipeline.base.PipelineSnippetQueryResponse.DataEntry.value:type_name -> erda.core.pipeline.base.SnippetQueryDetail
	49,  // 131: erda.core.pipeline.base.PipelineInstanceDetail.PipelineTaskActionDetailsEntry.value:type_name -> erda.core.pipeline.base.PipelineTaskActionDetail
	102, // 132: erda.core.pipeline.base.NetworkHookInfo.LabelsEntry.value:type_name -> google.protobuf.Value
	102, // 133: erda.core.pipeline.base.PipelineYmlAction.ParamsEntry.value:type_name -> google.protobuf.Value
	4,   // 134: erda.core.pipeline.base.DeprecatedPipelineBatchCreateResponse.DataEntry.value:type_name -> erda.core.pipeline.base.PipelineInstance
	50,  // 135: erda.core.pipeline.base.BaseService.PipelineCreate:input_type -> erda.core.pipeline.base.PipelineCreateRequest
	52,  // 136: erda.core.pipeline.base.BaseService.PipelinePaging:input_type -> erda.core.pipeline.base.PipelinePagingRequest
	57,  // 137: erda.core.pipeline.base.BaseService.PipelineDetail:input_type -> erda.core.pipeline.base.PipelineDetailRequest
	60,  // 138: erda.core.pipeline.base.BaseService.PipelineOperate:input_type -> erda.core.pipeline.base.PipelineOperateRequest
	62,  // 139: erda.core.pipeline.base.BaseService.PipelineDelete:input_type -> erda.core.pipeline.base.PipelineDeleteRequest
	64,  // 140: erda.core.pipeline.base.BaseService.PipelineRun:input_type -> erda.core.pipeline.base.PipelineRunRequest
	66,  // 141: erda.core.pipeline.base.BaseService.PipelineCancel:input_type -> erda.core.pipeline.base.PipelineCancelRequest
	68,  // 142: erda.core.pipeline.base.BaseService.PipelineRerun:input_type -> erda.core.pipeline.base.PipelineRerunRequest
	70,  // 143: erda.core.pipeline.base.BaseService.PipelineRerunFailed:input_type -> erda.core.pipeline.base.PipelineRerunFailedRequest
	76,  // 144: erda.core.pipeline.base.BaseService.DeprecatedPipelineBatchCreate:input_type -> erda.core.pipeline.base.DeprecatedPipelineBatchCreateRequest
	78,  // 145: erda.core.pipeline.base.BaseService.PipelineYmlGraph:input_type -> erda.core.pipeline.base.PipelineYmlGraphRequest
	72,  // 146: erda.core.pipeline.base.BaseService.PipelineTaskDetail:input_type -> erda.core.pipeline.base.PipelineTaskDetailRequest
	74,  // 147: erda.core.pipeline.base.BaseService.PipelineTaskGetBootstrapInfo:input_type -> erda.core.pipeline.base.PipelineTaskGetBootstrapInfoRequest
	80,  // 148: erda.core.pipeline.base.BaseService.PipelineCallback:input_type -> erda.core.pipeline.base.PipelineCallbackRequest
	0,   // 149: erda.core.pipeline.base.BaseService.QueryPipelineSnippet:input_type -> erda.core.pipeline.base.PipelineSnippetQueryRequest
	51,  // 150: erda.core.pipeline.base.BaseService.PipelineCreate:output_type -> erda.core.pipeline.base.PipelineCreateResponse
	53,  // 151: erda.core.pipeline.base.BaseService.PipelinePaging:output_type -> erda.core.pipeline.base.PipelinePagingResponse
	58,  // 152: erda.core.pipeline.base.BaseService.PipelineDetail:output_type -> erda.core.pipeline.base.PipelineDetailResponse
	61,  // 153: erda.core.pipeline.base.BaseService.PipelineOperate:output_type -> erda.core.pipeline.base.PipelineOperateResponse
	63,  // 154: erda.core.pipeline.base.BaseService.PipelineDelete:output_type -> erda.core.pipeline.base.PipelineDeleteResponse
	65,  // 155: erda.core.pipeline.base.BaseService.PipelineRun:output_type -> erda.core.pipeline.base.PipelineRunResponse
	67,  // 156: erda.core.pipeline.base.BaseService.PipelineCancel:output_type -> erda.core.pipeline.base.PipelineCancelResponse
	69,  // 157: erda.core.pipeline.base.BaseService.PipelineRerun:output_type -> erda.core.pipeline.base.PipelineRerunResponse
	71,  // 158: erda.core.pipeline.base.BaseService.PipelineRerunFailed:output_type -> erda.core.pipeline.base.PipelineRerunFailedResponse
	77,  // 159: erda.core.pipeline.base.BaseService.DeprecatedPipelineBatchCreate:output_type -> erda.core.pipeline.base.DeprecatedPipelineBatchCreateResponse
	79,  // 160: erda.core.pipeline.base.BaseService.PipelineYmlGraph:output_type -> erda.core.pipeline.base.PipelineYmlGraphResponse
	73,  // 161: erda.core.pipeline.base.BaseService.PipelineTaskDetail:output_type -> erda.core.pipeline.base.PipelineTaskDetailResponse
	75,  // 162: erda.core.pipeline.base.BaseService.PipelineTaskGetBootstrapInfo:output_type -> erda.core.pipeline.base.PipelineTaskGetBootstrapInfoResponse
	81,  // 163: erda.core.pipeline.base.BaseService.PipelineCallback:output_type -> erda.core.pipeline.base.PipelineCallbackResponse
	0,   // 164: erda.core.pipeline.base.BaseService.QueryPipelineSnippet:output_type -> erda.core.pipeline.base.PipelineSnippetQueryRequest
	150, // [150:165] is the sub-list for method output_type
	135, // [135:150] is the sub-list for method input_type
	135, // [135:135] is the sub-list for extension type_name
	135, // [135:135] is the sub-list for extension extendee
	0,   // [0:135] is the sub-list for field type_name
}

func init() { file_base_proto_init() }
func file_base_proto_init() {
	if File_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSnippetQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSnippetQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetDetailQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetQueryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInstanceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineResourceGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDatabaseGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDBGCItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunParamWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineExecuteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineEventSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOutputWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineParamWithValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineYml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHookInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineYmlAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCompensator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLoopStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetStages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskSnippetDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineHostStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachinePodStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineLoadStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineMemStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskMachineSwapStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskActionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagePipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRerunFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskGetBootstrapInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTaskGetBootstrapInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedPipelineBatchCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedPipelineBatchCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineYmlGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineYmlGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   99,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_base_proto_goTypes,
		DependencyIndexes: file_base_proto_depIdxs,
		MessageInfos:      file_base_proto_msgTypes,
	}.Build()
	File_base_proto = out.File
	file_base_proto_rawDesc = nil
	file_base_proto_goTypes = nil
	file_base_proto_depIdxs = nil
}
