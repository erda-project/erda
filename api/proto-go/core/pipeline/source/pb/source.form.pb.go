// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: source.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*PipelineSource)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceDeleteRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceDeleteResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceGetRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineSourceListResponse)(nil)

// PipelineSource implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSource) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "sourceType":
				m.SourceType = vals[0]
			case "remote":
				m.Remote = vals[0]
			case "ref":
				m.Ref = vals[0]
			case "path":
				m.Path = vals[0]
			case "name":
				m.Name = vals[0]
			case "pipelineYml":
				m.PipelineYml = vals[0]
			case "versionLock":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.VersionLock = val
			case "softDeletedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.SoftDeletedAt = val
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			}
		}
	}
	return nil
}

// PipelineSourceCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "sourceType":
				m.SourceType = vals[0]
			case "remote":
				m.Remote = vals[0]
			case "ref":
				m.Ref = vals[0]
			case "path":
				m.Path = vals[0]
			case "name":
				m.Name = vals[0]
			case "pipelineYml":
				m.PipelineYml = vals[0]
			case "versionLock":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.VersionLock = val
			}
		}
	}
	return nil
}

// PipelineSourceCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineSource":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
			case "pipelineSource.ID":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.ID = vals[0]
			case "pipelineSource.sourceType":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.SourceType = vals[0]
			case "pipelineSource.remote":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Remote = vals[0]
			case "pipelineSource.ref":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Ref = vals[0]
			case "pipelineSource.path":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Path = vals[0]
			case "pipelineSource.name":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Name = vals[0]
			case "pipelineSource.pipelineYml":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.PipelineYml = vals[0]
			case "pipelineSource.versionLock":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.VersionLock = val
			case "pipelineSource.softDeletedAt":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.SoftDeletedAt = val
			case "pipelineSource.timeCreated":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
			case "pipelineSource.timeCreated.seconds":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeCreated.Seconds = val
			case "pipelineSource.timeCreated.nanos":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeCreated.Nanos = int32(val)
			case "pipelineSource.timeUpdated":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "pipelineSource.timeUpdated.seconds":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeUpdated.Seconds = val
			case "pipelineSource.timeUpdated.nanos":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeUpdated.Nanos = int32(val)
			}
		}
	}
	return nil
}

// PipelineSourceUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineYml":
				m.PipelineYml = vals[0]
			case "pipelineSourceID":
				m.PipelineSourceID = vals[0]
			case "versionLock":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.VersionLock = val
			}
		}
	}
	return nil
}

// PipelineSourceUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineSource":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
			case "pipelineSource.ID":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.ID = vals[0]
			case "pipelineSource.sourceType":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.SourceType = vals[0]
			case "pipelineSource.remote":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Remote = vals[0]
			case "pipelineSource.ref":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Ref = vals[0]
			case "pipelineSource.path":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Path = vals[0]
			case "pipelineSource.name":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Name = vals[0]
			case "pipelineSource.pipelineYml":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.PipelineYml = vals[0]
			case "pipelineSource.versionLock":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.VersionLock = val
			case "pipelineSource.softDeletedAt":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.SoftDeletedAt = val
			case "pipelineSource.timeCreated":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
			case "pipelineSource.timeCreated.seconds":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeCreated.Seconds = val
			case "pipelineSource.timeCreated.nanos":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeCreated.Nanos = int32(val)
			case "pipelineSource.timeUpdated":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "pipelineSource.timeUpdated.seconds":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeUpdated.Seconds = val
			case "pipelineSource.timeUpdated.nanos":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeUpdated.Nanos = int32(val)
			}
		}
	}
	return nil
}

// PipelineSourceDeleteRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceDeleteRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineSourceID":
				m.PipelineSourceID = vals[0]
			}
		}
	}
	return nil
}

// PipelineSourceDeleteResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceDeleteResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// PipelineSourceGetRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceGetRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineSourceID":
				m.PipelineSourceID = vals[0]
			}
		}
	}
	return nil
}

// PipelineSourceGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineSource":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
			case "pipelineSource.ID":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.ID = vals[0]
			case "pipelineSource.sourceType":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.SourceType = vals[0]
			case "pipelineSource.remote":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Remote = vals[0]
			case "pipelineSource.ref":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Ref = vals[0]
			case "pipelineSource.path":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Path = vals[0]
			case "pipelineSource.name":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.Name = vals[0]
			case "pipelineSource.pipelineYml":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				m.PipelineSource.PipelineYml = vals[0]
			case "pipelineSource.versionLock":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.VersionLock = val
			case "pipelineSource.softDeletedAt":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.SoftDeletedAt = val
			case "pipelineSource.timeCreated":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
			case "pipelineSource.timeCreated.seconds":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeCreated.Seconds = val
			case "pipelineSource.timeCreated.nanos":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeCreated == nil {
					m.PipelineSource.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeCreated.Nanos = int32(val)
			case "pipelineSource.timeUpdated":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "pipelineSource.timeUpdated.seconds":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeUpdated.Seconds = val
			case "pipelineSource.timeUpdated.nanos":
				if m.PipelineSource == nil {
					m.PipelineSource = &PipelineSource{}
				}
				if m.PipelineSource.TimeUpdated == nil {
					m.PipelineSource.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PipelineSource.TimeUpdated.Nanos = int32(val)
			}
		}
	}
	return nil
}

// PipelineSourceListRequest implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "remote":
				m.Remote = vals[0]
			case "ref":
				m.Ref = vals[0]
			case "path":
				m.Path = vals[0]
			case "name":
				m.Name = vals[0]
			case "sourceType":
				m.SourceType = vals[0]
			case "idList":
				m.IdList = vals
			}
		}
	}
	return nil
}

// PipelineSourceListResponse implement urlenc.URLValuesUnmarshaler.
func (m *PipelineSourceListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}
