// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: source.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	Create(ctx context.Context, in *PipelineSourceCreateRequest, opts ...grpc.CallOption) (*PipelineSourceCreateResponse, error)
	Update(ctx context.Context, in *PipelineSourceUpdateRequest, opts ...grpc.CallOption) (*PipelineSourceUpdateResponse, error)
	Delete(ctx context.Context, in *PipelineSourceDeleteRequest, opts ...grpc.CallOption) (*PipelineSourceDeleteResponse, error)
	Get(ctx context.Context, in *PipelineSourceGetRequest, opts ...grpc.CallOption) (*PipelineSourceGetResponse, error)
	List(ctx context.Context, in *PipelineSourceListRequest, opts ...grpc.CallOption) (*PipelineSourceListResponse, error)
}

type sourceServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewSourceServiceClient(cc grpc1.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) Create(ctx context.Context, in *PipelineSourceCreateRequest, opts ...grpc.CallOption) (*PipelineSourceCreateResponse, error) {
	out := new(PipelineSourceCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.source.SourceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Update(ctx context.Context, in *PipelineSourceUpdateRequest, opts ...grpc.CallOption) (*PipelineSourceUpdateResponse, error) {
	out := new(PipelineSourceUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.source.SourceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Delete(ctx context.Context, in *PipelineSourceDeleteRequest, opts ...grpc.CallOption) (*PipelineSourceDeleteResponse, error) {
	out := new(PipelineSourceDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.source.SourceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Get(ctx context.Context, in *PipelineSourceGetRequest, opts ...grpc.CallOption) (*PipelineSourceGetResponse, error) {
	out := new(PipelineSourceGetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.source.SourceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) List(ctx context.Context, in *PipelineSourceListRequest, opts ...grpc.CallOption) (*PipelineSourceListResponse, error) {
	out := new(PipelineSourceListResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.source.SourceService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations should embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	Create(context.Context, *PipelineSourceCreateRequest) (*PipelineSourceCreateResponse, error)
	Update(context.Context, *PipelineSourceUpdateRequest) (*PipelineSourceUpdateResponse, error)
	Delete(context.Context, *PipelineSourceDeleteRequest) (*PipelineSourceDeleteResponse, error)
	Get(context.Context, *PipelineSourceGetRequest) (*PipelineSourceGetResponse, error)
	List(context.Context, *PipelineSourceListRequest) (*PipelineSourceListResponse, error)
}

// UnimplementedSourceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (*UnimplementedSourceServiceServer) Create(context.Context, *PipelineSourceCreateRequest) (*PipelineSourceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSourceServiceServer) Update(context.Context, *PipelineSourceUpdateRequest) (*PipelineSourceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSourceServiceServer) Delete(context.Context, *PipelineSourceDeleteRequest) (*PipelineSourceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSourceServiceServer) Get(context.Context, *PipelineSourceGetRequest) (*PipelineSourceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSourceServiceServer) List(context.Context, *PipelineSourceListRequest) (*PipelineSourceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterSourceServiceServer(s grpc1.ServiceRegistrar, srv SourceServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_SourceService_serviceDesc(srv, opts...), srv)
}

var _SourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.source.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "source.proto",
}

func _get_SourceService_serviceDesc(srv SourceServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_SourceService_Create_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Create(ctx, req.(*PipelineSourceCreateRequest))
	}
	var _SourceService_Create_info transport.ServiceInfo
	if h.Interceptor != nil {
		_SourceService_Create_info = transport.NewServiceInfo("erda.core.pipeline.source.SourceService", "Create", srv)
		_SourceService_Create_Handler = h.Interceptor(_SourceService_Create_Handler)
	}

	_SourceService_Update_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Update(ctx, req.(*PipelineSourceUpdateRequest))
	}
	var _SourceService_Update_info transport.ServiceInfo
	if h.Interceptor != nil {
		_SourceService_Update_info = transport.NewServiceInfo("erda.core.pipeline.source.SourceService", "Update", srv)
		_SourceService_Update_Handler = h.Interceptor(_SourceService_Update_Handler)
	}

	_SourceService_Delete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Delete(ctx, req.(*PipelineSourceDeleteRequest))
	}
	var _SourceService_Delete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_SourceService_Delete_info = transport.NewServiceInfo("erda.core.pipeline.source.SourceService", "Delete", srv)
		_SourceService_Delete_Handler = h.Interceptor(_SourceService_Delete_Handler)
	}

	_SourceService_Get_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Get(ctx, req.(*PipelineSourceGetRequest))
	}
	var _SourceService_Get_info transport.ServiceInfo
	if h.Interceptor != nil {
		_SourceService_Get_info = transport.NewServiceInfo("erda.core.pipeline.source.SourceService", "Get", srv)
		_SourceService_Get_Handler = h.Interceptor(_SourceService_Get_Handler)
	}

	_SourceService_List_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.List(ctx, req.(*PipelineSourceListRequest))
	}
	var _SourceService_List_info transport.ServiceInfo
	if h.Interceptor != nil {
		_SourceService_List_info = transport.NewServiceInfo("erda.core.pipeline.source.SourceService", "List", srv)
		_SourceService_List_Handler = h.Interceptor(_SourceService_List_Handler)
	}

	var serviceDesc = _SourceService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSourceCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(SourceServiceServer).Create(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _SourceService_Create_info)
				}
				if interceptor == nil {
					return _SourceService_Create_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.source.SourceService/Create",
				}
				return interceptor(ctx, in, info, _SourceService_Create_Handler)
			},
		},
		{
			MethodName: "Update",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSourceUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(SourceServiceServer).Update(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _SourceService_Update_info)
				}
				if interceptor == nil {
					return _SourceService_Update_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.source.SourceService/Update",
				}
				return interceptor(ctx, in, info, _SourceService_Update_Handler)
			},
		},
		{
			MethodName: "Delete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSourceDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(SourceServiceServer).Delete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _SourceService_Delete_info)
				}
				if interceptor == nil {
					return _SourceService_Delete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.source.SourceService/Delete",
				}
				return interceptor(ctx, in, info, _SourceService_Delete_Handler)
			},
		},
		{
			MethodName: "Get",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSourceGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(SourceServiceServer).Get(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _SourceService_Get_info)
				}
				if interceptor == nil {
					return _SourceService_Get_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.source.SourceService/Get",
				}
				return interceptor(ctx, in, info, _SourceService_Get_Handler)
			},
		},
		{
			MethodName: "List",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineSourceListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(SourceServiceServer).List(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _SourceService_List_info)
				}
				if interceptor == nil {
					return _SourceService_List_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.source.SourceService/List",
				}
				return interceptor(ctx, in, info, _SourceService_List_Handler)
			},
		},
	}
	return &serviceDesc
}
