// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: action.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServiceClient interface {
	List(ctx context.Context, in *PipelineActionListRequest, opts ...grpc.CallOption) (*PipelineActionListResponse, error)
	Save(ctx context.Context, in *PipelineActionSaveRequest, opts ...grpc.CallOption) (*PipelineActionSaveResponse, error)
	Delete(ctx context.Context, in *PipelineActionDeleteRequest, opts ...grpc.CallOption) (*PipelineActionDeleteResponse, error)
}

type actionServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewActionServiceClient(cc grpc1.ClientConnInterface) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) List(ctx context.Context, in *PipelineActionListRequest, opts ...grpc.CallOption) (*PipelineActionListResponse, error) {
	out := new(PipelineActionListResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action.ActionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Save(ctx context.Context, in *PipelineActionSaveRequest, opts ...grpc.CallOption) (*PipelineActionSaveResponse, error) {
	out := new(PipelineActionSaveResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action.ActionService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Delete(ctx context.Context, in *PipelineActionDeleteRequest, opts ...grpc.CallOption) (*PipelineActionDeleteResponse, error) {
	out := new(PipelineActionDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.core.pipeline.action.ActionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServiceServer is the server API for ActionService service.
// All implementations should embed UnimplementedActionServiceServer
// for forward compatibility
type ActionServiceServer interface {
	List(context.Context, *PipelineActionListRequest) (*PipelineActionListResponse, error)
	Save(context.Context, *PipelineActionSaveRequest) (*PipelineActionSaveResponse, error)
	Delete(context.Context, *PipelineActionDeleteRequest) (*PipelineActionDeleteResponse, error)
}

// UnimplementedActionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedActionServiceServer struct {
}

func (*UnimplementedActionServiceServer) List(context.Context, *PipelineActionListRequest) (*PipelineActionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedActionServiceServer) Save(context.Context, *PipelineActionSaveRequest) (*PipelineActionSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedActionServiceServer) Delete(context.Context, *PipelineActionDeleteRequest) (*PipelineActionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterActionServiceServer(s grpc1.ServiceRegistrar, srv ActionServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ActionService_serviceDesc(srv, opts...), srv)
}

var _ActionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.pipeline.action.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "action.proto",
}

func _get_ActionService_serviceDesc(srv ActionServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ActionService_List_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.List(ctx, req.(*PipelineActionListRequest))
	}
	var _ActionService_List_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ActionService_List_info = transport.NewServiceInfo("erda.core.pipeline.action.ActionService", "List", srv)
		_ActionService_List_Handler = h.Interceptor(_ActionService_List_Handler)
	}

	_ActionService_Save_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Save(ctx, req.(*PipelineActionSaveRequest))
	}
	var _ActionService_Save_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ActionService_Save_info = transport.NewServiceInfo("erda.core.pipeline.action.ActionService", "Save", srv)
		_ActionService_Save_Handler = h.Interceptor(_ActionService_Save_Handler)
	}

	_ActionService_Delete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Delete(ctx, req.(*PipelineActionDeleteRequest))
	}
	var _ActionService_Delete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ActionService_Delete_info = transport.NewServiceInfo("erda.core.pipeline.action.ActionService", "Delete", srv)
		_ActionService_Delete_Handler = h.Interceptor(_ActionService_Delete_Handler)
	}

	var serviceDesc = _ActionService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineActionListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ActionServiceServer).List(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ActionService_List_info)
				}
				if interceptor == nil {
					return _ActionService_List_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action.ActionService/List",
				}
				return interceptor(ctx, in, info, _ActionService_List_Handler)
			},
		},
		{
			MethodName: "Save",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineActionSaveRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ActionServiceServer).Save(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ActionService_Save_info)
				}
				if interceptor == nil {
					return _ActionService_Save_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action.ActionService/Save",
				}
				return interceptor(ctx, in, info, _ActionService_Save_Handler)
			},
		},
		{
			MethodName: "Delete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PipelineActionDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ActionServiceServer).Delete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ActionService_Delete_info)
				}
				if interceptor == nil {
					return _ActionService_Delete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.pipeline.action.ActionService/Delete",
				}
				return interceptor(ctx, in, info, _ActionService_Delete_Handler)
			},
		},
	}
	return &serviceDesc
}
