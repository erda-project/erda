// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: action.proto

package pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Action) Validate() error {
	if this.TimeCreated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeCreated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeCreated", err)
		}
	}
	if this.TimeUpdated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeUpdated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeUpdated", err)
		}
	}
	if this.Dice != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Dice); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Dice", err)
		}
	}
	if this.Spec != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Spec); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Spec", err)
		}
	}
	if this.SoftDeletedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.SoftDeletedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("SoftDeletedAt", err)
		}
	}
	return nil
}
func (this *ActionNameWithVersionQuery) Validate() error {
	return nil
}
func (this *PipelineActionListRequest) Validate() error {
	for _, item := range this.ActionNameWithVersionQuery {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("ActionNameWithVersionQuery", err)
			}
		}
	}
	return nil
}
func (this *PipelineActionListResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *PipelineActionSaveRequest) Validate() error {
	return nil
}
func (this *PipelineActionSaveResponse) Validate() error {
	if this.Action != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Action); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Action", err)
		}
	}
	return nil
}
func (this *PipelineActionDeleteRequest) Validate() error {
	return nil
}
func (this *PipelineActionDeleteResponse) Validate() error {
	return nil
}
