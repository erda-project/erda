// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: label.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// LabelServiceHandler is the server API for LabelService service.
type LabelServiceHandler interface {
	// POST /api/pipelines-labels/actions/batch-insert-labels
	PipelineLabelBatchInsert(context.Context, *PipelineLabelBatchInsertRequest) (*PipelineLabelBatchInsertResponse, error)
	// POST /api/pipelines-labels
	PipelineLabelList(context.Context, *PipelineLabelListRequest) (*PipelineLabelListResponse, error)
}

// RegisterLabelServiceHandler register LabelServiceHandler to http.Router.
func RegisterLabelServiceHandler(r http.Router, srv LabelServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		return func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
	}

	add_PipelineLabelBatchInsert := func(method, path string, fn func(context.Context, *PipelineLabelBatchInsertRequest) (*PipelineLabelBatchInsertResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineLabelBatchInsertRequest))
		}
		var PipelineLabelBatchInsert_info transport.ServiceInfo
		if h.Interceptor != nil {
			PipelineLabelBatchInsert_info = transport.NewServiceInfo("erda.core.pipeline.label.LabelService", "PipelineLabelBatchInsert", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PipelineLabelBatchInsert_info)
				}
				r = r.WithContext(ctx)
				var in PipelineLabelBatchInsertRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PipelineLabelList := func(method, path string, fn func(context.Context, *PipelineLabelListRequest) (*PipelineLabelListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PipelineLabelListRequest))
		}
		var PipelineLabelList_info transport.ServiceInfo
		if h.Interceptor != nil {
			PipelineLabelList_info = transport.NewServiceInfo("erda.core.pipeline.label.LabelService", "PipelineLabelList", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PipelineLabelList_info)
				}
				r = r.WithContext(ctx)
				var in PipelineLabelListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PipelineLabelBatchInsert("POST", "/api/pipelines-labels/actions/batch-insert-labels", srv.PipelineLabelBatchInsert)
	add_PipelineLabelList("POST", "/api/pipelines-labels", srv.PipelineLabelList)
}
