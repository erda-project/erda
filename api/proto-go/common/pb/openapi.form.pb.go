// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: openapi.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*OpenAPIOption)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APIAuth)(nil)

// OpenAPIOption implement urlenc.URLValuesUnmarshaler.
func (m *OpenAPIOption) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "path":
				m.Path = vals[0]
			case "prefix":
				m.Prefix = vals[0]
			case "backend_prefix":
				m.BackendPrefix = vals[0]
			case "service":
				m.Service = vals[0]
			case "private":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Private = val
			case "auth":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
			case "auth.no_check":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.NoCheck = val
			case "auth.check_login":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckLogin = val
			case "auth.try_check_login":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.TryCheckLogin = val
			case "auth.check_token":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckToken = val
			case "auth.check_basic_auth":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckBasicAuth = val
			}
		}
	}
	return nil
}

// APIAuth implement urlenc.URLValuesUnmarshaler.
func (m *APIAuth) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "no_check":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.NoCheck = val
			case "check_login":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckLogin = val
			case "try_check_login":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.TryCheckLogin = val
			case "check_token":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckToken = val
			case "check_basic_auth":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckBasicAuth = val
			}
		}
	}
	return nil
}
