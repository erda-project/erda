// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: mysql.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/orchestrator/addon/mysql/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// AddonMySQLService mysql.proto
	AddonMySQLService() pb.AddonMySQLServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		addonMySQLService: pb.NewAddonMySQLServiceClient(cc),
	}
}

type serviceClients struct {
	addonMySQLService pb.AddonMySQLServiceClient
}

func (c *serviceClients) AddonMySQLService() pb.AddonMySQLServiceClient {
	return c.addonMySQLService
}

type addonMySQLServiceWrapper struct {
	client pb.AddonMySQLServiceClient
	opts   []grpc1.CallOption
}

func (s *addonMySQLServiceWrapper) ListMySQLAccount(ctx context.Context, req *pb.ListMySQLAccountRequest) (*pb.ListMySQLAccountResponse, error) {
	return s.client.ListMySQLAccount(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *addonMySQLServiceWrapper) GenerateMySQLAccount(ctx context.Context, req *pb.GenerateMySQLAccountRequest) (*pb.GenerateMySQLAccountResponse, error) {
	return s.client.GenerateMySQLAccount(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *addonMySQLServiceWrapper) DeleteMySQLAccount(ctx context.Context, req *pb.DeleteMySQLAccountRequest) (*pb.DeleteMySQLAccountResponse, error) {
	return s.client.DeleteMySQLAccount(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *addonMySQLServiceWrapper) ListAttachment(ctx context.Context, req *pb.ListAttachmentRequest) (*pb.ListAttachmentResponse, error) {
	return s.client.ListAttachment(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *addonMySQLServiceWrapper) UpdateAttachmentAccount(ctx context.Context, req *pb.UpdateAttachmentAccountRequest) (*pb.UpdateAttachmentAccountResponse, error) {
	return s.client.UpdateAttachmentAccount(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
