// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: mysql.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// AddonMySQLServiceHandler is the server API for AddonMySQLService service.
type AddonMySQLServiceHandler interface {
	// GET /api/addon-mysql/actions/list-mysql-account
	ListMySQLAccount(context.Context, *ListMySQLAccountRequest) (*ListMySQLAccountResponse, error)
	// POST /api/addon-mysql/actions/generate-mysql-account
	GenerateMySQLAccount(context.Context, *GenerateMySQLAccountRequest) (*GenerateMySQLAccountResponse, error)
	// POST /api/addon-mysql/actions/delete-mysql-account
	DeleteMySQLAccount(context.Context, *DeleteMySQLAccountRequest) (*DeleteMySQLAccountResponse, error)
	// GET /api/addon-mysql/actions/list-attachment
	ListAttachment(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error)
	// POST /api/addon-mysql/actions/update-attachment-account
	UpdateAttachmentAccount(context.Context, *UpdateAttachmentAccountRequest) (*UpdateAttachmentAccountResponse, error)
}

// RegisterAddonMySQLServiceHandler register AddonMySQLServiceHandler to http.Router.
func RegisterAddonMySQLServiceHandler(r http.Router, srv AddonMySQLServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ListMySQLAccount := func(method, path string, fn func(context.Context, *ListMySQLAccountRequest) (*ListMySQLAccountResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListMySQLAccountRequest))
		}
		var ListMySQLAccount_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListMySQLAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "ListMySQLAccount", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListMySQLAccount_info)
				}
				r = r.WithContext(ctx)
				var in ListMySQLAccountRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["instanceId"]; len(vals) > 0 {
					in.InstanceId = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GenerateMySQLAccount := func(method, path string, fn func(context.Context, *GenerateMySQLAccountRequest) (*GenerateMySQLAccountResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GenerateMySQLAccountRequest))
		}
		var GenerateMySQLAccount_info transport.ServiceInfo
		if h.Interceptor != nil {
			GenerateMySQLAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "GenerateMySQLAccount", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GenerateMySQLAccount_info)
				}
				r = r.WithContext(ctx)
				var in GenerateMySQLAccountRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteMySQLAccount := func(method, path string, fn func(context.Context, *DeleteMySQLAccountRequest) (*DeleteMySQLAccountResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteMySQLAccountRequest))
		}
		var DeleteMySQLAccount_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteMySQLAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "DeleteMySQLAccount", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteMySQLAccount_info)
				}
				r = r.WithContext(ctx)
				var in DeleteMySQLAccountRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListAttachment := func(method, path string, fn func(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListAttachmentRequest))
		}
		var ListAttachment_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListAttachment_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "ListAttachment", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListAttachment_info)
				}
				r = r.WithContext(ctx)
				var in ListAttachmentRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["instanceId"]; len(vals) > 0 {
					in.InstanceId = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateAttachmentAccount := func(method, path string, fn func(context.Context, *UpdateAttachmentAccountRequest) (*UpdateAttachmentAccountResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateAttachmentAccountRequest))
		}
		var UpdateAttachmentAccount_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateAttachmentAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "UpdateAttachmentAccount", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateAttachmentAccount_info)
				}
				r = r.WithContext(ctx)
				var in UpdateAttachmentAccountRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListMySQLAccount("GET", "/api/addon-mysql/actions/list-mysql-account", srv.ListMySQLAccount)
	add_GenerateMySQLAccount("POST", "/api/addon-mysql/actions/generate-mysql-account", srv.GenerateMySQLAccount)
	add_DeleteMySQLAccount("POST", "/api/addon-mysql/actions/delete-mysql-account", srv.DeleteMySQLAccount)
	add_ListAttachment("GET", "/api/addon-mysql/actions/list-attachment", srv.ListAttachment)
	add_UpdateAttachmentAccount("POST", "/api/addon-mysql/actions/update-attachment-account", srv.UpdateAttachmentAccount)
}
