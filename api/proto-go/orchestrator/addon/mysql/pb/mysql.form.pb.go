// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: mysql.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*MySQLAccount)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListMySQLAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListMySQLAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GenerateMySQLAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GenerateMySQLAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteMySQLAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteMySQLAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Attachment)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListAttachmentRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListAttachmentResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateAttachmentAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateAttachmentAccountResponse)(nil)

// MySQLAccount implement urlenc.URLValuesUnmarshaler.
func (m *MySQLAccount) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "instanceId":
				m.InstanceId = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "createAt":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
			case "createAt.seconds":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt.Seconds = val
			case "createAt.nanos":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreateAt.Nanos = int32(val)
			case "username":
				m.Username = vals[0]
			case "password":
				m.Password = vals[0]
			}
		}
	}
	return nil
}

// ListMySQLAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListMySQLAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceId":
				m.InstanceId = vals[0]
			}
		}
	}
	return nil
}

// ListMySQLAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListMySQLAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GenerateMySQLAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *GenerateMySQLAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceId":
				m.InstanceId = vals[0]
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// GenerateMySQLAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *GenerateMySQLAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "account":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
			case "account.id":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				m.Account.Id = vals[0]
			case "account.instanceId":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				m.Account.InstanceId = vals[0]
			case "account.creator":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				m.Account.Creator = vals[0]
			case "account.createAt":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				if m.Account.CreateAt == nil {
					m.Account.CreateAt = &timestamppb.Timestamp{}
				}
			case "account.createAt.seconds":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				if m.Account.CreateAt == nil {
					m.Account.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Account.CreateAt.Seconds = val
			case "account.createAt.nanos":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				if m.Account.CreateAt == nil {
					m.Account.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Account.CreateAt.Nanos = int32(val)
			case "account.username":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				m.Account.Username = vals[0]
			case "account.password":
				if m.Account == nil {
					m.Account = &MySQLAccount{}
				}
				m.Account.Password = vals[0]
			}
		}
	}
	return nil
}

// DeleteMySQLAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteMySQLAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceId":
				m.InstanceId = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// DeleteMySQLAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteMySQLAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Attachment implement urlenc.URLValuesUnmarshaler.
func (m *Attachment) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "instanceId":
				m.InstanceId = vals[0]
			case "appId":
				m.AppId = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "runtimeName":
				m.RuntimeName = vals[0]
			case "accountId":
				m.AccountId = vals[0]
			case "preAccountId":
				m.PreAccountId = vals[0]
			case "accountState":
				m.AccountState = vals[0]
			}
		}
	}
	return nil
}

// ListAttachmentRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListAttachmentRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceId":
				m.InstanceId = vals[0]
			}
		}
	}
	return nil
}

// ListAttachmentResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListAttachmentResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UpdateAttachmentAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateAttachmentAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceId":
				m.InstanceId = vals[0]
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "accountId":
				m.AccountId = vals[0]
			}
		}
	}
	return nil
}

// UpdateAttachmentAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateAttachmentAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
