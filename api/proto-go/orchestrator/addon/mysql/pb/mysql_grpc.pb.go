// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: mysql.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// AddonMySQLServiceClient is the client API for AddonMySQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddonMySQLServiceClient interface {
	ListMySQLAccount(ctx context.Context, in *ListMySQLAccountRequest, opts ...grpc.CallOption) (*ListMySQLAccountResponse, error)
	GenerateMySQLAccount(ctx context.Context, in *GenerateMySQLAccountRequest, opts ...grpc.CallOption) (*GenerateMySQLAccountResponse, error)
	DeleteMySQLAccount(ctx context.Context, in *DeleteMySQLAccountRequest, opts ...grpc.CallOption) (*DeleteMySQLAccountResponse, error)
	ListAttachment(ctx context.Context, in *ListAttachmentRequest, opts ...grpc.CallOption) (*ListAttachmentResponse, error)
	UpdateAttachmentAccount(ctx context.Context, in *UpdateAttachmentAccountRequest, opts ...grpc.CallOption) (*UpdateAttachmentAccountResponse, error)
}

type addonMySQLServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewAddonMySQLServiceClient(cc grpc1.ClientConnInterface) AddonMySQLServiceClient {
	return &addonMySQLServiceClient{cc}
}

func (c *addonMySQLServiceClient) ListMySQLAccount(ctx context.Context, in *ListMySQLAccountRequest, opts ...grpc.CallOption) (*ListMySQLAccountResponse, error) {
	out := new(ListMySQLAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.addon.mysql.AddonMySQLService/ListMySQLAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonMySQLServiceClient) GenerateMySQLAccount(ctx context.Context, in *GenerateMySQLAccountRequest, opts ...grpc.CallOption) (*GenerateMySQLAccountResponse, error) {
	out := new(GenerateMySQLAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.addon.mysql.AddonMySQLService/GenerateMySQLAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonMySQLServiceClient) DeleteMySQLAccount(ctx context.Context, in *DeleteMySQLAccountRequest, opts ...grpc.CallOption) (*DeleteMySQLAccountResponse, error) {
	out := new(DeleteMySQLAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.addon.mysql.AddonMySQLService/DeleteMySQLAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonMySQLServiceClient) ListAttachment(ctx context.Context, in *ListAttachmentRequest, opts ...grpc.CallOption) (*ListAttachmentResponse, error) {
	out := new(ListAttachmentResponse)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.addon.mysql.AddonMySQLService/ListAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonMySQLServiceClient) UpdateAttachmentAccount(ctx context.Context, in *UpdateAttachmentAccountRequest, opts ...grpc.CallOption) (*UpdateAttachmentAccountResponse, error) {
	out := new(UpdateAttachmentAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.addon.mysql.AddonMySQLService/UpdateAttachmentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddonMySQLServiceServer is the server API for AddonMySQLService service.
// All implementations should embed UnimplementedAddonMySQLServiceServer
// for forward compatibility
type AddonMySQLServiceServer interface {
	ListMySQLAccount(context.Context, *ListMySQLAccountRequest) (*ListMySQLAccountResponse, error)
	GenerateMySQLAccount(context.Context, *GenerateMySQLAccountRequest) (*GenerateMySQLAccountResponse, error)
	DeleteMySQLAccount(context.Context, *DeleteMySQLAccountRequest) (*DeleteMySQLAccountResponse, error)
	ListAttachment(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error)
	UpdateAttachmentAccount(context.Context, *UpdateAttachmentAccountRequest) (*UpdateAttachmentAccountResponse, error)
}

// UnimplementedAddonMySQLServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAddonMySQLServiceServer struct {
}

func (*UnimplementedAddonMySQLServiceServer) ListMySQLAccount(context.Context, *ListMySQLAccountRequest) (*ListMySQLAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMySQLAccount not implemented")
}
func (*UnimplementedAddonMySQLServiceServer) GenerateMySQLAccount(context.Context, *GenerateMySQLAccountRequest) (*GenerateMySQLAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMySQLAccount not implemented")
}
func (*UnimplementedAddonMySQLServiceServer) DeleteMySQLAccount(context.Context, *DeleteMySQLAccountRequest) (*DeleteMySQLAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMySQLAccount not implemented")
}
func (*UnimplementedAddonMySQLServiceServer) ListAttachment(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachment not implemented")
}
func (*UnimplementedAddonMySQLServiceServer) UpdateAttachmentAccount(context.Context, *UpdateAttachmentAccountRequest) (*UpdateAttachmentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachmentAccount not implemented")
}

func RegisterAddonMySQLServiceServer(s grpc1.ServiceRegistrar, srv AddonMySQLServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_AddonMySQLService_serviceDesc(srv, opts...), srv)
}

var _AddonMySQLService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.orchestrator.addon.mysql.AddonMySQLService",
	HandlerType: (*AddonMySQLServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mysql.proto",
}

func _get_AddonMySQLService_serviceDesc(srv AddonMySQLServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_AddonMySQLService_ListMySQLAccount_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListMySQLAccount(ctx, req.(*ListMySQLAccountRequest))
	}
	var _AddonMySQLService_ListMySQLAccount_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AddonMySQLService_ListMySQLAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "ListMySQLAccount", srv)
		_AddonMySQLService_ListMySQLAccount_Handler = h.Interceptor(_AddonMySQLService_ListMySQLAccount_Handler)
	}

	_AddonMySQLService_GenerateMySQLAccount_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GenerateMySQLAccount(ctx, req.(*GenerateMySQLAccountRequest))
	}
	var _AddonMySQLService_GenerateMySQLAccount_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AddonMySQLService_GenerateMySQLAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "GenerateMySQLAccount", srv)
		_AddonMySQLService_GenerateMySQLAccount_Handler = h.Interceptor(_AddonMySQLService_GenerateMySQLAccount_Handler)
	}

	_AddonMySQLService_DeleteMySQLAccount_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteMySQLAccount(ctx, req.(*DeleteMySQLAccountRequest))
	}
	var _AddonMySQLService_DeleteMySQLAccount_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AddonMySQLService_DeleteMySQLAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "DeleteMySQLAccount", srv)
		_AddonMySQLService_DeleteMySQLAccount_Handler = h.Interceptor(_AddonMySQLService_DeleteMySQLAccount_Handler)
	}

	_AddonMySQLService_ListAttachment_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListAttachment(ctx, req.(*ListAttachmentRequest))
	}
	var _AddonMySQLService_ListAttachment_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AddonMySQLService_ListAttachment_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "ListAttachment", srv)
		_AddonMySQLService_ListAttachment_Handler = h.Interceptor(_AddonMySQLService_ListAttachment_Handler)
	}

	_AddonMySQLService_UpdateAttachmentAccount_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAttachmentAccount(ctx, req.(*UpdateAttachmentAccountRequest))
	}
	var _AddonMySQLService_UpdateAttachmentAccount_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AddonMySQLService_UpdateAttachmentAccount_info = transport.NewServiceInfo("erda.orchestrator.addon.mysql.AddonMySQLService", "UpdateAttachmentAccount", srv)
		_AddonMySQLService_UpdateAttachmentAccount_Handler = h.Interceptor(_AddonMySQLService_UpdateAttachmentAccount_Handler)
	}

	var serviceDesc = _AddonMySQLService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListMySQLAccount",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListMySQLAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AddonMySQLServiceServer).ListMySQLAccount(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AddonMySQLService_ListMySQLAccount_info)
				}
				if interceptor == nil {
					return _AddonMySQLService_ListMySQLAccount_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.addon.mysql.AddonMySQLService/ListMySQLAccount",
				}
				return interceptor(ctx, in, info, _AddonMySQLService_ListMySQLAccount_Handler)
			},
		},
		{
			MethodName: "GenerateMySQLAccount",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GenerateMySQLAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AddonMySQLServiceServer).GenerateMySQLAccount(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AddonMySQLService_GenerateMySQLAccount_info)
				}
				if interceptor == nil {
					return _AddonMySQLService_GenerateMySQLAccount_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.addon.mysql.AddonMySQLService/GenerateMySQLAccount",
				}
				return interceptor(ctx, in, info, _AddonMySQLService_GenerateMySQLAccount_Handler)
			},
		},
		{
			MethodName: "DeleteMySQLAccount",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteMySQLAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AddonMySQLServiceServer).DeleteMySQLAccount(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AddonMySQLService_DeleteMySQLAccount_info)
				}
				if interceptor == nil {
					return _AddonMySQLService_DeleteMySQLAccount_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.addon.mysql.AddonMySQLService/DeleteMySQLAccount",
				}
				return interceptor(ctx, in, info, _AddonMySQLService_DeleteMySQLAccount_Handler)
			},
		},
		{
			MethodName: "ListAttachment",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListAttachmentRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AddonMySQLServiceServer).ListAttachment(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AddonMySQLService_ListAttachment_info)
				}
				if interceptor == nil {
					return _AddonMySQLService_ListAttachment_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.addon.mysql.AddonMySQLService/ListAttachment",
				}
				return interceptor(ctx, in, info, _AddonMySQLService_ListAttachment_Handler)
			},
		},
		{
			MethodName: "UpdateAttachmentAccount",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAttachmentAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AddonMySQLServiceServer).UpdateAttachmentAccount(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AddonMySQLService_UpdateAttachmentAccount_info)
				}
				if interceptor == nil {
					return _AddonMySQLService_UpdateAttachmentAccount_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.addon.mysql.AddonMySQLService/UpdateAttachmentAccount",
				}
				return interceptor(ctx, in, info, _AddonMySQLService_UpdateAttachmentAccount_Handler)
			},
		},
	}
	return &serviceDesc
}
