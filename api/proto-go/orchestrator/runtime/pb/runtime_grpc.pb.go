// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: runtime.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	GetRuntime(ctx context.Context, in *GetRuntimeRequest, opts ...grpc.CallOption) (*RuntimeInspect, error)
	DelRuntime(ctx context.Context, in *DelRuntimeRequest, opts ...grpc.CallOption) (*Runtime, error)
}

type runtimeServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc1.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) GetRuntime(ctx context.Context, in *GetRuntimeRequest, opts ...grpc.CallOption) (*RuntimeInspect, error) {
	out := new(RuntimeInspect)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.runtime.RuntimeService/GetRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DelRuntime(ctx context.Context, in *DelRuntimeRequest, opts ...grpc.CallOption) (*Runtime, error) {
	out := new(Runtime)
	err := c.cc.Invoke(ctx, "/erda.orchestrator.runtime.RuntimeService/DelRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations should embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	GetRuntime(context.Context, *GetRuntimeRequest) (*RuntimeInspect, error)
	DelRuntime(context.Context, *DelRuntimeRequest) (*Runtime, error)
}

// UnimplementedRuntimeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (*UnimplementedRuntimeServiceServer) GetRuntime(context.Context, *GetRuntimeRequest) (*RuntimeInspect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntime not implemented")
}
func (*UnimplementedRuntimeServiceServer) DelRuntime(context.Context, *DelRuntimeRequest) (*Runtime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRuntime not implemented")
}

func RegisterRuntimeServiceServer(s grpc1.ServiceRegistrar, srv RuntimeServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_RuntimeService_serviceDesc(srv, opts...), srv)
}

var _RuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.orchestrator.runtime.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "runtime.proto",
}

func _get_RuntimeService_serviceDesc(srv RuntimeServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_RuntimeService_GetRuntime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRuntime(ctx, req.(*GetRuntimeRequest))
	}
	var _RuntimeService_GetRuntime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_GetRuntime_info = transport.NewServiceInfo("erda.orchestrator.runtime.RuntimeService", "GetRuntime", srv)
		_RuntimeService_GetRuntime_Handler = h.Interceptor(_RuntimeService_GetRuntime_Handler)
	}

	_RuntimeService_DelRuntime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DelRuntime(ctx, req.(*DelRuntimeRequest))
	}
	var _RuntimeService_DelRuntime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuntimeService_DelRuntime_info = transport.NewServiceInfo("erda.orchestrator.runtime.RuntimeService", "DelRuntime", srv)
		_RuntimeService_DelRuntime_Handler = h.Interceptor(_RuntimeService_DelRuntime_Handler)
	}

	var serviceDesc = _RuntimeService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetRuntime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetRuntimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).GetRuntime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_GetRuntime_info)
				}
				if interceptor == nil {
					return _RuntimeService_GetRuntime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.runtime.RuntimeService/GetRuntime",
				}
				return interceptor(ctx, in, info, _RuntimeService_GetRuntime_Handler)
			},
		},
		{
			MethodName: "DelRuntime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DelRuntimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuntimeServiceServer).DelRuntime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuntimeService_DelRuntime_info)
				}
				if interceptor == nil {
					return _RuntimeService_DelRuntime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.orchestrator.runtime.RuntimeService/DelRuntime",
				}
				return interceptor(ctx, in, info, _RuntimeService_DelRuntime_Handler)
			},
		},
	}
	return &serviceDesc
}
