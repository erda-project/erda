// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: resource.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	GetMonitorRuntime(ctx context.Context, in *GetMonitorRuntimeRequest, opts ...grpc.CallOption) (*GetMonitorRuntimeResponse, error)
	GetMonitorInstance(ctx context.Context, in *GetMonitorInstanceRequest, opts ...grpc.CallOption) (*GetMonitorInstanceResponse, error)
}

type resourceServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewResourceServiceClient(cc grpc1.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.resource.ResourceService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.resource.ResourceService/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetMonitorRuntime(ctx context.Context, in *GetMonitorRuntimeRequest, opts ...grpc.CallOption) (*GetMonitorRuntimeResponse, error) {
	out := new(GetMonitorRuntimeResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.resource.ResourceService/GetMonitorRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetMonitorInstance(ctx context.Context, in *GetMonitorInstanceRequest, opts ...grpc.CallOption) (*GetMonitorInstanceResponse, error) {
	out := new(GetMonitorInstanceResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.resource.ResourceService/GetMonitorInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations should embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	GetMonitorRuntime(context.Context, *GetMonitorRuntimeRequest) (*GetMonitorRuntimeResponse, error)
	GetMonitorInstance(context.Context, *GetMonitorInstanceRequest) (*GetMonitorInstanceResponse, error)
}

// UnimplementedResourceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (*UnimplementedResourceServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (*UnimplementedResourceServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (*UnimplementedResourceServiceServer) GetMonitorRuntime(context.Context, *GetMonitorRuntimeRequest) (*GetMonitorRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorRuntime not implemented")
}
func (*UnimplementedResourceServiceServer) GetMonitorInstance(context.Context, *GetMonitorInstanceRequest) (*GetMonitorInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorInstance not implemented")
}

func RegisterResourceServiceServer(s grpc1.ServiceRegistrar, srv ResourceServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ResourceService_serviceDesc(srv, opts...), srv)
}

var _ResourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.resource.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "resource.proto",
}

func _get_ResourceService_serviceDesc(srv ResourceServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ResourceService_CreateResource_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateResource(ctx, req.(*CreateResourceRequest))
	}
	var _ResourceService_CreateResource_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ResourceService_CreateResource_info = transport.NewServiceInfo("erda.msp.resource.ResourceService", "CreateResource", srv)
		_ResourceService_CreateResource_Handler = h.Interceptor(_ResourceService_CreateResource_Handler)
	}

	_ResourceService_DeleteResource_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	var _ResourceService_DeleteResource_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ResourceService_DeleteResource_info = transport.NewServiceInfo("erda.msp.resource.ResourceService", "DeleteResource", srv)
		_ResourceService_DeleteResource_Handler = h.Interceptor(_ResourceService_DeleteResource_Handler)
	}

	_ResourceService_GetMonitorRuntime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetMonitorRuntime(ctx, req.(*GetMonitorRuntimeRequest))
	}
	var _ResourceService_GetMonitorRuntime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ResourceService_GetMonitorRuntime_info = transport.NewServiceInfo("erda.msp.resource.ResourceService", "GetMonitorRuntime", srv)
		_ResourceService_GetMonitorRuntime_Handler = h.Interceptor(_ResourceService_GetMonitorRuntime_Handler)
	}

	_ResourceService_GetMonitorInstance_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetMonitorInstance(ctx, req.(*GetMonitorInstanceRequest))
	}
	var _ResourceService_GetMonitorInstance_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ResourceService_GetMonitorInstance_info = transport.NewServiceInfo("erda.msp.resource.ResourceService", "GetMonitorInstance", srv)
		_ResourceService_GetMonitorInstance_Handler = h.Interceptor(_ResourceService_GetMonitorInstance_Handler)
	}

	var serviceDesc = _ResourceService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateResourceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ResourceServiceServer).CreateResource(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ResourceService_CreateResource_info)
				}
				if interceptor == nil {
					return _ResourceService_CreateResource_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.resource.ResourceService/CreateResource",
				}
				return interceptor(ctx, in, info, _ResourceService_CreateResource_Handler)
			},
		},
		{
			MethodName: "DeleteResource",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteResourceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ResourceServiceServer).DeleteResource(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ResourceService_DeleteResource_info)
				}
				if interceptor == nil {
					return _ResourceService_DeleteResource_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.resource.ResourceService/DeleteResource",
				}
				return interceptor(ctx, in, info, _ResourceService_DeleteResource_Handler)
			},
		},
		{
			MethodName: "GetMonitorRuntime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetMonitorRuntimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ResourceServiceServer).GetMonitorRuntime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ResourceService_GetMonitorRuntime_info)
				}
				if interceptor == nil {
					return _ResourceService_GetMonitorRuntime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.resource.ResourceService/GetMonitorRuntime",
				}
				return interceptor(ctx, in, info, _ResourceService_GetMonitorRuntime_Handler)
			},
		},
		{
			MethodName: "GetMonitorInstance",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetMonitorInstanceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ResourceServiceServer).GetMonitorInstance(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ResourceService_GetMonitorInstance_info)
				}
				if interceptor == nil {
					return _ResourceService_GetMonitorInstance_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.resource.ResourceService/GetMonitorInstance",
				}
				return interceptor(ctx, in, info, _ResourceService_GetMonitorInstance_Handler)
			},
		},
	}
	return &serviceDesc
}
