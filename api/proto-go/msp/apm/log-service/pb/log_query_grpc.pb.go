// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: log_query.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	HistogramAggregation(ctx context.Context, in *HistogramAggregationRequest, opts ...grpc.CallOption) (*HistogramAggregationResponse, error)
	BucketAggregation(ctx context.Context, in *BucketAggregationRequest, opts ...grpc.CallOption) (*BucketAggregationResponse, error)
	PagedSearch(ctx context.Context, in *PagedSearchRequest, opts ...grpc.CallOption) (*PagedSearchResponse, error)
	SequentialSearch(ctx context.Context, in *SequentialSearchRequest, opts ...grpc.CallOption) (*SequentialSearchResponse, error)
	GetFieldSettings(ctx context.Context, in *GetFieldSettingsRequest, opts ...grpc.CallOption) (*GetFieldSettingsResponse, error)
}

type logServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewLogServiceClient(cc grpc1.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) HistogramAggregation(ctx context.Context, in *HistogramAggregationRequest, opts ...grpc.CallOption) (*HistogramAggregationResponse, error) {
	out := new(HistogramAggregationResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.log_service.LogService/HistogramAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) BucketAggregation(ctx context.Context, in *BucketAggregationRequest, opts ...grpc.CallOption) (*BucketAggregationResponse, error) {
	out := new(BucketAggregationResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.log_service.LogService/BucketAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) PagedSearch(ctx context.Context, in *PagedSearchRequest, opts ...grpc.CallOption) (*PagedSearchResponse, error) {
	out := new(PagedSearchResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.log_service.LogService/PagedSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SequentialSearch(ctx context.Context, in *SequentialSearchRequest, opts ...grpc.CallOption) (*SequentialSearchResponse, error) {
	out := new(SequentialSearchResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.log_service.LogService/SequentialSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetFieldSettings(ctx context.Context, in *GetFieldSettingsRequest, opts ...grpc.CallOption) (*GetFieldSettingsResponse, error) {
	out := new(GetFieldSettingsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.log_service.LogService/GetFieldSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations should embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	HistogramAggregation(context.Context, *HistogramAggregationRequest) (*HistogramAggregationResponse, error)
	BucketAggregation(context.Context, *BucketAggregationRequest) (*BucketAggregationResponse, error)
	PagedSearch(context.Context, *PagedSearchRequest) (*PagedSearchResponse, error)
	SequentialSearch(context.Context, *SequentialSearchRequest) (*SequentialSearchResponse, error)
	GetFieldSettings(context.Context, *GetFieldSettingsRequest) (*GetFieldSettingsResponse, error)
}

// UnimplementedLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) HistogramAggregation(context.Context, *HistogramAggregationRequest) (*HistogramAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistogramAggregation not implemented")
}
func (*UnimplementedLogServiceServer) BucketAggregation(context.Context, *BucketAggregationRequest) (*BucketAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketAggregation not implemented")
}
func (*UnimplementedLogServiceServer) PagedSearch(context.Context, *PagedSearchRequest) (*PagedSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedSearch not implemented")
}
func (*UnimplementedLogServiceServer) SequentialSearch(context.Context, *SequentialSearchRequest) (*SequentialSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SequentialSearch not implemented")
}
func (*UnimplementedLogServiceServer) GetFieldSettings(context.Context, *GetFieldSettingsRequest) (*GetFieldSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldSettings not implemented")
}

func RegisterLogServiceServer(s grpc1.ServiceRegistrar, srv LogServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_LogService_serviceDesc(srv, opts...), srv)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.apm.log_service.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "log_query.proto",
}

func _get_LogService_serviceDesc(srv LogServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_LogService_HistogramAggregation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.HistogramAggregation(ctx, req.(*HistogramAggregationRequest))
	}
	var _LogService_HistogramAggregation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_LogService_HistogramAggregation_info = transport.NewServiceInfo("erda.msp.apm.log_service.LogService", "HistogramAggregation", srv)
		_LogService_HistogramAggregation_Handler = h.Interceptor(_LogService_HistogramAggregation_Handler)
	}

	_LogService_BucketAggregation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BucketAggregation(ctx, req.(*BucketAggregationRequest))
	}
	var _LogService_BucketAggregation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_LogService_BucketAggregation_info = transport.NewServiceInfo("erda.msp.apm.log_service.LogService", "BucketAggregation", srv)
		_LogService_BucketAggregation_Handler = h.Interceptor(_LogService_BucketAggregation_Handler)
	}

	_LogService_PagedSearch_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PagedSearch(ctx, req.(*PagedSearchRequest))
	}
	var _LogService_PagedSearch_info transport.ServiceInfo
	if h.Interceptor != nil {
		_LogService_PagedSearch_info = transport.NewServiceInfo("erda.msp.apm.log_service.LogService", "PagedSearch", srv)
		_LogService_PagedSearch_Handler = h.Interceptor(_LogService_PagedSearch_Handler)
	}

	_LogService_SequentialSearch_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SequentialSearch(ctx, req.(*SequentialSearchRequest))
	}
	var _LogService_SequentialSearch_info transport.ServiceInfo
	if h.Interceptor != nil {
		_LogService_SequentialSearch_info = transport.NewServiceInfo("erda.msp.apm.log_service.LogService", "SequentialSearch", srv)
		_LogService_SequentialSearch_Handler = h.Interceptor(_LogService_SequentialSearch_Handler)
	}

	_LogService_GetFieldSettings_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetFieldSettings(ctx, req.(*GetFieldSettingsRequest))
	}
	var _LogService_GetFieldSettings_info transport.ServiceInfo
	if h.Interceptor != nil {
		_LogService_GetFieldSettings_info = transport.NewServiceInfo("erda.msp.apm.log_service.LogService", "GetFieldSettings", srv)
		_LogService_GetFieldSettings_Handler = h.Interceptor(_LogService_GetFieldSettings_Handler)
	}

	var serviceDesc = _LogService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "HistogramAggregation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HistogramAggregationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(LogServiceServer).HistogramAggregation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _LogService_HistogramAggregation_info)
				}
				if interceptor == nil {
					return _LogService_HistogramAggregation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.log_service.LogService/HistogramAggregation",
				}
				return interceptor(ctx, in, info, _LogService_HistogramAggregation_Handler)
			},
		},
		{
			MethodName: "BucketAggregation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(BucketAggregationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(LogServiceServer).BucketAggregation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _LogService_BucketAggregation_info)
				}
				if interceptor == nil {
					return _LogService_BucketAggregation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.log_service.LogService/BucketAggregation",
				}
				return interceptor(ctx, in, info, _LogService_BucketAggregation_Handler)
			},
		},
		{
			MethodName: "PagedSearch",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PagedSearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(LogServiceServer).PagedSearch(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _LogService_PagedSearch_info)
				}
				if interceptor == nil {
					return _LogService_PagedSearch_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.log_service.LogService/PagedSearch",
				}
				return interceptor(ctx, in, info, _LogService_PagedSearch_Handler)
			},
		},
		{
			MethodName: "SequentialSearch",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SequentialSearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(LogServiceServer).SequentialSearch(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _LogService_SequentialSearch_info)
				}
				if interceptor == nil {
					return _LogService_SequentialSearch_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.log_service.LogService/SequentialSearch",
				}
				return interceptor(ctx, in, info, _LogService_SequentialSearch_Handler)
			},
		},
		{
			MethodName: "GetFieldSettings",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetFieldSettingsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(LogServiceServer).GetFieldSettings(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _LogService_GetFieldSettings_info)
				}
				if interceptor == nil {
					return _LogService_GetFieldSettings_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.log_service.LogService/GetFieldSettings",
				}
				return interceptor(ctx, in, info, _LogService_GetFieldSettings_Handler)
			},
		},
	}
	return &serviceDesc
}
