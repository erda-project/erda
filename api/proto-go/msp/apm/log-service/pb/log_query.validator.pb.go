// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: log_query.proto

package pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/structpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetFieldSettingsRequest) Validate() error {
	return nil
}
func (this *GetFieldSettingsResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *LogField) Validate() error {
	return nil
}
func (this *SequentialSearchRequest) Validate() error {
	return nil
}
func (this *SequentialSearchResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *PagedSearchRequest) Validate() error {
	return nil
}
func (this *PagedSearchResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *LogQueryResult) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *HighlightLog) Validate() error {
	if this.Source != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Source); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Source", err)
		}
	}
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *LogItem) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *BucketAggregationRequest) Validate() error {
	return nil
}
func (this *BucketAggregationResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *LogFieldsAggregationResult) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *LogFieldBucket) Validate() error {
	for _, item := range this.Buckets {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Buckets", err)
			}
		}
	}
	return nil
}
func (this *BucketAgg) Validate() error {
	return nil
}
func (this *HistogramAggregationRequest) Validate() error {
	return nil
}
func (this *HistogramAggregationResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *HistogramAggregationResult) Validate() error {
	for _, item := range this.Results {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Results", err)
			}
		}
	}
	return nil
}
func (this *LogStatisticResult) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *CountHistogram) Validate() error {
	if this.Count != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Count); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Count", err)
		}
	}
	return nil
}
func (this *ArrayAgg) Validate() error {
	return nil
}
