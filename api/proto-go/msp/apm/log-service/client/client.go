// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: log_query.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/msp/apm/log-service/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// LogService log_query.proto
	LogService() pb.LogServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		logService: pb.NewLogServiceClient(cc),
	}
}

type serviceClients struct {
	logService pb.LogServiceClient
}

func (c *serviceClients) LogService() pb.LogServiceClient {
	return c.logService
}

type logServiceWrapper struct {
	client pb.LogServiceClient
	opts   []grpc1.CallOption
}

func (s *logServiceWrapper) HistogramAggregation(ctx context.Context, req *pb.HistogramAggregationRequest) (*pb.HistogramAggregationResponse, error) {
	return s.client.HistogramAggregation(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *logServiceWrapper) BucketAggregation(ctx context.Context, req *pb.BucketAggregationRequest) (*pb.BucketAggregationResponse, error) {
	return s.client.BucketAggregation(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *logServiceWrapper) PagedSearch(ctx context.Context, req *pb.PagedSearchRequest) (*pb.PagedSearchResponse, error) {
	return s.client.PagedSearch(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *logServiceWrapper) SequentialSearch(ctx context.Context, req *pb.SequentialSearchRequest) (*pb.SequentialSearchResponse, error) {
	return s.client.SequentialSearch(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *logServiceWrapper) GetFieldSettings(ctx context.Context, req *pb.GetFieldSettingsRequest) (*pb.GetFieldSettingsResponse, error) {
	return s.client.GetFieldSettings(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
