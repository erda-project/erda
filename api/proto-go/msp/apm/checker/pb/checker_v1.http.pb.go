// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: checker_v1.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// CheckerV1ServiceHandler is the server API for CheckerV1Service service.
type CheckerV1ServiceHandler interface {
	// POST /api/msp/apm/checker
	CreateCheckerV1(context.Context, *CreateCheckerV1Request) (*CreateCheckerV1Response, error)
	// POST /api/msp/apm/checker/{id}
	UpdateCheckerV1(context.Context, *UpdateCheckerV1Request) (*UpdateCheckerV1Response, error)
	// DELETE /api/msp/apm/checker/{id}
	DeleteCheckerV1(context.Context, *DeleteCheckerV1Request) (*DeleteCheckerV1Response, error)
	// GET /api/msp/apm/checker/{id}
	GetCheckerV1(context.Context, *GetCheckerV1Request) (*GetCheckerV1Response, error)
	// GET /api/msp/apm/checkers/dashboard
	DescribeCheckersV1(context.Context, *DescribeCheckersV1Request) (*DescribeCheckersV1Response, error)
	// GET /api/msp/apm/checker/{id}/dashboard
	DescribeCheckerV1(context.Context, *DescribeCheckerV1Request) (*DescribeCheckerV1Response, error)
	// GET /api/msp/apm/checker/{id}/status
	GetCheckerStatusV1(context.Context, *GetCheckerStatusV1Request) (*GetCheckerStatusV1Response, error)
	// +depracated
	// GET /api/msp/apm/checker/{id}/issues
	GetCheckerIssuesV1(context.Context, *GetCheckerIssuesV1Request) (*GetCheckerIssuesV1Response, error)
}

// RegisterCheckerV1ServiceHandler register CheckerV1ServiceHandler to http.Router.
func RegisterCheckerV1ServiceHandler(r http.Router, srv CheckerV1ServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CreateCheckerV1 := func(method, path string, fn func(context.Context, *CreateCheckerV1Request) (*CreateCheckerV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateCheckerV1Request))
		}
		var CreateCheckerV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateCheckerV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "CreateCheckerV1", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateCheckerV1_info)
				}
				r = r.WithContext(ctx)
				var in CreateCheckerV1Request
				if err := h.Decode(r, &in.Data); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateCheckerV1 := func(method, path string, fn func(context.Context, *UpdateCheckerV1Request) (*UpdateCheckerV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateCheckerV1Request))
		}
		var UpdateCheckerV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateCheckerV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "UpdateCheckerV1", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateCheckerV1_info)
				}
				r = r.WithContext(ctx)
				var in UpdateCheckerV1Request
				if err := h.Decode(r, &in.Data); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteCheckerV1 := func(method, path string, fn func(context.Context, *DeleteCheckerV1Request) (*DeleteCheckerV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteCheckerV1Request))
		}
		var DeleteCheckerV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteCheckerV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "DeleteCheckerV1", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteCheckerV1_info)
				}
				r = r.WithContext(ctx)
				var in DeleteCheckerV1Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetCheckerV1 := func(method, path string, fn func(context.Context, *GetCheckerV1Request) (*GetCheckerV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetCheckerV1Request))
		}
		var GetCheckerV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetCheckerV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "GetCheckerV1", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetCheckerV1_info)
				}
				r = r.WithContext(ctx)
				var in GetCheckerV1Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DescribeCheckersV1 := func(method, path string, fn func(context.Context, *DescribeCheckersV1Request) (*DescribeCheckersV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DescribeCheckersV1Request))
		}
		var DescribeCheckersV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			DescribeCheckersV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "DescribeCheckersV1", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DescribeCheckersV1_info)
				}
				r = r.WithContext(ctx)
				var in DescribeCheckersV1Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["projectId"]; len(vals) > 0 {
					val, err := strconv.ParseInt(vals[0], 10, 64)
					if err != nil {
						return nil, err
					}
					in.ProjectID = val
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DescribeCheckerV1 := func(method, path string, fn func(context.Context, *DescribeCheckerV1Request) (*DescribeCheckerV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DescribeCheckerV1Request))
		}
		var DescribeCheckerV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			DescribeCheckerV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "DescribeCheckerV1", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DescribeCheckerV1_info)
				}
				r = r.WithContext(ctx)
				var in DescribeCheckerV1Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetCheckerStatusV1 := func(method, path string, fn func(context.Context, *GetCheckerStatusV1Request) (*GetCheckerStatusV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetCheckerStatusV1Request))
		}
		var GetCheckerStatusV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetCheckerStatusV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "GetCheckerStatusV1", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetCheckerStatusV1_info)
				}
				r = r.WithContext(ctx)
				var in GetCheckerStatusV1Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetCheckerIssuesV1 := func(method, path string, fn func(context.Context, *GetCheckerIssuesV1Request) (*GetCheckerIssuesV1Response, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetCheckerIssuesV1Request))
		}
		var GetCheckerIssuesV1_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetCheckerIssuesV1_info = transport.NewServiceInfo("erda.msp.apm.checker.CheckerV1Service", "GetCheckerIssuesV1", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetCheckerIssuesV1_info)
				}
				r = r.WithContext(ctx)
				var in GetCheckerIssuesV1Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateCheckerV1("POST", "/api/msp/apm/checker", srv.CreateCheckerV1)
	add_UpdateCheckerV1("POST", "/api/msp/apm/checker/{id}", srv.UpdateCheckerV1)
	add_DeleteCheckerV1("DELETE", "/api/msp/apm/checker/{id}", srv.DeleteCheckerV1)
	add_GetCheckerV1("GET", "/api/msp/apm/checker/{id}", srv.GetCheckerV1)
	add_DescribeCheckersV1("GET", "/api/msp/apm/checkers/dashboard", srv.DescribeCheckersV1)
	add_DescribeCheckerV1("GET", "/api/msp/apm/checker/{id}/dashboard", srv.DescribeCheckerV1)
	add_GetCheckerStatusV1("GET", "/api/msp/apm/checker/{id}/status", srv.GetCheckerStatusV1)
	add_GetCheckerIssuesV1("GET", "/api/msp/apm/checker/{id}/issues", srv.GetCheckerIssuesV1)
}
