// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: checker.proto, checker_v1.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterCheckerServiceImp checker.proto
func RegisterCheckerServiceImp(regester transport.Register, srv CheckerServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterCheckerServiceHandler(regester, CheckerServiceHandler(srv), _ops.HTTP...)
	RegisterCheckerServiceServer(regester, srv, _ops.GRPC...)
}

// RegisterCheckerV1ServiceImp checker_v1.proto
func RegisterCheckerV1ServiceImp(regester transport.Register, srv CheckerV1ServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterCheckerV1ServiceHandler(regester, CheckerV1ServiceHandler(srv), _ops.HTTP...)
	RegisterCheckerV1ServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.msp.apm.checker.CheckerService",
		"erda.msp.apm.checker.CheckerV1Service",
	)
}

var (
	checkerServiceClientType  = reflect.TypeOf((*CheckerServiceClient)(nil)).Elem()
	checkerServiceServerType  = reflect.TypeOf((*CheckerServiceServer)(nil)).Elem()
	checkerServiceHandlerType = reflect.TypeOf((*CheckerServiceHandler)(nil)).Elem()

	checkerV1ServiceClientType  = reflect.TypeOf((*CheckerV1ServiceClient)(nil)).Elem()
	checkerV1ServiceServerType  = reflect.TypeOf((*CheckerV1ServiceServer)(nil)).Elem()
	checkerV1ServiceHandlerType = reflect.TypeOf((*CheckerV1ServiceHandler)(nil)).Elem()
)

// CheckerServiceClientType .
func CheckerServiceClientType() reflect.Type { return checkerServiceClientType }

// CheckerServiceServerType .
func CheckerServiceServerType() reflect.Type { return checkerServiceServerType }

// CheckerServiceHandlerType .
func CheckerServiceHandlerType() reflect.Type { return checkerServiceHandlerType }

// CheckerV1ServiceClientType .
func CheckerV1ServiceClientType() reflect.Type { return checkerV1ServiceClientType }

// CheckerV1ServiceServerType .
func CheckerV1ServiceServerType() reflect.Type { return checkerV1ServiceServerType }

// CheckerV1ServiceHandlerType .
func CheckerV1ServiceHandlerType() reflect.Type { return checkerV1ServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		checkerServiceClientType,
		checkerV1ServiceClientType,
		// server types
		checkerServiceServerType,
		checkerV1ServiceServerType,
		// handler types
		checkerServiceHandlerType,
		checkerV1ServiceHandlerType,
	}
}
