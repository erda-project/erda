// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: service.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetServiceAnalyzerOverviewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetServiceAnalyzerOverviewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ServicesView)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetServicesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetServicesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Chart)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ServiceChart)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Service)(nil)

// GetServiceAnalyzerOverviewRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetServiceAnalyzerOverviewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantId":
				m.TenantId = vals[0]
			case "serviceIds":
				m.ServiceIds = vals
			}
		}
	}
	return nil
}

// GetServiceAnalyzerOverviewResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetServiceAnalyzerOverviewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ServicesView implement urlenc.URLValuesUnmarshaler.
func (m *ServicesView) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "serviceId":
				m.ServiceId = vals[0]
			}
		}
	}
	return nil
}

// GetServicesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetServicesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "tenantId":
				m.TenantId = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			}
		}
	}
	return nil
}

// GetServicesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetServicesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// Chart implement urlenc.URLValuesUnmarshaler.
func (m *Chart) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "timestamp":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Timestamp = val
			case "value":
				val, err := strconv.ParseFloat(vals[0], 32)
				if err != nil {
					return err
				}
				m.Value = float32(val)
			}
		}
	}
	return nil
}

// ServiceChart implement urlenc.URLValuesUnmarshaler.
func (m *ServiceChart) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "data":
				val, err := strconv.ParseFloat(vals[0], 32)
				if err != nil {
					return err
				}
				m.Data = float32(val)
			}
		}
	}
	return nil
}

// Service implement urlenc.URLValuesUnmarshaler.
func (m *Service) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "language":
			case "lastHeartbeat":
				m.LastHeartbeat = vals[0]
			}
		}
	}
	return nil
}
