// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-json. DO NOT EDIT.
// Source: adapter.proto

package pb

import (
	bytes "bytes"
	json "encoding/json"

	jsonpb "github.com/erda-project/erda-infra/pkg/transport/http/encoding/jsonpb"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "encoding/json" package it is being compiled against.
var _ json.Marshaler = (*GetInstrumentationLibraryRequest)(nil)
var _ json.Unmarshaler = (*GetInstrumentationLibraryRequest)(nil)
var _ json.Marshaler = (*GetInstrumentationLibraryResponse)(nil)
var _ json.Unmarshaler = (*GetInstrumentationLibraryResponse)(nil)
var _ json.Marshaler = (*GetInstrumentationLibraryDocsRequest)(nil)
var _ json.Unmarshaler = (*GetInstrumentationLibraryDocsRequest)(nil)
var _ json.Marshaler = (*GetInstrumentationLibraryDocsResponse)(nil)
var _ json.Unmarshaler = (*GetInstrumentationLibraryDocsResponse)(nil)
var _ json.Marshaler = (*Language)(nil)
var _ json.Unmarshaler = (*Language)(nil)
var _ json.Marshaler = (*InstrumentationLibrary)(nil)
var _ json.Unmarshaler = (*InstrumentationLibrary)(nil)

// GetInstrumentationLibraryRequest implement json.Marshaler.
func (m *GetInstrumentationLibraryRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// GetInstrumentationLibraryRequest implement json.Marshaler.
func (m *GetInstrumentationLibraryRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// GetInstrumentationLibraryResponse implement json.Marshaler.
func (m *GetInstrumentationLibraryResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// GetInstrumentationLibraryResponse implement json.Marshaler.
func (m *GetInstrumentationLibraryResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// GetInstrumentationLibraryDocsRequest implement json.Marshaler.
func (m *GetInstrumentationLibraryDocsRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// GetInstrumentationLibraryDocsRequest implement json.Marshaler.
func (m *GetInstrumentationLibraryDocsRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// GetInstrumentationLibraryDocsResponse implement json.Marshaler.
func (m *GetInstrumentationLibraryDocsResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// GetInstrumentationLibraryDocsResponse implement json.Marshaler.
func (m *GetInstrumentationLibraryDocsResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// Language implement json.Marshaler.
func (m *Language) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// Language implement json.Marshaler.
func (m *Language) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// InstrumentationLibrary implement json.Marshaler.
func (m *InstrumentationLibrary) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// InstrumentationLibrary implement json.Marshaler.
func (m *InstrumentationLibrary) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}
