// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: adapter.proto

package pb

import (
	url "net/url"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetInstrumentationLibraryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetInstrumentationLibraryResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetInstrumentationLibraryDocsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetInstrumentationLibraryDocsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Language)(nil)
var _ urlenc.URLValuesUnmarshaler = (*InstrumentationLibrary)(nil)

// GetInstrumentationLibraryRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetInstrumentationLibraryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetInstrumentationLibraryResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetInstrumentationLibraryResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetInstrumentationLibraryDocsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetInstrumentationLibraryDocsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "language":
				m.Language = vals[0]
			case "strategy":
				m.Strategy = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			}
		}
	}
	return nil
}

// GetInstrumentationLibraryDocsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetInstrumentationLibraryDocsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// Language implement urlenc.URLValuesUnmarshaler.
func (m *Language) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "language":
				m.Language = vals[0]
			}
		}
	}
	return nil
}

// InstrumentationLibrary implement urlenc.URLValuesUnmarshaler.
func (m *InstrumentationLibrary) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "strategy":
				m.Strategy = vals[0]
			}
		}
	}
	return nil
}
