// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: adapter.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// InstrumentationLibraryServiceClient is the client API for InstrumentationLibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentationLibraryServiceClient interface {
	GetInstrumentationLibrary(ctx context.Context, in *GetInstrumentationLibraryRequest, opts ...grpc.CallOption) (*GetInstrumentationLibraryResponse, error)
	GetInstrumentationLibraryDocs(ctx context.Context, in *GetInstrumentationLibraryDocsRequest, opts ...grpc.CallOption) (*GetInstrumentationLibraryDocsResponse, error)
}

type instrumentationLibraryServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewInstrumentationLibraryServiceClient(cc grpc1.ClientConnInterface) InstrumentationLibraryServiceClient {
	return &instrumentationLibraryServiceClient{cc}
}

func (c *instrumentationLibraryServiceClient) GetInstrumentationLibrary(ctx context.Context, in *GetInstrumentationLibraryRequest, opts ...grpc.CallOption) (*GetInstrumentationLibraryResponse, error) {
	out := new(GetInstrumentationLibraryResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.adapter.InstrumentationLibraryService/GetInstrumentationLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentationLibraryServiceClient) GetInstrumentationLibraryDocs(ctx context.Context, in *GetInstrumentationLibraryDocsRequest, opts ...grpc.CallOption) (*GetInstrumentationLibraryDocsResponse, error) {
	out := new(GetInstrumentationLibraryDocsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.adapter.InstrumentationLibraryService/GetInstrumentationLibraryDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentationLibraryServiceServer is the server API for InstrumentationLibraryService service.
// All implementations should embed UnimplementedInstrumentationLibraryServiceServer
// for forward compatibility
type InstrumentationLibraryServiceServer interface {
	GetInstrumentationLibrary(context.Context, *GetInstrumentationLibraryRequest) (*GetInstrumentationLibraryResponse, error)
	GetInstrumentationLibraryDocs(context.Context, *GetInstrumentationLibraryDocsRequest) (*GetInstrumentationLibraryDocsResponse, error)
}

// UnimplementedInstrumentationLibraryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInstrumentationLibraryServiceServer struct {
}

func (*UnimplementedInstrumentationLibraryServiceServer) GetInstrumentationLibrary(context.Context, *GetInstrumentationLibraryRequest) (*GetInstrumentationLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentationLibrary not implemented")
}
func (*UnimplementedInstrumentationLibraryServiceServer) GetInstrumentationLibraryDocs(context.Context, *GetInstrumentationLibraryDocsRequest) (*GetInstrumentationLibraryDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentationLibraryDocs not implemented")
}

func RegisterInstrumentationLibraryServiceServer(s grpc1.ServiceRegistrar, srv InstrumentationLibraryServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_InstrumentationLibraryService_serviceDesc(srv, opts...), srv)
}

var _InstrumentationLibraryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.apm.adapter.InstrumentationLibraryService",
	HandlerType: (*InstrumentationLibraryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "adapter.proto",
}

func _get_InstrumentationLibraryService_serviceDesc(srv InstrumentationLibraryServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_InstrumentationLibraryService_GetInstrumentationLibrary_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetInstrumentationLibrary(ctx, req.(*GetInstrumentationLibraryRequest))
	}
	var _InstrumentationLibraryService_GetInstrumentationLibrary_info transport.ServiceInfo
	if h.Interceptor != nil {
		_InstrumentationLibraryService_GetInstrumentationLibrary_info = transport.NewServiceInfo("erda.msp.apm.adapter.InstrumentationLibraryService", "GetInstrumentationLibrary", srv)
		_InstrumentationLibraryService_GetInstrumentationLibrary_Handler = h.Interceptor(_InstrumentationLibraryService_GetInstrumentationLibrary_Handler)
	}

	_InstrumentationLibraryService_GetInstrumentationLibraryDocs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetInstrumentationLibraryDocs(ctx, req.(*GetInstrumentationLibraryDocsRequest))
	}
	var _InstrumentationLibraryService_GetInstrumentationLibraryDocs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_InstrumentationLibraryService_GetInstrumentationLibraryDocs_info = transport.NewServiceInfo("erda.msp.apm.adapter.InstrumentationLibraryService", "GetInstrumentationLibraryDocs", srv)
		_InstrumentationLibraryService_GetInstrumentationLibraryDocs_Handler = h.Interceptor(_InstrumentationLibraryService_GetInstrumentationLibraryDocs_Handler)
	}

	var serviceDesc = _InstrumentationLibraryService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetInstrumentationLibrary",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetInstrumentationLibraryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(InstrumentationLibraryServiceServer).GetInstrumentationLibrary(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _InstrumentationLibraryService_GetInstrumentationLibrary_info)
				}
				if interceptor == nil {
					return _InstrumentationLibraryService_GetInstrumentationLibrary_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.adapter.InstrumentationLibraryService/GetInstrumentationLibrary",
				}
				return interceptor(ctx, in, info, _InstrumentationLibraryService_GetInstrumentationLibrary_Handler)
			},
		},
		{
			MethodName: "GetInstrumentationLibraryDocs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetInstrumentationLibraryDocsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(InstrumentationLibraryServiceServer).GetInstrumentationLibraryDocs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _InstrumentationLibraryService_GetInstrumentationLibraryDocs_info)
				}
				if interceptor == nil {
					return _InstrumentationLibraryService_GetInstrumentationLibraryDocs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.adapter.InstrumentationLibraryService/GetInstrumentationLibraryDocs",
				}
				return interceptor(ctx, in, info, _InstrumentationLibraryService_GetInstrumentationLibraryDocs_Handler)
			},
		},
	}
	return &serviceDesc
}
