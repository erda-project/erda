// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: apm_diagnotor.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	pb "github.com/erda-project/erda-proto-go/core/monitor/diagnotor/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminusKey string `protobuf:"bytes,1,opt,name=terminusKey,proto3" json:"terminusKey,omitempty"`
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{0}
}

func (x *ListServicesRequest) GetTerminusKey() string {
	if x != nil {
		return x.TerminusKey
	}
	return ""
}

type ListServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ServiceInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListServicesResponse) Reset() {
	*x = ListServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResponse) ProtoMessage() {}

func (x *ListServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResponse.ProtoReflect.Descriptor instead.
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{1}
}

func (x *ListServicesResponse) GetData() []*ServiceInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName         string          `protobuf:"bytes,1,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgID           string          `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ClusterName     string          `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ProjectName     string          `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectID       string          `protobuf:"bytes,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ApplicationName string          `protobuf:"bytes,6,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ApplicationID   string          `protobuf:"bytes,7,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	Service         string          `protobuf:"bytes,8,opt,name=service,proto3" json:"service,omitempty"`
	Instances       []*InstanceInfo `protobuf:"bytes,9,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceInfo) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ServiceInfo) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ServiceInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ServiceInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ServiceInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ServiceInfo) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ServiceInfo) GetApplicationID() string {
	if x != nil {
		return x.ApplicationID
	}
	return ""
}

func (x *ServiceInfo) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceInfo) GetInstances() []*InstanceInfo {
	if x != nil {
		return x.Instances
	}
	return nil
}

type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName     string `protobuf:"bytes,1,opt,name=podName,proto3" json:"podName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	HostIP      string `protobuf:"bytes,3,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	Ip          string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	RuntimeName string `protobuf:"bytes,5,opt,name=runtimeName,proto3" json:"runtimeName,omitempty"`
	RuntimeID   string `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{3}
}

func (x *InstanceInfo) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *InstanceInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstanceInfo) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *InstanceInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *InstanceInfo) GetRuntimeName() string {
	if x != nil {
		return x.RuntimeName
	}
	return ""
}

func (x *InstanceInfo) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type StartDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminusKey string `protobuf:"bytes,1,opt,name=terminusKey,proto3" json:"terminusKey,omitempty"`
	InstanceIP  string `protobuf:"bytes,2,opt,name=instanceIP,proto3" json:"instanceIP,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *StartDiagnosisRequest) Reset() {
	*x = StartDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDiagnosisRequest) ProtoMessage() {}

func (x *StartDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*StartDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{4}
}

func (x *StartDiagnosisRequest) GetTerminusKey() string {
	if x != nil {
		return x.TerminusKey
	}
	return ""
}

func (x *StartDiagnosisRequest) GetInstanceIP() string {
	if x != nil {
		return x.InstanceIP
	}
	return ""
}

func (x *StartDiagnosisRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type StartDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.DiagnosisInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StartDiagnosisResponse) Reset() {
	*x = StartDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDiagnosisResponse) ProtoMessage() {}

func (x *StartDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*StartDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{5}
}

func (x *StartDiagnosisResponse) GetData() *pb.DiagnosisInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDiagnosisStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminusKey string `protobuf:"bytes,1,opt,name=terminusKey,proto3" json:"terminusKey,omitempty"`
	InstanceIP  string `protobuf:"bytes,2,opt,name=instanceIP,proto3" json:"instanceIP,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *QueryDiagnosisStatusRequest) Reset() {
	*x = QueryDiagnosisStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiagnosisStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiagnosisStatusRequest) ProtoMessage() {}

func (x *QueryDiagnosisStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiagnosisStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryDiagnosisStatusRequest) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{6}
}

func (x *QueryDiagnosisStatusRequest) GetTerminusKey() string {
	if x != nil {
		return x.TerminusKey
	}
	return ""
}

func (x *QueryDiagnosisStatusRequest) GetInstanceIP() string {
	if x != nil {
		return x.InstanceIP
	}
	return ""
}

func (x *QueryDiagnosisStatusRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type QueryDiagnosisStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.DiagnosisInstance `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDiagnosisStatusResponse) Reset() {
	*x = QueryDiagnosisStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiagnosisStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiagnosisStatusResponse) ProtoMessage() {}

func (x *QueryDiagnosisStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiagnosisStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryDiagnosisStatusResponse) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{7}
}

func (x *QueryDiagnosisStatusResponse) GetData() *pb.DiagnosisInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type StopDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminusKey string `protobuf:"bytes,1,opt,name=terminusKey,proto3" json:"terminusKey,omitempty"`
	InstanceIP  string `protobuf:"bytes,2,opt,name=instanceIP,proto3" json:"instanceIP,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *StopDiagnosisRequest) Reset() {
	*x = StopDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDiagnosisRequest) ProtoMessage() {}

func (x *StopDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*StopDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{8}
}

func (x *StopDiagnosisRequest) GetTerminusKey() string {
	if x != nil {
		return x.TerminusKey
	}
	return ""
}

func (x *StopDiagnosisRequest) GetInstanceIP() string {
	if x != nil {
		return x.InstanceIP
	}
	return ""
}

func (x *StopDiagnosisRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type StopDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StopDiagnosisResponse) Reset() {
	*x = StopDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDiagnosisResponse) ProtoMessage() {}

func (x *StopDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*StopDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{9}
}

func (x *StopDiagnosisResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ListProcessesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminusKey string `protobuf:"bytes,1,opt,name=terminusKey,proto3" json:"terminusKey,omitempty"`
	InstanceIP  string `protobuf:"bytes,2,opt,name=instanceIP,proto3" json:"instanceIP,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *ListProcessesRequest) Reset() {
	*x = ListProcessesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesRequest) ProtoMessage() {}

func (x *ListProcessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesRequest.ProtoReflect.Descriptor instead.
func (*ListProcessesRequest) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{10}
}

func (x *ListProcessesRequest) GetTerminusKey() string {
	if x != nil {
		return x.TerminusKey
	}
	return ""
}

func (x *ListProcessesRequest) GetInstanceIP() string {
	if x != nil {
		return x.InstanceIP
	}
	return ""
}

func (x *ListProcessesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ListProcessesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *pb.HostProcessStatus `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListProcessesResponse) Reset() {
	*x = ListProcessesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apm_diagnotor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessesResponse) ProtoMessage() {}

func (x *ListProcessesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apm_diagnotor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessesResponse.ProtoReflect.Descriptor instead.
func (*ListProcessesResponse) Descriptor() ([]byte, []int) {
	return file_apm_diagnotor_proto_rawDescGZIP(), []int{11}
}

func (x *ListProcessesResponse) GetData() *pb.HostProcessStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_apm_diagnotor_proto protoreflect.FileDescriptor

var file_apm_diagnotor_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x6d, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x1a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f,
	0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x74, 0x6f, 0x72, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75,
	0x73, 0x4b, 0x65, 0x79, 0x22, 0x4f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74,
	0x6f, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x70, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x5b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x86,
	0x08, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73,
	0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73,
	0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75,
	0x73, 0x4b, 0x65, 0x79, 0x7d, 0x12, 0xe0, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b,
	0x65, 0x79, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x29, 0x0a,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x70, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79,
	0x7d, 0x12, 0xd1, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x73, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2c, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x73, 0x70, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c, 0x0b, 0x22, 0x03, 0x6d, 0x73,
	0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x74,
	0x6f, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apm_diagnotor_proto_rawDescOnce sync.Once
	file_apm_diagnotor_proto_rawDescData = file_apm_diagnotor_proto_rawDesc
)

func file_apm_diagnotor_proto_rawDescGZIP() []byte {
	file_apm_diagnotor_proto_rawDescOnce.Do(func() {
		file_apm_diagnotor_proto_rawDescData = protoimpl.X.CompressGZIP(file_apm_diagnotor_proto_rawDescData)
	})
	return file_apm_diagnotor_proto_rawDescData
}

var file_apm_diagnotor_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_apm_diagnotor_proto_goTypes = []interface{}{
	(*ListServicesRequest)(nil),          // 0: erda.msp.apm.diagnotor.ListServicesRequest
	(*ListServicesResponse)(nil),         // 1: erda.msp.apm.diagnotor.ListServicesResponse
	(*ServiceInfo)(nil),                  // 2: erda.msp.apm.diagnotor.ServiceInfo
	(*InstanceInfo)(nil),                 // 3: erda.msp.apm.diagnotor.InstanceInfo
	(*StartDiagnosisRequest)(nil),        // 4: erda.msp.apm.diagnotor.StartDiagnosisRequest
	(*StartDiagnosisResponse)(nil),       // 5: erda.msp.apm.diagnotor.StartDiagnosisResponse
	(*QueryDiagnosisStatusRequest)(nil),  // 6: erda.msp.apm.diagnotor.QueryDiagnosisStatusRequest
	(*QueryDiagnosisStatusResponse)(nil), // 7: erda.msp.apm.diagnotor.QueryDiagnosisStatusResponse
	(*StopDiagnosisRequest)(nil),         // 8: erda.msp.apm.diagnotor.StopDiagnosisRequest
	(*StopDiagnosisResponse)(nil),        // 9: erda.msp.apm.diagnotor.StopDiagnosisResponse
	(*ListProcessesRequest)(nil),         // 10: erda.msp.apm.diagnotor.ListProcessesRequest
	(*ListProcessesResponse)(nil),        // 11: erda.msp.apm.diagnotor.ListProcessesResponse
	(*pb.DiagnosisInstance)(nil),         // 12: erda.core.monitor.diagnotor.DiagnosisInstance
	(*pb.HostProcessStatus)(nil),         // 13: erda.core.monitor.diagnotor.HostProcessStatus
}
var file_apm_diagnotor_proto_depIdxs = []int32{
	2,  // 0: erda.msp.apm.diagnotor.ListServicesResponse.data:type_name -> erda.msp.apm.diagnotor.ServiceInfo
	3,  // 1: erda.msp.apm.diagnotor.ServiceInfo.instances:type_name -> erda.msp.apm.diagnotor.InstanceInfo
	12, // 2: erda.msp.apm.diagnotor.StartDiagnosisResponse.data:type_name -> erda.core.monitor.diagnotor.DiagnosisInstance
	12, // 3: erda.msp.apm.diagnotor.QueryDiagnosisStatusResponse.data:type_name -> erda.core.monitor.diagnotor.DiagnosisInstance
	13, // 4: erda.msp.apm.diagnotor.ListProcessesResponse.data:type_name -> erda.core.monitor.diagnotor.HostProcessStatus
	0,  // 5: erda.msp.apm.diagnotor.DiagnotorService.ListServices:input_type -> erda.msp.apm.diagnotor.ListServicesRequest
	4,  // 6: erda.msp.apm.diagnotor.DiagnotorService.StartDiagnosis:input_type -> erda.msp.apm.diagnotor.StartDiagnosisRequest
	6,  // 7: erda.msp.apm.diagnotor.DiagnotorService.QueryDiagnosisStatus:input_type -> erda.msp.apm.diagnotor.QueryDiagnosisStatusRequest
	8,  // 8: erda.msp.apm.diagnotor.DiagnotorService.StopDiagnosis:input_type -> erda.msp.apm.diagnotor.StopDiagnosisRequest
	10, // 9: erda.msp.apm.diagnotor.DiagnotorService.ListProcesses:input_type -> erda.msp.apm.diagnotor.ListProcessesRequest
	1,  // 10: erda.msp.apm.diagnotor.DiagnotorService.ListServices:output_type -> erda.msp.apm.diagnotor.ListServicesResponse
	5,  // 11: erda.msp.apm.diagnotor.DiagnotorService.StartDiagnosis:output_type -> erda.msp.apm.diagnotor.StartDiagnosisResponse
	7,  // 12: erda.msp.apm.diagnotor.DiagnotorService.QueryDiagnosisStatus:output_type -> erda.msp.apm.diagnotor.QueryDiagnosisStatusResponse
	9,  // 13: erda.msp.apm.diagnotor.DiagnotorService.StopDiagnosis:output_type -> erda.msp.apm.diagnotor.StopDiagnosisResponse
	11, // 14: erda.msp.apm.diagnotor.DiagnotorService.ListProcesses:output_type -> erda.msp.apm.diagnotor.ListProcessesResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_apm_diagnotor_proto_init() }
func file_apm_diagnotor_proto_init() {
	if File_apm_diagnotor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apm_diagnotor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiagnosisStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiagnosisStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apm_diagnotor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apm_diagnotor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apm_diagnotor_proto_goTypes,
		DependencyIndexes: file_apm_diagnotor_proto_depIdxs,
		MessageInfos:      file_apm_diagnotor_proto_msgTypes,
	}.Build()
	File_apm_diagnotor_proto = out.File
	file_apm_diagnotor_proto_rawDesc = nil
	file_apm_diagnotor_proto_goTypes = nil
	file_apm_diagnotor_proto_depIdxs = nil
}
