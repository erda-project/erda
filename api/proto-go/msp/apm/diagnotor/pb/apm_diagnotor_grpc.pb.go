// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: apm_diagnotor.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DiagnotorServiceClient is the client API for DiagnotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiagnotorServiceClient interface {
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	StartDiagnosis(ctx context.Context, in *StartDiagnosisRequest, opts ...grpc.CallOption) (*StartDiagnosisResponse, error)
	QueryDiagnosisStatus(ctx context.Context, in *QueryDiagnosisStatusRequest, opts ...grpc.CallOption) (*QueryDiagnosisStatusResponse, error)
	StopDiagnosis(ctx context.Context, in *StopDiagnosisRequest, opts ...grpc.CallOption) (*StopDiagnosisResponse, error)
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error)
}

type diagnotorServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDiagnotorServiceClient(cc grpc1.ClientConnInterface) DiagnotorServiceClient {
	return &diagnotorServiceClient{cc}
}

func (c *diagnotorServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.diagnotor.DiagnotorService/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnotorServiceClient) StartDiagnosis(ctx context.Context, in *StartDiagnosisRequest, opts ...grpc.CallOption) (*StartDiagnosisResponse, error) {
	out := new(StartDiagnosisResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.diagnotor.DiagnotorService/StartDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnotorServiceClient) QueryDiagnosisStatus(ctx context.Context, in *QueryDiagnosisStatusRequest, opts ...grpc.CallOption) (*QueryDiagnosisStatusResponse, error) {
	out := new(QueryDiagnosisStatusResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.diagnotor.DiagnotorService/QueryDiagnosisStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnotorServiceClient) StopDiagnosis(ctx context.Context, in *StopDiagnosisRequest, opts ...grpc.CallOption) (*StopDiagnosisResponse, error) {
	out := new(StopDiagnosisResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.diagnotor.DiagnotorService/StopDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnotorServiceClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error) {
	out := new(ListProcessesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.diagnotor.DiagnotorService/ListProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnotorServiceServer is the server API for DiagnotorService service.
// All implementations should embed UnimplementedDiagnotorServiceServer
// for forward compatibility
type DiagnotorServiceServer interface {
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	StartDiagnosis(context.Context, *StartDiagnosisRequest) (*StartDiagnosisResponse, error)
	QueryDiagnosisStatus(context.Context, *QueryDiagnosisStatusRequest) (*QueryDiagnosisStatusResponse, error)
	StopDiagnosis(context.Context, *StopDiagnosisRequest) (*StopDiagnosisResponse, error)
	ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error)
}

// UnimplementedDiagnotorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDiagnotorServiceServer struct {
}

func (*UnimplementedDiagnotorServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (*UnimplementedDiagnotorServiceServer) StartDiagnosis(context.Context, *StartDiagnosisRequest) (*StartDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDiagnosis not implemented")
}
func (*UnimplementedDiagnotorServiceServer) QueryDiagnosisStatus(context.Context, *QueryDiagnosisStatusRequest) (*QueryDiagnosisStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDiagnosisStatus not implemented")
}
func (*UnimplementedDiagnotorServiceServer) StopDiagnosis(context.Context, *StopDiagnosisRequest) (*StopDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDiagnosis not implemented")
}
func (*UnimplementedDiagnotorServiceServer) ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}

func RegisterDiagnotorServiceServer(s grpc1.ServiceRegistrar, srv DiagnotorServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DiagnotorService_serviceDesc(srv, opts...), srv)
}

var _DiagnotorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.apm.diagnotor.DiagnotorService",
	HandlerType: (*DiagnotorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "apm_diagnotor.proto",
}

func _get_DiagnotorService_serviceDesc(srv DiagnotorServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DiagnotorService_ListServices_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListServices(ctx, req.(*ListServicesRequest))
	}
	var _DiagnotorService_ListServices_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DiagnotorService_ListServices_info = transport.NewServiceInfo("erda.msp.apm.diagnotor.DiagnotorService", "ListServices", srv)
		_DiagnotorService_ListServices_Handler = h.Interceptor(_DiagnotorService_ListServices_Handler)
	}

	_DiagnotorService_StartDiagnosis_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.StartDiagnosis(ctx, req.(*StartDiagnosisRequest))
	}
	var _DiagnotorService_StartDiagnosis_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DiagnotorService_StartDiagnosis_info = transport.NewServiceInfo("erda.msp.apm.diagnotor.DiagnotorService", "StartDiagnosis", srv)
		_DiagnotorService_StartDiagnosis_Handler = h.Interceptor(_DiagnotorService_StartDiagnosis_Handler)
	}

	_DiagnotorService_QueryDiagnosisStatus_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryDiagnosisStatus(ctx, req.(*QueryDiagnosisStatusRequest))
	}
	var _DiagnotorService_QueryDiagnosisStatus_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DiagnotorService_QueryDiagnosisStatus_info = transport.NewServiceInfo("erda.msp.apm.diagnotor.DiagnotorService", "QueryDiagnosisStatus", srv)
		_DiagnotorService_QueryDiagnosisStatus_Handler = h.Interceptor(_DiagnotorService_QueryDiagnosisStatus_Handler)
	}

	_DiagnotorService_StopDiagnosis_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.StopDiagnosis(ctx, req.(*StopDiagnosisRequest))
	}
	var _DiagnotorService_StopDiagnosis_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DiagnotorService_StopDiagnosis_info = transport.NewServiceInfo("erda.msp.apm.diagnotor.DiagnotorService", "StopDiagnosis", srv)
		_DiagnotorService_StopDiagnosis_Handler = h.Interceptor(_DiagnotorService_StopDiagnosis_Handler)
	}

	_DiagnotorService_ListProcesses_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListProcesses(ctx, req.(*ListProcessesRequest))
	}
	var _DiagnotorService_ListProcesses_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DiagnotorService_ListProcesses_info = transport.NewServiceInfo("erda.msp.apm.diagnotor.DiagnotorService", "ListProcesses", srv)
		_DiagnotorService_ListProcesses_Handler = h.Interceptor(_DiagnotorService_ListProcesses_Handler)
	}

	var serviceDesc = _DiagnotorService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListServicesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DiagnotorServiceServer).ListServices(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DiagnotorService_ListServices_info)
				}
				if interceptor == nil {
					return _DiagnotorService_ListServices_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.diagnotor.DiagnotorService/ListServices",
				}
				return interceptor(ctx, in, info, _DiagnotorService_ListServices_Handler)
			},
		},
		{
			MethodName: "StartDiagnosis",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(StartDiagnosisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DiagnotorServiceServer).StartDiagnosis(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DiagnotorService_StartDiagnosis_info)
				}
				if interceptor == nil {
					return _DiagnotorService_StartDiagnosis_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.diagnotor.DiagnotorService/StartDiagnosis",
				}
				return interceptor(ctx, in, info, _DiagnotorService_StartDiagnosis_Handler)
			},
		},
		{
			MethodName: "QueryDiagnosisStatus",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryDiagnosisStatusRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DiagnotorServiceServer).QueryDiagnosisStatus(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DiagnotorService_QueryDiagnosisStatus_info)
				}
				if interceptor == nil {
					return _DiagnotorService_QueryDiagnosisStatus_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.diagnotor.DiagnotorService/QueryDiagnosisStatus",
				}
				return interceptor(ctx, in, info, _DiagnotorService_QueryDiagnosisStatus_Handler)
			},
		},
		{
			MethodName: "StopDiagnosis",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(StopDiagnosisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DiagnotorServiceServer).StopDiagnosis(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DiagnotorService_StopDiagnosis_info)
				}
				if interceptor == nil {
					return _DiagnotorService_StopDiagnosis_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.diagnotor.DiagnotorService/StopDiagnosis",
				}
				return interceptor(ctx, in, info, _DiagnotorService_StopDiagnosis_Handler)
			},
		},
		{
			MethodName: "ListProcesses",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListProcessesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DiagnotorServiceServer).ListProcesses(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DiagnotorService_ListProcesses_info)
				}
				if interceptor == nil {
					return _DiagnotorService_ListProcesses_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.diagnotor.DiagnotorService/ListProcesses",
				}
				return interceptor(ctx, in, info, _DiagnotorService_ListProcesses_Handler)
			},
		},
	}
	return &serviceDesc
}
