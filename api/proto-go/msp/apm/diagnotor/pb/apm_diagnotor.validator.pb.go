// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm_diagnotor.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/erda-project/erda-proto-go/core/monitor/diagnotor/pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ListServicesRequest) Validate() error {
	if this.TerminusKey == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TerminusKey", fmt.Errorf(`value '%v' must not be an empty string`, this.TerminusKey))
	}
	return nil
}
func (this *ListServicesResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *ServiceInfo) Validate() error {
	for _, item := range this.Instances {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Instances", err)
			}
		}
	}
	return nil
}
func (this *InstanceInfo) Validate() error {
	return nil
}
func (this *StartDiagnosisRequest) Validate() error {
	if this.TerminusKey == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TerminusKey", fmt.Errorf(`value '%v' must not be an empty string`, this.TerminusKey))
	}
	if this.InstanceIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceIP", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceIP))
	}
	return nil
}
func (this *StartDiagnosisResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *QueryDiagnosisStatusRequest) Validate() error {
	if this.TerminusKey == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TerminusKey", fmt.Errorf(`value '%v' must not be an empty string`, this.TerminusKey))
	}
	if this.InstanceIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceIP", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceIP))
	}
	return nil
}
func (this *QueryDiagnosisStatusResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *StopDiagnosisRequest) Validate() error {
	if this.TerminusKey == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TerminusKey", fmt.Errorf(`value '%v' must not be an empty string`, this.TerminusKey))
	}
	if this.InstanceIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceIP", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceIP))
	}
	return nil
}
func (this *StopDiagnosisResponse) Validate() error {
	return nil
}
func (this *ListProcessesRequest) Validate() error {
	if this.TerminusKey == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("TerminusKey", fmt.Errorf(`value '%v' must not be an empty string`, this.TerminusKey))
	}
	if this.InstanceIP == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("InstanceIP", fmt.Errorf(`value '%v' must not be an empty string`, this.InstanceIP))
	}
	return nil
}
func (this *ListProcessesResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
