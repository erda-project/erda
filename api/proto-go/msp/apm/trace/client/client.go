// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: trace.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/msp/apm/trace/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// TraceService trace.proto
	TraceService() pb.TraceServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		traceService: pb.NewTraceServiceClient(cc),
	}
}

type serviceClients struct {
	traceService pb.TraceServiceClient
}

func (c *serviceClients) TraceService() pb.TraceServiceClient {
	return c.traceService
}

type traceServiceWrapper struct {
	client pb.TraceServiceClient
	opts   []grpc1.CallOption
}

func (s *traceServiceWrapper) GetSpans(ctx context.Context, req *pb.GetSpansRequest) (*pb.GetSpansResponse, error) {
	return s.client.GetSpans(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetSpanDashboards(ctx context.Context, req *pb.GetSpanDashboardsRequest) (*pb.GetSpanDashboardsResponse, error) {
	return s.client.GetSpanDashboards(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetTraces(ctx context.Context, req *pb.GetTracesRequest) (*pb.GetTracesResponse, error) {
	return s.client.GetTraces(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetTraceQueryConditions(ctx context.Context, req *pb.GetTraceQueryConditionsRequest) (*pb.GetTraceQueryConditionsResponse, error) {
	return s.client.GetTraceQueryConditions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetTraceDebugHistories(ctx context.Context, req *pb.GetTraceDebugHistoriesRequest) (*pb.GetTraceDebugHistoriesResponse, error) {
	return s.client.GetTraceDebugHistories(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetTraceDebugByRequestID(ctx context.Context, req *pb.GetTraceDebugRequest) (*pb.GetTraceDebugResponse, error) {
	return s.client.GetTraceDebugByRequestID(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) CreateTraceDebug(ctx context.Context, req *pb.CreateTraceDebugRequest) (*pb.CreateTraceDebugResponse, error) {
	return s.client.CreateTraceDebug(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) StopTraceDebug(ctx context.Context, req *pb.StopTraceDebugRequest) (*pb.StopTraceDebugResponse, error) {
	return s.client.StopTraceDebug(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetTraceDebugHistoryStatusByRequestID(ctx context.Context, req *pb.GetTraceDebugStatusByRequestIDRequest) (*pb.GetTraceDebugStatusByRequestIDResponse, error) {
	return s.client.GetTraceDebugHistoryStatusByRequestID(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *traceServiceWrapper) GetSpanEvents(ctx context.Context, req *pb.SpanEventRequest) (*pb.SpanEventResponse, error) {
	return s.client.GetSpanEvents(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
