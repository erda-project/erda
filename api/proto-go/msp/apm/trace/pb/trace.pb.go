// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: trace.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortCondition int32

const (
	SortCondition_SPAN_COUNT_DESC     SortCondition = 0
	SortCondition_SPAN_COUNT_ASC      SortCondition = 1
	SortCondition_TRACE_DURATION_DESC SortCondition = 2
	SortCondition_TRACE_DURATION_ASC  SortCondition = 3
	SortCondition_TRACE_TIME_DESC     SortCondition = 4
	SortCondition_TRACE_TIME_ASC      SortCondition = 5
)

// Enum value maps for SortCondition.
var (
	SortCondition_name = map[int32]string{
		0: "SPAN_COUNT_DESC",
		1: "SPAN_COUNT_ASC",
		2: "TRACE_DURATION_DESC",
		3: "TRACE_DURATION_ASC",
		4: "TRACE_TIME_DESC",
		5: "TRACE_TIME_ASC",
	}
	SortCondition_value = map[string]int32{
		"SPAN_COUNT_DESC":     0,
		"SPAN_COUNT_ASC":      1,
		"TRACE_DURATION_DESC": 2,
		"TRACE_DURATION_ASC":  3,
		"TRACE_TIME_DESC":     4,
		"TRACE_TIME_ASC":      5,
	}
)

func (x SortCondition) Enum() *SortCondition {
	p := new(SortCondition)
	*p = x
	return p
}

func (x SortCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[0].Descriptor()
}

func (SortCondition) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[0]
}

func (x SortCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortCondition.Descriptor instead.
func (SortCondition) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{0}
}

type LimitCondition int32

const (
	LimitCondition_NUMBER_100  LimitCondition = 0
	LimitCondition_NUMBER_200  LimitCondition = 1
	LimitCondition_NUMBER_500  LimitCondition = 2
	LimitCondition_NUMBER_1000 LimitCondition = 3
)

// Enum value maps for LimitCondition.
var (
	LimitCondition_name = map[int32]string{
		0: "NUMBER_100",
		1: "NUMBER_200",
		2: "NUMBER_500",
		3: "NUMBER_1000",
	}
	LimitCondition_value = map[string]int32{
		"NUMBER_100":  0,
		"NUMBER_200":  1,
		"NUMBER_500":  2,
		"NUMBER_1000": 3,
	}
)

func (x LimitCondition) Enum() *LimitCondition {
	p := new(LimitCondition)
	*p = x
	return p
}

func (x LimitCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[1].Descriptor()
}

func (LimitCondition) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[1]
}

func (x LimitCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitCondition.Descriptor instead.
func (LimitCondition) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{1}
}

type TraceStatusCondition int32

const (
	TraceStatusCondition_TRACE_SUCCESS TraceStatusCondition = 0
	TraceStatusCondition_TRACE_ERROR   TraceStatusCondition = 1
	TraceStatusCondition_TRACE_ALL     TraceStatusCondition = 2
)

// Enum value maps for TraceStatusCondition.
var (
	TraceStatusCondition_name = map[int32]string{
		0: "TRACE_SUCCESS",
		1: "TRACE_ERROR",
		2: "TRACE_ALL",
	}
	TraceStatusCondition_value = map[string]int32{
		"TRACE_SUCCESS": 0,
		"TRACE_ERROR":   1,
		"TRACE_ALL":     2,
	}
)

func (x TraceStatusCondition) Enum() *TraceStatusCondition {
	p := new(TraceStatusCondition)
	*p = x
	return p
}

func (x TraceStatusCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceStatusCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[2].Descriptor()
}

func (TraceStatusCondition) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[2]
}

func (x TraceStatusCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceStatusCondition.Descriptor instead.
func (TraceStatusCondition) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{2}
}

type OtherCondition int32

const (
	OtherCondition_SERVICE_NAME OtherCondition = 0
	OtherCondition_TRACE_ID     OtherCondition = 1
	OtherCondition_DUBBO_METHOD OtherCondition = 2
	OtherCondition_HTTP_PATH    OtherCondition = 3
)

// Enum value maps for OtherCondition.
var (
	OtherCondition_name = map[int32]string{
		0: "SERVICE_NAME",
		1: "TRACE_ID",
		2: "DUBBO_METHOD",
		3: "HTTP_PATH",
	}
	OtherCondition_value = map[string]int32{
		"SERVICE_NAME": 0,
		"TRACE_ID":     1,
		"DUBBO_METHOD": 2,
		"HTTP_PATH":    3,
	}
)

func (x OtherCondition) Enum() *OtherCondition {
	p := new(OtherCondition)
	*p = x
	return p
}

func (x OtherCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtherCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[3].Descriptor()
}

func (OtherCondition) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[3]
}

func (x OtherCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OtherCondition.Descriptor instead.
func (OtherCondition) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{3}
}

type SpanType int32

const (
	SpanType_HTTP_CLIENT  SpanType = 0
	SpanType_HTTP_SERVER  SpanType = 1
	SpanType_RPC_CLIENT   SpanType = 2
	SpanType_RPC_SERVER   SpanType = 3
	SpanType_CACHE_CLIENT SpanType = 4
	SpanType_DB_CLIENT    SpanType = 5
	SpanType_MQ_PRODUCER  SpanType = 6
	SpanType_MQ_CONSUMER  SpanType = 7
	SpanType_INVOKE_LOCAL SpanType = 8
)

// Enum value maps for SpanType.
var (
	SpanType_name = map[int32]string{
		0: "HTTP_CLIENT",
		1: "HTTP_SERVER",
		2: "RPC_CLIENT",
		3: "RPC_SERVER",
		4: "CACHE_CLIENT",
		5: "DB_CLIENT",
		6: "MQ_PRODUCER",
		7: "MQ_CONSUMER",
		8: "INVOKE_LOCAL",
	}
	SpanType_value = map[string]int32{
		"HTTP_CLIENT":  0,
		"HTTP_SERVER":  1,
		"RPC_CLIENT":   2,
		"RPC_SERVER":   3,
		"CACHE_CLIENT": 4,
		"DB_CLIENT":    5,
		"MQ_PRODUCER":  6,
		"MQ_CONSUMER":  7,
		"INVOKE_LOCAL": 8,
	}
)

func (x SpanType) Enum() *SpanType {
	p := new(SpanType)
	*p = x
	return p
}

func (x SpanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanType) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[4].Descriptor()
}

func (SpanType) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[4]
}

func (x SpanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanType.Descriptor instead.
func (SpanType) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{4}
}

type GetTraceQueryConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantID string `protobuf:"bytes,1,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
}

func (x *GetTraceQueryConditionsRequest) Reset() {
	*x = GetTraceQueryConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceQueryConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceQueryConditionsRequest) ProtoMessage() {}

func (x *GetTraceQueryConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceQueryConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetTraceQueryConditionsRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{0}
}

func (x *GetTraceQueryConditionsRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

type GetTraceQueryConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TraceQueryConditions `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTraceQueryConditionsResponse) Reset() {
	*x = GetTraceQueryConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceQueryConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceQueryConditionsResponse) ProtoMessage() {}

func (x *GetTraceQueryConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceQueryConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetTraceQueryConditionsResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{1}
}

func (x *GetTraceQueryConditionsResponse) GetData() *TraceQueryConditions {
	if x != nil {
		return x.Data
	}
	return nil
}

type TraceQueryConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort        []*TraceQueryCondition      `protobuf:"bytes,1,rep,name=sort,proto3" json:"sort,omitempty"`
	Limit       []*TraceQueryCondition      `protobuf:"bytes,2,rep,name=limit,proto3" json:"limit,omitempty"`
	TraceStatus []*TraceQueryCondition      `protobuf:"bytes,3,rep,name=traceStatus,proto3" json:"traceStatus,omitempty"`
	Others      []*OtherTraceQueryCondition `protobuf:"bytes,4,rep,name=others,proto3" json:"others,omitempty"`
}

func (x *TraceQueryConditions) Reset() {
	*x = TraceQueryConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceQueryConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceQueryConditions) ProtoMessage() {}

func (x *TraceQueryConditions) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceQueryConditions.ProtoReflect.Descriptor instead.
func (*TraceQueryConditions) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{2}
}

func (x *TraceQueryConditions) GetSort() []*TraceQueryCondition {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *TraceQueryConditions) GetLimit() []*TraceQueryCondition {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *TraceQueryConditions) GetTraceStatus() []*TraceQueryCondition {
	if x != nil {
		return x.TraceStatus
	}
	return nil
}

func (x *TraceQueryConditions) GetOthers() []*OtherTraceQueryCondition {
	if x != nil {
		return x.Others
	}
	return nil
}

type TraceQueryCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
}

func (x *TraceQueryCondition) Reset() {
	*x = TraceQueryCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceQueryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceQueryCondition) ProtoMessage() {}

func (x *TraceQueryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceQueryCondition.ProtoReflect.Descriptor instead.
func (*TraceQueryCondition) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{3}
}

func (x *TraceQueryCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TraceQueryCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TraceQueryCondition) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type OtherTraceQueryCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ParamKey    string `protobuf:"bytes,5,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
}

func (x *OtherTraceQueryCondition) Reset() {
	*x = OtherTraceQueryCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherTraceQueryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherTraceQueryCondition) ProtoMessage() {}

func (x *OtherTraceQueryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherTraceQueryCondition.ProtoReflect.Descriptor instead.
func (*OtherTraceQueryCondition) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{4}
}

func (x *OtherTraceQueryCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OtherTraceQueryCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OtherTraceQueryCondition) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OtherTraceQueryCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OtherTraceQueryCondition) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

type GetTraceDebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *GetTraceDebugRequest) Reset() {
	*x = GetTraceDebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceDebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceDebugRequest) ProtoMessage() {}

func (x *GetTraceDebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceDebugRequest.ProtoReflect.Descriptor instead.
func (*GetTraceDebugRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{5}
}

func (x *GetTraceDebugRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetTraceDebugRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type CreateTraceDebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    string            `protobuf:"bytes,1,opt,name=requestID,json=requestId,proto3" json:"requestID,omitempty"`
	ScopeID      string            `protobuf:"bytes,2,opt,name=scopeID,json=terminusKey,proto3" json:"scopeID,omitempty"`
	Url          string            `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Query        map[string]string `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Header       map[string]string `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body         string            `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	Status       int32             `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	StatusName   string            `protobuf:"bytes,8,opt,name=statusName,proto3" json:"statusName,omitempty"`
	ResponseCode int32             `protobuf:"varint,9,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseBody string            `protobuf:"bytes,10,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	Method       string            `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"`
	CreateTime   string            `protobuf:"bytes,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string            `protobuf:"bytes,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ProjectID    string            `protobuf:"bytes,14,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	Name         string            `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateTraceDebugRequest) Reset() {
	*x = CreateTraceDebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTraceDebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTraceDebugRequest) ProtoMessage() {}

func (x *CreateTraceDebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTraceDebugRequest.ProtoReflect.Descriptor instead.
func (*CreateTraceDebugRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTraceDebugRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetQuery() map[string]string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CreateTraceDebugRequest) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateTraceDebugRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateTraceDebugRequest) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *CreateTraceDebugRequest) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateTraceDebugRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StopTraceDebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *StopTraceDebugRequest) Reset() {
	*x = StopTraceDebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTraceDebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTraceDebugRequest) ProtoMessage() {}

func (x *StopTraceDebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTraceDebugRequest.ProtoReflect.Descriptor instead.
func (*StopTraceDebugRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{7}
}

func (x *StopTraceDebugRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *StopTraceDebugRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type GetTraceDebugStatusByRequestIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *GetTraceDebugStatusByRequestIDRequest) Reset() {
	*x = GetTraceDebugStatusByRequestIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceDebugStatusByRequestIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceDebugStatusByRequestIDRequest) ProtoMessage() {}

func (x *GetTraceDebugStatusByRequestIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceDebugStatusByRequestIDRequest.ProtoReflect.Descriptor instead.
func (*GetTraceDebugStatusByRequestIDRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{8}
}

func (x *GetTraceDebugStatusByRequestIDRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetTraceDebugStatusByRequestIDRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type GetTraceDebugHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeID string `protobuf:"bytes,1,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Limit   int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetTraceDebugHistoriesRequest) Reset() {
	*x = GetTraceDebugHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceDebugHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceDebugHistoriesRequest) ProtoMessage() {}

func (x *GetTraceDebugHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceDebugHistoriesRequest.ProtoReflect.Descriptor instead.
func (*GetTraceDebugHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{9}
}

func (x *GetTraceDebugHistoriesRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *GetTraceDebugHistoriesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSpansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each request will generate a globally unique TraceId,
	// and the TraceId is generally generated by the first server that receives the request.
	TraceID string `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	// The scopeId is similar to the tenant id, which can quickly locate the cluster, project, and environment
	ScopeID string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Limit   int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetSpansRequest) Reset() {
	*x = GetSpansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpansRequest) ProtoMessage() {}

func (x *GetSpansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpansRequest.ProtoReflect.Descriptor instead.
func (*GetSpansRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{10}
}

func (x *GetSpansRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *GetSpansRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *GetSpansRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSpanDashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantID          string `protobuf:"bytes,1,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	Type              string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ServiceInstanceID string `protobuf:"bytes,3,opt,name=serviceInstanceID,proto3" json:"serviceInstanceID,omitempty"`
	StartTime         int64  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime           int64  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetSpanDashboardsRequest) Reset() {
	*x = GetSpanDashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpanDashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanDashboardsRequest) ProtoMessage() {}

func (x *GetSpanDashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanDashboardsRequest.ProtoReflect.Descriptor instead.
func (*GetSpanDashboardsRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpanDashboardsRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *GetSpanDashboardsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetSpanDashboardsRequest) GetServiceInstanceID() string {
	if x != nil {
		return x.ServiceInstanceID
	}
	return ""
}

func (x *GetSpanDashboardsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetSpanDashboardsRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetTracesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tenant id, which can quickly locate the cluster, project, and environment
	TenantID    string `protobuf:"bytes,1,opt,name=tenantID,json=traceId,proto3" json:"tenantID,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StartTime   int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Limit       int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	TraceID     string `protobuf:"bytes,6,opt,name=traceID,json=traceId,proto3" json:"traceID,omitempty"`
	DurationMin int64  `protobuf:"varint,7,opt,name=durationMin,proto3" json:"durationMin,omitempty"`
	DurationMax int64  `protobuf:"varint,8,opt,name=durationMax,proto3" json:"durationMax,omitempty"`
	Sort        string `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
	ServiceName string `protobuf:"bytes,10,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	DubboMethod string `protobuf:"bytes,11,opt,name=dubboMethod,proto3" json:"dubboMethod,omitempty"`
	HttpPath    string `protobuf:"bytes,12,opt,name=httpPath,proto3" json:"httpPath,omitempty"`
}

func (x *GetTracesRequest) Reset() {
	*x = GetTracesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTracesRequest) ProtoMessage() {}

func (x *GetTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTracesRequest.ProtoReflect.Descriptor instead.
func (*GetTracesRequest) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{12}
}

func (x *GetTracesRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *GetTracesRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetTracesRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTracesRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTracesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTracesRequest) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *GetTracesRequest) GetDurationMin() int64 {
	if x != nil {
		return x.DurationMin
	}
	return 0
}

func (x *GetTracesRequest) GetDurationMax() int64 {
	if x != nil {
		return x.DurationMax
	}
	return 0
}

func (x *GetTracesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetTracesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GetTracesRequest) GetDubboMethod() string {
	if x != nil {
		return x.DubboMethod
	}
	return ""
}

func (x *GetTracesRequest) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

type GetSpansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans        []*Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
	Duration     int64   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	ServiceCount int64   `protobuf:"varint,3,opt,name=serviceCount,proto3" json:"serviceCount,omitempty"`
	Depth        int64   `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	SpanCount    int64   `protobuf:"varint,5,opt,name=spanCount,proto3" json:"spanCount,omitempty"`
}

func (x *GetSpansResponse) Reset() {
	*x = GetSpansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpansResponse) ProtoMessage() {}

func (x *GetSpansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpansResponse.ProtoReflect.Descriptor instead.
func (*GetSpansResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{13}
}

func (x *GetSpansResponse) GetSpans() []*Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *GetSpansResponse) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GetSpansResponse) GetServiceCount() int64 {
	if x != nil {
		return x.ServiceCount
	}
	return 0
}

func (x *GetSpansResponse) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetSpansResponse) GetSpanCount() int64 {
	if x != nil {
		return x.SpanCount
	}
	return 0
}

type SpanAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashboardID string   `protobuf:"bytes,1,opt,name=dashboardID,json=dashboardId,proto3" json:"dashboardID,omitempty"`
	Conditions  []string `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *SpanAnalysis) Reset() {
	*x = SpanAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanAnalysis) ProtoMessage() {}

func (x *SpanAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanAnalysis.ProtoReflect.Descriptor instead.
func (*SpanAnalysis) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{14}
}

func (x *SpanAnalysis) GetDashboardID() string {
	if x != nil {
		return x.DashboardID
	}
	return ""
}

func (x *SpanAnalysis) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type GetSpanDashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallAnalysis    *SpanAnalysis `protobuf:"bytes,1,opt,name=callAnalysis,proto3" json:"callAnalysis,omitempty"`
	ServiceAnalysis *SpanAnalysis `protobuf:"bytes,2,opt,name=serviceAnalysis,proto3" json:"serviceAnalysis,omitempty"`
}

func (x *GetSpanDashboardsResponse) Reset() {
	*x = GetSpanDashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpanDashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpanDashboardsResponse) ProtoMessage() {}

func (x *GetSpanDashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpanDashboardsResponse.ProtoReflect.Descriptor instead.
func (*GetSpanDashboardsResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{15}
}

func (x *GetSpanDashboardsResponse) GetCallAnalysis() *SpanAnalysis {
	if x != nil {
		return x.CallAnalysis
	}
	return nil
}

func (x *GetSpanDashboardsResponse) GetServiceAnalysis() *SpanAnalysis {
	if x != nil {
		return x.ServiceAnalysis
	}
	return nil
}

type GetTracesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Trace `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTracesResponse) Reset() {
	*x = GetTracesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTracesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTracesResponse) ProtoMessage() {}

func (x *GetTracesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTracesResponse.ProtoReflect.Descriptor instead.
func (*GetTracesResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{16}
}

func (x *GetTracesResponse) GetData() []*Trace {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTraceDebugHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TraceDebug `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTraceDebugHistoriesResponse) Reset() {
	*x = GetTraceDebugHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceDebugHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceDebugHistoriesResponse) ProtoMessage() {}

func (x *GetTraceDebugHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceDebugHistoriesResponse.ProtoReflect.Descriptor instead.
func (*GetTraceDebugHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{17}
}

func (x *GetTraceDebugHistoriesResponse) GetData() *TraceDebug {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTraceDebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TraceDebugHistory `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTraceDebugResponse) Reset() {
	*x = GetTraceDebugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceDebugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceDebugResponse) ProtoMessage() {}

func (x *GetTraceDebugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceDebugResponse.ProtoReflect.Descriptor instead.
func (*GetTraceDebugResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{18}
}

func (x *GetTraceDebugResponse) GetData() *TraceDebugHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateTraceDebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TraceDebugStatus `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTraceDebugResponse) Reset() {
	*x = CreateTraceDebugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTraceDebugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTraceDebugResponse) ProtoMessage() {}

func (x *CreateTraceDebugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTraceDebugResponse.ProtoReflect.Descriptor instead.
func (*CreateTraceDebugResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTraceDebugResponse) GetData() *TraceDebugStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type StopTraceDebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopTraceDebugResponse) Reset() {
	*x = StopTraceDebugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTraceDebugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTraceDebugResponse) ProtoMessage() {}

func (x *StopTraceDebugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTraceDebugResponse.ProtoReflect.Descriptor instead.
func (*StopTraceDebugResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{20}
}

type GetTraceDebugStatusByRequestIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TraceDebugStatus `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTraceDebugStatusByRequestIDResponse) Reset() {
	*x = GetTraceDebugStatusByRequestIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceDebugStatusByRequestIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceDebugStatusByRequestIDResponse) ProtoMessage() {}

func (x *GetTraceDebugStatusByRequestIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceDebugStatusByRequestIDResponse.ProtoReflect.Descriptor instead.
func (*GetTraceDebugStatusByRequestIDResponse) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{21}
}

func (x *GetTraceDebugStatusByRequestIDResponse) GetData() *TraceDebugStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type TraceDebug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*TraceDebugHistory `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	Limit   int32                `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int64                `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Total   int32                `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TraceDebug) Reset() {
	*x = TraceDebug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceDebug) ProtoMessage() {}

func (x *TraceDebug) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceDebug.ProtoReflect.Descriptor instead.
func (*TraceDebug) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{22}
}

func (x *TraceDebug) GetHistory() []*TraceDebugHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *TraceDebug) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TraceDebug) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TraceDebug) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TraceDebugStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  string `protobuf:"bytes,1,opt,name=requestID,json=requestId,proto3" json:"requestID,omitempty"`
	Status     int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusName string `protobuf:"bytes,3,opt,name=statusName,proto3" json:"statusName,omitempty"`
	ScopeID    string `protobuf:"bytes,4,opt,name=scopeID,json=terminusKey,proto3" json:"scopeID,omitempty"`
}

func (x *TraceDebugStatus) Reset() {
	*x = TraceDebugStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceDebugStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceDebugStatus) ProtoMessage() {}

func (x *TraceDebugStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceDebugStatus.ProtoReflect.Descriptor instead.
func (*TraceDebugStatus) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{23}
}

func (x *TraceDebugStatus) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *TraceDebugStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TraceDebugStatus) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *TraceDebugStatus) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type TraceDebugHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    string            `protobuf:"bytes,1,opt,name=requestID,json=requestId,proto3" json:"requestID,omitempty"`
	ScopeID      string            `protobuf:"bytes,2,opt,name=scopeID,json=terminusKey,proto3" json:"scopeID,omitempty"`
	Url          string            `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Query        map[string]string `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Header       map[string]string `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body         string            `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	Status       int32             `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	StatusName   string            `protobuf:"bytes,8,opt,name=statusName,proto3" json:"statusName,omitempty"`
	ResponseCode int32             `protobuf:"varint,9,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseBody string            `protobuf:"bytes,10,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	Method       string            `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"`
	CreateTime   string            `protobuf:"bytes,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string            `protobuf:"bytes,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Name         string            `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TraceDebugHistory) Reset() {
	*x = TraceDebugHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceDebugHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceDebugHistory) ProtoMessage() {}

func (x *TraceDebugHistory) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceDebugHistory.ProtoReflect.Descriptor instead.
func (*TraceDebugHistory) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{24}
}

func (x *TraceDebugHistory) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *TraceDebugHistory) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *TraceDebugHistory) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TraceDebugHistory) GetQuery() map[string]string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TraceDebugHistory) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TraceDebugHistory) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *TraceDebugHistory) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TraceDebugHistory) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *TraceDebugHistory) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *TraceDebugHistory) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *TraceDebugHistory) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TraceDebugHistory) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TraceDebugHistory) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *TraceDebugHistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Span is the basic component of a trace, a span represents an independent unit of work,
// for example, it can represent a function call, an http request, etc.
type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Span id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The traceId to which the current span belongs
	TraceId string `protobuf:"bytes,2,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// Operation name
	OperationName string `protobuf:"bytes,3,opt,name=operationName,proto3" json:"operationName,omitempty"`
	// Start time of span
	StartTime int64 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// End time of span
	EndTime int64 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Parent span id
	ParentSpanId string `protobuf:"bytes,6,opt,name=parentSpanId,proto3" json:"parentSpanId,omitempty"`
	Timestamp    int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Tags store user-defined or agent defined tags in the form of K/V key-value pairs,
	// which are mainly used to query and filter link tracking results
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The span of total time
	Duration int64 `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	// The span of time,non-include child spans
	SelfDuration int64 `protobuf:"varint,10,opt,name=selfDuration,proto3" json:"selfDuration,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{25}
}

func (x *Span) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Span) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Span) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *Span) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Span) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Span) GetParentSpanId() string {
	if x != nil {
		return x.ParentSpanId
	}
	return ""
}

func (x *Span) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Span) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Span) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Span) GetSelfDuration() int64 {
	if x != nil {
		return x.SelfDuration
	}
	return 0
}

// Trace represents a complete trace link, and trace consists of one or more spans
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trace id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The total time of trace
	Duration float64 `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// Service name of the trace link
	Services []string `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	// Start time of trace
	StartTime int64 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{26}
}

func (x *Trace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trace) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Trace) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Trace) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

var File_trace_proto protoreflect.FileDescriptor

var file_trace_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77,
	0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5f, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3,
	0x02, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x99, 0x05, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x6f, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x6b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x6e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61,
	0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x3f, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x75, 0x73, 0x4b, 0x65, 0x79, 0x22, 0xe9, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x49, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x0a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x81, 0x03, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x50, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x05, 0x2a, 0x51, 0x0a, 0x0e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x30, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x35, 0x30, 0x30, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x42,
	0x42, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03, 0x2a, 0xa1, 0x01, 0x0a, 0x08, 0x53,
	0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x50, 0x43,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x50, 0x43,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x42, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x51,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x51, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x08, 0x32, 0xbb,
	0x0d, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x94, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x73,
	0x70, 0x61, 0x6e, 0x73, 0x3f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x87, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x5c, 0x12, 0x5a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x2d, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x3f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x2d, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70,
	0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x2d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x03, 0x6d, 0x73, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x12, 0x9b, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70,
	0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x3f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xbd,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x12, 0xc1,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x3d, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x7d, 0x3f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x3d, 0x7b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x0e, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x29, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x1a, 0x3a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x7d, 0x3f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x3d, 0x7b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70,
	0x6d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4b, 0x12, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x7b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x4b,
	0x65, 0x79, 0x3d, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x7d, 0x42, 0x38, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trace_proto_rawDescOnce sync.Once
	file_trace_proto_rawDescData = file_trace_proto_rawDesc
)

func file_trace_proto_rawDescGZIP() []byte {
	file_trace_proto_rawDescOnce.Do(func() {
		file_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_trace_proto_rawDescData)
	})
	return file_trace_proto_rawDescData
}

var file_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_trace_proto_goTypes = []interface{}{
	(SortCondition)(0),                             // 0: erda.msp.apm.trace.SortCondition
	(LimitCondition)(0),                            // 1: erda.msp.apm.trace.LimitCondition
	(TraceStatusCondition)(0),                      // 2: erda.msp.apm.trace.TraceStatusCondition
	(OtherCondition)(0),                            // 3: erda.msp.apm.trace.OtherCondition
	(SpanType)(0),                                  // 4: erda.msp.apm.trace.SpanType
	(*GetTraceQueryConditionsRequest)(nil),         // 5: erda.msp.apm.trace.GetTraceQueryConditionsRequest
	(*GetTraceQueryConditionsResponse)(nil),        // 6: erda.msp.apm.trace.GetTraceQueryConditionsResponse
	(*TraceQueryConditions)(nil),                   // 7: erda.msp.apm.trace.TraceQueryConditions
	(*TraceQueryCondition)(nil),                    // 8: erda.msp.apm.trace.TraceQueryCondition
	(*OtherTraceQueryCondition)(nil),               // 9: erda.msp.apm.trace.OtherTraceQueryCondition
	(*GetTraceDebugRequest)(nil),                   // 10: erda.msp.apm.trace.GetTraceDebugRequest
	(*CreateTraceDebugRequest)(nil),                // 11: erda.msp.apm.trace.CreateTraceDebugRequest
	(*StopTraceDebugRequest)(nil),                  // 12: erda.msp.apm.trace.StopTraceDebugRequest
	(*GetTraceDebugStatusByRequestIDRequest)(nil),  // 13: erda.msp.apm.trace.GetTraceDebugStatusByRequestIDRequest
	(*GetTraceDebugHistoriesRequest)(nil),          // 14: erda.msp.apm.trace.GetTraceDebugHistoriesRequest
	(*GetSpansRequest)(nil),                        // 15: erda.msp.apm.trace.GetSpansRequest
	(*GetSpanDashboardsRequest)(nil),               // 16: erda.msp.apm.trace.GetSpanDashboardsRequest
	(*GetTracesRequest)(nil),                       // 17: erda.msp.apm.trace.GetTracesRequest
	(*GetSpansResponse)(nil),                       // 18: erda.msp.apm.trace.GetSpansResponse
	(*SpanAnalysis)(nil),                           // 19: erda.msp.apm.trace.SpanAnalysis
	(*GetSpanDashboardsResponse)(nil),              // 20: erda.msp.apm.trace.GetSpanDashboardsResponse
	(*GetTracesResponse)(nil),                      // 21: erda.msp.apm.trace.GetTracesResponse
	(*GetTraceDebugHistoriesResponse)(nil),         // 22: erda.msp.apm.trace.GetTraceDebugHistoriesResponse
	(*GetTraceDebugResponse)(nil),                  // 23: erda.msp.apm.trace.GetTraceDebugResponse
	(*CreateTraceDebugResponse)(nil),               // 24: erda.msp.apm.trace.CreateTraceDebugResponse
	(*StopTraceDebugResponse)(nil),                 // 25: erda.msp.apm.trace.StopTraceDebugResponse
	(*GetTraceDebugStatusByRequestIDResponse)(nil), // 26: erda.msp.apm.trace.GetTraceDebugStatusByRequestIDResponse
	(*TraceDebug)(nil),                             // 27: erda.msp.apm.trace.TraceDebug
	(*TraceDebugStatus)(nil),                       // 28: erda.msp.apm.trace.TraceDebugStatus
	(*TraceDebugHistory)(nil),                      // 29: erda.msp.apm.trace.TraceDebugHistory
	(*Span)(nil),                                   // 30: erda.msp.apm.trace.Span
	(*Trace)(nil),                                  // 31: erda.msp.apm.trace.Trace
	nil,                                            // 32: erda.msp.apm.trace.CreateTraceDebugRequest.QueryEntry
	nil,                                            // 33: erda.msp.apm.trace.CreateTraceDebugRequest.HeaderEntry
	nil,                                            // 34: erda.msp.apm.trace.TraceDebugHistory.QueryEntry
	nil,                                            // 35: erda.msp.apm.trace.TraceDebugHistory.HeaderEntry
	nil,                                            // 36: erda.msp.apm.trace.Span.TagsEntry
}
var file_trace_proto_depIdxs = []int32{
	7,  // 0: erda.msp.apm.trace.GetTraceQueryConditionsResponse.data:type_name -> erda.msp.apm.trace.TraceQueryConditions
	8,  // 1: erda.msp.apm.trace.TraceQueryConditions.sort:type_name -> erda.msp.apm.trace.TraceQueryCondition
	8,  // 2: erda.msp.apm.trace.TraceQueryConditions.limit:type_name -> erda.msp.apm.trace.TraceQueryCondition
	8,  // 3: erda.msp.apm.trace.TraceQueryConditions.traceStatus:type_name -> erda.msp.apm.trace.TraceQueryCondition
	9,  // 4: erda.msp.apm.trace.TraceQueryConditions.others:type_name -> erda.msp.apm.trace.OtherTraceQueryCondition
	32, // 5: erda.msp.apm.trace.CreateTraceDebugRequest.query:type_name -> erda.msp.apm.trace.CreateTraceDebugRequest.QueryEntry
	33, // 6: erda.msp.apm.trace.CreateTraceDebugRequest.header:type_name -> erda.msp.apm.trace.CreateTraceDebugRequest.HeaderEntry
	30, // 7: erda.msp.apm.trace.GetSpansResponse.spans:type_name -> erda.msp.apm.trace.Span
	19, // 8: erda.msp.apm.trace.GetSpanDashboardsResponse.callAnalysis:type_name -> erda.msp.apm.trace.SpanAnalysis
	19, // 9: erda.msp.apm.trace.GetSpanDashboardsResponse.serviceAnalysis:type_name -> erda.msp.apm.trace.SpanAnalysis
	31, // 10: erda.msp.apm.trace.GetTracesResponse.data:type_name -> erda.msp.apm.trace.Trace
	27, // 11: erda.msp.apm.trace.GetTraceDebugHistoriesResponse.data:type_name -> erda.msp.apm.trace.TraceDebug
	29, // 12: erda.msp.apm.trace.GetTraceDebugResponse.data:type_name -> erda.msp.apm.trace.TraceDebugHistory
	28, // 13: erda.msp.apm.trace.CreateTraceDebugResponse.data:type_name -> erda.msp.apm.trace.TraceDebugStatus
	28, // 14: erda.msp.apm.trace.GetTraceDebugStatusByRequestIDResponse.data:type_name -> erda.msp.apm.trace.TraceDebugStatus
	29, // 15: erda.msp.apm.trace.TraceDebug.history:type_name -> erda.msp.apm.trace.TraceDebugHistory
	34, // 16: erda.msp.apm.trace.TraceDebugHistory.query:type_name -> erda.msp.apm.trace.TraceDebugHistory.QueryEntry
	35, // 17: erda.msp.apm.trace.TraceDebugHistory.header:type_name -> erda.msp.apm.trace.TraceDebugHistory.HeaderEntry
	36, // 18: erda.msp.apm.trace.Span.tags:type_name -> erda.msp.apm.trace.Span.TagsEntry
	15, // 19: erda.msp.apm.trace.TraceService.GetSpans:input_type -> erda.msp.apm.trace.GetSpansRequest
	16, // 20: erda.msp.apm.trace.TraceService.GetSpanDashboards:input_type -> erda.msp.apm.trace.GetSpanDashboardsRequest
	17, // 21: erda.msp.apm.trace.TraceService.GetTraces:input_type -> erda.msp.apm.trace.GetTracesRequest
	5,  // 22: erda.msp.apm.trace.TraceService.GetTraceQueryConditions:input_type -> erda.msp.apm.trace.GetTraceQueryConditionsRequest
	14, // 23: erda.msp.apm.trace.TraceService.GetTraceDebugHistories:input_type -> erda.msp.apm.trace.GetTraceDebugHistoriesRequest
	10, // 24: erda.msp.apm.trace.TraceService.GetTraceDebugByRequestID:input_type -> erda.msp.apm.trace.GetTraceDebugRequest
	11, // 25: erda.msp.apm.trace.TraceService.CreateTraceDebug:input_type -> erda.msp.apm.trace.CreateTraceDebugRequest
	12, // 26: erda.msp.apm.trace.TraceService.StopTraceDebug:input_type -> erda.msp.apm.trace.StopTraceDebugRequest
	13, // 27: erda.msp.apm.trace.TraceService.GetTraceDebugHistoryStatusByRequestID:input_type -> erda.msp.apm.trace.GetTraceDebugStatusByRequestIDRequest
	18, // 28: erda.msp.apm.trace.TraceService.GetSpans:output_type -> erda.msp.apm.trace.GetSpansResponse
	20, // 29: erda.msp.apm.trace.TraceService.GetSpanDashboards:output_type -> erda.msp.apm.trace.GetSpanDashboardsResponse
	21, // 30: erda.msp.apm.trace.TraceService.GetTraces:output_type -> erda.msp.apm.trace.GetTracesResponse
	6,  // 31: erda.msp.apm.trace.TraceService.GetTraceQueryConditions:output_type -> erda.msp.apm.trace.GetTraceQueryConditionsResponse
	22, // 32: erda.msp.apm.trace.TraceService.GetTraceDebugHistories:output_type -> erda.msp.apm.trace.GetTraceDebugHistoriesResponse
	23, // 33: erda.msp.apm.trace.TraceService.GetTraceDebugByRequestID:output_type -> erda.msp.apm.trace.GetTraceDebugResponse
	24, // 34: erda.msp.apm.trace.TraceService.CreateTraceDebug:output_type -> erda.msp.apm.trace.CreateTraceDebugResponse
	25, // 35: erda.msp.apm.trace.TraceService.StopTraceDebug:output_type -> erda.msp.apm.trace.StopTraceDebugResponse
	26, // 36: erda.msp.apm.trace.TraceService.GetTraceDebugHistoryStatusByRequestID:output_type -> erda.msp.apm.trace.GetTraceDebugStatusByRequestIDResponse
	28, // [28:37] is the sub-list for method output_type
	19, // [19:28] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_trace_proto_init() }
func file_trace_proto_init() {
	if File_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceQueryConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceQueryConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceQueryConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceQueryCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherTraceQueryCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceDebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTraceDebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTraceDebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceDebugStatusByRequestIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceDebugHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpanDashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTracesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpanDashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTracesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceDebugHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceDebugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTraceDebugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTraceDebugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceDebugStatusByRequestIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceDebug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceDebugStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceDebugHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trace_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trace_proto_goTypes,
		DependencyIndexes: file_trace_proto_depIdxs,
		EnumInfos:         file_trace_proto_enumTypes,
		MessageInfos:      file_trace_proto_msgTypes,
	}.Build()
	File_trace_proto = out.File
	file_trace_proto_rawDesc = nil
	file_trace_proto_goTypes = nil
	file_trace_proto_depIdxs = nil
}
