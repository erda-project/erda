// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: apm_alert.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	QueryAlertRule(ctx context.Context, in *QueryAlertRuleRequest, opts ...grpc.CallOption) (*QueryAlertRuleResponse, error)
	QueryAlert(ctx context.Context, in *QueryAlertRequest, opts ...grpc.CallOption) (*QueryAlertResponse, error)
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error)
	UpdateAlertEnable(ctx context.Context, in *UpdateAlertEnableRequest, opts ...grpc.CallOption) (*UpdateAlertEnableResponse, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	QueryCustomizeMetric(ctx context.Context, in *QueryCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryCustomizeMetricResponse, error)
	QueryCustomizeNotifyTarget(ctx context.Context, in *QueryCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryCustomizeNotifyTargetResponse, error)
	QueryCustomizeAlerts(ctx context.Context, in *QueryCustomizeAlertsRequest, opts ...grpc.CallOption) (*QueryCustomizeAlertsResponse, error)
	GetCustomizeAlert(ctx context.Context, in *GetCustomizeAlertRequest, opts ...grpc.CallOption) (*GetCustomizeAlertResponse, error)
	CreateCustomizeAlert(ctx context.Context, in *CreateCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateCustomizeAlertResponse, error)
	UpdateCustomizeAlert(ctx context.Context, in *UpdateCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertResponse, error)
	UpdateCustomizeAlertEnable(ctx context.Context, in *UpdateCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertEnableResponse, error)
	DeleteCustomizeAlert(ctx context.Context, in *DeleteCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteCustomizeAlertResponse, error)
	GetAlertRecordAttrs(ctx context.Context, in *GetAlertRecordAttrsRequest, opts ...grpc.CallOption) (*GetAlertRecordAttrsResponse, error)
	GetAlertRecords(ctx context.Context, in *GetAlertRecordsRequest, opts ...grpc.CallOption) (*GetAlertRecordsResponse, error)
	GetAlertRecord(ctx context.Context, in *GetAlertRecordRequest, opts ...grpc.CallOption) (*GetAlertRecordResponse, error)
	GetAlertHistories(ctx context.Context, in *GetAlertHistoriesRequest, opts ...grpc.CallOption) (*GetAlertHistoriesResponse, error)
	CreateAlertRecordIssue(ctx context.Context, in *CreateAlertRecordIssueRequest, opts ...grpc.CallOption) (*CreateAlertRecordIssueResponse, error)
	UpdateAlertRecordIssue(ctx context.Context, in *UpdateAlertRecordIssueRequest, opts ...grpc.CallOption) (*UpdateAlertRecordIssueResponse, error)
	DashboardPreview(ctx context.Context, in *DashboardPreviewRequest, opts ...grpc.CallOption) (*DashboardPreviewResponse, error)
	GetAlertConditions(ctx context.Context, in *GetAlertConditionsRequest, opts ...grpc.CallOption) (*GetAlertConditionsResponse, error)
	GetAlertConditionsValue(ctx context.Context, in *GetAlertConditionsValueRequest, opts ...grpc.CallOption) (*GetAlertConditionsValueResponse, error)
}

type alertServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewAlertServiceClient(cc grpc1.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) QueryAlertRule(ctx context.Context, in *QueryAlertRuleRequest, opts ...grpc.CallOption) (*QueryAlertRuleResponse, error) {
	out := new(QueryAlertRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/QueryAlertRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryAlert(ctx context.Context, in *QueryAlertRequest, opts ...grpc.CallOption) (*QueryAlertResponse, error) {
	out := new(QueryAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/QueryAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error) {
	out := new(GetAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error) {
	out := new(UpdateAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlertEnable(ctx context.Context, in *UpdateAlertEnableRequest, opts ...grpc.CallOption) (*UpdateAlertEnableResponse, error) {
	out := new(UpdateAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/UpdateAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryCustomizeMetric(ctx context.Context, in *QueryCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryCustomizeMetricResponse, error) {
	out := new(QueryCustomizeMetricResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/QueryCustomizeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryCustomizeNotifyTarget(ctx context.Context, in *QueryCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryCustomizeNotifyTargetResponse, error) {
	out := new(QueryCustomizeNotifyTargetResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/QueryCustomizeNotifyTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) QueryCustomizeAlerts(ctx context.Context, in *QueryCustomizeAlertsRequest, opts ...grpc.CallOption) (*QueryCustomizeAlertsResponse, error) {
	out := new(QueryCustomizeAlertsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/QueryCustomizeAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetCustomizeAlert(ctx context.Context, in *GetCustomizeAlertRequest, opts ...grpc.CallOption) (*GetCustomizeAlertResponse, error) {
	out := new(GetCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateCustomizeAlert(ctx context.Context, in *CreateCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateCustomizeAlertResponse, error) {
	out := new(CreateCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/CreateCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateCustomizeAlert(ctx context.Context, in *UpdateCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertResponse, error) {
	out := new(UpdateCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/UpdateCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateCustomizeAlertEnable(ctx context.Context, in *UpdateCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertEnableResponse, error) {
	out := new(UpdateCustomizeAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/UpdateCustomizeAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteCustomizeAlert(ctx context.Context, in *DeleteCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteCustomizeAlertResponse, error) {
	out := new(DeleteCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/DeleteCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertRecordAttrs(ctx context.Context, in *GetAlertRecordAttrsRequest, opts ...grpc.CallOption) (*GetAlertRecordAttrsResponse, error) {
	out := new(GetAlertRecordAttrsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlertRecordAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertRecords(ctx context.Context, in *GetAlertRecordsRequest, opts ...grpc.CallOption) (*GetAlertRecordsResponse, error) {
	out := new(GetAlertRecordsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlertRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertRecord(ctx context.Context, in *GetAlertRecordRequest, opts ...grpc.CallOption) (*GetAlertRecordResponse, error) {
	out := new(GetAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertHistories(ctx context.Context, in *GetAlertHistoriesRequest, opts ...grpc.CallOption) (*GetAlertHistoriesResponse, error) {
	out := new(GetAlertHistoriesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlertHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) CreateAlertRecordIssue(ctx context.Context, in *CreateAlertRecordIssueRequest, opts ...grpc.CallOption) (*CreateAlertRecordIssueResponse, error) {
	out := new(CreateAlertRecordIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/CreateAlertRecordIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlertRecordIssue(ctx context.Context, in *UpdateAlertRecordIssueRequest, opts ...grpc.CallOption) (*UpdateAlertRecordIssueResponse, error) {
	out := new(UpdateAlertRecordIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/UpdateAlertRecordIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DashboardPreview(ctx context.Context, in *DashboardPreviewRequest, opts ...grpc.CallOption) (*DashboardPreviewResponse, error) {
	out := new(DashboardPreviewResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/DashboardPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertConditions(ctx context.Context, in *GetAlertConditionsRequest, opts ...grpc.CallOption) (*GetAlertConditionsResponse, error) {
	out := new(GetAlertConditionsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlertConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlertConditionsValue(ctx context.Context, in *GetAlertConditionsValueRequest, opts ...grpc.CallOption) (*GetAlertConditionsValueResponse, error) {
	out := new(GetAlertConditionsValueResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.apm.alert.AlertService/GetAlertConditionsValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations should embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	QueryAlertRule(context.Context, *QueryAlertRuleRequest) (*QueryAlertRuleResponse, error)
	QueryAlert(context.Context, *QueryAlertRequest) (*QueryAlertResponse, error)
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error)
	UpdateAlertEnable(context.Context, *UpdateAlertEnableRequest) (*UpdateAlertEnableResponse, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	QueryCustomizeMetric(context.Context, *QueryCustomizeMetricRequest) (*QueryCustomizeMetricResponse, error)
	QueryCustomizeNotifyTarget(context.Context, *QueryCustomizeNotifyTargetRequest) (*QueryCustomizeNotifyTargetResponse, error)
	QueryCustomizeAlerts(context.Context, *QueryCustomizeAlertsRequest) (*QueryCustomizeAlertsResponse, error)
	GetCustomizeAlert(context.Context, *GetCustomizeAlertRequest) (*GetCustomizeAlertResponse, error)
	CreateCustomizeAlert(context.Context, *CreateCustomizeAlertRequest) (*CreateCustomizeAlertResponse, error)
	UpdateCustomizeAlert(context.Context, *UpdateCustomizeAlertRequest) (*UpdateCustomizeAlertResponse, error)
	UpdateCustomizeAlertEnable(context.Context, *UpdateCustomizeAlertEnableRequest) (*UpdateCustomizeAlertEnableResponse, error)
	DeleteCustomizeAlert(context.Context, *DeleteCustomizeAlertRequest) (*DeleteCustomizeAlertResponse, error)
	GetAlertRecordAttrs(context.Context, *GetAlertRecordAttrsRequest) (*GetAlertRecordAttrsResponse, error)
	GetAlertRecords(context.Context, *GetAlertRecordsRequest) (*GetAlertRecordsResponse, error)
	GetAlertRecord(context.Context, *GetAlertRecordRequest) (*GetAlertRecordResponse, error)
	GetAlertHistories(context.Context, *GetAlertHistoriesRequest) (*GetAlertHistoriesResponse, error)
	CreateAlertRecordIssue(context.Context, *CreateAlertRecordIssueRequest) (*CreateAlertRecordIssueResponse, error)
	UpdateAlertRecordIssue(context.Context, *UpdateAlertRecordIssueRequest) (*UpdateAlertRecordIssueResponse, error)
	DashboardPreview(context.Context, *DashboardPreviewRequest) (*DashboardPreviewResponse, error)
	GetAlertConditions(context.Context, *GetAlertConditionsRequest) (*GetAlertConditionsResponse, error)
	GetAlertConditionsValue(context.Context, *GetAlertConditionsValueRequest) (*GetAlertConditionsValueResponse, error)
}

// UnimplementedAlertServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (*UnimplementedAlertServiceServer) QueryAlertRule(context.Context, *QueryAlertRuleRequest) (*QueryAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertRule not implemented")
}
func (*UnimplementedAlertServiceServer) QueryAlert(context.Context, *QueryAlertRequest) (*QueryAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (*UnimplementedAlertServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlertEnable(context.Context, *UpdateAlertEnableRequest) (*UpdateAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertEnable not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (*UnimplementedAlertServiceServer) QueryCustomizeMetric(context.Context, *QueryCustomizeMetricRequest) (*QueryCustomizeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeMetric not implemented")
}
func (*UnimplementedAlertServiceServer) QueryCustomizeNotifyTarget(context.Context, *QueryCustomizeNotifyTargetRequest) (*QueryCustomizeNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeNotifyTarget not implemented")
}
func (*UnimplementedAlertServiceServer) QueryCustomizeAlerts(context.Context, *QueryCustomizeAlertsRequest) (*QueryCustomizeAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeAlerts not implemented")
}
func (*UnimplementedAlertServiceServer) GetCustomizeAlert(context.Context, *GetCustomizeAlertRequest) (*GetCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) CreateCustomizeAlert(context.Context, *CreateCustomizeAlertRequest) (*CreateCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateCustomizeAlert(context.Context, *UpdateCustomizeAlertRequest) (*UpdateCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateCustomizeAlertEnable(context.Context, *UpdateCustomizeAlertEnableRequest) (*UpdateCustomizeAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizeAlertEnable not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteCustomizeAlert(context.Context, *DeleteCustomizeAlertRequest) (*DeleteCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomizeAlert not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertRecordAttrs(context.Context, *GetAlertRecordAttrsRequest) (*GetAlertRecordAttrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecordAttrs not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertRecords(context.Context, *GetAlertRecordsRequest) (*GetAlertRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecords not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertRecord(context.Context, *GetAlertRecordRequest) (*GetAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecord not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertHistories(context.Context, *GetAlertHistoriesRequest) (*GetAlertHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertHistories not implemented")
}
func (*UnimplementedAlertServiceServer) CreateAlertRecordIssue(context.Context, *CreateAlertRecordIssueRequest) (*CreateAlertRecordIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertRecordIssue not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlertRecordIssue(context.Context, *UpdateAlertRecordIssueRequest) (*UpdateAlertRecordIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertRecordIssue not implemented")
}
func (*UnimplementedAlertServiceServer) DashboardPreview(context.Context, *DashboardPreviewRequest) (*DashboardPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardPreview not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertConditions(context.Context, *GetAlertConditionsRequest) (*GetAlertConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConditions not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlertConditionsValue(context.Context, *GetAlertConditionsValueRequest) (*GetAlertConditionsValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertConditionsValue not implemented")
}

func RegisterAlertServiceServer(s grpc1.ServiceRegistrar, srv AlertServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_AlertService_serviceDesc(srv, opts...), srv)
}

var _AlertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.apm.alert.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "apm_alert.proto",
}

func _get_AlertService_serviceDesc(srv AlertServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_AlertService_QueryAlertRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertRule(ctx, req.(*QueryAlertRuleRequest))
	}
	var _AlertService_QueryAlertRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryAlertRule_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "QueryAlertRule", srv)
		_AlertService_QueryAlertRule_Handler = h.Interceptor(_AlertService_QueryAlertRule_Handler)
	}

	_AlertService_QueryAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlert(ctx, req.(*QueryAlertRequest))
	}
	var _AlertService_QueryAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "QueryAlert", srv)
		_AlertService_QueryAlert_Handler = h.Interceptor(_AlertService_QueryAlert_Handler)
	}

	_AlertService_GetAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlert(ctx, req.(*GetAlertRequest))
	}
	var _AlertService_GetAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlert", srv)
		_AlertService_GetAlert_Handler = h.Interceptor(_AlertService_GetAlert_Handler)
	}

	_AlertService_CreateAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	var _AlertService_CreateAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "CreateAlert", srv)
		_AlertService_CreateAlert_Handler = h.Interceptor(_AlertService_CreateAlert_Handler)
	}

	_AlertService_UpdateAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	var _AlertService_UpdateAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "UpdateAlert", srv)
		_AlertService_UpdateAlert_Handler = h.Interceptor(_AlertService_UpdateAlert_Handler)
	}

	_AlertService_UpdateAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlertEnable(ctx, req.(*UpdateAlertEnableRequest))
	}
	var _AlertService_UpdateAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateAlertEnable_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "UpdateAlertEnable", srv)
		_AlertService_UpdateAlertEnable_Handler = h.Interceptor(_AlertService_UpdateAlertEnable_Handler)
	}

	_AlertService_DeleteAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	var _AlertService_DeleteAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DeleteAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "DeleteAlert", srv)
		_AlertService_DeleteAlert_Handler = h.Interceptor(_AlertService_DeleteAlert_Handler)
	}

	_AlertService_QueryCustomizeMetric_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeMetric(ctx, req.(*QueryCustomizeMetricRequest))
	}
	var _AlertService_QueryCustomizeMetric_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryCustomizeMetric_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "QueryCustomizeMetric", srv)
		_AlertService_QueryCustomizeMetric_Handler = h.Interceptor(_AlertService_QueryCustomizeMetric_Handler)
	}

	_AlertService_QueryCustomizeNotifyTarget_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeNotifyTarget(ctx, req.(*QueryCustomizeNotifyTargetRequest))
	}
	var _AlertService_QueryCustomizeNotifyTarget_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryCustomizeNotifyTarget_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "QueryCustomizeNotifyTarget", srv)
		_AlertService_QueryCustomizeNotifyTarget_Handler = h.Interceptor(_AlertService_QueryCustomizeNotifyTarget_Handler)
	}

	_AlertService_QueryCustomizeAlerts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeAlerts(ctx, req.(*QueryCustomizeAlertsRequest))
	}
	var _AlertService_QueryCustomizeAlerts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_QueryCustomizeAlerts_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "QueryCustomizeAlerts", srv)
		_AlertService_QueryCustomizeAlerts_Handler = h.Interceptor(_AlertService_QueryCustomizeAlerts_Handler)
	}

	_AlertService_GetCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomizeAlert(ctx, req.(*GetCustomizeAlertRequest))
	}
	var _AlertService_GetCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetCustomizeAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetCustomizeAlert", srv)
		_AlertService_GetCustomizeAlert_Handler = h.Interceptor(_AlertService_GetCustomizeAlert_Handler)
	}

	_AlertService_CreateCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateCustomizeAlert(ctx, req.(*CreateCustomizeAlertRequest))
	}
	var _AlertService_CreateCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateCustomizeAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "CreateCustomizeAlert", srv)
		_AlertService_CreateCustomizeAlert_Handler = h.Interceptor(_AlertService_CreateCustomizeAlert_Handler)
	}

	_AlertService_UpdateCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomizeAlert(ctx, req.(*UpdateCustomizeAlertRequest))
	}
	var _AlertService_UpdateCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateCustomizeAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "UpdateCustomizeAlert", srv)
		_AlertService_UpdateCustomizeAlert_Handler = h.Interceptor(_AlertService_UpdateCustomizeAlert_Handler)
	}

	_AlertService_UpdateCustomizeAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomizeAlertEnable(ctx, req.(*UpdateCustomizeAlertEnableRequest))
	}
	var _AlertService_UpdateCustomizeAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateCustomizeAlertEnable_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "UpdateCustomizeAlertEnable", srv)
		_AlertService_UpdateCustomizeAlertEnable_Handler = h.Interceptor(_AlertService_UpdateCustomizeAlertEnable_Handler)
	}

	_AlertService_DeleteCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteCustomizeAlert(ctx, req.(*DeleteCustomizeAlertRequest))
	}
	var _AlertService_DeleteCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DeleteCustomizeAlert_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "DeleteCustomizeAlert", srv)
		_AlertService_DeleteCustomizeAlert_Handler = h.Interceptor(_AlertService_DeleteCustomizeAlert_Handler)
	}

	_AlertService_GetAlertRecordAttrs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecordAttrs(ctx, req.(*GetAlertRecordAttrsRequest))
	}
	var _AlertService_GetAlertRecordAttrs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertRecordAttrs_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlertRecordAttrs", srv)
		_AlertService_GetAlertRecordAttrs_Handler = h.Interceptor(_AlertService_GetAlertRecordAttrs_Handler)
	}

	_AlertService_GetAlertRecords_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecords(ctx, req.(*GetAlertRecordsRequest))
	}
	var _AlertService_GetAlertRecords_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertRecords_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlertRecords", srv)
		_AlertService_GetAlertRecords_Handler = h.Interceptor(_AlertService_GetAlertRecords_Handler)
	}

	_AlertService_GetAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecord(ctx, req.(*GetAlertRecordRequest))
	}
	var _AlertService_GetAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertRecord_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlertRecord", srv)
		_AlertService_GetAlertRecord_Handler = h.Interceptor(_AlertService_GetAlertRecord_Handler)
	}

	_AlertService_GetAlertHistories_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertHistories(ctx, req.(*GetAlertHistoriesRequest))
	}
	var _AlertService_GetAlertHistories_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertHistories_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlertHistories", srv)
		_AlertService_GetAlertHistories_Handler = h.Interceptor(_AlertService_GetAlertHistories_Handler)
	}

	_AlertService_CreateAlertRecordIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAlertRecordIssue(ctx, req.(*CreateAlertRecordIssueRequest))
	}
	var _AlertService_CreateAlertRecordIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_CreateAlertRecordIssue_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "CreateAlertRecordIssue", srv)
		_AlertService_CreateAlertRecordIssue_Handler = h.Interceptor(_AlertService_CreateAlertRecordIssue_Handler)
	}

	_AlertService_UpdateAlertRecordIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlertRecordIssue(ctx, req.(*UpdateAlertRecordIssueRequest))
	}
	var _AlertService_UpdateAlertRecordIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_UpdateAlertRecordIssue_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "UpdateAlertRecordIssue", srv)
		_AlertService_UpdateAlertRecordIssue_Handler = h.Interceptor(_AlertService_UpdateAlertRecordIssue_Handler)
	}

	_AlertService_DashboardPreview_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DashboardPreview(ctx, req.(*DashboardPreviewRequest))
	}
	var _AlertService_DashboardPreview_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_DashboardPreview_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "DashboardPreview", srv)
		_AlertService_DashboardPreview_Handler = h.Interceptor(_AlertService_DashboardPreview_Handler)
	}

	_AlertService_GetAlertConditions_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertConditions(ctx, req.(*GetAlertConditionsRequest))
	}
	var _AlertService_GetAlertConditions_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertConditions_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlertConditions", srv)
		_AlertService_GetAlertConditions_Handler = h.Interceptor(_AlertService_GetAlertConditions_Handler)
	}

	_AlertService_GetAlertConditionsValue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertConditionsValue(ctx, req.(*GetAlertConditionsValueRequest))
	}
	var _AlertService_GetAlertConditionsValue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AlertService_GetAlertConditionsValue_info = transport.NewServiceInfo("erda.msp.apm.alert.AlertService", "GetAlertConditionsValue", srv)
		_AlertService_GetAlertConditionsValue_Handler = h.Interceptor(_AlertService_GetAlertConditionsValue_Handler)
	}

	var serviceDesc = _AlertService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "QueryAlertRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryAlertRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryAlertRule_info)
				}
				if interceptor == nil {
					return _AlertService_QueryAlertRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/QueryAlertRule",
				}
				return interceptor(ctx, in, info, _AlertService_QueryAlertRule_Handler)
			},
		},
		{
			MethodName: "QueryAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryAlert_info)
				}
				if interceptor == nil {
					return _AlertService_QueryAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/QueryAlert",
				}
				return interceptor(ctx, in, info, _AlertService_QueryAlert_Handler)
			},
		},
		{
			MethodName: "GetAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlert_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlert",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlert_Handler)
			},
		},
		{
			MethodName: "CreateAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateAlert_info)
				}
				if interceptor == nil {
					return _AlertService_CreateAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/CreateAlert",
				}
				return interceptor(ctx, in, info, _AlertService_CreateAlert_Handler)
			},
		},
		{
			MethodName: "UpdateAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateAlert_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/UpdateAlert",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateAlert_Handler)
			},
		},
		{
			MethodName: "UpdateAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateAlertEnable_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/UpdateAlertEnable",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DeleteAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DeleteAlert_info)
				}
				if interceptor == nil {
					return _AlertService_DeleteAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/DeleteAlert",
				}
				return interceptor(ctx, in, info, _AlertService_DeleteAlert_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeMetric",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeMetricRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryCustomizeMetric(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryCustomizeMetric_info)
				}
				if interceptor == nil {
					return _AlertService_QueryCustomizeMetric_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/QueryCustomizeMetric",
				}
				return interceptor(ctx, in, info, _AlertService_QueryCustomizeMetric_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeNotifyTarget",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeNotifyTargetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryCustomizeNotifyTarget(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryCustomizeNotifyTarget_info)
				}
				if interceptor == nil {
					return _AlertService_QueryCustomizeNotifyTarget_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/QueryCustomizeNotifyTarget",
				}
				return interceptor(ctx, in, info, _AlertService_QueryCustomizeNotifyTarget_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeAlerts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeAlertsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).QueryCustomizeAlerts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_QueryCustomizeAlerts_info)
				}
				if interceptor == nil {
					return _AlertService_QueryCustomizeAlerts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/QueryCustomizeAlerts",
				}
				return interceptor(ctx, in, info, _AlertService_QueryCustomizeAlerts_Handler)
			},
		},
		{
			MethodName: "GetCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_GetCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_GetCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "CreateCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_CreateCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/CreateCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_CreateCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/UpdateCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateCustomizeAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomizeAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateCustomizeAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateCustomizeAlertEnable_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateCustomizeAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/UpdateCustomizeAlertEnable",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateCustomizeAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DeleteCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DeleteCustomizeAlert_info)
				}
				if interceptor == nil {
					return _AlertService_DeleteCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/DeleteCustomizeAlert",
				}
				return interceptor(ctx, in, info, _AlertService_DeleteCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "GetAlertRecordAttrs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordAttrsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertRecordAttrs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertRecordAttrs_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertRecordAttrs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlertRecordAttrs",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertRecordAttrs_Handler)
			},
		},
		{
			MethodName: "GetAlertRecords",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertRecords(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertRecords_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertRecords_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlertRecords",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertRecords_Handler)
			},
		},
		{
			MethodName: "GetAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertRecord_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlertRecord",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertRecord_Handler)
			},
		},
		{
			MethodName: "GetAlertHistories",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertHistoriesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertHistories(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertHistories_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertHistories_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlertHistories",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertHistories_Handler)
			},
		},
		{
			MethodName: "CreateAlertRecordIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAlertRecordIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).CreateAlertRecordIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_CreateAlertRecordIssue_info)
				}
				if interceptor == nil {
					return _AlertService_CreateAlertRecordIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/CreateAlertRecordIssue",
				}
				return interceptor(ctx, in, info, _AlertService_CreateAlertRecordIssue_Handler)
			},
		},
		{
			MethodName: "UpdateAlertRecordIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertRecordIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).UpdateAlertRecordIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_UpdateAlertRecordIssue_info)
				}
				if interceptor == nil {
					return _AlertService_UpdateAlertRecordIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/UpdateAlertRecordIssue",
				}
				return interceptor(ctx, in, info, _AlertService_UpdateAlertRecordIssue_Handler)
			},
		},
		{
			MethodName: "DashboardPreview",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DashboardPreviewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).DashboardPreview(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_DashboardPreview_info)
				}
				if interceptor == nil {
					return _AlertService_DashboardPreview_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/DashboardPreview",
				}
				return interceptor(ctx, in, info, _AlertService_DashboardPreview_Handler)
			},
		},
		{
			MethodName: "GetAlertConditions",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertConditionsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertConditions(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertConditions_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertConditions_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlertConditions",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertConditions_Handler)
			},
		},
		{
			MethodName: "GetAlertConditionsValue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertConditionsValueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AlertServiceServer).GetAlertConditionsValue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AlertService_GetAlertConditionsValue_info)
				}
				if interceptor == nil {
					return _AlertService_GetAlertConditionsValue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.apm.alert.AlertService/GetAlertConditionsValue",
				}
				return interceptor(ctx, in, info, _AlertService_GetAlertConditionsValue_Handler)
			},
		},
	}
	return &serviceDesc
}
