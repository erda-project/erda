// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: apm_alert.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/msp/apm/alert/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// AlertService apm_alert.proto
	AlertService() pb.AlertServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		alertService: pb.NewAlertServiceClient(cc),
	}
}

type serviceClients struct {
	alertService pb.AlertServiceClient
}

func (c *serviceClients) AlertService() pb.AlertServiceClient {
	return c.alertService
}

type alertServiceWrapper struct {
	client pb.AlertServiceClient
	opts   []grpc1.CallOption
}

func (s *alertServiceWrapper) QueryAlertRule(ctx context.Context, req *pb.QueryAlertRuleRequest) (*pb.QueryAlertRuleResponse, error) {
	return s.client.QueryAlertRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryAlert(ctx context.Context, req *pb.QueryAlertRequest) (*pb.QueryAlertResponse, error) {
	return s.client.QueryAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlert(ctx context.Context, req *pb.GetAlertRequest) (*pb.GetAlertResponse, error) {
	return s.client.GetAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateAlert(ctx context.Context, req *pb.CreateAlertRequest) (*pb.CreateAlertResponse, error) {
	return s.client.CreateAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateAlert(ctx context.Context, req *pb.UpdateAlertRequest) (*pb.UpdateAlertResponse, error) {
	return s.client.UpdateAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateAlertEnable(ctx context.Context, req *pb.UpdateAlertEnableRequest) (*pb.UpdateAlertEnableResponse, error) {
	return s.client.UpdateAlertEnable(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DeleteAlert(ctx context.Context, req *pb.DeleteAlertRequest) (*pb.DeleteAlertResponse, error) {
	return s.client.DeleteAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryCustomizeMetric(ctx context.Context, req *pb.QueryCustomizeMetricRequest) (*pb.QueryCustomizeMetricResponse, error) {
	return s.client.QueryCustomizeMetric(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryCustomizeNotifyTarget(ctx context.Context, req *pb.QueryCustomizeNotifyTargetRequest) (*pb.QueryCustomizeNotifyTargetResponse, error) {
	return s.client.QueryCustomizeNotifyTarget(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) QueryCustomizeAlerts(ctx context.Context, req *pb.QueryCustomizeAlertsRequest) (*pb.QueryCustomizeAlertsResponse, error) {
	return s.client.QueryCustomizeAlerts(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetCustomizeAlert(ctx context.Context, req *pb.GetCustomizeAlertRequest) (*pb.GetCustomizeAlertResponse, error) {
	return s.client.GetCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateCustomizeAlert(ctx context.Context, req *pb.CreateCustomizeAlertRequest) (*pb.CreateCustomizeAlertResponse, error) {
	return s.client.CreateCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateCustomizeAlert(ctx context.Context, req *pb.UpdateCustomizeAlertRequest) (*pb.UpdateCustomizeAlertResponse, error) {
	return s.client.UpdateCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateCustomizeAlertEnable(ctx context.Context, req *pb.UpdateCustomizeAlertEnableRequest) (*pb.UpdateCustomizeAlertEnableResponse, error) {
	return s.client.UpdateCustomizeAlertEnable(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DeleteCustomizeAlert(ctx context.Context, req *pb.DeleteCustomizeAlertRequest) (*pb.DeleteCustomizeAlertResponse, error) {
	return s.client.DeleteCustomizeAlert(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertRecordAttrs(ctx context.Context, req *pb.GetAlertRecordAttrsRequest) (*pb.GetAlertRecordAttrsResponse, error) {
	return s.client.GetAlertRecordAttrs(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertRecords(ctx context.Context, req *pb.GetAlertRecordsRequest) (*pb.GetAlertRecordsResponse, error) {
	return s.client.GetAlertRecords(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertRecord(ctx context.Context, req *pb.GetAlertRecordRequest) (*pb.GetAlertRecordResponse, error) {
	return s.client.GetAlertRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertHistories(ctx context.Context, req *pb.GetAlertHistoriesRequest) (*pb.GetAlertHistoriesResponse, error) {
	return s.client.GetAlertHistories(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) CreateAlertRecordIssue(ctx context.Context, req *pb.CreateAlertRecordIssueRequest) (*pb.CreateAlertRecordIssueResponse, error) {
	return s.client.CreateAlertRecordIssue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) UpdateAlertRecordIssue(ctx context.Context, req *pb.UpdateAlertRecordIssueRequest) (*pb.UpdateAlertRecordIssueResponse, error) {
	return s.client.UpdateAlertRecordIssue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) DashboardPreview(ctx context.Context, req *pb.DashboardPreviewRequest) (*pb.DashboardPreviewResponse, error) {
	return s.client.DashboardPreview(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertConditions(ctx context.Context, req *pb.GetAlertConditionsRequest) (*pb.GetAlertConditionsResponse, error) {
	return s.client.GetAlertConditions(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *alertServiceWrapper) GetAlertConditionsValue(ctx context.Context, req *pb.GetAlertConditionsValueRequest) (*pb.GetAlertConditionsValueResponse, error) {
	return s.client.GetAlertConditionsValue(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
