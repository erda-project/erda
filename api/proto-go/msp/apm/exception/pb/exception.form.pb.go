// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: exception.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetExceptionsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetExceptionsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetExceptionEventIdsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetExceptionEventIdsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetExceptionEventRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetExceptionEventResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Exception)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Stacks)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ExceptionEvent)(nil)

// GetExceptionsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetExceptionsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "startTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime = val
			case "endTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime = val
			case "scopeID":
				m.ScopeID = vals[0]
			case "debug":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Debug = val
			}
		}
	}
	return nil
}

// GetExceptionsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetExceptionsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetExceptionEventIdsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetExceptionEventIdsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "exceptionID":
				m.ExceptionID = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			}
		}
	}
	return nil
}

// GetExceptionEventIdsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetExceptionEventIdsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals
			}
		}
	}
	return nil
}

// GetExceptionEventRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetExceptionEventRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "exceptionEventID":
				m.ExceptionEventID = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			}
		}
	}
	return nil
}

// GetExceptionEventResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetExceptionEventResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ExceptionEvent{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &ExceptionEvent{}
				}
				m.Data.Id = vals[0]
			case "data.exceptionID":
				if m.Data == nil {
					m.Data = &ExceptionEvent{}
				}
				m.Data.ExceptionID = vals[0]
			case "data.requestID":
				if m.Data == nil {
					m.Data = &ExceptionEvent{}
				}
				m.Data.RequestID = vals[0]
			case "data.timestamp":
				if m.Data == nil {
					m.Data = &ExceptionEvent{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Timestamp = val
			case "data.requestSampled":
				if m.Data == nil {
					m.Data = &ExceptionEvent{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.RequestSampled = val
			}
		}
	}
	return nil
}

// Exception implement urlenc.URLValuesUnmarshaler.
func (m *Exception) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "className":
				m.ClassName = vals[0]
			case "method":
				m.Method = vals[0]
			case "type":
				m.Type = vals[0]
			case "eventCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EventCount = val
			case "exceptionMessage":
				m.ExceptionMessage = vals[0]
			case "file":
				m.File = vals[0]
			case "applicationID":
				m.ApplicationID = vals[0]
			case "runtimeID":
				m.RuntimeID = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "createTime":
				m.CreateTime = vals[0]
			case "updateTime":
				m.UpdateTime = vals[0]
			}
		}
	}
	return nil
}

// Stacks implement urlenc.URLValuesUnmarshaler.
func (m *Stacks) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ExceptionEvent implement urlenc.URLValuesUnmarshaler.
func (m *ExceptionEvent) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "exceptionID":
				m.ExceptionID = vals[0]
			case "requestID":
				m.RequestID = vals[0]
			case "timestamp":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Timestamp = val
			case "requestSampled":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.RequestSampled = val
			}
		}
	}
	return nil
}
