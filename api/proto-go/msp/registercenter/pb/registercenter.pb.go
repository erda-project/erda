// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: registercenter.proto

package pb

import (
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListInterface
type ListInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID       string `protobuf:"bytes,4,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID    string `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	TenantGroup string `protobuf:"bytes,6,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"`
	RuntimeID   string `protobuf:"bytes,7,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *ListInterfaceRequest) Reset() {
	*x = ListInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfaceRequest) ProtoMessage() {}

func (x *ListInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfaceRequest.ProtoReflect.Descriptor instead.
func (*ListInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{0}
}

func (x *ListInterfaceRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListInterfaceRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *ListInterfaceRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListInterfaceRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ListInterfaceRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *ListInterfaceRequest) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *ListInterfaceRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type ListInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Interface `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListInterfaceResponse) Reset() {
	*x = ListInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfaceResponse) ProtoMessage() {}

func (x *ListInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfaceResponse.ProtoReflect.Descriptor instead.
func (*ListInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{1}
}

func (x *ListInterfaceResponse) GetData() []*Interface {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetHTTPServices
type GetHTTPServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	NacosID     string `protobuf:"bytes,4,opt,name=nacosID,proto3" json:"nacosID,omitempty"`
	AppID       string `protobuf:"bytes,5,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantGroup string `protobuf:"bytes,6,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"`
}

func (x *GetHTTPServicesRequest) Reset() {
	*x = GetHTTPServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPServicesRequest) ProtoMessage() {}

func (x *GetHTTPServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPServicesRequest.ProtoReflect.Descriptor instead.
func (*GetHTTPServicesRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{2}
}

func (x *GetHTTPServicesRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetHTTPServicesRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetHTTPServicesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetHTTPServicesRequest) GetNacosID() string {
	if x != nil {
		return x.NacosID
	}
	return ""
}

func (x *GetHTTPServicesRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetHTTPServicesRequest) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type GetHTTPServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HTTPServices `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHTTPServicesResponse) Reset() {
	*x = GetHTTPServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHTTPServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHTTPServicesResponse) ProtoMessage() {}

func (x *GetHTTPServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHTTPServicesResponse.ProtoReflect.Descriptor instead.
func (*GetHTTPServicesResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{3}
}

func (x *GetHTTPServicesResponse) GetData() *HTTPServices {
	if x != nil {
		return x.Data
	}
	return nil
}

// EnableHTTPService
type EnableHTTPServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string             `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string             `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string             `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	NacosID     string             `protobuf:"bytes,4,opt,name=nacosID,proto3" json:"nacosID,omitempty"`
	TenantGroup string             `protobuf:"bytes,5,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"`
	Service     *EnableHTTPService `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *EnableHTTPServiceRequest) Reset() {
	*x = EnableHTTPServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableHTTPServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableHTTPServiceRequest) ProtoMessage() {}

func (x *EnableHTTPServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableHTTPServiceRequest.ProtoReflect.Descriptor instead.
func (*EnableHTTPServiceRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{4}
}

func (x *EnableHTTPServiceRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *EnableHTTPServiceRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *EnableHTTPServiceRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EnableHTTPServiceRequest) GetNacosID() string {
	if x != nil {
		return x.NacosID
	}
	return ""
}

func (x *EnableHTTPServiceRequest) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *EnableHTTPServiceRequest) GetService() *EnableHTTPService {
	if x != nil {
		return x.Service
	}
	return nil
}

type EnableHTTPServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *EnableHTTPService `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EnableHTTPServiceResponse) Reset() {
	*x = EnableHTTPServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableHTTPServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableHTTPServiceResponse) ProtoMessage() {}

func (x *EnableHTTPServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableHTTPServiceResponse.ProtoReflect.Descriptor instead.
func (*EnableHTTPServiceResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{5}
}

func (x *EnableHTTPServiceResponse) GetData() *EnableHTTPService {
	if x != nil {
		return x.Data
	}
	return nil
}

type EnableHTTPService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Address     string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Online      bool   `protobuf:"varint,3,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *EnableHTTPService) Reset() {
	*x = EnableHTTPService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableHTTPService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableHTTPService) ProtoMessage() {}

func (x *EnableHTTPService) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableHTTPService.ProtoReflect.Descriptor instead.
func (*EnableHTTPService) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{6}
}

func (x *EnableHTTPService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *EnableHTTPService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EnableHTTPService) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

// GetRouteRule
type GetRouteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName   string `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string `protobuf:"bytes,5,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string `protobuf:"bytes,6,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID     string `protobuf:"bytes,7,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *GetRouteRuleRequest) Reset() {
	*x = GetRouteRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRuleRequest) ProtoMessage() {}

func (x *GetRouteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRouteRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{7}
}

func (x *GetRouteRuleRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *GetRouteRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetRouteRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetRouteRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetRouteRuleRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetRouteRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *GetRouteRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type GetRouteRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RequestRule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRouteRuleResponse) Reset() {
	*x = GetRouteRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRuleResponse) ProtoMessage() {}

func (x *GetRouteRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRuleResponse.ProtoReflect.Descriptor instead.
func (*GetRouteRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{8}
}

func (x *GetRouteRuleResponse) GetData() *RequestRule {
	if x != nil {
		return x.Data
	}
	return nil
}

// CreateRouteRule
type CreateRouteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string       `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string       `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string       `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName   string       `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string       `protobuf:"bytes,5,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string       `protobuf:"bytes,6,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID     string       `protobuf:"bytes,7,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	Rule          *RequestRule `protobuf:"bytes,8,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *CreateRouteRuleRequest) Reset() {
	*x = CreateRouteRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteRuleRequest) ProtoMessage() {}

func (x *CreateRouteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateRouteRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRouteRuleRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *CreateRouteRuleRequest) GetRule() *RequestRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type CreateRouteRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RequestRule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateRouteRuleResponse) Reset() {
	*x = CreateRouteRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouteRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteRuleResponse) ProtoMessage() {}

func (x *CreateRouteRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateRouteRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRouteRuleResponse) GetData() *RequestRule {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteRouteRule
type DeleteRouteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName   string `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string `protobuf:"bytes,5,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string `protobuf:"bytes,6,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID     string `protobuf:"bytes,7,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *DeleteRouteRuleRequest) Reset() {
	*x = DeleteRouteRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRuleRequest) ProtoMessage() {}

func (x *DeleteRouteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRouteRuleRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *DeleteRouteRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteRouteRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *DeleteRouteRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteRouteRuleRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DeleteRouteRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *DeleteRouteRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type DeleteRouteRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RequestRule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteRouteRuleResponse) Reset() {
	*x = DeleteRouteRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRuleResponse) ProtoMessage() {}

func (x *DeleteRouteRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRouteRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteRouteRuleResponse) GetData() *RequestRule {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetHostRule
type CetHostRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID       string `protobuf:"bytes,4,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID    string `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID   string `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *CetHostRuleRequest) Reset() {
	*x = CetHostRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CetHostRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CetHostRuleRequest) ProtoMessage() {}

func (x *CetHostRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CetHostRuleRequest.ProtoReflect.Descriptor instead.
func (*CetHostRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{13}
}

func (x *CetHostRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CetHostRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CetHostRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CetHostRuleRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CetHostRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *CetHostRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type CetHostRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostRules `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CetHostRuleResponse) Reset() {
	*x = CetHostRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CetHostRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CetHostRuleResponse) ProtoMessage() {}

func (x *CetHostRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CetHostRuleResponse.ProtoReflect.Descriptor instead.
func (*CetHostRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{14}
}

func (x *CetHostRuleResponse) GetData() *HostRules {
	if x != nil {
		return x.Data
	}
	return nil
}

// CreateHostRule
type CreateHostRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string     `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string     `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string     `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID       string     `protobuf:"bytes,4,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID    string     `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID   string     `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	Rules       *HostRules `protobuf:"bytes,7,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CreateHostRuleRequest) Reset() {
	*x = CreateHostRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostRuleRequest) ProtoMessage() {}

func (x *CreateHostRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateHostRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{15}
}

func (x *CreateHostRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateHostRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateHostRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateHostRuleRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateHostRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *CreateHostRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *CreateHostRuleRequest) GetRules() *HostRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type CreateHostRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostRules `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateHostRuleResponse) Reset() {
	*x = CreateHostRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostRuleResponse) ProtoMessage() {}

func (x *CreateHostRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateHostRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{16}
}

func (x *CreateHostRuleResponse) GetData() *HostRules {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteHostRule
type DeleteHostRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID       string `protobuf:"bytes,4,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID    string `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID   string `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *DeleteHostRuleRequest) Reset() {
	*x = DeleteHostRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostRuleRequest) ProtoMessage() {}

func (x *DeleteHostRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteHostRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteHostRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *DeleteHostRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteHostRuleRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DeleteHostRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *DeleteHostRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type DeleteHostRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostRules `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteHostRuleResponse) Reset() {
	*x = DeleteHostRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostRuleResponse) ProtoMessage() {}

func (x *DeleteHostRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteHostRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteHostRuleResponse) GetData() *HostRules {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetHostRuntimeRule
type GetHostRuntimeRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Host        string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	ClusterName string `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	TenantID    string `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID   string `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *GetHostRuntimeRuleRequest) Reset() {
	*x = GetHostRuntimeRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostRuntimeRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostRuntimeRuleRequest) ProtoMessage() {}

func (x *GetHostRuntimeRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostRuntimeRuleRequest.ProtoReflect.Descriptor instead.
func (*GetHostRuntimeRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{19}
}

func (x *GetHostRuntimeRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetHostRuntimeRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetHostRuntimeRuleRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GetHostRuntimeRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetHostRuntimeRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *GetHostRuntimeRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type GetHostRuntimeRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostRuntimeRules `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHostRuntimeRuleResponse) Reset() {
	*x = GetHostRuntimeRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostRuntimeRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostRuntimeRuleResponse) ProtoMessage() {}

func (x *GetHostRuntimeRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostRuntimeRuleResponse.ProtoReflect.Descriptor instead.
func (*GetHostRuntimeRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{20}
}

func (x *GetHostRuntimeRuleResponse) GetData() *HostRuntimeRules {
	if x != nil {
		return x.Data
	}
	return nil
}

// CreateHostRuntimeRule
type CreateHostRuntimeRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string            `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string            `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Host        string            `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	ClusterName string            `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	TenantID    string            `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID   string            `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	Rules       *HostRuntimeRules `protobuf:"bytes,7,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CreateHostRuntimeRuleRequest) Reset() {
	*x = CreateHostRuntimeRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostRuntimeRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostRuntimeRuleRequest) ProtoMessage() {}

func (x *CreateHostRuntimeRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostRuntimeRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateHostRuntimeRuleRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{21}
}

func (x *CreateHostRuntimeRuleRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateHostRuntimeRuleRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *CreateHostRuntimeRuleRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateHostRuntimeRuleRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateHostRuntimeRuleRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *CreateHostRuntimeRuleRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *CreateHostRuntimeRuleRequest) GetRules() *HostRuntimeRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type CreateHostRuntimeRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostRuntimeRules `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateHostRuntimeRuleResponse) Reset() {
	*x = CreateHostRuntimeRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostRuntimeRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostRuntimeRuleResponse) ProtoMessage() {}

func (x *CreateHostRuntimeRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostRuntimeRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateHostRuntimeRuleResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{22}
}

func (x *CreateHostRuntimeRuleResponse) GetData() *HostRuntimeRules {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetAllHostRuntimeRules
type GetAllHostRuntimeRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env         string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID       string `protobuf:"bytes,4,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID    string `protobuf:"bytes,5,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	RuntimeID   string `protobuf:"bytes,6,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
}

func (x *GetAllHostRuntimeRulesRequest) Reset() {
	*x = GetAllHostRuntimeRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllHostRuntimeRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllHostRuntimeRulesRequest) ProtoMessage() {}

func (x *GetAllHostRuntimeRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllHostRuntimeRulesRequest.ProtoReflect.Descriptor instead.
func (*GetAllHostRuntimeRulesRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{23}
}

func (x *GetAllHostRuntimeRulesRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetAllHostRuntimeRulesRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetAllHostRuntimeRulesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetAllHostRuntimeRulesRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAllHostRuntimeRulesRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *GetAllHostRuntimeRulesRequest) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

type GetAllHostRuntimeRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HostRuntimeInterfaces `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllHostRuntimeRulesResponse) Reset() {
	*x = GetAllHostRuntimeRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllHostRuntimeRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllHostRuntimeRulesResponse) ProtoMessage() {}

func (x *GetAllHostRuntimeRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllHostRuntimeRulesResponse.ProtoReflect.Descriptor instead.
func (*GetAllHostRuntimeRulesResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllHostRuntimeRulesResponse) GetData() *HostRuntimeInterfaces {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetDubboInterfaceTime
type GetDubboInterfaceTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName   string `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string `protobuf:"bytes,5,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string `protobuf:"bytes,6,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
}

func (x *GetDubboInterfaceTimeRequest) Reset() {
	*x = GetDubboInterfaceTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceTimeRequest) ProtoMessage() {}

func (x *GetDubboInterfaceTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceTimeRequest.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceTimeRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{25}
}

func (x *GetDubboInterfaceTimeRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *GetDubboInterfaceTimeRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetDubboInterfaceTimeRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetDubboInterfaceTimeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetDubboInterfaceTimeRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDubboInterfaceTimeRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

type GetDubboInterfaceTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DubboInterfaceTime `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDubboInterfaceTimeResponse) Reset() {
	*x = GetDubboInterfaceTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceTimeResponse) ProtoMessage() {}

func (x *GetDubboInterfaceTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceTimeResponse.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceTimeResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{26}
}

func (x *GetDubboInterfaceTimeResponse) GetData() *DubboInterfaceTime {
	if x != nil {
		return x.Data
	}
	return nil
}

type DubboInterfaceTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderTime string `protobuf:"bytes,1,opt,name=providerTime,proto3" json:"providerTime,omitempty"`
	ConsumerTime string `protobuf:"bytes,2,opt,name=consumerTime,proto3" json:"consumerTime,omitempty"`
}

func (x *DubboInterfaceTime) Reset() {
	*x = DubboInterfaceTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DubboInterfaceTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DubboInterfaceTime) ProtoMessage() {}

func (x *DubboInterfaceTime) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DubboInterfaceTime.ProtoReflect.Descriptor instead.
func (*DubboInterfaceTime) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{27}
}

func (x *DubboInterfaceTime) GetProviderTime() string {
	if x != nil {
		return x.ProviderTime
	}
	return ""
}

func (x *DubboInterfaceTime) GetConsumerTime() string {
	if x != nil {
		return x.ConsumerTime
	}
	return ""
}

// GetDubboInterfaceQPS
type GetDubboInterfaceQPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	Start         string `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End           string `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Point         string `protobuf:"bytes,6,opt,name=point,proto3" json:"point,omitempty"`
	ClusterName   string `protobuf:"bytes,7,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string `protobuf:"bytes,8,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string `protobuf:"bytes,9,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
}

func (x *GetDubboInterfaceQPSRequest) Reset() {
	*x = GetDubboInterfaceQPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceQPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceQPSRequest) ProtoMessage() {}

func (x *GetDubboInterfaceQPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceQPSRequest.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceQPSRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{28}
}

func (x *GetDubboInterfaceQPSRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDubboInterfaceQPSRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

type GetDubboInterfaceQPSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DubboInterface `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDubboInterfaceQPSResponse) Reset() {
	*x = GetDubboInterfaceQPSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceQPSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceQPSResponse) ProtoMessage() {}

func (x *GetDubboInterfaceQPSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceQPSResponse.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceQPSResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{29}
}

func (x *GetDubboInterfaceQPSResponse) GetData() *DubboInterface {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetDubboInterfaceFailed
type GetDubboInterfaceFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	Start         string `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End           string `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Point         string `protobuf:"bytes,6,opt,name=point,proto3" json:"point,omitempty"`
	ClusterName   string `protobuf:"bytes,7,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string `protobuf:"bytes,8,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string `protobuf:"bytes,9,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
}

func (x *GetDubboInterfaceFailedRequest) Reset() {
	*x = GetDubboInterfaceFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceFailedRequest) ProtoMessage() {}

func (x *GetDubboInterfaceFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceFailedRequest.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceFailedRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{30}
}

func (x *GetDubboInterfaceFailedRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDubboInterfaceFailedRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

type GetDubboInterfaceFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DubboInterface `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDubboInterfaceFailedResponse) Reset() {
	*x = GetDubboInterfaceFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceFailedResponse) ProtoMessage() {}

func (x *GetDubboInterfaceFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceFailedResponse.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceFailedResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{31}
}

func (x *GetDubboInterfaceFailedResponse) GetData() *DubboInterface {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetDubboInterfaceAvgTime
type GetDubboInterfaceAvgTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Env           string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	Start         string `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End           string `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Point         string `protobuf:"bytes,6,opt,name=point,proto3" json:"point,omitempty"`
	ClusterName   string `protobuf:"bytes,7,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	AppID         string `protobuf:"bytes,8,opt,name=appID,proto3" json:"appID,omitempty"`
	TenantID      string `protobuf:"bytes,9,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
}

func (x *GetDubboInterfaceAvgTimeRequest) Reset() {
	*x = GetDubboInterfaceAvgTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceAvgTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceAvgTimeRequest) ProtoMessage() {}

func (x *GetDubboInterfaceAvgTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceAvgTimeRequest.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceAvgTimeRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{32}
}

func (x *GetDubboInterfaceAvgTimeRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDubboInterfaceAvgTimeRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

type GetDubboInterfaceAvgTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DubboInterface `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDubboInterfaceAvgTimeResponse) Reset() {
	*x = GetDubboInterfaceAvgTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDubboInterfaceAvgTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDubboInterfaceAvgTimeResponse) ProtoMessage() {}

func (x *GetDubboInterfaceAvgTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDubboInterfaceAvgTimeResponse.ProtoReflect.Descriptor instead.
func (*GetDubboInterfaceAvgTimeResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{33}
}

func (x *GetDubboInterfaceAvgTimeResponse) GetData() *DubboInterface {
	if x != nil {
		return x.Data
	}
	return nil
}

// common message
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfacename string                     `protobuf:"bytes,1,opt,name=interfacename,proto3" json:"interfacename,omitempty"`
	Providerlist  []string                   `protobuf:"bytes,2,rep,name=providerlist,proto3" json:"providerlist,omitempty"`
	Consumerlist  []string                   `protobuf:"bytes,3,rep,name=consumerlist,proto3" json:"consumerlist,omitempty"`
	Providermap   map[string]*InterfaceOwner `protobuf:"bytes,4,rep,name=providermap,proto3" json:"providermap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Consumermap   map[string]*InterfaceOwner `protobuf:"bytes,5,rep,name=consumermap,proto3" json:"consumermap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{34}
}

func (x *Interface) GetInterfacename() string {
	if x != nil {
		return x.Interfacename
	}
	return ""
}

func (x *Interface) GetProviderlist() []string {
	if x != nil {
		return x.Providerlist
	}
	return nil
}

func (x *Interface) GetConsumerlist() []string {
	if x != nil {
		return x.Consumerlist
	}
	return nil
}

func (x *Interface) GetProvidermap() map[string]*InterfaceOwner {
	if x != nil {
		return x.Providermap
	}
	return nil
}

func (x *Interface) GetConsumermap() map[string]*InterfaceOwner {
	if x != nil {
		return x.Consumermap
	}
	return nil
}

type InterfaceOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Owner         string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ProjectId     string `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Env           string `protobuf:"bytes,4,opt,name=env,proto3" json:"env,omitempty"`
	HostIp        string `protobuf:"bytes,5,opt,name=hostIp,proto3" json:"hostIp,omitempty"`
	ApplicationId string `protobuf:"bytes,6,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	Feature       string `protobuf:"bytes,7,opt,name=feature,proto3" json:"feature,omitempty"`
	ServiceName   string `protobuf:"bytes,8,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *InterfaceOwner) Reset() {
	*x = InterfaceOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceOwner) ProtoMessage() {}

func (x *InterfaceOwner) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceOwner.ProtoReflect.Descriptor instead.
func (*InterfaceOwner) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{35}
}

func (x *InterfaceOwner) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *InterfaceOwner) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *InterfaceOwner) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InterfaceOwner) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *InterfaceOwner) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *InterfaceOwner) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *InterfaceOwner) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *InterfaceOwner) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type RequestRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LbType            string `protobuf:"bytes,1,opt,name=lb_type,json=lbType,proto3" json:"lb_type,omitempty"`
	MaxRequestPerConn string `protobuf:"bytes,2,opt,name=max_request_per_conn,json=maxRequestPerConn,proto3" json:"max_request_per_conn,omitempty"`
	MaxConnections    string `protobuf:"bytes,3,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	MaxRequests       string `protobuf:"bytes,4,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
}

func (x *RequestRule) Reset() {
	*x = RequestRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRule) ProtoMessage() {}

func (x *RequestRule) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRule.ProtoReflect.Descriptor instead.
func (*RequestRule) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{36}
}

func (x *RequestRule) GetLbType() string {
	if x != nil {
		return x.LbType
	}
	return ""
}

func (x *RequestRule) GetMaxRequestPerConn() string {
	if x != nil {
		return x.MaxRequestPerConn
	}
	return ""
}

func (x *RequestRule) GetMaxConnections() string {
	if x != nil {
		return x.MaxConnections
	}
	return ""
}

func (x *RequestRule) GetMaxRequests() string {
	if x != nil {
		return x.MaxRequests
	}
	return ""
}

type HostRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *HostRoute `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *HostRules) Reset() {
	*x = HostRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRules) ProtoMessage() {}

func (x *HostRules) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRules.ProtoReflect.Descriptor instead.
func (*HostRules) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{37}
}

func (x *HostRules) GetRule() *HostRoute {
	if x != nil {
		return x.Rule
	}
	return nil
}

type HostRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Weight int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *HostRoute) Reset() {
	*x = HostRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRoute) ProtoMessage() {}

func (x *HostRoute) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRoute.ProtoReflect.Descriptor instead.
func (*HostRoute) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{38}
}

func (x *HostRoute) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *HostRoute) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type HostRuntimeRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Rule    []*HostRuntimeRule `protobuf:"bytes,2,rep,name=rule,proto3" json:"rule,omitempty"`
}

func (x *HostRuntimeRules) Reset() {
	*x = HostRuntimeRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRuntimeRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRuntimeRules) ProtoMessage() {}

func (x *HostRuntimeRules) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRuntimeRules.ProtoReflect.Descriptor instead.
func (*HostRuntimeRules) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{39}
}

func (x *HostRuntimeRules) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HostRuntimeRules) GetRule() []*HostRuntimeRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type HostRuntimeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *HostRuntimeRule) Reset() {
	*x = HostRuntimeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRuntimeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRuntimeRule) ProtoMessage() {}

func (x *HostRuntimeRule) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRuntimeRule.ProtoReflect.Descriptor instead.
func (*HostRuntimeRule) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{40}
}

func (x *HostRuntimeRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostRuntimeRule) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type HostRuntimeInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid string              `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	Node  []*HostRuntimeRules `protobuf:"bytes,2,rep,name=node,proto3" json:"node,omitempty"`
}

func (x *HostRuntimeInterfaces) Reset() {
	*x = HostRuntimeInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRuntimeInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRuntimeInterfaces) ProtoMessage() {}

func (x *HostRuntimeInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRuntimeInterfaces.ProtoReflect.Descriptor instead.
func (*HostRuntimeInterfaces) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{41}
}

func (x *HostRuntimeInterfaces) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *HostRuntimeInterfaces) GetNode() []*HostRuntimeRules {
	if x != nil {
		return x.Node
	}
	return nil
}

type HTTPServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceList []*HTTPService `protobuf:"bytes,1,rep,name=serviceList,proto3" json:"serviceList,omitempty"`
}

func (x *HTTPServices) Reset() {
	*x = HTTPServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPServices) ProtoMessage() {}

func (x *HTTPServices) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPServices.ProtoReflect.Descriptor instead.
func (*HTTPServices) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{42}
}

func (x *HTTPServices) GetServiceList() []*HTTPService {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

type HTTPService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName    string             `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceDomain  string             `protobuf:"bytes,2,opt,name=serviceDomain,proto3" json:"serviceDomain,omitempty"`
	HttpServiceDto []*HTTPServiceItem `protobuf:"bytes,3,rep,name=httpServiceDto,proto3" json:"httpServiceDto,omitempty"`
}

func (x *HTTPService) Reset() {
	*x = HTTPService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPService) ProtoMessage() {}

func (x *HTTPService) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPService.ProtoReflect.Descriptor instead.
func (*HTTPService) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{43}
}

func (x *HTTPService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HTTPService) GetServiceDomain() string {
	if x != nil {
		return x.ServiceDomain
	}
	return ""
}

func (x *HTTPService) GetHttpServiceDto() []*HTTPServiceItem {
	if x != nil {
		return x.HttpServiceDto
	}
	return nil
}

type HTTPServiceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Online  bool   `protobuf:"varint,2,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *HTTPServiceItem) Reset() {
	*x = HTTPServiceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPServiceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPServiceItem) ProtoMessage() {}

func (x *HTTPServiceItem) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPServiceItem.ProtoReflect.Descriptor instead.
func (*HTTPServiceItem) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{44}
}

func (x *HTTPServiceItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HTTPServiceItem) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type DubboInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Total   int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Time    []int64                 `protobuf:"varint,3,rep,packed,name=time,proto3" json:"time,omitempty"`
	Results []*DubboInterfaceResult `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *DubboInterface) Reset() {
	*x = DubboInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DubboInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DubboInterface) ProtoMessage() {}

func (x *DubboInterface) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DubboInterface.ProtoReflect.Descriptor instead.
func (*DubboInterface) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{45}
}

func (x *DubboInterface) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DubboInterface) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DubboInterface) GetTime() []int64 {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DubboInterface) GetResults() []*DubboInterfaceResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DubboInterfaceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data []*DubboMointorMap `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DubboInterfaceResult) Reset() {
	*x = DubboInterfaceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DubboInterfaceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DubboInterfaceResult) ProtoMessage() {}

func (x *DubboInterfaceResult) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DubboInterfaceResult.ProtoReflect.Descriptor instead.
func (*DubboInterfaceResult) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{46}
}

func (x *DubboInterfaceResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DubboInterfaceResult) GetData() []*DubboMointorMap {
	if x != nil {
		return x.Data
	}
	return nil
}

type DubboMointorMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *DubboMointor `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DubboMointorMap) Reset() {
	*x = DubboMointorMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DubboMointorMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DubboMointorMap) ProtoMessage() {}

func (x *DubboMointorMap) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DubboMointorMap.ProtoReflect.Descriptor instead.
func (*DubboMointorMap) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{47}
}

func (x *DubboMointorMap) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DubboMointorMap) GetValue() *DubboMointor {
	if x != nil {
		return x.Value
	}
	return nil
}

type DubboMointor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag       string  `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Data      []int64 `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
	Unit      string  `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	UnitType  string  `protobuf:"bytes,5,opt,name=unitType,proto3" json:"unitType,omitempty"`
	ChartType string  `protobuf:"bytes,6,opt,name=chartType,proto3" json:"chartType,omitempty"`
	AxisIndex int64   `protobuf:"varint,7,opt,name=axisIndex,proto3" json:"axisIndex,omitempty"`
}

func (x *DubboMointor) Reset() {
	*x = DubboMointor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DubboMointor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DubboMointor) ProtoMessage() {}

func (x *DubboMointor) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DubboMointor.ProtoReflect.Descriptor instead.
func (*DubboMointor) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{48}
}

func (x *DubboMointor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DubboMointor) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DubboMointor) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DubboMointor) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *DubboMointor) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *DubboMointor) GetChartType() string {
	if x != nil {
		return x.ChartType
	}
	return ""
}

func (x *DubboMointor) GetAxisIndex() int64 {
	if x != nil {
		return x.AxisIndex
	}
	return 0
}

type ServiceIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Workspace string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *ServiceIpRequest) Reset() {
	*x = ServiceIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIpRequest) ProtoMessage() {}

func (x *ServiceIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIpRequest.ProtoReflect.Descriptor instead.
func (*ServiceIpRequest) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{49}
}

func (x *ServiceIpRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ServiceIpRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ServiceIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ServiceIpInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID       string `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID,omitempty"`
	RuntimeID   string `protobuf:"bytes,2,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	ServiceName string `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *ServiceIpInfoResponse) Reset() {
	*x = ServiceIpInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registercenter_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIpInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIpInfoResponse) ProtoMessage() {}

func (x *ServiceIpInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registercenter_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIpInfoResponse.ProtoReflect.Descriptor instead.
func (*ServiceIpInfoResponse) Descriptor() ([]byte, []int) {
	return file_registercenter_proto_rawDescGZIP(), []int{50}
}

func (x *ServiceIpInfoResponse) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ServiceIpInfoResponse) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *ServiceIpInfoResponse) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

var File_registercenter_proto protoreflect.FileDescriptor

var file_registercenter_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x1a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74,
	0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44,
	0x22, 0x4f, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xdc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x28, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x02, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x5b, 0x0a, 0x19, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x11,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x50, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xba, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x43, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x13, 0x43, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x5b, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x02, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44,
	0x22, 0x64, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x75,
	0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x12, 0x44,
	0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x51,
	0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x51, 0x50,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x75,
	0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x02, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5f, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9,
	0x03, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x61,
	0x70, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x6d, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x1a, 0x67, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x67, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x6d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6a, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x6c, 0x0a, 0x15, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x56,
	0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x74, 0x6f,
	0x22, 0x43, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x68, 0x0a, 0x14, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x6f, 0x69, 0x6e, 0x74,
	0x6f, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x0f, 0x44,
	0x75, 0x62, 0x62, 0x6f, 0x4d, 0x6f, 0x69, 0x6e, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d,
	0x6f, 0x69, 0x6e, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01,
	0x0a, 0x0c, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x6f, 0x69, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x78, 0x69, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x78, 0x69, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x22, 0x6d, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0xa4, 0x22, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4, 0x02,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x79, 0x12, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73,
	0x70, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x2f, 0x0a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b,
	0x65, 0x6e, 0x76, 0x7d, 0x12, 0x9b, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x66, 0x12, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x3d, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x26, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49, 0x64,
	0x3d, 0x7b, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x68, 0x74, 0x74, 0x70, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e,
	0x76, 0x7d, 0x12, 0x98, 0x02, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x22, 0x5d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x73, 0x70, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x6e, 0x61, 0x63, 0x6f, 0x73, 0x49, 0x64, 0x3d, 0x7b, 0x6e,
	0x61, 0x63, 0x6f, 0x73, 0x49, 0x44, 0x7d, 0x3a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0xfa, 0x81, 0xf9, 0x1b, 0x28, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x12, 0xad, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x69, 0x70, 0xfa, 0x81, 0xf9, 0x1b, 0x15, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x6d, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x69, 0x70, 0x12, 0x80, 0x02,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x8b, 0x01, 0x12, 0x88, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70,
	0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d,
	0x12, 0x8f, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x91,
	0x01, 0x22, 0x88, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65,
	0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x89, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x8b, 0x01, 0x2a, 0x88, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xe0,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x70, 0x12, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44,
	0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x22, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70,
	0x2a, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d,
	0x12, 0xf2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x12, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65,
	0x6e, 0x76, 0x7d, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x82, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x22, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70,
	0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76,
	0x7d, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x44, 0x7d, 0x3a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x8e, 0x02, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x12,
	0x7a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e,
	0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x26, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d,
	0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xfc, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x12, 0x6c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x12, 0xf3, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x51, 0x50, 0x53, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x51,
	0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x51, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x68, 0x12, 0x66, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x71, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a,
	0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x12, 0xff, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6b, 0x12, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73,
	0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2f, 0x7b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f,
	0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b, 0x61, 0x70, 0x70, 0x49, 0x44, 0x7d, 0x26, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x12, 0x83, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62,
	0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x76, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x12, 0x6a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x76, 0x67, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x7b, 0x65, 0x6e, 0x76, 0x7d, 0x3f, 0x61, 0x7a, 0x3d, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x26, 0x61, 0x70, 0x70, 0x69, 0x64, 0x3d, 0x7b, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x7d, 0x26, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3d, 0x7b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c, 0x0b, 0x22,
	0x03, 0x6d, 0x73, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_registercenter_proto_rawDescOnce sync.Once
	file_registercenter_proto_rawDescData = file_registercenter_proto_rawDesc
)

func file_registercenter_proto_rawDescGZIP() []byte {
	file_registercenter_proto_rawDescOnce.Do(func() {
		file_registercenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_registercenter_proto_rawDescData)
	})
	return file_registercenter_proto_rawDescData
}

var file_registercenter_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_registercenter_proto_goTypes = []interface{}{
	(*ListInterfaceRequest)(nil),             // 0: erda.msp.registercenter.ListInterfaceRequest
	(*ListInterfaceResponse)(nil),            // 1: erda.msp.registercenter.ListInterfaceResponse
	(*GetHTTPServicesRequest)(nil),           // 2: erda.msp.registercenter.GetHTTPServicesRequest
	(*GetHTTPServicesResponse)(nil),          // 3: erda.msp.registercenter.GetHTTPServicesResponse
	(*EnableHTTPServiceRequest)(nil),         // 4: erda.msp.registercenter.EnableHTTPServiceRequest
	(*EnableHTTPServiceResponse)(nil),        // 5: erda.msp.registercenter.EnableHTTPServiceResponse
	(*EnableHTTPService)(nil),                // 6: erda.msp.registercenter.EnableHTTPService
	(*GetRouteRuleRequest)(nil),              // 7: erda.msp.registercenter.GetRouteRuleRequest
	(*GetRouteRuleResponse)(nil),             // 8: erda.msp.registercenter.GetRouteRuleResponse
	(*CreateRouteRuleRequest)(nil),           // 9: erda.msp.registercenter.CreateRouteRuleRequest
	(*CreateRouteRuleResponse)(nil),          // 10: erda.msp.registercenter.CreateRouteRuleResponse
	(*DeleteRouteRuleRequest)(nil),           // 11: erda.msp.registercenter.DeleteRouteRuleRequest
	(*DeleteRouteRuleResponse)(nil),          // 12: erda.msp.registercenter.DeleteRouteRuleResponse
	(*CetHostRuleRequest)(nil),               // 13: erda.msp.registercenter.CetHostRuleRequest
	(*CetHostRuleResponse)(nil),              // 14: erda.msp.registercenter.CetHostRuleResponse
	(*CreateHostRuleRequest)(nil),            // 15: erda.msp.registercenter.CreateHostRuleRequest
	(*CreateHostRuleResponse)(nil),           // 16: erda.msp.registercenter.CreateHostRuleResponse
	(*DeleteHostRuleRequest)(nil),            // 17: erda.msp.registercenter.DeleteHostRuleRequest
	(*DeleteHostRuleResponse)(nil),           // 18: erda.msp.registercenter.DeleteHostRuleResponse
	(*GetHostRuntimeRuleRequest)(nil),        // 19: erda.msp.registercenter.GetHostRuntimeRuleRequest
	(*GetHostRuntimeRuleResponse)(nil),       // 20: erda.msp.registercenter.GetHostRuntimeRuleResponse
	(*CreateHostRuntimeRuleRequest)(nil),     // 21: erda.msp.registercenter.CreateHostRuntimeRuleRequest
	(*CreateHostRuntimeRuleResponse)(nil),    // 22: erda.msp.registercenter.CreateHostRuntimeRuleResponse
	(*GetAllHostRuntimeRulesRequest)(nil),    // 23: erda.msp.registercenter.GetAllHostRuntimeRulesRequest
	(*GetAllHostRuntimeRulesResponse)(nil),   // 24: erda.msp.registercenter.GetAllHostRuntimeRulesResponse
	(*GetDubboInterfaceTimeRequest)(nil),     // 25: erda.msp.registercenter.GetDubboInterfaceTimeRequest
	(*GetDubboInterfaceTimeResponse)(nil),    // 26: erda.msp.registercenter.GetDubboInterfaceTimeResponse
	(*DubboInterfaceTime)(nil),               // 27: erda.msp.registercenter.DubboInterfaceTime
	(*GetDubboInterfaceQPSRequest)(nil),      // 28: erda.msp.registercenter.GetDubboInterfaceQPSRequest
	(*GetDubboInterfaceQPSResponse)(nil),     // 29: erda.msp.registercenter.GetDubboInterfaceQPSResponse
	(*GetDubboInterfaceFailedRequest)(nil),   // 30: erda.msp.registercenter.GetDubboInterfaceFailedRequest
	(*GetDubboInterfaceFailedResponse)(nil),  // 31: erda.msp.registercenter.GetDubboInterfaceFailedResponse
	(*GetDubboInterfaceAvgTimeRequest)(nil),  // 32: erda.msp.registercenter.GetDubboInterfaceAvgTimeRequest
	(*GetDubboInterfaceAvgTimeResponse)(nil), // 33: erda.msp.registercenter.GetDubboInterfaceAvgTimeResponse
	(*Interface)(nil),                        // 34: erda.msp.registercenter.Interface
	(*InterfaceOwner)(nil),                   // 35: erda.msp.registercenter.InterfaceOwner
	(*RequestRule)(nil),                      // 36: erda.msp.registercenter.RequestRule
	(*HostRules)(nil),                        // 37: erda.msp.registercenter.HostRules
	(*HostRoute)(nil),                        // 38: erda.msp.registercenter.HostRoute
	(*HostRuntimeRules)(nil),                 // 39: erda.msp.registercenter.HostRuntimeRules
	(*HostRuntimeRule)(nil),                  // 40: erda.msp.registercenter.HostRuntimeRule
	(*HostRuntimeInterfaces)(nil),            // 41: erda.msp.registercenter.HostRuntimeInterfaces
	(*HTTPServices)(nil),                     // 42: erda.msp.registercenter.HTTPServices
	(*HTTPService)(nil),                      // 43: erda.msp.registercenter.HTTPService
	(*HTTPServiceItem)(nil),                  // 44: erda.msp.registercenter.HTTPServiceItem
	(*DubboInterface)(nil),                   // 45: erda.msp.registercenter.DubboInterface
	(*DubboInterfaceResult)(nil),             // 46: erda.msp.registercenter.DubboInterfaceResult
	(*DubboMointorMap)(nil),                  // 47: erda.msp.registercenter.DubboMointorMap
	(*DubboMointor)(nil),                     // 48: erda.msp.registercenter.DubboMointor
	(*ServiceIpRequest)(nil),                 // 49: erda.msp.registercenter.ServiceIpRequest
	(*ServiceIpInfoResponse)(nil),            // 50: erda.msp.registercenter.ServiceIpInfoResponse
	nil,                                      // 51: erda.msp.registercenter.Interface.ProvidermapEntry
	nil,                                      // 52: erda.msp.registercenter.Interface.ConsumermapEntry
}
var file_registercenter_proto_depIdxs = []int32{
	34, // 0: erda.msp.registercenter.ListInterfaceResponse.data:type_name -> erda.msp.registercenter.Interface
	42, // 1: erda.msp.registercenter.GetHTTPServicesResponse.data:type_name -> erda.msp.registercenter.HTTPServices
	6,  // 2: erda.msp.registercenter.EnableHTTPServiceRequest.service:type_name -> erda.msp.registercenter.EnableHTTPService
	6,  // 3: erda.msp.registercenter.EnableHTTPServiceResponse.data:type_name -> erda.msp.registercenter.EnableHTTPService
	36, // 4: erda.msp.registercenter.GetRouteRuleResponse.data:type_name -> erda.msp.registercenter.RequestRule
	36, // 5: erda.msp.registercenter.CreateRouteRuleRequest.rule:type_name -> erda.msp.registercenter.RequestRule
	36, // 6: erda.msp.registercenter.CreateRouteRuleResponse.data:type_name -> erda.msp.registercenter.RequestRule
	36, // 7: erda.msp.registercenter.DeleteRouteRuleResponse.data:type_name -> erda.msp.registercenter.RequestRule
	37, // 8: erda.msp.registercenter.CetHostRuleResponse.data:type_name -> erda.msp.registercenter.HostRules
	37, // 9: erda.msp.registercenter.CreateHostRuleRequest.rules:type_name -> erda.msp.registercenter.HostRules
	37, // 10: erda.msp.registercenter.CreateHostRuleResponse.data:type_name -> erda.msp.registercenter.HostRules
	37, // 11: erda.msp.registercenter.DeleteHostRuleResponse.data:type_name -> erda.msp.registercenter.HostRules
	39, // 12: erda.msp.registercenter.GetHostRuntimeRuleResponse.data:type_name -> erda.msp.registercenter.HostRuntimeRules
	39, // 13: erda.msp.registercenter.CreateHostRuntimeRuleRequest.rules:type_name -> erda.msp.registercenter.HostRuntimeRules
	39, // 14: erda.msp.registercenter.CreateHostRuntimeRuleResponse.data:type_name -> erda.msp.registercenter.HostRuntimeRules
	41, // 15: erda.msp.registercenter.GetAllHostRuntimeRulesResponse.data:type_name -> erda.msp.registercenter.HostRuntimeInterfaces
	27, // 16: erda.msp.registercenter.GetDubboInterfaceTimeResponse.data:type_name -> erda.msp.registercenter.DubboInterfaceTime
	45, // 17: erda.msp.registercenter.GetDubboInterfaceQPSResponse.data:type_name -> erda.msp.registercenter.DubboInterface
	45, // 18: erda.msp.registercenter.GetDubboInterfaceFailedResponse.data:type_name -> erda.msp.registercenter.DubboInterface
	45, // 19: erda.msp.registercenter.GetDubboInterfaceAvgTimeResponse.data:type_name -> erda.msp.registercenter.DubboInterface
	51, // 20: erda.msp.registercenter.Interface.providermap:type_name -> erda.msp.registercenter.Interface.ProvidermapEntry
	52, // 21: erda.msp.registercenter.Interface.consumermap:type_name -> erda.msp.registercenter.Interface.ConsumermapEntry
	38, // 22: erda.msp.registercenter.HostRules.rule:type_name -> erda.msp.registercenter.HostRoute
	40, // 23: erda.msp.registercenter.HostRuntimeRules.rule:type_name -> erda.msp.registercenter.HostRuntimeRule
	39, // 24: erda.msp.registercenter.HostRuntimeInterfaces.node:type_name -> erda.msp.registercenter.HostRuntimeRules
	43, // 25: erda.msp.registercenter.HTTPServices.serviceList:type_name -> erda.msp.registercenter.HTTPService
	44, // 26: erda.msp.registercenter.HTTPService.httpServiceDto:type_name -> erda.msp.registercenter.HTTPServiceItem
	46, // 27: erda.msp.registercenter.DubboInterface.results:type_name -> erda.msp.registercenter.DubboInterfaceResult
	47, // 28: erda.msp.registercenter.DubboInterfaceResult.data:type_name -> erda.msp.registercenter.DubboMointorMap
	48, // 29: erda.msp.registercenter.DubboMointorMap.value:type_name -> erda.msp.registercenter.DubboMointor
	35, // 30: erda.msp.registercenter.Interface.ProvidermapEntry.value:type_name -> erda.msp.registercenter.InterfaceOwner
	35, // 31: erda.msp.registercenter.Interface.ConsumermapEntry.value:type_name -> erda.msp.registercenter.InterfaceOwner
	0,  // 32: erda.msp.registercenter.RegisterCenterService.ListInterface:input_type -> erda.msp.registercenter.ListInterfaceRequest
	2,  // 33: erda.msp.registercenter.RegisterCenterService.GetHTTPServices:input_type -> erda.msp.registercenter.GetHTTPServicesRequest
	4,  // 34: erda.msp.registercenter.RegisterCenterService.EnableHTTPService:input_type -> erda.msp.registercenter.EnableHTTPServiceRequest
	49, // 35: erda.msp.registercenter.RegisterCenterService.GetServiceIpInfo:input_type -> erda.msp.registercenter.ServiceIpRequest
	7,  // 36: erda.msp.registercenter.RegisterCenterService.GetRouteRule:input_type -> erda.msp.registercenter.GetRouteRuleRequest
	9,  // 37: erda.msp.registercenter.RegisterCenterService.CreateRouteRule:input_type -> erda.msp.registercenter.CreateRouteRuleRequest
	11, // 38: erda.msp.registercenter.RegisterCenterService.DeleteRouteRule:input_type -> erda.msp.registercenter.DeleteRouteRuleRequest
	13, // 39: erda.msp.registercenter.RegisterCenterService.GetHostRule:input_type -> erda.msp.registercenter.CetHostRuleRequest
	15, // 40: erda.msp.registercenter.RegisterCenterService.CreateHostRule:input_type -> erda.msp.registercenter.CreateHostRuleRequest
	17, // 41: erda.msp.registercenter.RegisterCenterService.DeleteHostRule:input_type -> erda.msp.registercenter.DeleteHostRuleRequest
	19, // 42: erda.msp.registercenter.RegisterCenterService.GetHostRuntimeRule:input_type -> erda.msp.registercenter.GetHostRuntimeRuleRequest
	21, // 43: erda.msp.registercenter.RegisterCenterService.CreateHostRuntimeRule:input_type -> erda.msp.registercenter.CreateHostRuntimeRuleRequest
	23, // 44: erda.msp.registercenter.RegisterCenterService.GetAllHostRuntimeRules:input_type -> erda.msp.registercenter.GetAllHostRuntimeRulesRequest
	25, // 45: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceTime:input_type -> erda.msp.registercenter.GetDubboInterfaceTimeRequest
	28, // 46: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceQPS:input_type -> erda.msp.registercenter.GetDubboInterfaceQPSRequest
	30, // 47: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceFailed:input_type -> erda.msp.registercenter.GetDubboInterfaceFailedRequest
	32, // 48: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceAvgTime:input_type -> erda.msp.registercenter.GetDubboInterfaceAvgTimeRequest
	1,  // 49: erda.msp.registercenter.RegisterCenterService.ListInterface:output_type -> erda.msp.registercenter.ListInterfaceResponse
	3,  // 50: erda.msp.registercenter.RegisterCenterService.GetHTTPServices:output_type -> erda.msp.registercenter.GetHTTPServicesResponse
	5,  // 51: erda.msp.registercenter.RegisterCenterService.EnableHTTPService:output_type -> erda.msp.registercenter.EnableHTTPServiceResponse
	50, // 52: erda.msp.registercenter.RegisterCenterService.GetServiceIpInfo:output_type -> erda.msp.registercenter.ServiceIpInfoResponse
	8,  // 53: erda.msp.registercenter.RegisterCenterService.GetRouteRule:output_type -> erda.msp.registercenter.GetRouteRuleResponse
	10, // 54: erda.msp.registercenter.RegisterCenterService.CreateRouteRule:output_type -> erda.msp.registercenter.CreateRouteRuleResponse
	12, // 55: erda.msp.registercenter.RegisterCenterService.DeleteRouteRule:output_type -> erda.msp.registercenter.DeleteRouteRuleResponse
	14, // 56: erda.msp.registercenter.RegisterCenterService.GetHostRule:output_type -> erda.msp.registercenter.CetHostRuleResponse
	16, // 57: erda.msp.registercenter.RegisterCenterService.CreateHostRule:output_type -> erda.msp.registercenter.CreateHostRuleResponse
	18, // 58: erda.msp.registercenter.RegisterCenterService.DeleteHostRule:output_type -> erda.msp.registercenter.DeleteHostRuleResponse
	20, // 59: erda.msp.registercenter.RegisterCenterService.GetHostRuntimeRule:output_type -> erda.msp.registercenter.GetHostRuntimeRuleResponse
	22, // 60: erda.msp.registercenter.RegisterCenterService.CreateHostRuntimeRule:output_type -> erda.msp.registercenter.CreateHostRuntimeRuleResponse
	24, // 61: erda.msp.registercenter.RegisterCenterService.GetAllHostRuntimeRules:output_type -> erda.msp.registercenter.GetAllHostRuntimeRulesResponse
	26, // 62: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceTime:output_type -> erda.msp.registercenter.GetDubboInterfaceTimeResponse
	29, // 63: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceQPS:output_type -> erda.msp.registercenter.GetDubboInterfaceQPSResponse
	31, // 64: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceFailed:output_type -> erda.msp.registercenter.GetDubboInterfaceFailedResponse
	33, // 65: erda.msp.registercenter.RegisterCenterService.GetDubboInterfaceAvgTime:output_type -> erda.msp.registercenter.GetDubboInterfaceAvgTimeResponse
	49, // [49:66] is the sub-list for method output_type
	32, // [32:49] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_registercenter_proto_init() }
func file_registercenter_proto_init() {
	if File_registercenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_registercenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHTTPServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableHTTPServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableHTTPServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableHTTPService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouteRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouteRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CetHostRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CetHostRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostRuntimeRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostRuntimeRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostRuntimeRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostRuntimeRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllHostRuntimeRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllHostRuntimeRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DubboInterfaceTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceQPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceQPSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceAvgTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDubboInterfaceAvgTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRuntimeRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRuntimeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRuntimeInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPServiceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DubboInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DubboInterfaceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DubboMointorMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DubboMointor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registercenter_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIpInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registercenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registercenter_proto_goTypes,
		DependencyIndexes: file_registercenter_proto_depIdxs,
		MessageInfos:      file_registercenter_proto_msgTypes,
	}.Build()
	File_registercenter_proto = out.File
	file_registercenter_proto_rawDesc = nil
	file_registercenter_proto_goTypes = nil
	file_registercenter_proto_depIdxs = nil
}
