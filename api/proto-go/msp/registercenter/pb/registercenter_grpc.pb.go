// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: registercenter.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RegisterCenterServiceClient is the client API for RegisterCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterCenterServiceClient interface {
	ListInterface(ctx context.Context, in *ListInterfaceRequest, opts ...grpc.CallOption) (*ListInterfaceResponse, error)
	GetHTTPServices(ctx context.Context, in *GetHTTPServicesRequest, opts ...grpc.CallOption) (*GetHTTPServicesResponse, error)
	EnableHTTPService(ctx context.Context, in *EnableHTTPServiceRequest, opts ...grpc.CallOption) (*EnableHTTPServiceResponse, error)
	GetServiceIpInfo(ctx context.Context, in *ServiceIpRequest, opts ...grpc.CallOption) (*ServiceIpInfoResponse, error)
	// +depracated
	GetRouteRule(ctx context.Context, in *GetRouteRuleRequest, opts ...grpc.CallOption) (*GetRouteRuleResponse, error)
	// +depracated
	CreateRouteRule(ctx context.Context, in *CreateRouteRuleRequest, opts ...grpc.CallOption) (*CreateRouteRuleResponse, error)
	// +depracated
	DeleteRouteRule(ctx context.Context, in *DeleteRouteRuleRequest, opts ...grpc.CallOption) (*DeleteRouteRuleResponse, error)
	// +depracated
	GetHostRule(ctx context.Context, in *CetHostRuleRequest, opts ...grpc.CallOption) (*CetHostRuleResponse, error)
	// +depracated
	CreateHostRule(ctx context.Context, in *CreateHostRuleRequest, opts ...grpc.CallOption) (*CreateHostRuleResponse, error)
	// +depracated
	DeleteHostRule(ctx context.Context, in *DeleteHostRuleRequest, opts ...grpc.CallOption) (*DeleteHostRuleResponse, error)
	// +depracated
	GetHostRuntimeRule(ctx context.Context, in *GetHostRuntimeRuleRequest, opts ...grpc.CallOption) (*GetHostRuntimeRuleResponse, error)
	// +depracated
	CreateHostRuntimeRule(ctx context.Context, in *CreateHostRuntimeRuleRequest, opts ...grpc.CallOption) (*CreateHostRuntimeRuleResponse, error)
	// +depracated
	GetAllHostRuntimeRules(ctx context.Context, in *GetAllHostRuntimeRulesRequest, opts ...grpc.CallOption) (*GetAllHostRuntimeRulesResponse, error)
	// +depracated
	GetDubboInterfaceTime(ctx context.Context, in *GetDubboInterfaceTimeRequest, opts ...grpc.CallOption) (*GetDubboInterfaceTimeResponse, error)
	// +depracated
	GetDubboInterfaceQPS(ctx context.Context, in *GetDubboInterfaceQPSRequest, opts ...grpc.CallOption) (*GetDubboInterfaceQPSResponse, error)
	// +depracated
	GetDubboInterfaceFailed(ctx context.Context, in *GetDubboInterfaceFailedRequest, opts ...grpc.CallOption) (*GetDubboInterfaceFailedResponse, error)
	// +depracated
	GetDubboInterfaceAvgTime(ctx context.Context, in *GetDubboInterfaceAvgTimeRequest, opts ...grpc.CallOption) (*GetDubboInterfaceAvgTimeResponse, error)
}

type registerCenterServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewRegisterCenterServiceClient(cc grpc1.ClientConnInterface) RegisterCenterServiceClient {
	return &registerCenterServiceClient{cc}
}

func (c *registerCenterServiceClient) ListInterface(ctx context.Context, in *ListInterfaceRequest, opts ...grpc.CallOption) (*ListInterfaceResponse, error) {
	out := new(ListInterfaceResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/ListInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetHTTPServices(ctx context.Context, in *GetHTTPServicesRequest, opts ...grpc.CallOption) (*GetHTTPServicesResponse, error) {
	out := new(GetHTTPServicesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetHTTPServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) EnableHTTPService(ctx context.Context, in *EnableHTTPServiceRequest, opts ...grpc.CallOption) (*EnableHTTPServiceResponse, error) {
	out := new(EnableHTTPServiceResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/EnableHTTPService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetServiceIpInfo(ctx context.Context, in *ServiceIpRequest, opts ...grpc.CallOption) (*ServiceIpInfoResponse, error) {
	out := new(ServiceIpInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetServiceIpInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetRouteRule(ctx context.Context, in *GetRouteRuleRequest, opts ...grpc.CallOption) (*GetRouteRuleResponse, error) {
	out := new(GetRouteRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetRouteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) CreateRouteRule(ctx context.Context, in *CreateRouteRuleRequest, opts ...grpc.CallOption) (*CreateRouteRuleResponse, error) {
	out := new(CreateRouteRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/CreateRouteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) DeleteRouteRule(ctx context.Context, in *DeleteRouteRuleRequest, opts ...grpc.CallOption) (*DeleteRouteRuleResponse, error) {
	out := new(DeleteRouteRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/DeleteRouteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetHostRule(ctx context.Context, in *CetHostRuleRequest, opts ...grpc.CallOption) (*CetHostRuleResponse, error) {
	out := new(CetHostRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetHostRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) CreateHostRule(ctx context.Context, in *CreateHostRuleRequest, opts ...grpc.CallOption) (*CreateHostRuleResponse, error) {
	out := new(CreateHostRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/CreateHostRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) DeleteHostRule(ctx context.Context, in *DeleteHostRuleRequest, opts ...grpc.CallOption) (*DeleteHostRuleResponse, error) {
	out := new(DeleteHostRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/DeleteHostRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetHostRuntimeRule(ctx context.Context, in *GetHostRuntimeRuleRequest, opts ...grpc.CallOption) (*GetHostRuntimeRuleResponse, error) {
	out := new(GetHostRuntimeRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetHostRuntimeRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) CreateHostRuntimeRule(ctx context.Context, in *CreateHostRuntimeRuleRequest, opts ...grpc.CallOption) (*CreateHostRuntimeRuleResponse, error) {
	out := new(CreateHostRuntimeRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/CreateHostRuntimeRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetAllHostRuntimeRules(ctx context.Context, in *GetAllHostRuntimeRulesRequest, opts ...grpc.CallOption) (*GetAllHostRuntimeRulesResponse, error) {
	out := new(GetAllHostRuntimeRulesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetAllHostRuntimeRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetDubboInterfaceTime(ctx context.Context, in *GetDubboInterfaceTimeRequest, opts ...grpc.CallOption) (*GetDubboInterfaceTimeResponse, error) {
	out := new(GetDubboInterfaceTimeResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetDubboInterfaceQPS(ctx context.Context, in *GetDubboInterfaceQPSRequest, opts ...grpc.CallOption) (*GetDubboInterfaceQPSResponse, error) {
	out := new(GetDubboInterfaceQPSResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceQPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetDubboInterfaceFailed(ctx context.Context, in *GetDubboInterfaceFailedRequest, opts ...grpc.CallOption) (*GetDubboInterfaceFailedResponse, error) {
	out := new(GetDubboInterfaceFailedResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerCenterServiceClient) GetDubboInterfaceAvgTime(ctx context.Context, in *GetDubboInterfaceAvgTimeRequest, opts ...grpc.CallOption) (*GetDubboInterfaceAvgTimeResponse, error) {
	out := new(GetDubboInterfaceAvgTimeResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceAvgTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterCenterServiceServer is the server API for RegisterCenterService service.
// All implementations should embed UnimplementedRegisterCenterServiceServer
// for forward compatibility
type RegisterCenterServiceServer interface {
	ListInterface(context.Context, *ListInterfaceRequest) (*ListInterfaceResponse, error)
	GetHTTPServices(context.Context, *GetHTTPServicesRequest) (*GetHTTPServicesResponse, error)
	EnableHTTPService(context.Context, *EnableHTTPServiceRequest) (*EnableHTTPServiceResponse, error)
	GetServiceIpInfo(context.Context, *ServiceIpRequest) (*ServiceIpInfoResponse, error)
	// +depracated
	GetRouteRule(context.Context, *GetRouteRuleRequest) (*GetRouteRuleResponse, error)
	// +depracated
	CreateRouteRule(context.Context, *CreateRouteRuleRequest) (*CreateRouteRuleResponse, error)
	// +depracated
	DeleteRouteRule(context.Context, *DeleteRouteRuleRequest) (*DeleteRouteRuleResponse, error)
	// +depracated
	GetHostRule(context.Context, *CetHostRuleRequest) (*CetHostRuleResponse, error)
	// +depracated
	CreateHostRule(context.Context, *CreateHostRuleRequest) (*CreateHostRuleResponse, error)
	// +depracated
	DeleteHostRule(context.Context, *DeleteHostRuleRequest) (*DeleteHostRuleResponse, error)
	// +depracated
	GetHostRuntimeRule(context.Context, *GetHostRuntimeRuleRequest) (*GetHostRuntimeRuleResponse, error)
	// +depracated
	CreateHostRuntimeRule(context.Context, *CreateHostRuntimeRuleRequest) (*CreateHostRuntimeRuleResponse, error)
	// +depracated
	GetAllHostRuntimeRules(context.Context, *GetAllHostRuntimeRulesRequest) (*GetAllHostRuntimeRulesResponse, error)
	// +depracated
	GetDubboInterfaceTime(context.Context, *GetDubboInterfaceTimeRequest) (*GetDubboInterfaceTimeResponse, error)
	// +depracated
	GetDubboInterfaceQPS(context.Context, *GetDubboInterfaceQPSRequest) (*GetDubboInterfaceQPSResponse, error)
	// +depracated
	GetDubboInterfaceFailed(context.Context, *GetDubboInterfaceFailedRequest) (*GetDubboInterfaceFailedResponse, error)
	// +depracated
	GetDubboInterfaceAvgTime(context.Context, *GetDubboInterfaceAvgTimeRequest) (*GetDubboInterfaceAvgTimeResponse, error)
}

// UnimplementedRegisterCenterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRegisterCenterServiceServer struct {
}

func (*UnimplementedRegisterCenterServiceServer) ListInterface(context.Context, *ListInterfaceRequest) (*ListInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterface not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetHTTPServices(context.Context, *GetHTTPServicesRequest) (*GetHTTPServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHTTPServices not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) EnableHTTPService(context.Context, *EnableHTTPServiceRequest) (*EnableHTTPServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHTTPService not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetServiceIpInfo(context.Context, *ServiceIpRequest) (*ServiceIpInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceIpInfo not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetRouteRule(context.Context, *GetRouteRuleRequest) (*GetRouteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) CreateRouteRule(context.Context, *CreateRouteRuleRequest) (*CreateRouteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) DeleteRouteRule(context.Context, *DeleteRouteRuleRequest) (*DeleteRouteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetHostRule(context.Context, *CetHostRuleRequest) (*CetHostRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) CreateHostRule(context.Context, *CreateHostRuleRequest) (*CreateHostRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) DeleteHostRule(context.Context, *DeleteHostRuleRequest) (*DeleteHostRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetHostRuntimeRule(context.Context, *GetHostRuntimeRuleRequest) (*GetHostRuntimeRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRuntimeRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) CreateHostRuntimeRule(context.Context, *CreateHostRuntimeRuleRequest) (*CreateHostRuntimeRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostRuntimeRule not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetAllHostRuntimeRules(context.Context, *GetAllHostRuntimeRulesRequest) (*GetAllHostRuntimeRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHostRuntimeRules not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetDubboInterfaceTime(context.Context, *GetDubboInterfaceTimeRequest) (*GetDubboInterfaceTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDubboInterfaceTime not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetDubboInterfaceQPS(context.Context, *GetDubboInterfaceQPSRequest) (*GetDubboInterfaceQPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDubboInterfaceQPS not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetDubboInterfaceFailed(context.Context, *GetDubboInterfaceFailedRequest) (*GetDubboInterfaceFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDubboInterfaceFailed not implemented")
}
func (*UnimplementedRegisterCenterServiceServer) GetDubboInterfaceAvgTime(context.Context, *GetDubboInterfaceAvgTimeRequest) (*GetDubboInterfaceAvgTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDubboInterfaceAvgTime not implemented")
}

func RegisterRegisterCenterServiceServer(s grpc1.ServiceRegistrar, srv RegisterCenterServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_RegisterCenterService_serviceDesc(srv, opts...), srv)
}

var _RegisterCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.registercenter.RegisterCenterService",
	HandlerType: (*RegisterCenterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "registercenter.proto",
}

func _get_RegisterCenterService_serviceDesc(srv RegisterCenterServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_RegisterCenterService_ListInterface_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListInterface(ctx, req.(*ListInterfaceRequest))
	}
	var _RegisterCenterService_ListInterface_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_ListInterface_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "ListInterface", srv)
		_RegisterCenterService_ListInterface_Handler = h.Interceptor(_RegisterCenterService_ListInterface_Handler)
	}

	_RegisterCenterService_GetHTTPServices_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetHTTPServices(ctx, req.(*GetHTTPServicesRequest))
	}
	var _RegisterCenterService_GetHTTPServices_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetHTTPServices_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetHTTPServices", srv)
		_RegisterCenterService_GetHTTPServices_Handler = h.Interceptor(_RegisterCenterService_GetHTTPServices_Handler)
	}

	_RegisterCenterService_EnableHTTPService_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EnableHTTPService(ctx, req.(*EnableHTTPServiceRequest))
	}
	var _RegisterCenterService_EnableHTTPService_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_EnableHTTPService_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "EnableHTTPService", srv)
		_RegisterCenterService_EnableHTTPService_Handler = h.Interceptor(_RegisterCenterService_EnableHTTPService_Handler)
	}

	_RegisterCenterService_GetServiceIpInfo_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetServiceIpInfo(ctx, req.(*ServiceIpRequest))
	}
	var _RegisterCenterService_GetServiceIpInfo_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetServiceIpInfo_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetServiceIpInfo", srv)
		_RegisterCenterService_GetServiceIpInfo_Handler = h.Interceptor(_RegisterCenterService_GetServiceIpInfo_Handler)
	}

	_RegisterCenterService_GetRouteRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRouteRule(ctx, req.(*GetRouteRuleRequest))
	}
	var _RegisterCenterService_GetRouteRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetRouteRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetRouteRule", srv)
		_RegisterCenterService_GetRouteRule_Handler = h.Interceptor(_RegisterCenterService_GetRouteRule_Handler)
	}

	_RegisterCenterService_CreateRouteRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateRouteRule(ctx, req.(*CreateRouteRuleRequest))
	}
	var _RegisterCenterService_CreateRouteRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_CreateRouteRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "CreateRouteRule", srv)
		_RegisterCenterService_CreateRouteRule_Handler = h.Interceptor(_RegisterCenterService_CreateRouteRule_Handler)
	}

	_RegisterCenterService_DeleteRouteRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteRouteRule(ctx, req.(*DeleteRouteRuleRequest))
	}
	var _RegisterCenterService_DeleteRouteRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_DeleteRouteRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "DeleteRouteRule", srv)
		_RegisterCenterService_DeleteRouteRule_Handler = h.Interceptor(_RegisterCenterService_DeleteRouteRule_Handler)
	}

	_RegisterCenterService_GetHostRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetHostRule(ctx, req.(*CetHostRuleRequest))
	}
	var _RegisterCenterService_GetHostRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetHostRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetHostRule", srv)
		_RegisterCenterService_GetHostRule_Handler = h.Interceptor(_RegisterCenterService_GetHostRule_Handler)
	}

	_RegisterCenterService_CreateHostRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateHostRule(ctx, req.(*CreateHostRuleRequest))
	}
	var _RegisterCenterService_CreateHostRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_CreateHostRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "CreateHostRule", srv)
		_RegisterCenterService_CreateHostRule_Handler = h.Interceptor(_RegisterCenterService_CreateHostRule_Handler)
	}

	_RegisterCenterService_DeleteHostRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteHostRule(ctx, req.(*DeleteHostRuleRequest))
	}
	var _RegisterCenterService_DeleteHostRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_DeleteHostRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "DeleteHostRule", srv)
		_RegisterCenterService_DeleteHostRule_Handler = h.Interceptor(_RegisterCenterService_DeleteHostRule_Handler)
	}

	_RegisterCenterService_GetHostRuntimeRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetHostRuntimeRule(ctx, req.(*GetHostRuntimeRuleRequest))
	}
	var _RegisterCenterService_GetHostRuntimeRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetHostRuntimeRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetHostRuntimeRule", srv)
		_RegisterCenterService_GetHostRuntimeRule_Handler = h.Interceptor(_RegisterCenterService_GetHostRuntimeRule_Handler)
	}

	_RegisterCenterService_CreateHostRuntimeRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateHostRuntimeRule(ctx, req.(*CreateHostRuntimeRuleRequest))
	}
	var _RegisterCenterService_CreateHostRuntimeRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_CreateHostRuntimeRule_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "CreateHostRuntimeRule", srv)
		_RegisterCenterService_CreateHostRuntimeRule_Handler = h.Interceptor(_RegisterCenterService_CreateHostRuntimeRule_Handler)
	}

	_RegisterCenterService_GetAllHostRuntimeRules_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAllHostRuntimeRules(ctx, req.(*GetAllHostRuntimeRulesRequest))
	}
	var _RegisterCenterService_GetAllHostRuntimeRules_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetAllHostRuntimeRules_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetAllHostRuntimeRules", srv)
		_RegisterCenterService_GetAllHostRuntimeRules_Handler = h.Interceptor(_RegisterCenterService_GetAllHostRuntimeRules_Handler)
	}

	_RegisterCenterService_GetDubboInterfaceTime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDubboInterfaceTime(ctx, req.(*GetDubboInterfaceTimeRequest))
	}
	var _RegisterCenterService_GetDubboInterfaceTime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetDubboInterfaceTime_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetDubboInterfaceTime", srv)
		_RegisterCenterService_GetDubboInterfaceTime_Handler = h.Interceptor(_RegisterCenterService_GetDubboInterfaceTime_Handler)
	}

	_RegisterCenterService_GetDubboInterfaceQPS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDubboInterfaceQPS(ctx, req.(*GetDubboInterfaceQPSRequest))
	}
	var _RegisterCenterService_GetDubboInterfaceQPS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetDubboInterfaceQPS_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetDubboInterfaceQPS", srv)
		_RegisterCenterService_GetDubboInterfaceQPS_Handler = h.Interceptor(_RegisterCenterService_GetDubboInterfaceQPS_Handler)
	}

	_RegisterCenterService_GetDubboInterfaceFailed_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDubboInterfaceFailed(ctx, req.(*GetDubboInterfaceFailedRequest))
	}
	var _RegisterCenterService_GetDubboInterfaceFailed_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetDubboInterfaceFailed_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetDubboInterfaceFailed", srv)
		_RegisterCenterService_GetDubboInterfaceFailed_Handler = h.Interceptor(_RegisterCenterService_GetDubboInterfaceFailed_Handler)
	}

	_RegisterCenterService_GetDubboInterfaceAvgTime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDubboInterfaceAvgTime(ctx, req.(*GetDubboInterfaceAvgTimeRequest))
	}
	var _RegisterCenterService_GetDubboInterfaceAvgTime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RegisterCenterService_GetDubboInterfaceAvgTime_info = transport.NewServiceInfo("erda.msp.registercenter.RegisterCenterService", "GetDubboInterfaceAvgTime", srv)
		_RegisterCenterService_GetDubboInterfaceAvgTime_Handler = h.Interceptor(_RegisterCenterService_GetDubboInterfaceAvgTime_Handler)
	}

	var serviceDesc = _RegisterCenterService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListInterface",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListInterfaceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).ListInterface(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_ListInterface_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_ListInterface_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/ListInterface",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_ListInterface_Handler)
			},
		},
		{
			MethodName: "GetHTTPServices",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetHTTPServicesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetHTTPServices(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetHTTPServices_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetHTTPServices_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetHTTPServices",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetHTTPServices_Handler)
			},
		},
		{
			MethodName: "EnableHTTPService",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EnableHTTPServiceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).EnableHTTPService(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_EnableHTTPService_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_EnableHTTPService_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/EnableHTTPService",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_EnableHTTPService_Handler)
			},
		},
		{
			MethodName: "GetServiceIpInfo",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ServiceIpRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetServiceIpInfo(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetServiceIpInfo_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetServiceIpInfo_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetServiceIpInfo",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetServiceIpInfo_Handler)
			},
		},
		{
			MethodName: "GetRouteRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetRouteRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetRouteRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetRouteRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetRouteRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetRouteRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetRouteRule_Handler)
			},
		},
		{
			MethodName: "CreateRouteRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateRouteRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).CreateRouteRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_CreateRouteRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_CreateRouteRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/CreateRouteRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_CreateRouteRule_Handler)
			},
		},
		{
			MethodName: "DeleteRouteRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteRouteRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).DeleteRouteRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_DeleteRouteRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_DeleteRouteRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/DeleteRouteRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_DeleteRouteRule_Handler)
			},
		},
		{
			MethodName: "GetHostRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CetHostRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetHostRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetHostRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetHostRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetHostRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetHostRule_Handler)
			},
		},
		{
			MethodName: "CreateHostRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateHostRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).CreateHostRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_CreateHostRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_CreateHostRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/CreateHostRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_CreateHostRule_Handler)
			},
		},
		{
			MethodName: "DeleteHostRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteHostRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).DeleteHostRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_DeleteHostRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_DeleteHostRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/DeleteHostRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_DeleteHostRule_Handler)
			},
		},
		{
			MethodName: "GetHostRuntimeRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetHostRuntimeRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetHostRuntimeRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetHostRuntimeRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetHostRuntimeRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetHostRuntimeRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetHostRuntimeRule_Handler)
			},
		},
		{
			MethodName: "CreateHostRuntimeRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateHostRuntimeRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).CreateHostRuntimeRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_CreateHostRuntimeRule_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_CreateHostRuntimeRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/CreateHostRuntimeRule",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_CreateHostRuntimeRule_Handler)
			},
		},
		{
			MethodName: "GetAllHostRuntimeRules",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAllHostRuntimeRulesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetAllHostRuntimeRules(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetAllHostRuntimeRules_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetAllHostRuntimeRules_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetAllHostRuntimeRules",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetAllHostRuntimeRules_Handler)
			},
		},
		{
			MethodName: "GetDubboInterfaceTime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDubboInterfaceTimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetDubboInterfaceTime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetDubboInterfaceTime_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetDubboInterfaceTime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceTime",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetDubboInterfaceTime_Handler)
			},
		},
		{
			MethodName: "GetDubboInterfaceQPS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDubboInterfaceQPSRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetDubboInterfaceQPS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetDubboInterfaceQPS_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetDubboInterfaceQPS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceQPS",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetDubboInterfaceQPS_Handler)
			},
		},
		{
			MethodName: "GetDubboInterfaceFailed",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDubboInterfaceFailedRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetDubboInterfaceFailed(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetDubboInterfaceFailed_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetDubboInterfaceFailed_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceFailed",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetDubboInterfaceFailed_Handler)
			},
		},
		{
			MethodName: "GetDubboInterfaceAvgTime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDubboInterfaceAvgTimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RegisterCenterServiceServer).GetDubboInterfaceAvgTime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RegisterCenterService_GetDubboInterfaceAvgTime_info)
				}
				if interceptor == nil {
					return _RegisterCenterService_GetDubboInterfaceAvgTime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.registercenter.RegisterCenterService/GetDubboInterfaceAvgTime",
				}
				return interceptor(ctx, in, info, _RegisterCenterService_GetDubboInterfaceAvgTime_Handler)
			},
		},
	}
	return &serviceDesc
}
