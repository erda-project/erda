// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: configcenter.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ConfigCenterServiceClient is the client API for ConfigCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigCenterServiceClient interface {
	GetGroups(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	GetGroupProperties(ctx context.Context, in *GetGroupPropertiesRequest, opts ...grpc.CallOption) (*GetGroupPropertiesResponse, error)
	SaveGroupProperties(ctx context.Context, in *SaveGroupPropertiesRequest, opts ...grpc.CallOption) (*SaveGroupPropertiesResponse, error)
}

type configCenterServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewConfigCenterServiceClient(cc grpc1.ClientConnInterface) ConfigCenterServiceClient {
	return &configCenterServiceClient{cc}
}

func (c *configCenterServiceClient) GetGroups(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.configcenter.ConfigCenterService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configCenterServiceClient) GetGroupProperties(ctx context.Context, in *GetGroupPropertiesRequest, opts ...grpc.CallOption) (*GetGroupPropertiesResponse, error) {
	out := new(GetGroupPropertiesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.configcenter.ConfigCenterService/GetGroupProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configCenterServiceClient) SaveGroupProperties(ctx context.Context, in *SaveGroupPropertiesRequest, opts ...grpc.CallOption) (*SaveGroupPropertiesResponse, error) {
	out := new(SaveGroupPropertiesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.configcenter.ConfigCenterService/SaveGroupProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigCenterServiceServer is the server API for ConfigCenterService service.
// All implementations should embed UnimplementedConfigCenterServiceServer
// for forward compatibility
type ConfigCenterServiceServer interface {
	GetGroups(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	GetGroupProperties(context.Context, *GetGroupPropertiesRequest) (*GetGroupPropertiesResponse, error)
	SaveGroupProperties(context.Context, *SaveGroupPropertiesRequest) (*SaveGroupPropertiesResponse, error)
}

// UnimplementedConfigCenterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConfigCenterServiceServer struct {
}

func (*UnimplementedConfigCenterServiceServer) GetGroups(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (*UnimplementedConfigCenterServiceServer) GetGroupProperties(context.Context, *GetGroupPropertiesRequest) (*GetGroupPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupProperties not implemented")
}
func (*UnimplementedConfigCenterServiceServer) SaveGroupProperties(context.Context, *SaveGroupPropertiesRequest) (*SaveGroupPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroupProperties not implemented")
}

func RegisterConfigCenterServiceServer(s grpc1.ServiceRegistrar, srv ConfigCenterServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ConfigCenterService_serviceDesc(srv, opts...), srv)
}

var _ConfigCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.configcenter.ConfigCenterService",
	HandlerType: (*ConfigCenterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "configcenter.proto",
}

func _get_ConfigCenterService_serviceDesc(srv ConfigCenterServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ConfigCenterService_GetGroups_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetGroups(ctx, req.(*GetGroupRequest))
	}
	var _ConfigCenterService_GetGroups_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ConfigCenterService_GetGroups_info = transport.NewServiceInfo("erda.msp.configcenter.ConfigCenterService", "GetGroups", srv)
		_ConfigCenterService_GetGroups_Handler = h.Interceptor(_ConfigCenterService_GetGroups_Handler)
	}

	_ConfigCenterService_GetGroupProperties_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetGroupProperties(ctx, req.(*GetGroupPropertiesRequest))
	}
	var _ConfigCenterService_GetGroupProperties_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ConfigCenterService_GetGroupProperties_info = transport.NewServiceInfo("erda.msp.configcenter.ConfigCenterService", "GetGroupProperties", srv)
		_ConfigCenterService_GetGroupProperties_Handler = h.Interceptor(_ConfigCenterService_GetGroupProperties_Handler)
	}

	_ConfigCenterService_SaveGroupProperties_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SaveGroupProperties(ctx, req.(*SaveGroupPropertiesRequest))
	}
	var _ConfigCenterService_SaveGroupProperties_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ConfigCenterService_SaveGroupProperties_info = transport.NewServiceInfo("erda.msp.configcenter.ConfigCenterService", "SaveGroupProperties", srv)
		_ConfigCenterService_SaveGroupProperties_Handler = h.Interceptor(_ConfigCenterService_SaveGroupProperties_Handler)
	}

	var serviceDesc = _ConfigCenterService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetGroupRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ConfigCenterServiceServer).GetGroups(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ConfigCenterService_GetGroups_info)
				}
				if interceptor == nil {
					return _ConfigCenterService_GetGroups_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.configcenter.ConfigCenterService/GetGroups",
				}
				return interceptor(ctx, in, info, _ConfigCenterService_GetGroups_Handler)
			},
		},
		{
			MethodName: "GetGroupProperties",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetGroupPropertiesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ConfigCenterServiceServer).GetGroupProperties(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ConfigCenterService_GetGroupProperties_info)
				}
				if interceptor == nil {
					return _ConfigCenterService_GetGroupProperties_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.configcenter.ConfigCenterService/GetGroupProperties",
				}
				return interceptor(ctx, in, info, _ConfigCenterService_GetGroupProperties_Handler)
			},
		},
		{
			MethodName: "SaveGroupProperties",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SaveGroupPropertiesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ConfigCenterServiceServer).SaveGroupProperties(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ConfigCenterService_SaveGroupProperties_info)
				}
				if interceptor == nil {
					return _ConfigCenterService_SaveGroupProperties_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.configcenter.ConfigCenterService/SaveGroupProperties",
				}
				return interceptor(ctx, in, info, _ConfigCenterService_SaveGroupProperties_Handler)
			},
		},
	}
	return &serviceDesc
}
