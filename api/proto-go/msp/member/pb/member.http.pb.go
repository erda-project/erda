// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: member.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MemberServiceHandler is the server API for MemberService service.
type MemberServiceHandler interface {
	// POST /api/msp/permission/access
	ScopeRoleAccess(context.Context, *ScopeRoleAccessRequest) (*ScopeRoleAccessResponse, error)
	// GET /api/msp/members
	ListMember(context.Context, *ListMemberRequest) (*ListMemberResponse, error)
	// POST /api/msp/members
	CreateOrUpdateMember(context.Context, *CreateOrUpdateMemberRequest) (*CreateOrUpdateMemberResponse, error)
	// POST /api/msp/members/action/remove
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	// GET /api/msp/members/action/list-roles
	ListMemberRoles(context.Context, *ListMemberRolesRequest) (*ListMemberRolesResponse, error)
}

// RegisterMemberServiceHandler register MemberServiceHandler to http.Router.
func RegisterMemberServiceHandler(r http.Router, srv MemberServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ScopeRoleAccess := func(method, path string, fn func(context.Context, *ScopeRoleAccessRequest) (*ScopeRoleAccessResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ScopeRoleAccessRequest))
		}
		var ScopeRoleAccess_info transport.ServiceInfo
		if h.Interceptor != nil {
			ScopeRoleAccess_info = transport.NewServiceInfo("erda.msp.member.MemberService", "ScopeRoleAccess", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ScopeRoleAccess_info)
				}
				r = r.WithContext(ctx)
				var in ScopeRoleAccessRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListMember := func(method, path string, fn func(context.Context, *ListMemberRequest) (*ListMemberResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListMemberRequest))
		}
		var ListMember_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListMember_info = transport.NewServiceInfo("erda.msp.member.MemberService", "ListMember", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListMember_info)
				}
				r = r.WithContext(ctx)
				var in ListMemberRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateOrUpdateMember := func(method, path string, fn func(context.Context, *CreateOrUpdateMemberRequest) (*CreateOrUpdateMemberResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateOrUpdateMemberRequest))
		}
		var CreateOrUpdateMember_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateOrUpdateMember_info = transport.NewServiceInfo("erda.msp.member.MemberService", "CreateOrUpdateMember", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateOrUpdateMember_info)
				}
				r = r.WithContext(ctx)
				var in CreateOrUpdateMemberRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteMember := func(method, path string, fn func(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteMemberRequest))
		}
		var DeleteMember_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteMember_info = transport.NewServiceInfo("erda.msp.member.MemberService", "DeleteMember", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteMember_info)
				}
				r = r.WithContext(ctx)
				var in DeleteMemberRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListMemberRoles := func(method, path string, fn func(context.Context, *ListMemberRolesRequest) (*ListMemberRolesResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListMemberRolesRequest))
		}
		var ListMemberRoles_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListMemberRoles_info = transport.NewServiceInfo("erda.msp.member.MemberService", "ListMemberRoles", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListMemberRoles_info)
				}
				r = r.WithContext(ctx)
				var in ListMemberRolesRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ScopeRoleAccess("POST", "/api/msp/permission/access", srv.ScopeRoleAccess)
	add_ListMember("GET", "/api/msp/members", srv.ListMember)
	add_CreateOrUpdateMember("POST", "/api/msp/members", srv.CreateOrUpdateMember)
	add_DeleteMember("POST", "/api/msp/members/action/remove", srv.DeleteMember)
	add_ListMemberRoles("GET", "/api/msp/members/action/list-roles", srv.ListMemberRoles)
}
