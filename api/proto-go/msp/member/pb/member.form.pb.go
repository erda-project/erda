// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: member.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ScopeRoleAccessRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Scope)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScopeRoleAccessResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScopeRoleData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScopeResource)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListMemberRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListMemberResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MemberList)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Member)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateOrUpdateMemberRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MemberAddOptions)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateOrUpdateMemberResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteMemberRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteMemberResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListMemberRolesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListMemberRolesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RoleList)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RoleInfo)(nil)

// ScopeRoleAccessRequest implement urlenc.URLValuesUnmarshaler.
func (m *ScopeRoleAccessRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
			case "scope.id":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Id = vals[0]
			case "scope.type":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Type = vals[0]
			}
		}
	}
	return nil
}

// Scope implement urlenc.URLValuesUnmarshaler.
func (m *Scope) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// ScopeRoleAccessResponse implement urlenc.URLValuesUnmarshaler.
func (m *ScopeRoleAccessResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ScopeRoleData{}
				}
			case "data.access":
				if m.Data == nil {
					m.Data = &ScopeRoleData{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Access = val
			case "data.roles":
				if m.Data == nil {
					m.Data = &ScopeRoleData{}
				}
				m.Data.Roles = vals
			case "data.exist":
				if m.Data == nil {
					m.Data = &ScopeRoleData{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.Exist = val
			case "data.contactsWhenNoPermission":
				if m.Data == nil {
					m.Data = &ScopeRoleData{}
				}
				m.Data.ContactsWhenNoPermission = vals
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// ScopeRoleData implement urlenc.URLValuesUnmarshaler.
func (m *ScopeRoleData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "access":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Access = val
			case "roles":
				m.Roles = vals
			case "exist":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Exist = val
			case "contactsWhenNoPermission":
				m.ContactsWhenNoPermission = vals
			}
		}
	}
	return nil
}

// ScopeResource implement urlenc.URLValuesUnmarshaler.
func (m *ScopeResource) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "resource":
				m.Resource = vals[0]
			case "action":
				m.Action = vals[0]
			case "resourceRole":
				m.ResourceRole = vals[0]
			}
		}
	}
	return nil
}

// ListMemberRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListMemberRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "q":
				m.Q = vals[0]
			case "roles":
				m.Roles = vals
			case "label":
				m.Label = vals
			}
		}
	}
	return nil
}

// ListMemberResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListMemberResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &MemberList{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &MemberList{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// MemberList implement urlenc.URLValuesUnmarshaler.
func (m *MemberList) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// Member implement urlenc.URLValuesUnmarshaler.
func (m *Member) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userId":
				m.UserId = vals[0]
			case "email":
				m.Email = vals[0]
			case "mobile":
				m.Mobile = vals[0]
			case "name":
				m.Name = vals[0]
			case "nick":
				m.Nick = vals[0]
			case "avatar":
				m.Avatar = vals[0]
			case "status":
				m.Status = vals[0]
			case "scope":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
			case "scope.id":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Id = vals[0]
			case "scope.type":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Type = vals[0]
			case "roles":
				m.Roles = vals
			case "labels":
				m.Labels = vals
			case "removed":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Removed = val
			case "deleted":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Deleted = val
			}
		}
	}
	return nil
}

// CreateOrUpdateMemberRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateOrUpdateMemberRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
			case "scope.id":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Id = vals[0]
			case "scope.type":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Type = vals[0]
			case "targetScopeType":
				m.TargetScopeType = vals[0]
			case "targetScopeIds":
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TargetScopeIds = list
			case "roles":
				m.Roles = vals
			case "userIds":
				m.UserIds = vals
			case "options":
				if m.Options == nil {
					m.Options = &MemberAddOptions{}
				}
			case "options.rewrite":
				if m.Options == nil {
					m.Options = &MemberAddOptions{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Options.Rewrite = val
			case "labels":
				m.Labels = vals
			case "verifyCode":
				m.VerifyCode = vals[0]
			}
		}
	}
	return nil
}

// MemberAddOptions implement urlenc.URLValuesUnmarshaler.
func (m *MemberAddOptions) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "rewrite":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Rewrite = val
			}
		}
	}
	return nil
}

// CreateOrUpdateMemberResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateOrUpdateMemberResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// DeleteMemberRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteMemberRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
			case "scope.id":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Id = vals[0]
			case "scope.type":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Type = vals[0]
			case "userIds":
				m.UserIds = vals
			case "userID":
				m.UserID = vals[0]
			case "internalClient":
				m.InternalClient = vals[0]
			}
		}
	}
	return nil
}

// DeleteMemberResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteMemberResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// ListMemberRolesRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListMemberRolesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			}
		}
	}
	return nil
}

// ListMemberRolesResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListMemberRolesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &RoleList{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &RoleList{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			}
		}
	}
	return nil
}

// RoleList implement urlenc.URLValuesUnmarshaler.
func (m *RoleList) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// RoleInfo implement urlenc.URLValuesUnmarshaler.
func (m *RoleInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "role":
				m.Role = vals[0]
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}
