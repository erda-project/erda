// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: member.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	ScopeRoleAccess(ctx context.Context, in *ScopeRoleAccessRequest, opts ...grpc.CallOption) (*ScopeRoleAccessResponse, error)
	ListMember(ctx context.Context, in *ListMemberRequest, opts ...grpc.CallOption) (*ListMemberResponse, error)
	CreateOrUpdateMember(ctx context.Context, in *CreateOrUpdateMemberRequest, opts ...grpc.CallOption) (*CreateOrUpdateMemberResponse, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	ListMemberRoles(ctx context.Context, in *ListMemberRolesRequest, opts ...grpc.CallOption) (*ListMemberRolesResponse, error)
}

type memberServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMemberServiceClient(cc grpc1.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) ScopeRoleAccess(ctx context.Context, in *ScopeRoleAccessRequest, opts ...grpc.CallOption) (*ScopeRoleAccessResponse, error) {
	out := new(ScopeRoleAccessResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.member.MemberService/ScopeRoleAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ListMember(ctx context.Context, in *ListMemberRequest, opts ...grpc.CallOption) (*ListMemberResponse, error) {
	out := new(ListMemberResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.member.MemberService/ListMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateOrUpdateMember(ctx context.Context, in *CreateOrUpdateMemberRequest, opts ...grpc.CallOption) (*CreateOrUpdateMemberResponse, error) {
	out := new(CreateOrUpdateMemberResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.member.MemberService/CreateOrUpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.member.MemberService/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ListMemberRoles(ctx context.Context, in *ListMemberRolesRequest, opts ...grpc.CallOption) (*ListMemberRolesResponse, error) {
	out := new(ListMemberRolesResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.member.MemberService/ListMemberRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations should embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	ScopeRoleAccess(context.Context, *ScopeRoleAccessRequest) (*ScopeRoleAccessResponse, error)
	ListMember(context.Context, *ListMemberRequest) (*ListMemberResponse, error)
	CreateOrUpdateMember(context.Context, *CreateOrUpdateMemberRequest) (*CreateOrUpdateMemberResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	ListMemberRoles(context.Context, *ListMemberRolesRequest) (*ListMemberRolesResponse, error)
}

// UnimplementedMemberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (*UnimplementedMemberServiceServer) ScopeRoleAccess(context.Context, *ScopeRoleAccessRequest) (*ScopeRoleAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScopeRoleAccess not implemented")
}
func (*UnimplementedMemberServiceServer) ListMember(context.Context, *ListMemberRequest) (*ListMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMember not implemented")
}
func (*UnimplementedMemberServiceServer) CreateOrUpdateMember(context.Context, *CreateOrUpdateMemberRequest) (*CreateOrUpdateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateMember not implemented")
}
func (*UnimplementedMemberServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (*UnimplementedMemberServiceServer) ListMemberRoles(context.Context, *ListMemberRolesRequest) (*ListMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberRoles not implemented")
}

func RegisterMemberServiceServer(s grpc1.ServiceRegistrar, srv MemberServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MemberService_serviceDesc(srv, opts...), srv)
}

var _MemberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.member.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "member.proto",
}

func _get_MemberService_serviceDesc(srv MemberServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MemberService_ScopeRoleAccess_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ScopeRoleAccess(ctx, req.(*ScopeRoleAccessRequest))
	}
	var _MemberService_ScopeRoleAccess_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MemberService_ScopeRoleAccess_info = transport.NewServiceInfo("erda.msp.member.MemberService", "ScopeRoleAccess", srv)
		_MemberService_ScopeRoleAccess_Handler = h.Interceptor(_MemberService_ScopeRoleAccess_Handler)
	}

	_MemberService_ListMember_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListMember(ctx, req.(*ListMemberRequest))
	}
	var _MemberService_ListMember_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MemberService_ListMember_info = transport.NewServiceInfo("erda.msp.member.MemberService", "ListMember", srv)
		_MemberService_ListMember_Handler = h.Interceptor(_MemberService_ListMember_Handler)
	}

	_MemberService_CreateOrUpdateMember_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrUpdateMember(ctx, req.(*CreateOrUpdateMemberRequest))
	}
	var _MemberService_CreateOrUpdateMember_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MemberService_CreateOrUpdateMember_info = transport.NewServiceInfo("erda.msp.member.MemberService", "CreateOrUpdateMember", srv)
		_MemberService_CreateOrUpdateMember_Handler = h.Interceptor(_MemberService_CreateOrUpdateMember_Handler)
	}

	_MemberService_DeleteMember_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	var _MemberService_DeleteMember_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MemberService_DeleteMember_info = transport.NewServiceInfo("erda.msp.member.MemberService", "DeleteMember", srv)
		_MemberService_DeleteMember_Handler = h.Interceptor(_MemberService_DeleteMember_Handler)
	}

	_MemberService_ListMemberRoles_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListMemberRoles(ctx, req.(*ListMemberRolesRequest))
	}
	var _MemberService_ListMemberRoles_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MemberService_ListMemberRoles_info = transport.NewServiceInfo("erda.msp.member.MemberService", "ListMemberRoles", srv)
		_MemberService_ListMemberRoles_Handler = h.Interceptor(_MemberService_ListMemberRoles_Handler)
	}

	var serviceDesc = _MemberService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ScopeRoleAccess",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ScopeRoleAccessRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MemberServiceServer).ScopeRoleAccess(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MemberService_ScopeRoleAccess_info)
				}
				if interceptor == nil {
					return _MemberService_ScopeRoleAccess_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.member.MemberService/ScopeRoleAccess",
				}
				return interceptor(ctx, in, info, _MemberService_ScopeRoleAccess_Handler)
			},
		},
		{
			MethodName: "ListMember",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListMemberRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MemberServiceServer).ListMember(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MemberService_ListMember_info)
				}
				if interceptor == nil {
					return _MemberService_ListMember_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.member.MemberService/ListMember",
				}
				return interceptor(ctx, in, info, _MemberService_ListMember_Handler)
			},
		},
		{
			MethodName: "CreateOrUpdateMember",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrUpdateMemberRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MemberServiceServer).CreateOrUpdateMember(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MemberService_CreateOrUpdateMember_info)
				}
				if interceptor == nil {
					return _MemberService_CreateOrUpdateMember_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.member.MemberService/CreateOrUpdateMember",
				}
				return interceptor(ctx, in, info, _MemberService_CreateOrUpdateMember_Handler)
			},
		},
		{
			MethodName: "DeleteMember",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteMemberRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MemberServiceServer).DeleteMember(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MemberService_DeleteMember_info)
				}
				if interceptor == nil {
					return _MemberService_DeleteMember_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.member.MemberService/DeleteMember",
				}
				return interceptor(ctx, in, info, _MemberService_DeleteMember_Handler)
			},
		},
		{
			MethodName: "ListMemberRoles",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListMemberRolesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MemberServiceServer).ListMemberRoles(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MemberService_ListMemberRoles_info)
				}
				if interceptor == nil {
					return _MemberService_ListMemberRoles_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.member.MemberService/ListMemberRoles",
				}
				return interceptor(ctx, in, info, _MemberService_ListMemberRoles_Handler)
			},
		},
	}
	return &serviceDesc
}
