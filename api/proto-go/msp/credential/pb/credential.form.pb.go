// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: credential.proto

package pb

import (
	base64 "encoding/base64"
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateAccessKeyRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateAccessKeyResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateAccessKeyData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteAccessKeyRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteAccessKeyResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAccessKeyRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAccessKeyResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DownloadAccessKeyFileRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DownloadAccessKeyFileResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryAccessKeysRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryAccessKeysResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryAccessKeysData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QueryAccessKeys)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AccessKeysItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SubjectTypeEnum)(nil)
var _ urlenc.URLValuesUnmarshaler = (*StatusEnum)(nil)

// CreateAccessKeyRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateAccessKeyRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "subjectType":
			case "subject":
				m.Subject = vals[0]
			case "description":
				m.Description = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			}
		}
	}
	return nil
}

// CreateAccessKeyResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateAccessKeyResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &CreateAccessKeyData{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &CreateAccessKeyData{}
				}
				m.Data.Id = vals[0]
			case "data.projectId":
				if m.Data == nil {
					m.Data = &CreateAccessKeyData{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ProjectId = val
			}
		}
	}
	return nil
}

// CreateAccessKeyData implement urlenc.URLValuesUnmarshaler.
func (m *CreateAccessKeyData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "projectId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectId = val
			}
		}
	}
	return nil
}

// DeleteAccessKeyRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteAccessKeyRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// DeleteAccessKeyResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteAccessKeyResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// GetAccessKeyRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAccessKeyRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// GetAccessKeyResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAccessKeyResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.Id = vals[0]
			case "data.accessKey":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.AccessKey = vals[0]
			case "data.secretKey":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.SecretKey = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
			case "data.subjectType":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
			case "data.subject":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.Subject = vals[0]
			case "data.description":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.Description = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
			case "data.createdAt.seconds":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Seconds = val
			case "data.createdAt.nanos":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				if m.Data.CreatedAt == nil {
					m.Data.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.CreatedAt.Nanos = int32(val)
			case "data.scope":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.Scope = vals[0]
			case "data.scopeId":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.ScopeId = vals[0]
			case "data.token":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.Token = vals[0]
			case "data.creatorId":
				if m.Data == nil {
					m.Data = &AccessKeysItem{}
				}
				m.Data.CreatorId = vals[0]
			}
		}
	}
	return nil
}

// DownloadAccessKeyFileRequest implement urlenc.URLValuesUnmarshaler.
func (m *DownloadAccessKeyFileRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// DownloadAccessKeyFileResponse implement urlenc.URLValuesUnmarshaler.
func (m *DownloadAccessKeyFileResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "content":
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Content = val
			}
		}
	}
	return nil
}

// QueryAccessKeysRequest implement urlenc.URLValuesUnmarshaler.
func (m *QueryAccessKeysRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "status":
			case "subjectType":
			case "subject":
				m.Subject = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			}
		}
	}
	return nil
}

// QueryAccessKeysResponse implement urlenc.URLValuesUnmarshaler.
func (m *QueryAccessKeysResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &QueryAccessKeysData{}
				}
			case "data.total":
				if m.Data == nil {
					m.Data = &QueryAccessKeysData{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Total = val
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// QueryAccessKeysData implement urlenc.URLValuesUnmarshaler.
func (m *QueryAccessKeysData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// QueryAccessKeys implement urlenc.URLValuesUnmarshaler.
func (m *QueryAccessKeys) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "token":
				m.Token = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "creator":
				m.Creator = vals[0]
			}
		}
	}
	return nil
}

// AccessKeysItem implement urlenc.URLValuesUnmarshaler.
func (m *AccessKeysItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "secretKey":
				m.SecretKey = vals[0]
			case "status":
			case "subjectType":
			case "subject":
				m.Subject = vals[0]
			case "description":
				m.Description = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "token":
				m.Token = vals[0]
			case "creatorId":
				m.CreatorId = vals[0]
			}
		}
	}
	return nil
}

// SubjectTypeEnum implement urlenc.URLValuesUnmarshaler.
func (m *SubjectTypeEnum) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// StatusEnum implement urlenc.URLValuesUnmarshaler.
func (m *StatusEnum) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
