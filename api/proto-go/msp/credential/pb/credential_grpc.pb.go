// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: credential.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// AccessKeyServiceClient is the client API for AccessKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessKeyServiceClient interface {
	CreateAccessKey(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*CreateAccessKeyResponse, error)
	DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyRequest, opts ...grpc.CallOption) (*DeleteAccessKeyResponse, error)
	GetAccessKey(ctx context.Context, in *GetAccessKeyRequest, opts ...grpc.CallOption) (*GetAccessKeyResponse, error)
	DownloadAccessKeyFile(ctx context.Context, in *DownloadAccessKeyFileRequest, opts ...grpc.CallOption) (*DownloadAccessKeyFileResponse, error)
	QueryAccessKeys(ctx context.Context, in *QueryAccessKeysRequest, opts ...grpc.CallOption) (*QueryAccessKeysResponse, error)
}

type accessKeyServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewAccessKeyServiceClient(cc grpc1.ClientConnInterface) AccessKeyServiceClient {
	return &accessKeyServiceClient{cc}
}

func (c *accessKeyServiceClient) CreateAccessKey(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*CreateAccessKeyResponse, error) {
	out := new(CreateAccessKeyResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.credential.AccessKeyService/CreateAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyRequest, opts ...grpc.CallOption) (*DeleteAccessKeyResponse, error) {
	out := new(DeleteAccessKeyResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.credential.AccessKeyService/DeleteAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) GetAccessKey(ctx context.Context, in *GetAccessKeyRequest, opts ...grpc.CallOption) (*GetAccessKeyResponse, error) {
	out := new(GetAccessKeyResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.credential.AccessKeyService/GetAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) DownloadAccessKeyFile(ctx context.Context, in *DownloadAccessKeyFileRequest, opts ...grpc.CallOption) (*DownloadAccessKeyFileResponse, error) {
	out := new(DownloadAccessKeyFileResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.credential.AccessKeyService/DownloadAccessKeyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) QueryAccessKeys(ctx context.Context, in *QueryAccessKeysRequest, opts ...grpc.CallOption) (*QueryAccessKeysResponse, error) {
	out := new(QueryAccessKeysResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.credential.AccessKeyService/QueryAccessKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessKeyServiceServer is the server API for AccessKeyService service.
// All implementations should embed UnimplementedAccessKeyServiceServer
// for forward compatibility
type AccessKeyServiceServer interface {
	CreateAccessKey(context.Context, *CreateAccessKeyRequest) (*CreateAccessKeyResponse, error)
	DeleteAccessKey(context.Context, *DeleteAccessKeyRequest) (*DeleteAccessKeyResponse, error)
	GetAccessKey(context.Context, *GetAccessKeyRequest) (*GetAccessKeyResponse, error)
	DownloadAccessKeyFile(context.Context, *DownloadAccessKeyFileRequest) (*DownloadAccessKeyFileResponse, error)
	QueryAccessKeys(context.Context, *QueryAccessKeysRequest) (*QueryAccessKeysResponse, error)
}

// UnimplementedAccessKeyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessKeyServiceServer struct {
}

func (*UnimplementedAccessKeyServiceServer) CreateAccessKey(context.Context, *CreateAccessKeyRequest) (*CreateAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessKey not implemented")
}
func (*UnimplementedAccessKeyServiceServer) DeleteAccessKey(context.Context, *DeleteAccessKeyRequest) (*DeleteAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessKey not implemented")
}
func (*UnimplementedAccessKeyServiceServer) GetAccessKey(context.Context, *GetAccessKeyRequest) (*GetAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessKey not implemented")
}
func (*UnimplementedAccessKeyServiceServer) DownloadAccessKeyFile(context.Context, *DownloadAccessKeyFileRequest) (*DownloadAccessKeyFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAccessKeyFile not implemented")
}
func (*UnimplementedAccessKeyServiceServer) QueryAccessKeys(context.Context, *QueryAccessKeysRequest) (*QueryAccessKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccessKeys not implemented")
}

func RegisterAccessKeyServiceServer(s grpc1.ServiceRegistrar, srv AccessKeyServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_AccessKeyService_serviceDesc(srv, opts...), srv)
}

var _AccessKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.credential.AccessKeyService",
	HandlerType: (*AccessKeyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "credential.proto",
}

func _get_AccessKeyService_serviceDesc(srv AccessKeyServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_AccessKeyService_CreateAccessKey_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAccessKey(ctx, req.(*CreateAccessKeyRequest))
	}
	var _AccessKeyService_CreateAccessKey_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AccessKeyService_CreateAccessKey_info = transport.NewServiceInfo("erda.msp.credential.AccessKeyService", "CreateAccessKey", srv)
		_AccessKeyService_CreateAccessKey_Handler = h.Interceptor(_AccessKeyService_CreateAccessKey_Handler)
	}

	_AccessKeyService_DeleteAccessKey_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAccessKey(ctx, req.(*DeleteAccessKeyRequest))
	}
	var _AccessKeyService_DeleteAccessKey_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AccessKeyService_DeleteAccessKey_info = transport.NewServiceInfo("erda.msp.credential.AccessKeyService", "DeleteAccessKey", srv)
		_AccessKeyService_DeleteAccessKey_Handler = h.Interceptor(_AccessKeyService_DeleteAccessKey_Handler)
	}

	_AccessKeyService_GetAccessKey_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAccessKey(ctx, req.(*GetAccessKeyRequest))
	}
	var _AccessKeyService_GetAccessKey_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AccessKeyService_GetAccessKey_info = transport.NewServiceInfo("erda.msp.credential.AccessKeyService", "GetAccessKey", srv)
		_AccessKeyService_GetAccessKey_Handler = h.Interceptor(_AccessKeyService_GetAccessKey_Handler)
	}

	_AccessKeyService_DownloadAccessKeyFile_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DownloadAccessKeyFile(ctx, req.(*DownloadAccessKeyFileRequest))
	}
	var _AccessKeyService_DownloadAccessKeyFile_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AccessKeyService_DownloadAccessKeyFile_info = transport.NewServiceInfo("erda.msp.credential.AccessKeyService", "DownloadAccessKeyFile", srv)
		_AccessKeyService_DownloadAccessKeyFile_Handler = h.Interceptor(_AccessKeyService_DownloadAccessKeyFile_Handler)
	}

	_AccessKeyService_QueryAccessKeys_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAccessKeys(ctx, req.(*QueryAccessKeysRequest))
	}
	var _AccessKeyService_QueryAccessKeys_info transport.ServiceInfo
	if h.Interceptor != nil {
		_AccessKeyService_QueryAccessKeys_info = transport.NewServiceInfo("erda.msp.credential.AccessKeyService", "QueryAccessKeys", srv)
		_AccessKeyService_QueryAccessKeys_Handler = h.Interceptor(_AccessKeyService_QueryAccessKeys_Handler)
	}

	var serviceDesc = _AccessKeyService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateAccessKey",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAccessKeyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AccessKeyServiceServer).CreateAccessKey(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AccessKeyService_CreateAccessKey_info)
				}
				if interceptor == nil {
					return _AccessKeyService_CreateAccessKey_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.credential.AccessKeyService/CreateAccessKey",
				}
				return interceptor(ctx, in, info, _AccessKeyService_CreateAccessKey_Handler)
			},
		},
		{
			MethodName: "DeleteAccessKey",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAccessKeyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AccessKeyServiceServer).DeleteAccessKey(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AccessKeyService_DeleteAccessKey_info)
				}
				if interceptor == nil {
					return _AccessKeyService_DeleteAccessKey_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.credential.AccessKeyService/DeleteAccessKey",
				}
				return interceptor(ctx, in, info, _AccessKeyService_DeleteAccessKey_Handler)
			},
		},
		{
			MethodName: "GetAccessKey",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAccessKeyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AccessKeyServiceServer).GetAccessKey(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AccessKeyService_GetAccessKey_info)
				}
				if interceptor == nil {
					return _AccessKeyService_GetAccessKey_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.credential.AccessKeyService/GetAccessKey",
				}
				return interceptor(ctx, in, info, _AccessKeyService_GetAccessKey_Handler)
			},
		},
		{
			MethodName: "DownloadAccessKeyFile",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DownloadAccessKeyFileRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AccessKeyServiceServer).DownloadAccessKeyFile(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AccessKeyService_DownloadAccessKeyFile_info)
				}
				if interceptor == nil {
					return _AccessKeyService_DownloadAccessKeyFile_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.credential.AccessKeyService/DownloadAccessKeyFile",
				}
				return interceptor(ctx, in, info, _AccessKeyService_DownloadAccessKeyFile_Handler)
			},
		},
		{
			MethodName: "QueryAccessKeys",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAccessKeysRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(AccessKeyServiceServer).QueryAccessKeys(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _AccessKeyService_QueryAccessKeys_info)
				}
				if interceptor == nil {
					return _AccessKeyService_QueryAccessKeys_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.credential.AccessKeyService/QueryAccessKeys",
				}
				return interceptor(ctx, in, info, _AccessKeyService_QueryAccessKeys_Handler)
			},
		},
	}
	return &serviceDesc
}
