// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: project.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/msp/tenant/project/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ProjectService project.proto
	ProjectService() pb.ProjectServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		projectService: pb.NewProjectServiceClient(cc),
	}
}

type serviceClients struct {
	projectService pb.ProjectServiceClient
}

func (c *serviceClients) ProjectService() pb.ProjectServiceClient {
	return c.projectService
}

type projectServiceWrapper struct {
	client pb.ProjectServiceClient
	opts   []grpc1.CallOption
}

func (s *projectServiceWrapper) GetProjects(ctx context.Context, req *pb.GetProjectsRequest) (*pb.GetProjectsResponse, error) {
	return s.client.GetProjects(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) GetProjectsTenantsIDs(ctx context.Context, req *pb.GetProjectsTenantsIDsRequest) (*pb.GetProjectsTenantsIDsResponse, error) {
	return s.client.GetProjectsTenantsIDs(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) CreateProject(ctx context.Context, req *pb.CreateProjectRequest) (*pb.CreateProjectResponse, error) {
	return s.client.CreateProject(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) UpdateProject(ctx context.Context, req *pb.UpdateProjectRequest) (*pb.UpdateProjectResponse, error) {
	return s.client.UpdateProject(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) DeleteProject(ctx context.Context, req *pb.DeleteProjectRequest) (*pb.DeleteProjectResponse, error) {
	return s.client.DeleteProject(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) GetProject(ctx context.Context, req *pb.GetProjectRequest) (*pb.GetProjectResponse, error) {
	return s.client.GetProject(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) GetProjectOverview(ctx context.Context, req *pb.GetProjectOverviewRequest) (*pb.GetProjectOverviewResponse, error) {
	return s.client.GetProjectOverview(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *projectServiceWrapper) GetProjectStatistics(ctx context.Context, req *pb.GetProjectStatisticsRequest) (*pb.GetProjectStatisticsResponse, error) {
	return s.client.GetProjectStatistics(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
