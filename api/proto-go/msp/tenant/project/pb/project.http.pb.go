// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: project.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// ProjectServiceHandler is the server API for ProjectService service.
type ProjectServiceHandler interface {
	// GET /api/msp/tenant/projects
	GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)
	// GET /api/msp/tenant/projects/tenants/ids
	GetProjectsTenantsIDs(context.Context, *GetProjectsTenantsIDsRequest) (*GetProjectsTenantsIDsResponse, error)
	// POST /api/msp/tenant/project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// PUT /api/msp/tenant/project
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// DELETE /api/msp/tenant/project
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// GET /api/msp/tenant/project
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// GET /api/msp/tenant/project/overview
	GetProjectOverview(context.Context, *GetProjectOverviewRequest) (*GetProjectOverviewResponse, error)
	// POST /api/msp/tenant/project/statistics
	GetProjectStatistics(context.Context, *GetProjectStatisticsRequest) (*GetProjectStatisticsResponse, error)
}

// RegisterProjectServiceHandler register ProjectServiceHandler to http.Router.
func RegisterProjectServiceHandler(r http.Router, srv ProjectServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GetProjects := func(method, path string, fn func(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetProjectsRequest))
		}
		var GetProjects_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetProjects_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjects", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetProjects_info)
				}
				r = r.WithContext(ctx)
				var in GetProjectsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetProjectsTenantsIDs := func(method, path string, fn func(context.Context, *GetProjectsTenantsIDsRequest) (*GetProjectsTenantsIDsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetProjectsTenantsIDsRequest))
		}
		var GetProjectsTenantsIDs_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetProjectsTenantsIDs_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjectsTenantsIDs", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetProjectsTenantsIDs_info)
				}
				r = r.WithContext(ctx)
				var in GetProjectsTenantsIDsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreateProject := func(method, path string, fn func(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreateProjectRequest))
		}
		var CreateProject_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreateProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "CreateProject", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreateProject_info)
				}
				r = r.WithContext(ctx)
				var in CreateProjectRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateProject := func(method, path string, fn func(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateProjectRequest))
		}
		var UpdateProject_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "UpdateProject", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateProject_info)
				}
				r = r.WithContext(ctx)
				var in UpdateProjectRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeleteProject := func(method, path string, fn func(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeleteProjectRequest))
		}
		var DeleteProject_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeleteProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "DeleteProject", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeleteProject_info)
				}
				r = r.WithContext(ctx)
				var in DeleteProjectRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetProject := func(method, path string, fn func(context.Context, *GetProjectRequest) (*GetProjectResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetProjectRequest))
		}
		var GetProject_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProject", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetProject_info)
				}
				r = r.WithContext(ctx)
				var in GetProjectRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["projectId"]; len(vals) > 0 {
					in.ProjectID = vals[0]
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetProjectOverview := func(method, path string, fn func(context.Context, *GetProjectOverviewRequest) (*GetProjectOverviewResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetProjectOverviewRequest))
		}
		var GetProjectOverview_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetProjectOverview_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjectOverview", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetProjectOverview_info)
				}
				r = r.WithContext(ctx)
				var in GetProjectOverviewRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetProjectStatistics := func(method, path string, fn func(context.Context, *GetProjectStatisticsRequest) (*GetProjectStatisticsResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetProjectStatisticsRequest))
		}
		var GetProjectStatistics_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetProjectStatistics_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjectStatistics", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetProjectStatistics_info)
				}
				r = r.WithContext(ctx)
				var in GetProjectStatisticsRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetProjects("GET", "/api/msp/tenant/projects", srv.GetProjects)
	add_GetProjectsTenantsIDs("GET", "/api/msp/tenant/projects/tenants/ids", srv.GetProjectsTenantsIDs)
	add_CreateProject("POST", "/api/msp/tenant/project", srv.CreateProject)
	add_UpdateProject("PUT", "/api/msp/tenant/project", srv.UpdateProject)
	add_DeleteProject("DELETE", "/api/msp/tenant/project", srv.DeleteProject)
	add_GetProject("GET", "/api/msp/tenant/project", srv.GetProject)
	add_GetProjectOverview("GET", "/api/msp/tenant/project/overview", srv.GetProjectOverview)
	add_GetProjectStatistics("POST", "/api/msp/tenant/project/statistics", srv.GetProjectStatistics)
}
