// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: project.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetProjectStatisticsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectStatisticsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ProjectStatistics)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectOverviewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectOverviewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ProjectOverviewList)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ProjectOverview)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectsTenantsIDsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectsTenantsIDsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteProjectRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteProjectResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateProjectRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateProjectResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateProjectRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateProjectResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Project)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TenantRelationship)(nil)

// GetProjectStatisticsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectStatisticsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectIds":
				m.ProjectIds = vals
			}
		}
	}
	return nil
}

// GetProjectStatisticsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectStatisticsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ProjectStatistics implement urlenc.URLValuesUnmarshaler.
func (m *ProjectStatistics) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "serviceCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ServiceCount = val
			case "last24hAlertCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Last24HAlertCount = val
			case "lastActiveTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.LastActiveTime = val
			}
		}
	}
	return nil
}

// GetProjectOverviewRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectOverviewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals
			}
		}
	}
	return nil
}

// GetProjectOverviewResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectOverviewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ProjectOverviewList{}
				}
			}
		}
	}
	return nil
}

// ProjectOverviewList implement urlenc.URLValuesUnmarshaler.
func (m *ProjectOverviewList) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ProjectOverview implement urlenc.URLValuesUnmarshaler.
func (m *ProjectOverview) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectCount = val
			case "workspaceCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.WorkspaceCount = val
			}
		}
	}
	return nil
}

// GetProjectRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				m.ProjectID = vals[0]
			}
		}
	}
	return nil
}

// GetProjectResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Project{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Id = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Name = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Type = vals[0]
			case "data.createTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreateTime = val
			case "data.updateTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdateTime = val
			case "data.isDeleted":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsDeleted = val
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.DisplayName = vals[0]
			case "data.displayType":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.DisplayType = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Logo = vals[0]
			case "data.serviceCount":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ServiceCount = val
			case "data.last24hAlertCount":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Last24HAlertCount = val
			case "data.lastActiveTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.LastActiveTime = val
			}
		}
	}
	return nil
}

// GetProjectsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals
			case "withStats":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.WithStats = val
			}
		}
	}
	return nil
}

// GetProjectsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetProjectsTenantsIDsRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectsTenantsIDsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals
			}
		}
	}
	return nil
}

// GetProjectsTenantsIDsResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectsTenantsIDsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals
			}
		}
	}
	return nil
}

// DeleteProjectRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteProjectRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectId":
				m.ProjectId = vals[0]
			}
		}
	}
	return nil
}

// DeleteProjectResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteProjectResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CreateProjectRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateProjectRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// CreateProjectResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateProjectResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Project{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Id = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Name = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Type = vals[0]
			case "data.createTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreateTime = val
			case "data.updateTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdateTime = val
			case "data.isDeleted":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsDeleted = val
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.DisplayName = vals[0]
			case "data.displayType":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.DisplayType = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Logo = vals[0]
			case "data.serviceCount":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ServiceCount = val
			case "data.last24hAlertCount":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Last24HAlertCount = val
			case "data.lastActiveTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.LastActiveTime = val
			}
		}
	}
	return nil
}

// UpdateProjectRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateProjectRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// UpdateProjectResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateProjectResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &Project{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Id = vals[0]
			case "data.name":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Name = vals[0]
			case "data.type":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Type = vals[0]
			case "data.createTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.CreateTime = val
			case "data.updateTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.UpdateTime = val
			case "data.isDeleted":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data.IsDeleted = val
			case "data.displayName":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.DisplayName = vals[0]
			case "data.displayType":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.DisplayType = vals[0]
			case "data.desc":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Desc = vals[0]
			case "data.logo":
				if m.Data == nil {
					m.Data = &Project{}
				}
				m.Data.Logo = vals[0]
			case "data.serviceCount":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ServiceCount = val
			case "data.last24hAlertCount":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Last24HAlertCount = val
			case "data.lastActiveTime":
				if m.Data == nil {
					m.Data = &Project{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.LastActiveTime = val
			}
		}
	}
	return nil
}

// Project implement urlenc.URLValuesUnmarshaler.
func (m *Project) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "type":
				m.Type = vals[0]
			case "createTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateTime = val
			case "updateTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdateTime = val
			case "isDeleted":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsDeleted = val
			case "displayName":
				m.DisplayName = vals[0]
			case "displayType":
				m.DisplayType = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "serviceCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ServiceCount = val
			case "last24hAlertCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Last24HAlertCount = val
			case "lastActiveTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.LastActiveTime = val
			}
		}
	}
	return nil
}

// TenantRelationship implement urlenc.URLValuesUnmarshaler.
func (m *TenantRelationship) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "workspace":
				m.Workspace = vals[0]
			case "tenantID":
				m.TenantID = vals[0]
			case "displayWorkspace":
				m.DisplayWorkspace = vals[0]
			}
		}
	}
	return nil
}
