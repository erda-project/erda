// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: project.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	GetProjectsTenantsIDs(ctx context.Context, in *GetProjectsTenantsIDsRequest, opts ...grpc.CallOption) (*GetProjectsTenantsIDsResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	GetProjectOverview(ctx context.Context, in *GetProjectOverviewRequest, opts ...grpc.CallOption) (*GetProjectOverviewResponse, error)
	GetProjectStatistics(ctx context.Context, in *GetProjectStatisticsRequest, opts ...grpc.CallOption) (*GetProjectStatisticsResponse, error)
}

type projectServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewProjectServiceClient(cc grpc1.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectsTenantsIDs(ctx context.Context, in *GetProjectsTenantsIDsRequest, opts ...grpc.CallOption) (*GetProjectsTenantsIDsResponse, error) {
	out := new(GetProjectsTenantsIDsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/GetProjectsTenantsIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectOverview(ctx context.Context, in *GetProjectOverviewRequest, opts ...grpc.CallOption) (*GetProjectOverviewResponse, error) {
	out := new(GetProjectOverviewResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/GetProjectOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectStatistics(ctx context.Context, in *GetProjectStatisticsRequest, opts ...grpc.CallOption) (*GetProjectStatisticsResponse, error) {
	out := new(GetProjectStatisticsResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.tenant.project.ProjectService/GetProjectStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations should embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)
	GetProjectsTenantsIDs(context.Context, *GetProjectsTenantsIDsRequest) (*GetProjectsTenantsIDsResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	GetProjectOverview(context.Context, *GetProjectOverviewRequest) (*GetProjectOverviewResponse, error)
	GetProjectStatistics(context.Context, *GetProjectStatisticsRequest) (*GetProjectStatisticsResponse, error)
}

// UnimplementedProjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (*UnimplementedProjectServiceServer) GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (*UnimplementedProjectServiceServer) GetProjectsTenantsIDs(context.Context, *GetProjectsTenantsIDsRequest) (*GetProjectsTenantsIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsTenantsIDs not implemented")
}
func (*UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedProjectServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedProjectServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedProjectServiceServer) GetProjectOverview(context.Context, *GetProjectOverviewRequest) (*GetProjectOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectOverview not implemented")
}
func (*UnimplementedProjectServiceServer) GetProjectStatistics(context.Context, *GetProjectStatisticsRequest) (*GetProjectStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectStatistics not implemented")
}

func RegisterProjectServiceServer(s grpc1.ServiceRegistrar, srv ProjectServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ProjectService_serviceDesc(srv, opts...), srv)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.tenant.project.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "project.proto",
}

func _get_ProjectService_serviceDesc(srv ProjectServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ProjectService_GetProjects_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProjects(ctx, req.(*GetProjectsRequest))
	}
	var _ProjectService_GetProjects_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_GetProjects_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjects", srv)
		_ProjectService_GetProjects_Handler = h.Interceptor(_ProjectService_GetProjects_Handler)
	}

	_ProjectService_GetProjectsTenantsIDs_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProjectsTenantsIDs(ctx, req.(*GetProjectsTenantsIDsRequest))
	}
	var _ProjectService_GetProjectsTenantsIDs_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_GetProjectsTenantsIDs_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjectsTenantsIDs", srv)
		_ProjectService_GetProjectsTenantsIDs_Handler = h.Interceptor(_ProjectService_GetProjectsTenantsIDs_Handler)
	}

	_ProjectService_CreateProject_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateProject(ctx, req.(*CreateProjectRequest))
	}
	var _ProjectService_CreateProject_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_CreateProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "CreateProject", srv)
		_ProjectService_CreateProject_Handler = h.Interceptor(_ProjectService_CreateProject_Handler)
	}

	_ProjectService_UpdateProject_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	var _ProjectService_UpdateProject_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_UpdateProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "UpdateProject", srv)
		_ProjectService_UpdateProject_Handler = h.Interceptor(_ProjectService_UpdateProject_Handler)
	}

	_ProjectService_DeleteProject_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	var _ProjectService_DeleteProject_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_DeleteProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "DeleteProject", srv)
		_ProjectService_DeleteProject_Handler = h.Interceptor(_ProjectService_DeleteProject_Handler)
	}

	_ProjectService_GetProject_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProject(ctx, req.(*GetProjectRequest))
	}
	var _ProjectService_GetProject_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_GetProject_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProject", srv)
		_ProjectService_GetProject_Handler = h.Interceptor(_ProjectService_GetProject_Handler)
	}

	_ProjectService_GetProjectOverview_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProjectOverview(ctx, req.(*GetProjectOverviewRequest))
	}
	var _ProjectService_GetProjectOverview_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_GetProjectOverview_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjectOverview", srv)
		_ProjectService_GetProjectOverview_Handler = h.Interceptor(_ProjectService_GetProjectOverview_Handler)
	}

	_ProjectService_GetProjectStatistics_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProjectStatistics(ctx, req.(*GetProjectStatisticsRequest))
	}
	var _ProjectService_GetProjectStatistics_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectService_GetProjectStatistics_info = transport.NewServiceInfo("erda.msp.tenant.project.ProjectService", "GetProjectStatistics", srv)
		_ProjectService_GetProjectStatistics_Handler = h.Interceptor(_ProjectService_GetProjectStatistics_Handler)
	}

	var serviceDesc = _ProjectService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetProjects",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).GetProjects(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_GetProjects_info)
				}
				if interceptor == nil {
					return _ProjectService_GetProjects_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/GetProjects",
				}
				return interceptor(ctx, in, info, _ProjectService_GetProjects_Handler)
			},
		},
		{
			MethodName: "GetProjectsTenantsIDs",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectsTenantsIDsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).GetProjectsTenantsIDs(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_GetProjectsTenantsIDs_info)
				}
				if interceptor == nil {
					return _ProjectService_GetProjectsTenantsIDs_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/GetProjectsTenantsIDs",
				}
				return interceptor(ctx, in, info, _ProjectService_GetProjectsTenantsIDs_Handler)
			},
		},
		{
			MethodName: "CreateProject",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateProjectRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).CreateProject(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_CreateProject_info)
				}
				if interceptor == nil {
					return _ProjectService_CreateProject_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/CreateProject",
				}
				return interceptor(ctx, in, info, _ProjectService_CreateProject_Handler)
			},
		},
		{
			MethodName: "UpdateProject",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateProjectRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).UpdateProject(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_UpdateProject_info)
				}
				if interceptor == nil {
					return _ProjectService_UpdateProject_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/UpdateProject",
				}
				return interceptor(ctx, in, info, _ProjectService_UpdateProject_Handler)
			},
		},
		{
			MethodName: "DeleteProject",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteProjectRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).DeleteProject(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_DeleteProject_info)
				}
				if interceptor == nil {
					return _ProjectService_DeleteProject_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/DeleteProject",
				}
				return interceptor(ctx, in, info, _ProjectService_DeleteProject_Handler)
			},
		},
		{
			MethodName: "GetProject",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).GetProject(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_GetProject_info)
				}
				if interceptor == nil {
					return _ProjectService_GetProject_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/GetProject",
				}
				return interceptor(ctx, in, info, _ProjectService_GetProject_Handler)
			},
		},
		{
			MethodName: "GetProjectOverview",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectOverviewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).GetProjectOverview(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_GetProjectOverview_info)
				}
				if interceptor == nil {
					return _ProjectService_GetProjectOverview_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/GetProjectOverview",
				}
				return interceptor(ctx, in, info, _ProjectService_GetProjectOverview_Handler)
			},
		},
		{
			MethodName: "GetProjectStatistics",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectStatisticsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectServiceServer).GetProjectStatistics(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectService_GetProjectStatistics_info)
				}
				if interceptor == nil {
					return _ProjectService_GetProjectStatistics_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.tenant.project.ProjectService/GetProjectStatistics",
				}
				return interceptor(ctx, in, info, _ProjectService_GetProjectStatistics_Handler)
			},
		},
	}
	return &serviceDesc
}
