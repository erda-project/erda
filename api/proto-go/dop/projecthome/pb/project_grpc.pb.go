// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: project.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ProjectHomeServiceClient is the client API for ProjectHomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectHomeServiceClient interface {
	GetProjectHome(ctx context.Context, in *GetProjectHomeRequest, opts ...grpc.CallOption) (*GetProjectHomeResponse, error)
	CreateOrUpdateProjectHome(ctx context.Context, in *CreateOrUpdateProjectHomeRequest, opts ...grpc.CallOption) (*CreateOrUpdateProjectHomeResponse, error)
}

type projectHomeServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewProjectHomeServiceClient(cc grpc1.ClientConnInterface) ProjectHomeServiceClient {
	return &projectHomeServiceClient{cc}
}

func (c *projectHomeServiceClient) GetProjectHome(ctx context.Context, in *GetProjectHomeRequest, opts ...grpc.CallOption) (*GetProjectHomeResponse, error) {
	out := new(GetProjectHomeResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.projecthome.ProjectHomeService/GetProjectHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectHomeServiceClient) CreateOrUpdateProjectHome(ctx context.Context, in *CreateOrUpdateProjectHomeRequest, opts ...grpc.CallOption) (*CreateOrUpdateProjectHomeResponse, error) {
	out := new(CreateOrUpdateProjectHomeResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.projecthome.ProjectHomeService/CreateOrUpdateProjectHome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectHomeServiceServer is the server API for ProjectHomeService service.
// All implementations should embed UnimplementedProjectHomeServiceServer
// for forward compatibility
type ProjectHomeServiceServer interface {
	GetProjectHome(context.Context, *GetProjectHomeRequest) (*GetProjectHomeResponse, error)
	CreateOrUpdateProjectHome(context.Context, *CreateOrUpdateProjectHomeRequest) (*CreateOrUpdateProjectHomeResponse, error)
}

// UnimplementedProjectHomeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectHomeServiceServer struct {
}

func (*UnimplementedProjectHomeServiceServer) GetProjectHome(context.Context, *GetProjectHomeRequest) (*GetProjectHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectHome not implemented")
}
func (*UnimplementedProjectHomeServiceServer) CreateOrUpdateProjectHome(context.Context, *CreateOrUpdateProjectHomeRequest) (*CreateOrUpdateProjectHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateProjectHome not implemented")
}

func RegisterProjectHomeServiceServer(s grpc1.ServiceRegistrar, srv ProjectHomeServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ProjectHomeService_serviceDesc(srv, opts...), srv)
}

var _ProjectHomeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.projecthome.ProjectHomeService",
	HandlerType: (*ProjectHomeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "project.proto",
}

func _get_ProjectHomeService_serviceDesc(srv ProjectHomeServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ProjectHomeService_GetProjectHome_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetProjectHome(ctx, req.(*GetProjectHomeRequest))
	}
	var _ProjectHomeService_GetProjectHome_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectHomeService_GetProjectHome_info = transport.NewServiceInfo("erda.dop.projecthome.ProjectHomeService", "GetProjectHome", srv)
		_ProjectHomeService_GetProjectHome_Handler = h.Interceptor(_ProjectHomeService_GetProjectHome_Handler)
	}

	_ProjectHomeService_CreateOrUpdateProjectHome_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrUpdateProjectHome(ctx, req.(*CreateOrUpdateProjectHomeRequest))
	}
	var _ProjectHomeService_CreateOrUpdateProjectHome_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ProjectHomeService_CreateOrUpdateProjectHome_info = transport.NewServiceInfo("erda.dop.projecthome.ProjectHomeService", "CreateOrUpdateProjectHome", srv)
		_ProjectHomeService_CreateOrUpdateProjectHome_Handler = h.Interceptor(_ProjectHomeService_CreateOrUpdateProjectHome_Handler)
	}

	var serviceDesc = _ProjectHomeService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetProjectHome",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetProjectHomeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectHomeServiceServer).GetProjectHome(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectHomeService_GetProjectHome_info)
				}
				if interceptor == nil {
					return _ProjectHomeService_GetProjectHome_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.projecthome.ProjectHomeService/GetProjectHome",
				}
				return interceptor(ctx, in, info, _ProjectHomeService_GetProjectHome_Handler)
			},
		},
		{
			MethodName: "CreateOrUpdateProjectHome",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrUpdateProjectHomeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ProjectHomeServiceServer).CreateOrUpdateProjectHome(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ProjectHomeService_CreateOrUpdateProjectHome_info)
				}
				if interceptor == nil {
					return _ProjectHomeService_CreateOrUpdateProjectHome_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.projecthome.ProjectHomeService/CreateOrUpdateProjectHome",
				}
				return interceptor(ctx, in, info, _ProjectHomeService_CreateOrUpdateProjectHome_Handler)
			},
		},
	}
	return &serviceDesc
}
