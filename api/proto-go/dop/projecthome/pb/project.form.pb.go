// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: project.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ProjectHome)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Link)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectHomeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetProjectHomeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateOrUpdateProjectHomeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateOrUpdateProjectHomeResponse)(nil)

// ProjectHome implement urlenc.URLValuesUnmarshaler.
func (m *ProjectHome) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "readme":
				m.Readme = vals[0]
			}
		}
	}
	return nil
}

// Link implement urlenc.URLValuesUnmarshaler.
func (m *Link) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "url":
				m.Url = vals[0]
			}
		}
	}
	return nil
}

// GetProjectHomeRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectHomeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				m.ProjectID = vals[0]
			}
		}
	}
	return nil
}

// GetProjectHomeResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetProjectHomeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ProjectHome{}
				}
			case "data.readme":
				if m.Data == nil {
					m.Data = &ProjectHome{}
				}
				m.Data.Readme = vals[0]
			}
		}
	}
	return nil
}

// CreateOrUpdateProjectHomeRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateOrUpdateProjectHomeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				m.ProjectID = vals[0]
			case "readme":
				m.Readme = vals[0]
			}
		}
	}
	return nil
}

// CreateOrUpdateProjectHomeResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateOrUpdateProjectHomeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
