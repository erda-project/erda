// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: guide.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// GuideServiceClient is the client API for GuideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuideServiceClient interface {
	CreateGuideByGittarPushHook(ctx context.Context, in *GittarPushPayloadEvent, opts ...grpc.CallOption) (*CreateGuideResponse, error)
	ListGuide(ctx context.Context, in *ListGuideRequest, opts ...grpc.CallOption) (*ListGuideResponse, error)
	ProcessGuide(ctx context.Context, in *ProcessGuideRequest, opts ...grpc.CallOption) (*ProcessGuideResponse, error)
	DeleteGuideByGittarPushHook(ctx context.Context, in *GittarPushPayloadEvent, opts ...grpc.CallOption) (*DeleteGuideResponse, error)
	CancelGuide(ctx context.Context, in *CancelGuideRequest, opts ...grpc.CallOption) (*CancelGuideResponse, error)
}

type guideServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewGuideServiceClient(cc grpc1.ClientConnInterface) GuideServiceClient {
	return &guideServiceClient{cc}
}

func (c *guideServiceClient) CreateGuideByGittarPushHook(ctx context.Context, in *GittarPushPayloadEvent, opts ...grpc.CallOption) (*CreateGuideResponse, error) {
	out := new(CreateGuideResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.guide.GuideService/CreateGuideByGittarPushHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideServiceClient) ListGuide(ctx context.Context, in *ListGuideRequest, opts ...grpc.CallOption) (*ListGuideResponse, error) {
	out := new(ListGuideResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.guide.GuideService/ListGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideServiceClient) ProcessGuide(ctx context.Context, in *ProcessGuideRequest, opts ...grpc.CallOption) (*ProcessGuideResponse, error) {
	out := new(ProcessGuideResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.guide.GuideService/ProcessGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideServiceClient) DeleteGuideByGittarPushHook(ctx context.Context, in *GittarPushPayloadEvent, opts ...grpc.CallOption) (*DeleteGuideResponse, error) {
	out := new(DeleteGuideResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.guide.GuideService/DeleteGuideByGittarPushHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideServiceClient) CancelGuide(ctx context.Context, in *CancelGuideRequest, opts ...grpc.CallOption) (*CancelGuideResponse, error) {
	out := new(CancelGuideResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.guide.GuideService/CancelGuide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuideServiceServer is the server API for GuideService service.
// All implementations should embed UnimplementedGuideServiceServer
// for forward compatibility
type GuideServiceServer interface {
	CreateGuideByGittarPushHook(context.Context, *GittarPushPayloadEvent) (*CreateGuideResponse, error)
	ListGuide(context.Context, *ListGuideRequest) (*ListGuideResponse, error)
	ProcessGuide(context.Context, *ProcessGuideRequest) (*ProcessGuideResponse, error)
	DeleteGuideByGittarPushHook(context.Context, *GittarPushPayloadEvent) (*DeleteGuideResponse, error)
	CancelGuide(context.Context, *CancelGuideRequest) (*CancelGuideResponse, error)
}

// UnimplementedGuideServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGuideServiceServer struct {
}

func (*UnimplementedGuideServiceServer) CreateGuideByGittarPushHook(context.Context, *GittarPushPayloadEvent) (*CreateGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuideByGittarPushHook not implemented")
}
func (*UnimplementedGuideServiceServer) ListGuide(context.Context, *ListGuideRequest) (*ListGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuide not implemented")
}
func (*UnimplementedGuideServiceServer) ProcessGuide(context.Context, *ProcessGuideRequest) (*ProcessGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessGuide not implemented")
}
func (*UnimplementedGuideServiceServer) DeleteGuideByGittarPushHook(context.Context, *GittarPushPayloadEvent) (*DeleteGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuideByGittarPushHook not implemented")
}
func (*UnimplementedGuideServiceServer) CancelGuide(context.Context, *CancelGuideRequest) (*CancelGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelGuide not implemented")
}

func RegisterGuideServiceServer(s grpc1.ServiceRegistrar, srv GuideServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_GuideService_serviceDesc(srv, opts...), srv)
}

var _GuideService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.guide.GuideService",
	HandlerType: (*GuideServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "guide.proto",
}

func _get_GuideService_serviceDesc(srv GuideServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_GuideService_CreateGuideByGittarPushHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateGuideByGittarPushHook(ctx, req.(*GittarPushPayloadEvent))
	}
	var _GuideService_CreateGuideByGittarPushHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GuideService_CreateGuideByGittarPushHook_info = transport.NewServiceInfo("erda.dop.guide.GuideService", "CreateGuideByGittarPushHook", srv)
		_GuideService_CreateGuideByGittarPushHook_Handler = h.Interceptor(_GuideService_CreateGuideByGittarPushHook_Handler)
	}

	_GuideService_ListGuide_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListGuide(ctx, req.(*ListGuideRequest))
	}
	var _GuideService_ListGuide_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GuideService_ListGuide_info = transport.NewServiceInfo("erda.dop.guide.GuideService", "ListGuide", srv)
		_GuideService_ListGuide_Handler = h.Interceptor(_GuideService_ListGuide_Handler)
	}

	_GuideService_ProcessGuide_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ProcessGuide(ctx, req.(*ProcessGuideRequest))
	}
	var _GuideService_ProcessGuide_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GuideService_ProcessGuide_info = transport.NewServiceInfo("erda.dop.guide.GuideService", "ProcessGuide", srv)
		_GuideService_ProcessGuide_Handler = h.Interceptor(_GuideService_ProcessGuide_Handler)
	}

	_GuideService_DeleteGuideByGittarPushHook_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteGuideByGittarPushHook(ctx, req.(*GittarPushPayloadEvent))
	}
	var _GuideService_DeleteGuideByGittarPushHook_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GuideService_DeleteGuideByGittarPushHook_info = transport.NewServiceInfo("erda.dop.guide.GuideService", "DeleteGuideByGittarPushHook", srv)
		_GuideService_DeleteGuideByGittarPushHook_Handler = h.Interceptor(_GuideService_DeleteGuideByGittarPushHook_Handler)
	}

	_GuideService_CancelGuide_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CancelGuide(ctx, req.(*CancelGuideRequest))
	}
	var _GuideService_CancelGuide_info transport.ServiceInfo
	if h.Interceptor != nil {
		_GuideService_CancelGuide_info = transport.NewServiceInfo("erda.dop.guide.GuideService", "CancelGuide", srv)
		_GuideService_CancelGuide_Handler = h.Interceptor(_GuideService_CancelGuide_Handler)
	}

	var serviceDesc = _GuideService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateGuideByGittarPushHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GittarPushPayloadEvent)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GuideServiceServer).CreateGuideByGittarPushHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GuideService_CreateGuideByGittarPushHook_info)
				}
				if interceptor == nil {
					return _GuideService_CreateGuideByGittarPushHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.guide.GuideService/CreateGuideByGittarPushHook",
				}
				return interceptor(ctx, in, info, _GuideService_CreateGuideByGittarPushHook_Handler)
			},
		},
		{
			MethodName: "ListGuide",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListGuideRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GuideServiceServer).ListGuide(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GuideService_ListGuide_info)
				}
				if interceptor == nil {
					return _GuideService_ListGuide_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.guide.GuideService/ListGuide",
				}
				return interceptor(ctx, in, info, _GuideService_ListGuide_Handler)
			},
		},
		{
			MethodName: "ProcessGuide",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProcessGuideRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GuideServiceServer).ProcessGuide(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GuideService_ProcessGuide_info)
				}
				if interceptor == nil {
					return _GuideService_ProcessGuide_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.guide.GuideService/ProcessGuide",
				}
				return interceptor(ctx, in, info, _GuideService_ProcessGuide_Handler)
			},
		},
		{
			MethodName: "DeleteGuideByGittarPushHook",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GittarPushPayloadEvent)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GuideServiceServer).DeleteGuideByGittarPushHook(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GuideService_DeleteGuideByGittarPushHook_info)
				}
				if interceptor == nil {
					return _GuideService_DeleteGuideByGittarPushHook_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.guide.GuideService/DeleteGuideByGittarPushHook",
				}
				return interceptor(ctx, in, info, _GuideService_DeleteGuideByGittarPushHook_Handler)
			},
		},
		{
			MethodName: "CancelGuide",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CancelGuideRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(GuideServiceServer).CancelGuide(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _GuideService_CancelGuide_info)
				}
				if interceptor == nil {
					return _GuideService_CancelGuide_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.guide.GuideService/CancelGuide",
				}
				return interceptor(ctx, in, info, _GuideService_CancelGuide_Handler)
			},
		},
	}
	return &serviceDesc
}
