// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: cicdcms.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// CICDCmsServiceClient is the client API for CICDCmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CICDCmsServiceClient interface {
	CICDCmsUpdate(ctx context.Context, in *CICDCmsUpdateRequest, opts ...grpc.CallOption) (*CICDCmsUpdateResponse, error)
	CICDCmsCreate(ctx context.Context, in *CICDCmsCreateRequest, opts ...grpc.CallOption) (*CICDCmsCreateResponse, error)
	CICDCmsDelete(ctx context.Context, in *CICDCmsDeleteRequest, opts ...grpc.CallOption) (*CICDCmsDeleteResponse, error)
}

type cICDCmsServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewCICDCmsServiceClient(cc grpc1.ClientConnInterface) CICDCmsServiceClient {
	return &cICDCmsServiceClient{cc}
}

func (c *cICDCmsServiceClient) CICDCmsUpdate(ctx context.Context, in *CICDCmsUpdateRequest, opts ...grpc.CallOption) (*CICDCmsUpdateResponse, error) {
	out := new(CICDCmsUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.cms.CICDCmsService/CICDCmsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDCmsServiceClient) CICDCmsCreate(ctx context.Context, in *CICDCmsCreateRequest, opts ...grpc.CallOption) (*CICDCmsCreateResponse, error) {
	out := new(CICDCmsCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.cms.CICDCmsService/CICDCmsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDCmsServiceClient) CICDCmsDelete(ctx context.Context, in *CICDCmsDeleteRequest, opts ...grpc.CallOption) (*CICDCmsDeleteResponse, error) {
	out := new(CICDCmsDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.cms.CICDCmsService/CICDCmsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CICDCmsServiceServer is the server API for CICDCmsService service.
// All implementations should embed UnimplementedCICDCmsServiceServer
// for forward compatibility
type CICDCmsServiceServer interface {
	CICDCmsUpdate(context.Context, *CICDCmsUpdateRequest) (*CICDCmsUpdateResponse, error)
	CICDCmsCreate(context.Context, *CICDCmsCreateRequest) (*CICDCmsCreateResponse, error)
	CICDCmsDelete(context.Context, *CICDCmsDeleteRequest) (*CICDCmsDeleteResponse, error)
}

// UnimplementedCICDCmsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCICDCmsServiceServer struct {
}

func (*UnimplementedCICDCmsServiceServer) CICDCmsUpdate(context.Context, *CICDCmsUpdateRequest) (*CICDCmsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CICDCmsUpdate not implemented")
}
func (*UnimplementedCICDCmsServiceServer) CICDCmsCreate(context.Context, *CICDCmsCreateRequest) (*CICDCmsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CICDCmsCreate not implemented")
}
func (*UnimplementedCICDCmsServiceServer) CICDCmsDelete(context.Context, *CICDCmsDeleteRequest) (*CICDCmsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CICDCmsDelete not implemented")
}

func RegisterCICDCmsServiceServer(s grpc1.ServiceRegistrar, srv CICDCmsServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_CICDCmsService_serviceDesc(srv, opts...), srv)
}

var _CICDCmsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.cms.CICDCmsService",
	HandlerType: (*CICDCmsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "cicdcms.proto",
}

func _get_CICDCmsService_serviceDesc(srv CICDCmsServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_CICDCmsService_CICDCmsUpdate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CICDCmsUpdate(ctx, req.(*CICDCmsUpdateRequest))
	}
	var _CICDCmsService_CICDCmsUpdate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CICDCmsService_CICDCmsUpdate_info = transport.NewServiceInfo("erda.dop.cms.CICDCmsService", "CICDCmsUpdate", srv)
		_CICDCmsService_CICDCmsUpdate_Handler = h.Interceptor(_CICDCmsService_CICDCmsUpdate_Handler)
	}

	_CICDCmsService_CICDCmsCreate_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CICDCmsCreate(ctx, req.(*CICDCmsCreateRequest))
	}
	var _CICDCmsService_CICDCmsCreate_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CICDCmsService_CICDCmsCreate_info = transport.NewServiceInfo("erda.dop.cms.CICDCmsService", "CICDCmsCreate", srv)
		_CICDCmsService_CICDCmsCreate_Handler = h.Interceptor(_CICDCmsService_CICDCmsCreate_Handler)
	}

	_CICDCmsService_CICDCmsDelete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CICDCmsDelete(ctx, req.(*CICDCmsDeleteRequest))
	}
	var _CICDCmsService_CICDCmsDelete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CICDCmsService_CICDCmsDelete_info = transport.NewServiceInfo("erda.dop.cms.CICDCmsService", "CICDCmsDelete", srv)
		_CICDCmsService_CICDCmsDelete_Handler = h.Interceptor(_CICDCmsService_CICDCmsDelete_Handler)
	}

	var serviceDesc = _CICDCmsService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CICDCmsUpdate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CICDCmsUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CICDCmsServiceServer).CICDCmsUpdate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CICDCmsService_CICDCmsUpdate_info)
				}
				if interceptor == nil {
					return _CICDCmsService_CICDCmsUpdate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.cms.CICDCmsService/CICDCmsUpdate",
				}
				return interceptor(ctx, in, info, _CICDCmsService_CICDCmsUpdate_Handler)
			},
		},
		{
			MethodName: "CICDCmsCreate",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CICDCmsCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CICDCmsServiceServer).CICDCmsCreate(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CICDCmsService_CICDCmsCreate_info)
				}
				if interceptor == nil {
					return _CICDCmsService_CICDCmsCreate_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.cms.CICDCmsService/CICDCmsCreate",
				}
				return interceptor(ctx, in, info, _CICDCmsService_CICDCmsCreate_Handler)
			},
		},
		{
			MethodName: "CICDCmsDelete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CICDCmsDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CICDCmsServiceServer).CICDCmsDelete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CICDCmsService_CICDCmsDelete_info)
				}
				if interceptor == nil {
					return _CICDCmsService_CICDCmsDelete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.cms.CICDCmsService/CICDCmsDelete",
				}
				return interceptor(ctx, in, info, _CICDCmsService_CICDCmsDelete_Handler)
			},
		},
	}
	return &serviceDesc
}
