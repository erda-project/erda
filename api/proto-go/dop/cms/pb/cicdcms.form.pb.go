// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: cicdcms.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CICDCmsUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CICDCmsUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CICDCmsCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CICDCmsCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CICDCmsDeleteRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CICDCmsDeleteResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Config)(nil)

// CICDCmsUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CICDCmsUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "batch":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Batch = val
			case "namespace_name":
				m.NamespaceName = vals[0]
			case "appID":
				m.AppID = vals[0]
			case "encrypt":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Encrypt = val
			}
		}
	}
	return nil
}

// CICDCmsUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CICDCmsUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// CICDCmsCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CICDCmsCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "batch":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Batch = val
			case "namespace_name":
				m.NamespaceName = vals[0]
			case "appID":
				m.AppID = vals[0]
			case "encrypt":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Encrypt = val
			}
		}
	}
	return nil
}

// CICDCmsCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CICDCmsCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// CICDCmsDeleteRequest implement urlenc.URLValuesUnmarshaler.
func (m *CICDCmsDeleteRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "appID":
				m.AppID = vals[0]
			case "namespace_name":
				m.NamespaceName = vals[0]
			case "key":
				m.Key = vals[0]
			}
		}
	}
	return nil
}

// CICDCmsDeleteResponse implement urlenc.URLValuesUnmarshaler.
func (m *CICDCmsDeleteResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				m.Data = vals[0]
			}
		}
	}
	return nil
}

// Config implement urlenc.URLValuesUnmarshaler.
func (m *Config) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "comment":
				m.Comment = vals[0]
			case "encrypt":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Encrypt = val
			case "key":
				m.Key = vals[0]
			case "type":
				m.Type = vals[0]
			case "value":
				m.Value = vals[0]
			}
		}
	}
	return nil
}
