// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: sync.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*IssueSyncRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ReplacedFields)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MergedFields)(nil)
var _ urlenc.URLValuesUnmarshaler = (*IssueSyncResponse)(nil)

// IssueSyncRequest implement urlenc.URLValuesUnmarshaler.
func (m *IssueSyncRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "addition":
				if m.Addition == nil {
					m.Addition = &MergedFields{}
				}
			case "addition.labels":
				if m.Addition == nil {
					m.Addition = &MergedFields{}
				}
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Addition.Labels = list
			case "deletion":
				if m.Deletion == nil {
					m.Deletion = &MergedFields{}
				}
			case "deletion.labels":
				if m.Deletion == nil {
					m.Deletion = &MergedFields{}
				}
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Deletion.Labels = list
			case "replacedFields":
				if m.ReplacedFields == nil {
					m.ReplacedFields = &ReplacedFields{}
				}
			case "replacedFields.iterationID":
				if m.ReplacedFields == nil {
					m.ReplacedFields = &ReplacedFields{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReplacedFields.IterationID = val
			}
		}
	}
	return nil
}

// ReplacedFields implement urlenc.URLValuesUnmarshaler.
func (m *ReplacedFields) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "iterationID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.IterationID = val
			}
		}
	}
	return nil
}

// MergedFields implement urlenc.URLValuesUnmarshaler.
func (m *MergedFields) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "labels":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Labels = list
			}
		}
	}
	return nil
}

// IssueSyncResponse implement urlenc.URLValuesUnmarshaler.
func (m *IssueSyncResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
