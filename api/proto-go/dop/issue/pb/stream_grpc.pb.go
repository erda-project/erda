// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: stream.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// CommentIssueStreamServiceClient is the client API for CommentIssueStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentIssueStreamServiceClient interface {
	BatchCreateIssueStream(ctx context.Context, in *CommentIssueStreamBatchCreateRequest, opts ...grpc.CallOption) (*CommentIssueStreamBatchCreateResponse, error)
}

type commentIssueStreamServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewCommentIssueStreamServiceClient(cc grpc1.ClientConnInterface) CommentIssueStreamServiceClient {
	return &commentIssueStreamServiceClient{cc}
}

func (c *commentIssueStreamServiceClient) BatchCreateIssueStream(ctx context.Context, in *CommentIssueStreamBatchCreateRequest, opts ...grpc.CallOption) (*CommentIssueStreamBatchCreateResponse, error) {
	out := new(CommentIssueStreamBatchCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.CommentIssueStreamService/BatchCreateIssueStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentIssueStreamServiceServer is the server API for CommentIssueStreamService service.
// All implementations should embed UnimplementedCommentIssueStreamServiceServer
// for forward compatibility
type CommentIssueStreamServiceServer interface {
	BatchCreateIssueStream(context.Context, *CommentIssueStreamBatchCreateRequest) (*CommentIssueStreamBatchCreateResponse, error)
}

// UnimplementedCommentIssueStreamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCommentIssueStreamServiceServer struct {
}

func (*UnimplementedCommentIssueStreamServiceServer) BatchCreateIssueStream(context.Context, *CommentIssueStreamBatchCreateRequest) (*CommentIssueStreamBatchCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateIssueStream not implemented")
}

func RegisterCommentIssueStreamServiceServer(s grpc1.ServiceRegistrar, srv CommentIssueStreamServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_CommentIssueStreamService_serviceDesc(srv, opts...), srv)
}

var _CommentIssueStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.issue.CommentIssueStreamService",
	HandlerType: (*CommentIssueStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "stream.proto",
}

func _get_CommentIssueStreamService_serviceDesc(srv CommentIssueStreamServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_CommentIssueStreamService_BatchCreateIssueStream_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BatchCreateIssueStream(ctx, req.(*CommentIssueStreamBatchCreateRequest))
	}
	var _CommentIssueStreamService_BatchCreateIssueStream_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CommentIssueStreamService_BatchCreateIssueStream_info = transport.NewServiceInfo("erda.dop.issue.CommentIssueStreamService", "BatchCreateIssueStream", srv)
		_CommentIssueStreamService_BatchCreateIssueStream_Handler = h.Interceptor(_CommentIssueStreamService_BatchCreateIssueStream_Handler)
	}

	var serviceDesc = _CommentIssueStreamService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "BatchCreateIssueStream",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CommentIssueStreamBatchCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CommentIssueStreamServiceServer).BatchCreateIssueStream(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CommentIssueStreamService_BatchCreateIssueStream_info)
				}
				if interceptor == nil {
					return _CommentIssueStreamService_BatchCreateIssueStream_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.CommentIssueStreamService/BatchCreateIssueStream",
				}
				return interceptor(ctx, in, info, _CommentIssueStreamService_BatchCreateIssueStream_Handler)
			},
		},
	}
	return &serviceDesc
}
