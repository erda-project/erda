// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: stream.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CommentIssueStreamCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MRCommentInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CommentIssueStreamBatchCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CommentIssueStreamBatchCreateResponse)(nil)

// CommentIssueStreamCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CommentIssueStreamCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "issueID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.IssueID = val
			case "type":
				m.Type = vals[0]
			case "content":
				m.Content = vals[0]
			case "mrInfo":
				if m.MrInfo == nil {
					m.MrInfo = &MRCommentInfo{}
				}
			case "mrInfo.appID":
				if m.MrInfo == nil {
					m.MrInfo = &MRCommentInfo{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MrInfo.AppID = val
			case "mrInfo.mrID":
				if m.MrInfo == nil {
					m.MrInfo = &MRCommentInfo{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MrInfo.MrID = val
			case "mrInfo.mrTitle":
				if m.MrInfo == nil {
					m.MrInfo = &MRCommentInfo{}
				}
				m.MrInfo.MrTitle = vals[0]
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// MRCommentInfo implement urlenc.URLValuesUnmarshaler.
func (m *MRCommentInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "appID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AppID = val
			case "mrID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MrID = val
			case "mrTitle":
				m.MrTitle = vals[0]
			}
		}
	}
	return nil
}

// CommentIssueStreamBatchCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CommentIssueStreamBatchCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CommentIssueStreamBatchCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *CommentIssueStreamBatchCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
