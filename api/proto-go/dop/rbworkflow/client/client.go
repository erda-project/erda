// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: rbworkflow.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/rbWorkflow/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// RbWorkflowService rbworkflow.proto
	RbWorkflowService() pb.RbWorkflowServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		rbWorkflowService: pb.NewRbWorkflowServiceClient(cc),
	}
}

type serviceClients struct {
	rbWorkflowService pb.RbWorkflowServiceClient
}

func (c *serviceClients) RbWorkflowService() pb.RbWorkflowServiceClient {
	return c.rbWorkflowService
}

type rbWorkflowServiceWrapper struct {
	client pb.RbWorkflowServiceClient
	opts   []grpc1.CallOption
}

func (s *rbWorkflowServiceWrapper) CreateRbWorkflow(ctx context.Context, req *pb.CreateRbWorkflowRequest) (*pb.CreateRbWorkflowResponse, error) {
	return s.client.CreateRbWorkflow(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *rbWorkflowServiceWrapper) UpdateRbWorkflow(ctx context.Context, req *pb.UpdateRbWorkflowRequest) (*pb.UpdateRbWorkflowResponse, error) {
	return s.client.UpdateRbWorkflow(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *rbWorkflowServiceWrapper) DeleteRbWorkflow(ctx context.Context, req *pb.DeleteRbWorkflowRequest) (*pb.DeleteRbWorkflowResponse, error) {
	return s.client.DeleteRbWorkflow(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *rbWorkflowServiceWrapper) ListRbWorkflows(ctx context.Context, req *pb.ListRbWorkflowRequest) (*pb.ListRbWorkflowResponse, error) {
	return s.client.ListRbWorkflows(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
