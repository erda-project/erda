// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: rbworkflow.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterRbWorkflowServiceImp rbworkflow.proto
func RegisterRbWorkflowServiceImp(regester transport.Register, srv RbWorkflowServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterRbWorkflowServiceHandler(regester, RbWorkflowServiceHandler(srv), _ops.HTTP...)
	RegisterRbWorkflowServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.dop.rbworkflow.RbWorkflowService",
	)
}

var (
	rbWorkflowServiceClientType  = reflect.TypeOf((*RbWorkflowServiceClient)(nil)).Elem()
	rbWorkflowServiceServerType  = reflect.TypeOf((*RbWorkflowServiceServer)(nil)).Elem()
	rbWorkflowServiceHandlerType = reflect.TypeOf((*RbWorkflowServiceHandler)(nil)).Elem()
)

// RbWorkflowServiceClientType .
func RbWorkflowServiceClientType() reflect.Type { return rbWorkflowServiceClientType }

// RbWorkflowServiceServerType .
func RbWorkflowServiceServerType() reflect.Type { return rbWorkflowServiceServerType }

// RbWorkflowServiceHandlerType .
func RbWorkflowServiceHandlerType() reflect.Type { return rbWorkflowServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		rbWorkflowServiceClientType,
		// server types
		rbWorkflowServiceServerType,
		// handler types
		rbWorkflowServiceHandlerType,
	}
}
