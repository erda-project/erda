// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: rbworkflow.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RbWorkflowServiceClient is the client API for RbWorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbWorkflowServiceClient interface {
	CreateRbWorkflow(ctx context.Context, in *CreateRbWorkflowRequest, opts ...grpc.CallOption) (*CreateRbWorkflowResponse, error)
	UpdateRbWorkflow(ctx context.Context, in *UpdateRbWorkflowRequest, opts ...grpc.CallOption) (*UpdateRbWorkflowResponse, error)
	DeleteRbWorkflow(ctx context.Context, in *DeleteRbWorkflowRequest, opts ...grpc.CallOption) (*DeleteRbWorkflowResponse, error)
	ListRbWorkflows(ctx context.Context, in *ListRbWorkflowRequest, opts ...grpc.CallOption) (*ListRbWorkflowResponse, error)
}

type rbWorkflowServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewRbWorkflowServiceClient(cc grpc1.ClientConnInterface) RbWorkflowServiceClient {
	return &rbWorkflowServiceClient{cc}
}

func (c *rbWorkflowServiceClient) CreateRbWorkflow(ctx context.Context, in *CreateRbWorkflowRequest, opts ...grpc.CallOption) (*CreateRbWorkflowResponse, error) {
	out := new(CreateRbWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rbworkflow.RbWorkflowService/CreateRbWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbWorkflowServiceClient) UpdateRbWorkflow(ctx context.Context, in *UpdateRbWorkflowRequest, opts ...grpc.CallOption) (*UpdateRbWorkflowResponse, error) {
	out := new(UpdateRbWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rbworkflow.RbWorkflowService/UpdateRbWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbWorkflowServiceClient) DeleteRbWorkflow(ctx context.Context, in *DeleteRbWorkflowRequest, opts ...grpc.CallOption) (*DeleteRbWorkflowResponse, error) {
	out := new(DeleteRbWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rbworkflow.RbWorkflowService/DeleteRbWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbWorkflowServiceClient) ListRbWorkflows(ctx context.Context, in *ListRbWorkflowRequest, opts ...grpc.CallOption) (*ListRbWorkflowResponse, error) {
	out := new(ListRbWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rbworkflow.RbWorkflowService/ListRbWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbWorkflowServiceServer is the server API for RbWorkflowService service.
// All implementations should embed UnimplementedRbWorkflowServiceServer
// for forward compatibility
type RbWorkflowServiceServer interface {
	CreateRbWorkflow(context.Context, *CreateRbWorkflowRequest) (*CreateRbWorkflowResponse, error)
	UpdateRbWorkflow(context.Context, *UpdateRbWorkflowRequest) (*UpdateRbWorkflowResponse, error)
	DeleteRbWorkflow(context.Context, *DeleteRbWorkflowRequest) (*DeleteRbWorkflowResponse, error)
	ListRbWorkflows(context.Context, *ListRbWorkflowRequest) (*ListRbWorkflowResponse, error)
}

// UnimplementedRbWorkflowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRbWorkflowServiceServer struct {
}

func (*UnimplementedRbWorkflowServiceServer) CreateRbWorkflow(context.Context, *CreateRbWorkflowRequest) (*CreateRbWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRbWorkflow not implemented")
}
func (*UnimplementedRbWorkflowServiceServer) UpdateRbWorkflow(context.Context, *UpdateRbWorkflowRequest) (*UpdateRbWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRbWorkflow not implemented")
}
func (*UnimplementedRbWorkflowServiceServer) DeleteRbWorkflow(context.Context, *DeleteRbWorkflowRequest) (*DeleteRbWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRbWorkflow not implemented")
}
func (*UnimplementedRbWorkflowServiceServer) ListRbWorkflows(context.Context, *ListRbWorkflowRequest) (*ListRbWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRbWorkflows not implemented")
}

func RegisterRbWorkflowServiceServer(s grpc1.ServiceRegistrar, srv RbWorkflowServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_RbWorkflowService_serviceDesc(srv, opts...), srv)
}

var _RbWorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.rbworkflow.RbWorkflowService",
	HandlerType: (*RbWorkflowServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "rbworkflow.proto",
}

func _get_RbWorkflowService_serviceDesc(srv RbWorkflowServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_RbWorkflowService_CreateRbWorkflow_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateRbWorkflow(ctx, req.(*CreateRbWorkflowRequest))
	}
	var _RbWorkflowService_CreateRbWorkflow_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RbWorkflowService_CreateRbWorkflow_info = transport.NewServiceInfo("erda.dop.rbworkflow.RbWorkflowService", "CreateRbWorkflow", srv)
		_RbWorkflowService_CreateRbWorkflow_Handler = h.Interceptor(_RbWorkflowService_CreateRbWorkflow_Handler)
	}

	_RbWorkflowService_UpdateRbWorkflow_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateRbWorkflow(ctx, req.(*UpdateRbWorkflowRequest))
	}
	var _RbWorkflowService_UpdateRbWorkflow_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RbWorkflowService_UpdateRbWorkflow_info = transport.NewServiceInfo("erda.dop.rbworkflow.RbWorkflowService", "UpdateRbWorkflow", srv)
		_RbWorkflowService_UpdateRbWorkflow_Handler = h.Interceptor(_RbWorkflowService_UpdateRbWorkflow_Handler)
	}

	_RbWorkflowService_DeleteRbWorkflow_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteRbWorkflow(ctx, req.(*DeleteRbWorkflowRequest))
	}
	var _RbWorkflowService_DeleteRbWorkflow_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RbWorkflowService_DeleteRbWorkflow_info = transport.NewServiceInfo("erda.dop.rbworkflow.RbWorkflowService", "DeleteRbWorkflow", srv)
		_RbWorkflowService_DeleteRbWorkflow_Handler = h.Interceptor(_RbWorkflowService_DeleteRbWorkflow_Handler)
	}

	_RbWorkflowService_ListRbWorkflows_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListRbWorkflows(ctx, req.(*ListRbWorkflowRequest))
	}
	var _RbWorkflowService_ListRbWorkflows_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RbWorkflowService_ListRbWorkflows_info = transport.NewServiceInfo("erda.dop.rbworkflow.RbWorkflowService", "ListRbWorkflows", srv)
		_RbWorkflowService_ListRbWorkflows_Handler = h.Interceptor(_RbWorkflowService_ListRbWorkflows_Handler)
	}

	var serviceDesc = _RbWorkflowService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateRbWorkflow",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateRbWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RbWorkflowServiceServer).CreateRbWorkflow(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RbWorkflowService_CreateRbWorkflow_info)
				}
				if interceptor == nil {
					return _RbWorkflowService_CreateRbWorkflow_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rbworkflow.RbWorkflowService/CreateRbWorkflow",
				}
				return interceptor(ctx, in, info, _RbWorkflowService_CreateRbWorkflow_Handler)
			},
		},
		{
			MethodName: "UpdateRbWorkflow",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateRbWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RbWorkflowServiceServer).UpdateRbWorkflow(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RbWorkflowService_UpdateRbWorkflow_info)
				}
				if interceptor == nil {
					return _RbWorkflowService_UpdateRbWorkflow_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rbworkflow.RbWorkflowService/UpdateRbWorkflow",
				}
				return interceptor(ctx, in, info, _RbWorkflowService_UpdateRbWorkflow_Handler)
			},
		},
		{
			MethodName: "DeleteRbWorkflow",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteRbWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RbWorkflowServiceServer).DeleteRbWorkflow(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RbWorkflowService_DeleteRbWorkflow_info)
				}
				if interceptor == nil {
					return _RbWorkflowService_DeleteRbWorkflow_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rbworkflow.RbWorkflowService/DeleteRbWorkflow",
				}
				return interceptor(ctx, in, info, _RbWorkflowService_DeleteRbWorkflow_Handler)
			},
		},
		{
			MethodName: "ListRbWorkflows",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListRbWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RbWorkflowServiceServer).ListRbWorkflows(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RbWorkflowService_ListRbWorkflows_info)
				}
				if interceptor == nil {
					return _RbWorkflowService_ListRbWorkflows_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rbworkflow.RbWorkflowService/ListRbWorkflows",
				}
				return interceptor(ctx, in, info, _RbWorkflowService_ListRbWorkflows_Handler)
			},
		},
	}
	return &serviceDesc
}
