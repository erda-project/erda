// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rbworkflow.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *CreateRbWorkflowRequest) Validate() error {
	if !(this.ProjectID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectID", fmt.Errorf(`value '%v' must be greater than '0'`, this.ProjectID))
	}
	if this.Stage == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Stage", fmt.Errorf(`value '%v' must not be an empty string`, this.Stage))
	}
	if !(this.Sort > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Sort", fmt.Errorf(`value '%v' must be greater than '0'`, this.Sort))
	}
	if this.Branch == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Branch", fmt.Errorf(`value '%v' must not be an empty string`, this.Branch))
	}
	if this.Artifact == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Artifact", fmt.Errorf(`value '%v' must not be an empty string`, this.Artifact))
	}
	if this.Environment == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Environment", fmt.Errorf(`value '%v' must not be an empty string`, this.Environment))
	}
	return nil
}
func (this *CreateRbWorkflowResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *UpdateRbWorkflowRequest) Validate() error {
	if this.Stage == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Stage", fmt.Errorf(`value '%v' must not be an empty string`, this.Stage))
	}
	if !(this.Sort > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Sort", fmt.Errorf(`value '%v' must be greater than '0'`, this.Sort))
	}
	if this.Branch == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Branch", fmt.Errorf(`value '%v' must not be an empty string`, this.Branch))
	}
	if this.Artifact == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Artifact", fmt.Errorf(`value '%v' must not be an empty string`, this.Artifact))
	}
	if this.Environment == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Environment", fmt.Errorf(`value '%v' must not be an empty string`, this.Environment))
	}
	return nil
}
func (this *UpdateRbWorkflowResponse) Validate() error {
	if this.Data != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *DeleteRbWorkflowRequest) Validate() error {
	return nil
}
func (this *DeleteRbWorkflowResponse) Validate() error {
	return nil
}
func (this *ListRbWorkflowRequest) Validate() error {
	return nil
}
func (this *ListRbWorkflowResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *RbWorkflow) Validate() error {
	if this.TimeCreated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeCreated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeCreated", err)
		}
	}
	if this.TimeUpdated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeUpdated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeUpdated", err)
		}
	}
	return nil
}
