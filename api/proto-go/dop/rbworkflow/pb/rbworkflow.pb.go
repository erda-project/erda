// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: rbworkflow.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateRbWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   uint64   `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Stage       string   `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Sort        uint64   `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Branch      string   `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Artifact    string   `protobuf:"bytes,5,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Environment string   `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	SubFlows    []string `protobuf:"bytes,7,rep,name=subFlows,proto3" json:"subFlows,omitempty"`
}

func (x *CreateRbWorkflowRequest) Reset() {
	*x = CreateRbWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRbWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRbWorkflowRequest) ProtoMessage() {}

func (x *CreateRbWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRbWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateRbWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRbWorkflowRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateRbWorkflowRequest) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *CreateRbWorkflowRequest) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CreateRbWorkflowRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateRbWorkflowRequest) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *CreateRbWorkflowRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CreateRbWorkflowRequest) GetSubFlows() []string {
	if x != nil {
		return x.SubFlows
	}
	return nil
}

type CreateRbWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RbWorkflow `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateRbWorkflowResponse) Reset() {
	*x = CreateRbWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRbWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRbWorkflowResponse) ProtoMessage() {}

func (x *CreateRbWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRbWorkflowResponse.ProtoReflect.Descriptor instead.
func (*CreateRbWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRbWorkflowResponse) GetData() *RbWorkflow {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRbWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string   `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Stage       string   `protobuf:"bytes,3,opt,name=stage,proto3" json:"stage,omitempty"`
	Sort        uint64   `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Branch      string   `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	Artifact    string   `protobuf:"bytes,6,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Environment string   `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	SubFlows    []string `protobuf:"bytes,8,rep,name=subFlows,proto3" json:"subFlows,omitempty"`
}

func (x *UpdateRbWorkflowRequest) Reset() {
	*x = UpdateRbWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRbWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRbWorkflowRequest) ProtoMessage() {}

func (x *UpdateRbWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRbWorkflowRequest.ProtoReflect.Descriptor instead.
func (*UpdateRbWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRbWorkflowRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRbWorkflowRequest) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *UpdateRbWorkflowRequest) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateRbWorkflowRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *UpdateRbWorkflowRequest) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *UpdateRbWorkflowRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *UpdateRbWorkflowRequest) GetSubFlows() []string {
	if x != nil {
		return x.SubFlows
	}
	return nil
}

type UpdateRbWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RbWorkflow `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateRbWorkflowResponse) Reset() {
	*x = UpdateRbWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRbWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRbWorkflowResponse) ProtoMessage() {}

func (x *UpdateRbWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRbWorkflowResponse.ProtoReflect.Descriptor instead.
func (*UpdateRbWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRbWorkflowResponse) GetData() *RbWorkflow {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRbWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
}

func (x *DeleteRbWorkflowRequest) Reset() {
	*x = DeleteRbWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRbWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRbWorkflowRequest) ProtoMessage() {}

func (x *DeleteRbWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRbWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteRbWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRbWorkflowRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteRbWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRbWorkflowResponse) Reset() {
	*x = DeleteRbWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRbWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRbWorkflowResponse) ProtoMessage() {}

func (x *DeleteRbWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRbWorkflowResponse.ProtoReflect.Descriptor instead.
func (*DeleteRbWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{5}
}

type ListRbWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ListRbWorkflowRequest) Reset() {
	*x = ListRbWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRbWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRbWorkflowRequest) ProtoMessage() {}

func (x *ListRbWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRbWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ListRbWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{6}
}

func (x *ListRbWorkflowRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type ListRbWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RbWorkflow `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListRbWorkflowResponse) Reset() {
	*x = ListRbWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRbWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRbWorkflowResponse) ProtoMessage() {}

func (x *ListRbWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRbWorkflowResponse.ProtoReflect.Descriptor instead.
func (*ListRbWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{7}
}

func (x *ListRbWorkflowResponse) GetData() []*RbWorkflow {
	if x != nil {
		return x.Data
	}
	return nil
}

type RbWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Stage       string                 `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Sort        uint64                 `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Branch      string                 `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Artifact    string                 `protobuf:"bytes,5,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Environment string                 `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	SubFlows    []string               `protobuf:"bytes,7,rep,name=subFlows,proto3" json:"subFlows,omitempty"`
	OrgID       uint64                 `protobuf:"varint,8,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName     string                 `protobuf:"bytes,9,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID   uint64                 `protobuf:"varint,10,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName string                 `protobuf:"bytes,11,opt,name=projectName,proto3" json:"projectName,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	Creator     string                 `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater     string                 `protobuf:"bytes,15,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *RbWorkflow) Reset() {
	*x = RbWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbworkflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbWorkflow) ProtoMessage() {}

func (x *RbWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_rbworkflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbWorkflow.ProtoReflect.Descriptor instead.
func (*RbWorkflow) Descriptor() ([]byte, []int) {
	return file_rbworkflow_proto_rawDescGZIP(), []int{8}
}

func (x *RbWorkflow) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RbWorkflow) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *RbWorkflow) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *RbWorkflow) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RbWorkflow) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *RbWorkflow) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *RbWorkflow) GetSubFlows() []string {
	if x != nil {
		return x.SubFlows
	}
	return nil
}

func (x *RbWorkflow) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *RbWorkflow) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *RbWorkflow) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *RbWorkflow) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *RbWorkflow) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *RbWorkflow) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *RbWorkflow) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *RbWorkflow) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

var File_rbworkflow_proto protoreflect.FileDescriptor

var file_rbworkflow_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f,
	0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x4f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x22, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x4f, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72,
	0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x35, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x03, 0x0a, 0x0a, 0x52, 0x62, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x32, 0xb8, 0x05, 0x0a, 0x11, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0xfa, 0x81, 0xf9, 0x1b, 0x11, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x1a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x16, 0x0a, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x16, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12,
	0x99, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72,
	0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x62,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x62, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xfa, 0x81, 0xf9, 0x1b, 0x11, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x10, 0xc2, 0xc4, 0xcb,
	0x1c, 0x0b, 0x22, 0x03, 0x64, 0x6f, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x6f, 0x70, 0x2f, 0x72, 0x62, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbworkflow_proto_rawDescOnce sync.Once
	file_rbworkflow_proto_rawDescData = file_rbworkflow_proto_rawDesc
)

func file_rbworkflow_proto_rawDescGZIP() []byte {
	file_rbworkflow_proto_rawDescOnce.Do(func() {
		file_rbworkflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbworkflow_proto_rawDescData)
	})
	return file_rbworkflow_proto_rawDescData
}

var file_rbworkflow_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rbworkflow_proto_goTypes = []interface{}{
	(*CreateRbWorkflowRequest)(nil),  // 0: erda.dop.rbworkflow.CreateRbWorkflowRequest
	(*CreateRbWorkflowResponse)(nil), // 1: erda.dop.rbworkflow.CreateRbWorkflowResponse
	(*UpdateRbWorkflowRequest)(nil),  // 2: erda.dop.rbworkflow.UpdateRbWorkflowRequest
	(*UpdateRbWorkflowResponse)(nil), // 3: erda.dop.rbworkflow.UpdateRbWorkflowResponse
	(*DeleteRbWorkflowRequest)(nil),  // 4: erda.dop.rbworkflow.DeleteRbWorkflowRequest
	(*DeleteRbWorkflowResponse)(nil), // 5: erda.dop.rbworkflow.DeleteRbWorkflowResponse
	(*ListRbWorkflowRequest)(nil),    // 6: erda.dop.rbworkflow.ListRbWorkflowRequest
	(*ListRbWorkflowResponse)(nil),   // 7: erda.dop.rbworkflow.ListRbWorkflowResponse
	(*RbWorkflow)(nil),               // 8: erda.dop.rbworkflow.RbWorkflow
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
}
var file_rbworkflow_proto_depIdxs = []int32{
	8, // 0: erda.dop.rbworkflow.CreateRbWorkflowResponse.data:type_name -> erda.dop.rbworkflow.RbWorkflow
	8, // 1: erda.dop.rbworkflow.UpdateRbWorkflowResponse.data:type_name -> erda.dop.rbworkflow.RbWorkflow
	8, // 2: erda.dop.rbworkflow.ListRbWorkflowResponse.data:type_name -> erda.dop.rbworkflow.RbWorkflow
	9, // 3: erda.dop.rbworkflow.RbWorkflow.timeCreated:type_name -> google.protobuf.Timestamp
	9, // 4: erda.dop.rbworkflow.RbWorkflow.timeUpdated:type_name -> google.protobuf.Timestamp
	0, // 5: erda.dop.rbworkflow.RbWorkflowService.CreateRbWorkflow:input_type -> erda.dop.rbworkflow.CreateRbWorkflowRequest
	2, // 6: erda.dop.rbworkflow.RbWorkflowService.UpdateRbWorkflow:input_type -> erda.dop.rbworkflow.UpdateRbWorkflowRequest
	4, // 7: erda.dop.rbworkflow.RbWorkflowService.DeleteRbWorkflow:input_type -> erda.dop.rbworkflow.DeleteRbWorkflowRequest
	6, // 8: erda.dop.rbworkflow.RbWorkflowService.ListRbWorkflows:input_type -> erda.dop.rbworkflow.ListRbWorkflowRequest
	1, // 9: erda.dop.rbworkflow.RbWorkflowService.CreateRbWorkflow:output_type -> erda.dop.rbworkflow.CreateRbWorkflowResponse
	3, // 10: erda.dop.rbworkflow.RbWorkflowService.UpdateRbWorkflow:output_type -> erda.dop.rbworkflow.UpdateRbWorkflowResponse
	5, // 11: erda.dop.rbworkflow.RbWorkflowService.DeleteRbWorkflow:output_type -> erda.dop.rbworkflow.DeleteRbWorkflowResponse
	7, // 12: erda.dop.rbworkflow.RbWorkflowService.ListRbWorkflows:output_type -> erda.dop.rbworkflow.ListRbWorkflowResponse
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rbworkflow_proto_init() }
func file_rbworkflow_proto_init() {
	if File_rbworkflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rbworkflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRbWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRbWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRbWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRbWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRbWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRbWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRbWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRbWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbworkflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbworkflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbworkflow_proto_goTypes,
		DependencyIndexes: file_rbworkflow_proto_depIdxs,
		MessageInfos:      file_rbworkflow_proto_msgTypes,
	}.Build()
	File_rbworkflow_proto = out.File
	file_rbworkflow_proto_rawDesc = nil
	file_rbworkflow_proto_goTypes = nil
	file_rbworkflow_proto_depIdxs = nil
}
