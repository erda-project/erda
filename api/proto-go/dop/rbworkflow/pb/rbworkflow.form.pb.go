// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: rbworkflow.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateRbWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateRbWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateRbWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateRbWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteRbWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteRbWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListRbWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListRbWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RbWorkflow)(nil)

// CreateRbWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateRbWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "stage":
				m.Stage = vals[0]
			case "sort":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Sort = val
			case "branch":
				m.Branch = vals[0]
			case "artifact":
				m.Artifact = vals[0]
			case "environment":
				m.Environment = vals[0]
			case "subFlows":
				m.SubFlows = vals
			}
		}
	}
	return nil
}

// CreateRbWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateRbWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.ID = vals[0]
			case "data.stage":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Stage = vals[0]
			case "data.sort":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Sort = val
			case "data.branch":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Branch = vals[0]
			case "data.artifact":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Artifact = vals[0]
			case "data.environment":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Environment = vals[0]
			case "data.subFlows":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.SubFlows = vals
			case "data.orgID":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.orgName":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.OrgName = vals[0]
			case "data.projectID":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ProjectID = val
			case "data.projectName":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.ProjectName = vals[0]
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.creator":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Creator = vals[0]
			case "data.updater":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Updater = vals[0]
			}
		}
	}
	return nil
}

// UpdateRbWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateRbWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "stage":
				m.Stage = vals[0]
			case "sort":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Sort = val
			case "branch":
				m.Branch = vals[0]
			case "artifact":
				m.Artifact = vals[0]
			case "environment":
				m.Environment = vals[0]
			case "subFlows":
				m.SubFlows = vals
			}
		}
	}
	return nil
}

// UpdateRbWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateRbWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.ID = vals[0]
			case "data.stage":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Stage = vals[0]
			case "data.sort":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.Sort = val
			case "data.branch":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Branch = vals[0]
			case "data.artifact":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Artifact = vals[0]
			case "data.environment":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Environment = vals[0]
			case "data.subFlows":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.SubFlows = vals
			case "data.orgID":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.orgName":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.OrgName = vals[0]
			case "data.projectID":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ProjectID = val
			case "data.projectName":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.ProjectName = vals[0]
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.creator":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Creator = vals[0]
			case "data.updater":
				if m.Data == nil {
					m.Data = &RbWorkflow{}
				}
				m.Data.Updater = vals[0]
			}
		}
	}
	return nil
}

// DeleteRbWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteRbWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			}
		}
	}
	return nil
}

// DeleteRbWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteRbWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ListRbWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListRbWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			}
		}
	}
	return nil
}

// ListRbWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListRbWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// RbWorkflow implement urlenc.URLValuesUnmarshaler.
func (m *RbWorkflow) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "stage":
				m.Stage = vals[0]
			case "sort":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Sort = val
			case "branch":
				m.Branch = vals[0]
			case "artifact":
				m.Artifact = vals[0]
			case "environment":
				m.Environment = vals[0]
			case "subFlows":
				m.SubFlows = vals
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			case "creator":
				m.Creator = vals[0]
			case "updater":
				m.Updater = vals[0]
			}
		}
	}
	return nil
}
