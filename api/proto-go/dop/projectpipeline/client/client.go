// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: projectpipeline.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/projectpipeline/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ProjectPipelineService projectpipeline.proto
	ProjectPipelineService() pb.ProjectPipelineServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		projectPipelineService: pb.NewProjectPipelineServiceClient(cc),
	}
}

type serviceClients struct {
	projectPipelineService pb.ProjectPipelineServiceClient
}

func (c *serviceClients) ProjectPipelineService() pb.ProjectPipelineServiceClient {
	return c.projectPipelineService
}

type projectPipelineServiceWrapper struct {
	client pb.ProjectPipelineServiceClient
	opts   []grpc1.CallOption
}

func (s *projectPipelineServiceWrapper) Create(ctx context.Context, req *pb.CreateProjectPipelineRequest) (*pb.CreateProjectPipelineResponse, error) {
	return s.client.Create(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
