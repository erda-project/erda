// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: projectpipeline.proto

package pb

import (
	fmt "fmt"
	math "math"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *PipelineRunParam) Validate() error {
	if this.Value != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Value); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Value", err)
		}
	}
	return nil
}
func (this *RunProjectPipelineRequest) Validate() error {
	for _, item := range this.RunParams {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("RunParams", err)
			}
		}
	}
	return nil
}
func (this *RunProjectPipelineResponse) Validate() error {
	if this.Pipeline != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Pipeline); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Pipeline", err)
		}
	}
	return nil
}
func (this *RerunProjectPipelineRequest) Validate() error {
	return nil
}
func (this *RerunProjectPipelineResponse) Validate() error {
	if this.Pipeline != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Pipeline); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Pipeline", err)
		}
	}
	return nil
}
func (this *RerunFailedProjectPipelineRequest) Validate() error {
	return nil
}
func (this *RerunFailedProjectPipelineResponse) Validate() error {
	if this.Pipeline != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Pipeline); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Pipeline", err)
		}
	}
	return nil
}
func (this *CancelProjectPipelineRequest) Validate() error {
	return nil
}
func (this *CancelProjectPipelineResponse) Validate() error {
	return nil
}
func (this *CreateProjectPipelineSourcePreCheckRequest) Validate() error {
	if !(this.AppID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AppID", fmt.Errorf(`value '%v' must be greater than '0'`, this.AppID))
	}
	if this.SourceType == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SourceType", fmt.Errorf(`value '%v' must not be an empty string`, this.SourceType))
	}
	if this.Ref == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Ref", fmt.Errorf(`value '%v' must not be an empty string`, this.Ref))
	}
	if this.FileName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("FileName", fmt.Errorf(`value '%v' must not be an empty string`, this.FileName))
	}
	return nil
}
func (this *CreateProjectPipelineSourcePreCheckResponse) Validate() error {
	return nil
}
func (this *CreateProjectPipelineNamePreCheckRequest) Validate() error {
	if !(this.ProjectID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectID", fmt.Errorf(`value '%v' must be greater than '0'`, this.ProjectID))
	}
	if this.Name == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must not be an empty string`, this.Name))
	}
	return nil
}
func (this *CreateProjectPipelineNamePreCheckResponse) Validate() error {
	return nil
}
func (this *ListAppPipelineYmlRequest) Validate() error {
	return nil
}
func (this *PipelineYmlList) Validate() error {
	return nil
}
func (this *ListAppPipelineYmlResponse) Validate() error {
	for _, item := range this.Result {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Result", err)
			}
		}
	}
	return nil
}
func (this *ListAppRequest) Validate() error {
	if !(this.ProjectID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectID", fmt.Errorf(`value '%v' must be greater than '0'`, this.ProjectID))
	}
	return nil
}
func (this *ListAppResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *Application) Validate() error {
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.UpdatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdatedAt", err)
		}
	}
	return nil
}
func (this *CreateProjectPipelineRequest) Validate() error {
	if !(this.ProjectID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectID", fmt.Errorf(`value '%v' must be greater than '0'`, this.ProjectID))
	}
	if this.Name == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must not be an empty string`, this.Name))
	}
	if this.SourceType == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("SourceType", fmt.Errorf(`value '%v' must not be an empty string`, this.SourceType))
	}
	if this.Ref == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Ref", fmt.Errorf(`value '%v' must not be an empty string`, this.Ref))
	}
	if this.FileName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("FileName", fmt.Errorf(`value '%v' must not be an empty string`, this.FileName))
	}
	return nil
}
func (this *CreateProjectPipelineResponse) Validate() error {
	if this.ProjectPipeline != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ProjectPipeline); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ProjectPipeline", err)
		}
	}
	return nil
}
func (this *ProjectPipeline) Validate() error {
	if this.TimeCreated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeCreated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeCreated", err)
		}
	}
	if this.TimeUpdated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TimeUpdated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TimeUpdated", err)
		}
	}
	return nil
}
func (this *ListPipelineCategoryRequest) Validate() error {
	if !(this.ProjectID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectID", fmt.Errorf(`value '%v' must be greater than '0'`, this.ProjectID))
	}
	return nil
}
func (this *ListPipelineCategoryResponse) Validate() error {
	for _, item := range this.Data {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *PipelineCategory) Validate() error {
	return nil
}
func (this *UpdateProjectPipelineRequest) Validate() error {
	if this.PipelineDefinitionID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PipelineDefinitionID", fmt.Errorf(`value '%v' must not be an empty string`, this.PipelineDefinitionID))
	}
	if !(this.ProjectID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectID", fmt.Errorf(`value '%v' must be greater than '0'`, this.ProjectID))
	}
	if this.Name == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must not be an empty string`, this.Name))
	}
	return nil
}
func (this *UpdateProjectPipelineResponse) Validate() error {
	if this.ProjectPipeline != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ProjectPipeline); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ProjectPipeline", err)
		}
	}
	return nil
}
