// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: projectpipeline.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ListAppPipelineYmlRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PipelineYmlList)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListAppPipelineYmlResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListAppRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListAppResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Application)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateProjectPipelineRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateProjectPipelineResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ProjectPipeline)(nil)

// ListAppPipelineYmlRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListAppPipelineYmlRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "appID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AppID = val
			case "branch":
				m.Branch = vals[0]
			}
		}
	}
	return nil
}

// PipelineYmlList implement urlenc.URLValuesUnmarshaler.
func (m *PipelineYmlList) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ymlName":
				m.YmlName = vals[0]
			case "ymlPath":
				m.YmlPath = vals[0]
			}
		}
	}
	return nil
}

// ListAppPipelineYmlResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListAppPipelineYmlResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ListAppRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListAppRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// ListAppResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListAppResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Application implement urlenc.URLValuesUnmarshaler.
func (m *Application) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "mode":
				m.Mode = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "isPublic":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsPublic = val
			case "creator":
				m.Creator = vals[0]
			case "gitRepo":
				m.GitRepo = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgDisplayName":
				m.OrgDisplayName = vals[0]
			case "projectId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectId = val
			case "projectName":
				m.ProjectName = vals[0]
			case "isExternalRepo":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsExternalRepo = val
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "runningNum":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RunningNum = val
			case "failedNum":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.FailedNum = val
			}
		}
	}
	return nil
}

// CreateProjectPipelineRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateProjectPipelineRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "name":
				m.Name = vals[0]
			case "appID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AppID = val
			case "sourceType":
				m.SourceType = vals[0]
			case "ref":
				m.Ref = vals[0]
			case "path":
				m.Path = vals[0]
			case "fileName":
				m.FileName = vals[0]
			}
		}
	}
	return nil
}

// CreateProjectPipelineResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateProjectPipelineResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ProjectPipeline":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
			case "ProjectPipeline.ID":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.ID = vals[0]
			case "ProjectPipeline.name":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.Name = vals[0]
			case "ProjectPipeline.creator":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.Creator = vals[0]
			case "ProjectPipeline.category":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.Category = vals[0]
			case "ProjectPipeline.timeCreated":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				if m.ProjectPipeline.TimeCreated == nil {
					m.ProjectPipeline.TimeCreated = &timestamppb.Timestamp{}
				}
			case "ProjectPipeline.timeCreated.seconds":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				if m.ProjectPipeline.TimeCreated == nil {
					m.ProjectPipeline.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectPipeline.TimeCreated.Seconds = val
			case "ProjectPipeline.timeCreated.nanos":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				if m.ProjectPipeline.TimeCreated == nil {
					m.ProjectPipeline.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ProjectPipeline.TimeCreated.Nanos = int32(val)
			case "ProjectPipeline.timeUpdated":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				if m.ProjectPipeline.TimeUpdated == nil {
					m.ProjectPipeline.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "ProjectPipeline.timeUpdated.seconds":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				if m.ProjectPipeline.TimeUpdated == nil {
					m.ProjectPipeline.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectPipeline.TimeUpdated.Seconds = val
			case "ProjectPipeline.timeUpdated.nanos":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				if m.ProjectPipeline.TimeUpdated == nil {
					m.ProjectPipeline.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ProjectPipeline.TimeUpdated.Nanos = int32(val)
			case "ProjectPipeline.sourceType":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.SourceType = vals[0]
			case "ProjectPipeline.remote":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.Remote = vals[0]
			case "ProjectPipeline.ref":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.Ref = vals[0]
			case "ProjectPipeline.path":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.Path = vals[0]
			case "ProjectPipeline.fileName":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.FileName = vals[0]
			case "ProjectPipeline.pipelineSourceId":
				if m.ProjectPipeline == nil {
					m.ProjectPipeline = &ProjectPipeline{}
				}
				m.ProjectPipeline.PipelineSourceId = vals[0]
			}
		}
	}
	return nil
}

// ProjectPipeline implement urlenc.URLValuesUnmarshaler.
func (m *ProjectPipeline) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "creator":
				m.Creator = vals[0]
			case "category":
				m.Category = vals[0]
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			case "sourceType":
				m.SourceType = vals[0]
			case "remote":
				m.Remote = vals[0]
			case "ref":
				m.Ref = vals[0]
			case "path":
				m.Path = vals[0]
			case "fileName":
				m.FileName = vals[0]
			case "pipelineSourceId":
				m.PipelineSourceId = vals[0]
			}
		}
	}
	return nil
}
