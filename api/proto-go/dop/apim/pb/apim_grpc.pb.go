// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: apim.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ExportRecordsClient is the client API for ExportRecords service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportRecordsClient interface {
	CreateExportRecord(ctx context.Context, in *CreateExportRecordsReq, opts ...grpc.CallOption) (*CreateExportRecordsResp, error)
	ListExportRecords(ctx context.Context, in *ListExportRecordsReq, opts ...grpc.CallOption) (*ListExportRecordsResp, error)
	DeleteExportRecord(ctx context.Context, in *DeleteExportRecordReq, opts ...grpc.CallOption) (*Empty, error)
}

type exportRecordsClient struct {
	cc grpc1.ClientConnInterface
}

func NewExportRecordsClient(cc grpc1.ClientConnInterface) ExportRecordsClient {
	return &exportRecordsClient{cc}
}

func (c *exportRecordsClient) CreateExportRecord(ctx context.Context, in *CreateExportRecordsReq, opts ...grpc.CallOption) (*CreateExportRecordsResp, error) {
	out := new(CreateExportRecordsResp)
	err := c.cc.Invoke(ctx, "/erda.dop.apim.ExportRecords/CreateExportRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportRecordsClient) ListExportRecords(ctx context.Context, in *ListExportRecordsReq, opts ...grpc.CallOption) (*ListExportRecordsResp, error) {
	out := new(ListExportRecordsResp)
	err := c.cc.Invoke(ctx, "/erda.dop.apim.ExportRecords/ListExportRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportRecordsClient) DeleteExportRecord(ctx context.Context, in *DeleteExportRecordReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/erda.dop.apim.ExportRecords/DeleteExportRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportRecordsServer is the server API for ExportRecords service.
// All implementations should embed UnimplementedExportRecordsServer
// for forward compatibility
type ExportRecordsServer interface {
	CreateExportRecord(context.Context, *CreateExportRecordsReq) (*CreateExportRecordsResp, error)
	ListExportRecords(context.Context, *ListExportRecordsReq) (*ListExportRecordsResp, error)
	DeleteExportRecord(context.Context, *DeleteExportRecordReq) (*Empty, error)
}

// UnimplementedExportRecordsServer should be embedded to have forward compatible implementations.
type UnimplementedExportRecordsServer struct {
}

func (*UnimplementedExportRecordsServer) CreateExportRecord(context.Context, *CreateExportRecordsReq) (*CreateExportRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExportRecord not implemented")
}
func (*UnimplementedExportRecordsServer) ListExportRecords(context.Context, *ListExportRecordsReq) (*ListExportRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExportRecords not implemented")
}
func (*UnimplementedExportRecordsServer) DeleteExportRecord(context.Context, *DeleteExportRecordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExportRecord not implemented")
}

func RegisterExportRecordsServer(s grpc1.ServiceRegistrar, srv ExportRecordsServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ExportRecords_serviceDesc(srv, opts...), srv)
}

var _ExportRecords_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.apim.ExportRecords",
	HandlerType: (*ExportRecordsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "apim.proto",
}

func _get_ExportRecords_serviceDesc(srv ExportRecordsServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ExportRecords_CreateExportRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateExportRecord(ctx, req.(*CreateExportRecordsReq))
	}
	var _ExportRecords_CreateExportRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExportRecords_CreateExportRecord_info = transport.NewServiceInfo("erda.dop.apim.ExportRecords", "CreateExportRecord", srv)
		_ExportRecords_CreateExportRecord_Handler = h.Interceptor(_ExportRecords_CreateExportRecord_Handler)
	}

	_ExportRecords_ListExportRecords_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListExportRecords(ctx, req.(*ListExportRecordsReq))
	}
	var _ExportRecords_ListExportRecords_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExportRecords_ListExportRecords_info = transport.NewServiceInfo("erda.dop.apim.ExportRecords", "ListExportRecords", srv)
		_ExportRecords_ListExportRecords_Handler = h.Interceptor(_ExportRecords_ListExportRecords_Handler)
	}

	_ExportRecords_DeleteExportRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteExportRecord(ctx, req.(*DeleteExportRecordReq))
	}
	var _ExportRecords_DeleteExportRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ExportRecords_DeleteExportRecord_info = transport.NewServiceInfo("erda.dop.apim.ExportRecords", "DeleteExportRecord", srv)
		_ExportRecords_DeleteExportRecord_Handler = h.Interceptor(_ExportRecords_DeleteExportRecord_Handler)
	}

	var serviceDesc = _ExportRecords_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateExportRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateExportRecordsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExportRecordsServer).CreateExportRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExportRecords_CreateExportRecord_info)
				}
				if interceptor == nil {
					return _ExportRecords_CreateExportRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.apim.ExportRecords/CreateExportRecord",
				}
				return interceptor(ctx, in, info, _ExportRecords_CreateExportRecord_Handler)
			},
		},
		{
			MethodName: "ListExportRecords",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListExportRecordsReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExportRecordsServer).ListExportRecords(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExportRecords_ListExportRecords_info)
				}
				if interceptor == nil {
					return _ExportRecords_ListExportRecords_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.apim.ExportRecords/ListExportRecords",
				}
				return interceptor(ctx, in, info, _ExportRecords_ListExportRecords_Handler)
			},
		},
		{
			MethodName: "DeleteExportRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteExportRecordReq)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ExportRecordsServer).DeleteExportRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ExportRecords_DeleteExportRecord_info)
				}
				if interceptor == nil {
					return _ExportRecords_DeleteExportRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.apim.ExportRecords/DeleteExportRecord",
				}
				return interceptor(ctx, in, info, _ExportRecords_DeleteExportRecord_Handler)
			},
		},
	}
	return &serviceDesc
}
