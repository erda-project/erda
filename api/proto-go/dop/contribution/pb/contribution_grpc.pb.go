// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: contribution.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ContributionServiceClient is the client API for ContributionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContributionServiceClient interface {
	GetPersonalContribution(ctx context.Context, in *GetPersonalContributionRequest, opts ...grpc.CallOption) (*GetPersonalContributionResponse, error)
	GetActiveRank(ctx context.Context, in *GetActiveRankRequest, opts ...grpc.CallOption) (*GetActiveRankRequestResponse, error)
}

type contributionServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewContributionServiceClient(cc grpc1.ClientConnInterface) ContributionServiceClient {
	return &contributionServiceClient{cc}
}

func (c *contributionServiceClient) GetPersonalContribution(ctx context.Context, in *GetPersonalContributionRequest, opts ...grpc.CallOption) (*GetPersonalContributionResponse, error) {
	out := new(GetPersonalContributionResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.contribution.ContributionService/GetPersonalContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contributionServiceClient) GetActiveRank(ctx context.Context, in *GetActiveRankRequest, opts ...grpc.CallOption) (*GetActiveRankRequestResponse, error) {
	out := new(GetActiveRankRequestResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.contribution.ContributionService/GetActiveRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContributionServiceServer is the server API for ContributionService service.
// All implementations should embed UnimplementedContributionServiceServer
// for forward compatibility
type ContributionServiceServer interface {
	GetPersonalContribution(context.Context, *GetPersonalContributionRequest) (*GetPersonalContributionResponse, error)
	GetActiveRank(context.Context, *GetActiveRankRequest) (*GetActiveRankRequestResponse, error)
}

// UnimplementedContributionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedContributionServiceServer struct {
}

func (*UnimplementedContributionServiceServer) GetPersonalContribution(context.Context, *GetPersonalContributionRequest) (*GetPersonalContributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalContribution not implemented")
}
func (*UnimplementedContributionServiceServer) GetActiveRank(context.Context, *GetActiveRankRequest) (*GetActiveRankRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveRank not implemented")
}

func RegisterContributionServiceServer(s grpc1.ServiceRegistrar, srv ContributionServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ContributionService_serviceDesc(srv, opts...), srv)
}

var _ContributionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.contribution.ContributionService",
	HandlerType: (*ContributionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "contribution.proto",
}

func _get_ContributionService_serviceDesc(srv ContributionServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ContributionService_GetPersonalContribution_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetPersonalContribution(ctx, req.(*GetPersonalContributionRequest))
	}
	var _ContributionService_GetPersonalContribution_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ContributionService_GetPersonalContribution_info = transport.NewServiceInfo("erda.dop.contribution.ContributionService", "GetPersonalContribution", srv)
		_ContributionService_GetPersonalContribution_Handler = h.Interceptor(_ContributionService_GetPersonalContribution_Handler)
	}

	_ContributionService_GetActiveRank_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetActiveRank(ctx, req.(*GetActiveRankRequest))
	}
	var _ContributionService_GetActiveRank_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ContributionService_GetActiveRank_info = transport.NewServiceInfo("erda.dop.contribution.ContributionService", "GetActiveRank", srv)
		_ContributionService_GetActiveRank_Handler = h.Interceptor(_ContributionService_GetActiveRank_Handler)
	}

	var serviceDesc = _ContributionService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GetPersonalContribution",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetPersonalContributionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ContributionServiceServer).GetPersonalContribution(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ContributionService_GetPersonalContribution_info)
				}
				if interceptor == nil {
					return _ContributionService_GetPersonalContribution_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.contribution.ContributionService/GetPersonalContribution",
				}
				return interceptor(ctx, in, info, _ContributionService_GetPersonalContribution_Handler)
			},
		},
		{
			MethodName: "GetActiveRank",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetActiveRankRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ContributionServiceServer).GetActiveRank(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ContributionService_GetActiveRank_info)
				}
				if interceptor == nil {
					return _ContributionService_GetActiveRank_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.contribution.ContributionService/GetActiveRank",
				}
				return interceptor(ctx, in, info, _ContributionService_GetActiveRank_Handler)
			},
		},
	}
	return &serviceDesc
}
