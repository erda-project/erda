// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: devworkflow.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/devWorkflow/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// DevWorkflowService devworkflow.proto
	DevWorkflowService() pb.DevWorkflowServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		devWorkflowService: pb.NewDevWorkflowServiceClient(cc),
	}
}

type serviceClients struct {
	devWorkflowService pb.DevWorkflowServiceClient
}

func (c *serviceClients) DevWorkflowService() pb.DevWorkflowServiceClient {
	return c.devWorkflowService
}

type devWorkflowServiceWrapper struct {
	client pb.DevWorkflowServiceClient
	opts   []grpc1.CallOption
}

func (s *devWorkflowServiceWrapper) CreateDevWorkflow(ctx context.Context, req *pb.CreateDevWorkflowRequest) (*pb.CreateDevWorkflowResponse, error) {
	return s.client.CreateDevWorkflow(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *devWorkflowServiceWrapper) DeleteDevWorkflow(ctx context.Context, req *pb.DeleteDevWorkflowRequest) (*pb.DeleteDevWorkflowResponse, error) {
	return s.client.DeleteDevWorkflow(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *devWorkflowServiceWrapper) UpdateDevWorkflow(ctx context.Context, req *pb.UpdateDevWorkflowRequest) (*pb.UpdateDevWorkflowResponse, error) {
	return s.client.UpdateDevWorkflow(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *devWorkflowServiceWrapper) GetDevWorkflowsByProjectID(ctx context.Context, req *pb.GetDevWorkflowRequest) (*pb.GetDevWorkflowResponse, error) {
	return s.client.GetDevWorkflowsByProjectID(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
