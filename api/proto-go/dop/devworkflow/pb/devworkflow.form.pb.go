// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: devworkflow.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateDevWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateDevWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteDevWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteDevWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateDevWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateDevWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetDevWorkflowRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetDevWorkflowResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DevWorkflow)(nil)

// CreateDevWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateDevWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// CreateDevWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateDevWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.ID = vals[0]
			case "data.workFlows":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.WorkFlows = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.orgName":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.OrgName = vals[0]
			case "data.projectID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ProjectID = val
			case "data.projectName":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.ProjectName = vals[0]
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.creator":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.Creator = vals[0]
			case "data.updater":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.Updater = vals[0]
			}
		}
	}
	return nil
}

// DeleteDevWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteDevWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// DeleteDevWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteDevWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UpdateDevWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateDevWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "workFlows":
				m.WorkFlows = vals[0]
			}
		}
	}
	return nil
}

// UpdateDevWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateDevWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.ID = vals[0]
			case "data.workFlows":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.WorkFlows = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.orgName":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.OrgName = vals[0]
			case "data.projectID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ProjectID = val
			case "data.projectName":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.ProjectName = vals[0]
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.creator":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.Creator = vals[0]
			case "data.updater":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.Updater = vals[0]
			}
		}
	}
	return nil
}

// GetDevWorkflowRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetDevWorkflowRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			}
		}
	}
	return nil
}

// GetDevWorkflowResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetDevWorkflowResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
			case "data.ID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.ID = vals[0]
			case "data.workFlows":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.WorkFlows = vals[0]
			case "data.orgID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.OrgID = val
			case "data.orgName":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.OrgName = vals[0]
			case "data.projectID":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.ProjectID = val
			case "data.projectName":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.ProjectName = vals[0]
			case "data.timeCreated":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
			case "data.timeCreated.seconds":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Seconds = val
			case "data.timeCreated.nanos":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeCreated == nil {
					m.Data.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeCreated.Nanos = int32(val)
			case "data.timeUpdated":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "data.timeUpdated.seconds":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Seconds = val
			case "data.timeUpdated.nanos":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				if m.Data.TimeUpdated == nil {
					m.Data.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Data.TimeUpdated.Nanos = int32(val)
			case "data.creator":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.Creator = vals[0]
			case "data.updater":
				if m.Data == nil {
					m.Data = &DevWorkflow{}
				}
				m.Data.Updater = vals[0]
			}
		}
	}
	return nil
}

// DevWorkflow implement urlenc.URLValuesUnmarshaler.
func (m *DevWorkflow) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "workFlows":
				m.WorkFlows = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "timeUpdated":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
			case "timeUpdated.seconds":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeUpdated.Seconds = val
			case "timeUpdated.nanos":
				if m.TimeUpdated == nil {
					m.TimeUpdated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeUpdated.Nanos = int32(val)
			case "creator":
				m.Creator = vals[0]
			case "updater":
				m.Updater = vals[0]
			}
		}
	}
	return nil
}
