// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: devworkflow.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DevWorkflowServiceClient is the client API for DevWorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevWorkflowServiceClient interface {
	CreateDevWorkflow(ctx context.Context, in *CreateDevWorkflowRequest, opts ...grpc.CallOption) (*CreateDevWorkflowResponse, error)
	DeleteDevWorkflow(ctx context.Context, in *DeleteDevWorkflowRequest, opts ...grpc.CallOption) (*DeleteDevWorkflowResponse, error)
	UpdateDevWorkflow(ctx context.Context, in *UpdateDevWorkflowRequest, opts ...grpc.CallOption) (*UpdateDevWorkflowResponse, error)
	GetDevWorkflowsByProjectID(ctx context.Context, in *GetDevWorkflowRequest, opts ...grpc.CallOption) (*GetDevWorkflowResponse, error)
}

type devWorkflowServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDevWorkflowServiceClient(cc grpc1.ClientConnInterface) DevWorkflowServiceClient {
	return &devWorkflowServiceClient{cc}
}

func (c *devWorkflowServiceClient) CreateDevWorkflow(ctx context.Context, in *CreateDevWorkflowRequest, opts ...grpc.CallOption) (*CreateDevWorkflowResponse, error) {
	out := new(CreateDevWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devworkflow.DevWorkflowService/CreateDevWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devWorkflowServiceClient) DeleteDevWorkflow(ctx context.Context, in *DeleteDevWorkflowRequest, opts ...grpc.CallOption) (*DeleteDevWorkflowResponse, error) {
	out := new(DeleteDevWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devworkflow.DevWorkflowService/DeleteDevWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devWorkflowServiceClient) UpdateDevWorkflow(ctx context.Context, in *UpdateDevWorkflowRequest, opts ...grpc.CallOption) (*UpdateDevWorkflowResponse, error) {
	out := new(UpdateDevWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devworkflow.DevWorkflowService/UpdateDevWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devWorkflowServiceClient) GetDevWorkflowsByProjectID(ctx context.Context, in *GetDevWorkflowRequest, opts ...grpc.CallOption) (*GetDevWorkflowResponse, error) {
	out := new(GetDevWorkflowResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devworkflow.DevWorkflowService/GetDevWorkflowsByProjectID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevWorkflowServiceServer is the server API for DevWorkflowService service.
// All implementations should embed UnimplementedDevWorkflowServiceServer
// for forward compatibility
type DevWorkflowServiceServer interface {
	CreateDevWorkflow(context.Context, *CreateDevWorkflowRequest) (*CreateDevWorkflowResponse, error)
	DeleteDevWorkflow(context.Context, *DeleteDevWorkflowRequest) (*DeleteDevWorkflowResponse, error)
	UpdateDevWorkflow(context.Context, *UpdateDevWorkflowRequest) (*UpdateDevWorkflowResponse, error)
	GetDevWorkflowsByProjectID(context.Context, *GetDevWorkflowRequest) (*GetDevWorkflowResponse, error)
}

// UnimplementedDevWorkflowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDevWorkflowServiceServer struct {
}

func (*UnimplementedDevWorkflowServiceServer) CreateDevWorkflow(context.Context, *CreateDevWorkflowRequest) (*CreateDevWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevWorkflow not implemented")
}
func (*UnimplementedDevWorkflowServiceServer) DeleteDevWorkflow(context.Context, *DeleteDevWorkflowRequest) (*DeleteDevWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevWorkflow not implemented")
}
func (*UnimplementedDevWorkflowServiceServer) UpdateDevWorkflow(context.Context, *UpdateDevWorkflowRequest) (*UpdateDevWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevWorkflow not implemented")
}
func (*UnimplementedDevWorkflowServiceServer) GetDevWorkflowsByProjectID(context.Context, *GetDevWorkflowRequest) (*GetDevWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevWorkflowsByProjectID not implemented")
}

func RegisterDevWorkflowServiceServer(s grpc1.ServiceRegistrar, srv DevWorkflowServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DevWorkflowService_serviceDesc(srv, opts...), srv)
}

var _DevWorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.devworkflow.DevWorkflowService",
	HandlerType: (*DevWorkflowServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "devworkflow.proto",
}

func _get_DevWorkflowService_serviceDesc(srv DevWorkflowServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DevWorkflowService_CreateDevWorkflow_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateDevWorkflow(ctx, req.(*CreateDevWorkflowRequest))
	}
	var _DevWorkflowService_CreateDevWorkflow_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevWorkflowService_CreateDevWorkflow_info = transport.NewServiceInfo("erda.dop.devworkflow.DevWorkflowService", "CreateDevWorkflow", srv)
		_DevWorkflowService_CreateDevWorkflow_Handler = h.Interceptor(_DevWorkflowService_CreateDevWorkflow_Handler)
	}

	_DevWorkflowService_DeleteDevWorkflow_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteDevWorkflow(ctx, req.(*DeleteDevWorkflowRequest))
	}
	var _DevWorkflowService_DeleteDevWorkflow_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevWorkflowService_DeleteDevWorkflow_info = transport.NewServiceInfo("erda.dop.devworkflow.DevWorkflowService", "DeleteDevWorkflow", srv)
		_DevWorkflowService_DeleteDevWorkflow_Handler = h.Interceptor(_DevWorkflowService_DeleteDevWorkflow_Handler)
	}

	_DevWorkflowService_UpdateDevWorkflow_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateDevWorkflow(ctx, req.(*UpdateDevWorkflowRequest))
	}
	var _DevWorkflowService_UpdateDevWorkflow_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevWorkflowService_UpdateDevWorkflow_info = transport.NewServiceInfo("erda.dop.devworkflow.DevWorkflowService", "UpdateDevWorkflow", srv)
		_DevWorkflowService_UpdateDevWorkflow_Handler = h.Interceptor(_DevWorkflowService_UpdateDevWorkflow_Handler)
	}

	_DevWorkflowService_GetDevWorkflowsByProjectID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDevWorkflowsByProjectID(ctx, req.(*GetDevWorkflowRequest))
	}
	var _DevWorkflowService_GetDevWorkflowsByProjectID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevWorkflowService_GetDevWorkflowsByProjectID_info = transport.NewServiceInfo("erda.dop.devworkflow.DevWorkflowService", "GetDevWorkflowsByProjectID", srv)
		_DevWorkflowService_GetDevWorkflowsByProjectID_Handler = h.Interceptor(_DevWorkflowService_GetDevWorkflowsByProjectID_Handler)
	}

	var serviceDesc = _DevWorkflowService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateDevWorkflow",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateDevWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevWorkflowServiceServer).CreateDevWorkflow(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevWorkflowService_CreateDevWorkflow_info)
				}
				if interceptor == nil {
					return _DevWorkflowService_CreateDevWorkflow_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devworkflow.DevWorkflowService/CreateDevWorkflow",
				}
				return interceptor(ctx, in, info, _DevWorkflowService_CreateDevWorkflow_Handler)
			},
		},
		{
			MethodName: "DeleteDevWorkflow",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteDevWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevWorkflowServiceServer).DeleteDevWorkflow(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevWorkflowService_DeleteDevWorkflow_info)
				}
				if interceptor == nil {
					return _DevWorkflowService_DeleteDevWorkflow_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devworkflow.DevWorkflowService/DeleteDevWorkflow",
				}
				return interceptor(ctx, in, info, _DevWorkflowService_DeleteDevWorkflow_Handler)
			},
		},
		{
			MethodName: "UpdateDevWorkflow",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateDevWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevWorkflowServiceServer).UpdateDevWorkflow(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevWorkflowService_UpdateDevWorkflow_info)
				}
				if interceptor == nil {
					return _DevWorkflowService_UpdateDevWorkflow_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devworkflow.DevWorkflowService/UpdateDevWorkflow",
				}
				return interceptor(ctx, in, info, _DevWorkflowService_UpdateDevWorkflow_Handler)
			},
		},
		{
			MethodName: "GetDevWorkflowsByProjectID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDevWorkflowRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevWorkflowServiceServer).GetDevWorkflowsByProjectID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevWorkflowService_GetDevWorkflowsByProjectID_info)
				}
				if interceptor == nil {
					return _DevWorkflowService_GetDevWorkflowsByProjectID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devworkflow.DevWorkflowService/GetDevWorkflowsByProjectID",
				}
				return interceptor(ctx, in, info, _DevWorkflowService_GetDevWorkflowsByProjectID_Handler)
			},
		},
	}
	return &serviceDesc
}
