// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: unittest.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestRecordPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo        int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ApplicationId uint64 `protobuf:"varint,3,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
}

func (x *TestRecordPagingRequest) Reset() {
	*x = TestRecordPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRecordPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecordPagingRequest) ProtoMessage() {}

func (x *TestRecordPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecordPagingRequest.ProtoReflect.Descriptor instead.
func (*TestRecordPagingRequest) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{0}
}

func (x *TestRecordPagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TestRecordPagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TestRecordPagingRequest) GetApplicationId() uint64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

type TestRecordPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TestRecordPagingResult `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestRecordPagingResponse) Reset() {
	*x = TestRecordPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRecordPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecordPagingResponse) ProtoMessage() {}

func (x *TestRecordPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecordPagingResponse.ProtoReflect.Descriptor instead.
func (*TestRecordPagingResponse) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{1}
}

func (x *TestRecordPagingResponse) GetData() *TestRecordPagingResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestRecordPagingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TestRecord `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TestRecordPagingResult) Reset() {
	*x = TestRecordPagingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRecordPagingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecordPagingResult) ProtoMessage() {}

func (x *TestRecordPagingResult) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecordPagingResult.ProtoReflect.Descriptor instead.
func (*TestRecordPagingResult) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{2}
}

func (x *TestRecordPagingResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TestRecordPagingResult) GetList() []*TestRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type TestRecordGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TestRecordGetRequest) Reset() {
	*x = TestRecordGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRecordGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecordGetRequest) ProtoMessage() {}

func (x *TestRecordGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecordGetRequest.ProtoReflect.Descriptor instead.
func (*TestRecordGetRequest) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{3}
}

func (x *TestRecordGetRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TestRecordGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TestRecord `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestRecordGetResponse) Reset() {
	*x = TestRecordGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRecordGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecordGetResponse) ProtoMessage() {}

func (x *TestRecordGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecordGetResponse.ProtoReflect.Descriptor instead.
func (*TestRecordGetResponse) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{4}
}

func (x *TestRecordGetResponse) GetData() *TestRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ApplicationId   int64                  `protobuf:"varint,4,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	ProjectId       int64                  `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId,omitempty"`
	BuildId         int64                  `protobuf:"varint,6,opt,name=buildId,proto3" json:"buildId,omitempty"`
	Name            string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Uuid            string                 `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ApplicationName string                 `protobuf:"bytes,9,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Output          string                 `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`
	Desc            string                 `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	OperatorId      string                 `protobuf:"bytes,12,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	OperatorName    string                 `protobuf:"bytes,13,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	CommitId        string                 `protobuf:"bytes,14,opt,name=commitId,proto3" json:"commitId,omitempty"`
	Branch          string                 `protobuf:"bytes,15,opt,name=branch,proto3" json:"branch,omitempty"`
	GitRepo         string                 `protobuf:"bytes,16,opt,name=gitRepo,proto3" json:"gitRepo,omitempty"`
	CaseDir         string                 `protobuf:"bytes,17,opt,name=caseDir,proto3" json:"caseDir,omitempty"`
	Application     string                 `protobuf:"bytes,18,opt,name=application,proto3" json:"application,omitempty"`
	Type            string                 `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`
	Totals          *TestTotal             `protobuf:"bytes,20,opt,name=totals,proto3" json:"totals,omitempty"`
	ParserType      string                 `protobuf:"bytes,21,opt,name=parserType,proto3" json:"parserType,omitempty"`
	Extra           map[string]string      `protobuf:"bytes,22,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Envs            map[string]string      `protobuf:"bytes,23,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Workspace       string                 `protobuf:"bytes,24,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Suites          []*TestSuite           `protobuf:"bytes,25,rep,name=suites,proto3" json:"suites,omitempty"`
	CoverageReport  []*CodeCoverageNode    `protobuf:"bytes,26,rep,name=coverageReport,proto3" json:"coverageReport,omitempty"`
}

func (x *TestRecord) Reset() {
	*x = TestRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecord) ProtoMessage() {}

func (x *TestRecord) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecord.ProtoReflect.Descriptor instead.
func (*TestRecord) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{5}
}

func (x *TestRecord) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestRecord) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *TestRecord) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *TestRecord) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *TestRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestRecord) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TestRecord) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *TestRecord) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *TestRecord) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TestRecord) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TestRecord) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *TestRecord) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *TestRecord) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *TestRecord) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *TestRecord) GetCaseDir() string {
	if x != nil {
		return x.CaseDir
	}
	return ""
}

func (x *TestRecord) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *TestRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestRecord) GetTotals() *TestTotal {
	if x != nil {
		return x.Totals
	}
	return nil
}

func (x *TestRecord) GetParserType() string {
	if x != nil {
		return x.ParserType
	}
	return ""
}

func (x *TestRecord) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *TestRecord) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *TestRecord) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *TestRecord) GetSuites() []*TestSuite {
	if x != nil {
		return x.Suites
	}
	return nil
}

func (x *TestRecord) GetCoverageReport() []*CodeCoverageNode {
	if x != nil {
		return x.CoverageReport
	}
	return nil
}

type TestTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestTypeRequest) Reset() {
	*x = TestTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTypeRequest) ProtoMessage() {}

func (x *TestTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTypeRequest.ProtoReflect.Descriptor instead.
func (*TestTypeRequest) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{6}
}

type TestTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TestTypeResponse) Reset() {
	*x = TestTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTypeResponse) ProtoMessage() {}

func (x *TestTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTypeResponse.ProtoReflect.Descriptor instead.
func (*TestTypeResponse) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{7}
}

func (x *TestTypeResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestCallBackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results        *TestResult         `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
	Totals         *TestTotal          `protobuf:"bytes,2,opt,name=totals,proto3" json:"totals,omitempty"`
	Suites         []*TestSuite        `protobuf:"bytes,3,rep,name=suites,proto3" json:"suites,omitempty"`
	CoverageReport []*CodeCoverageNode `protobuf:"bytes,4,rep,name=coverageReport,proto3" json:"coverageReport,omitempty"`
}

func (x *TestCallBackRequest) Reset() {
	*x = TestCallBackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCallBackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCallBackRequest) ProtoMessage() {}

func (x *TestCallBackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCallBackRequest.ProtoReflect.Descriptor instead.
func (*TestCallBackRequest) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{8}
}

func (x *TestCallBackRequest) GetResults() *TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestCallBackRequest) GetTotals() *TestTotal {
	if x != nil {
		return x.Totals
	}
	return nil
}

func (x *TestCallBackRequest) GetSuites() []*TestSuite {
	if x != nil {
		return x.Suites
	}
	return nil
}

func (x *TestCallBackRequest) GetCoverageReport() []*CodeCoverageNode {
	if x != nil {
		return x.CoverageReport
	}
	return nil
}

type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId   int64             `protobuf:"varint,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	BuildId         int64             `protobuf:"varint,2,opt,name=buildId,proto3" json:"buildId,omitempty"`
	ProjectId       int64             `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Type            string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Name            string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ApplicationName string            `protobuf:"bytes,6,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Branch          string            `protobuf:"bytes,7,opt,name=branch,proto3" json:"branch,omitempty"`
	GitRepo         string            `protobuf:"bytes,8,opt,name=gitRepo,proto3" json:"gitRepo,omitempty"`
	CommitId        string            `protobuf:"bytes,9,opt,name=commitId,proto3" json:"commitId,omitempty"`
	OperatorName    string            `protobuf:"bytes,10,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	OperatorId      string            `protobuf:"bytes,11,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	Status          string            `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Workspace       string            `protobuf:"bytes,13,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ParserType      string            `protobuf:"bytes,14,opt,name=parserType,proto3" json:"parserType,omitempty"`
	Uuid            string            `protobuf:"bytes,15,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Extra           map[string]string `protobuf:"bytes,16,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{9}
}

func (x *TestResult) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *TestResult) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *TestResult) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *TestResult) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResult) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *TestResult) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *TestResult) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *TestResult) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *TestResult) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *TestResult) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TestResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestResult) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *TestResult) GetParserType() string {
	if x != nil {
		return x.ParserType
	}
	return ""
}

func (x *TestResult) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TestResult) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TestError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body    string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *TestError) Reset() {
	*x = TestError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestError) ProtoMessage() {}

func (x *TestError) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestError.ProtoReflect.Descriptor instead.
func (*TestError) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{10}
}

func (x *TestError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TestError) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestError) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Classname string     `protobuf:"bytes,2,opt,name=classname,proto3" json:"classname,omitempty"`
	Duration  int64      `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Status    string     `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Error     *TestError `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Stdout    string     `protobuf:"bytes,6,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr    string     `protobuf:"bytes,7,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{11}
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetClassname() string {
	if x != nil {
		return x.Classname
	}
	return ""
}

func (x *Test) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Test) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Test) GetError() *TestError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Test) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Test) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type TestTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests    int64            `protobuf:"varint,1,opt,name=tests,proto3" json:"tests,omitempty"`
	Duration int64            `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Statuses map[string]int64 `protobuf:"bytes,3,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TestTotal) Reset() {
	*x = TestTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTotal) ProtoMessage() {}

func (x *TestTotal) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTotal.ProtoReflect.Descriptor instead.
func (*TestTotal) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{12}
}

func (x *TestTotal) GetTests() int64 {
	if x != nil {
		return x.Tests
	}
	return 0
}

func (x *TestTotal) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestTotal) GetStatuses() map[string]int64 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type TestSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Package    string            `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tests      []*Test           `protobuf:"bytes,4,rep,name=tests,proto3" json:"tests,omitempty"`
	Stdout     string            `protobuf:"bytes,5,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     string            `protobuf:"bytes,6,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Totals     *TestTotal        `protobuf:"bytes,7,opt,name=totals,proto3" json:"totals,omitempty"`
	Extra      map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestSuite) Reset() {
	*x = TestSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuite) ProtoMessage() {}

func (x *TestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuite.ProtoReflect.Descriptor instead.
func (*TestSuite) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{13}
}

func (x *TestSuite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSuite) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *TestSuite) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *TestSuite) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *TestSuite) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *TestSuite) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *TestSuite) GetTotals() *TestTotal {
	if x != nil {
		return x.Totals
	}
	return nil
}

func (x *TestSuite) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ToolTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formatter string `protobuf:"bytes,1,opt,name=formatter,proto3" json:"formatter,omitempty"`
}

func (x *ToolTip) Reset() {
	*x = ToolTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolTip) ProtoMessage() {}

func (x *ToolTip) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolTip.ProtoReflect.Descriptor instead.
func (*ToolTip) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{14}
}

func (x *ToolTip) GetFormatter() string {
	if x != nil {
		return x.Formatter
	}
	return ""
}

type CodeCoverageNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    []float32           `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	Name     string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path     string              `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Tooltip  *ToolTip            `protobuf:"bytes,4,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	Children []*CodeCoverageNode `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	Counter  []*ReportCounter    `protobuf:"bytes,6,rep,name=counter,proto3" json:"counter,omitempty"`
}

func (x *CodeCoverageNode) Reset() {
	*x = CodeCoverageNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeCoverageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeCoverageNode) ProtoMessage() {}

func (x *CodeCoverageNode) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeCoverageNode.ProtoReflect.Descriptor instead.
func (*CodeCoverageNode) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{15}
}

func (x *CodeCoverageNode) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CodeCoverageNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeCoverageNode) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CodeCoverageNode) GetTooltip() *ToolTip {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

func (x *CodeCoverageNode) GetChildren() []*CodeCoverageNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *CodeCoverageNode) GetCounter() []*ReportCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type ReportCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Covered int64  `protobuf:"varint,1,opt,name=covered,proto3" json:"covered,omitempty"`
	Missed  int64  `protobuf:"varint,2,opt,name=missed,proto3" json:"missed,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ReportCounter) Reset() {
	*x = ReportCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCounter) ProtoMessage() {}

func (x *ReportCounter) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCounter.ProtoReflect.Descriptor instead.
func (*ReportCounter) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{16}
}

func (x *ReportCounter) GetCovered() int64 {
	if x != nil {
		return x.Covered
	}
	return 0
}

func (x *ReportCounter) GetMissed() int64 {
	if x != nil {
		return x.Missed
	}
	return 0
}

func (x *ReportCounter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ReportPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Class   []*ReportClass   `protobuf:"bytes,2,rep,name=class,proto3" json:"class,omitempty"`
	Counter []*ReportCounter `protobuf:"bytes,3,rep,name=counter,proto3" json:"counter,omitempty"`
}

func (x *ReportPackage) Reset() {
	*x = ReportPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPackage) ProtoMessage() {}

func (x *ReportPackage) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPackage.ProtoReflect.Descriptor instead.
func (*ReportPackage) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{17}
}

func (x *ReportPackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportPackage) GetClass() []*ReportClass {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *ReportPackage) GetCounter() []*ReportCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type ReportClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sourcefilename string           `protobuf:"bytes,2,opt,name=sourcefilename,proto3" json:"sourcefilename,omitempty"`
	Method         []*ReportMethod  `protobuf:"bytes,3,rep,name=method,proto3" json:"method,omitempty"`
	Counter        []*ReportCounter `protobuf:"bytes,4,rep,name=counter,proto3" json:"counter,omitempty"`
}

func (x *ReportClass) Reset() {
	*x = ReportClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportClass) ProtoMessage() {}

func (x *ReportClass) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportClass.ProtoReflect.Descriptor instead.
func (*ReportClass) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{18}
}

func (x *ReportClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportClass) GetSourcefilename() string {
	if x != nil {
		return x.Sourcefilename
	}
	return ""
}

func (x *ReportClass) GetMethod() []*ReportMethod {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *ReportClass) GetCounter() []*ReportCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type ReportMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc    string           `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Line    string           `protobuf:"bytes,3,opt,name=line,proto3" json:"line,omitempty"`
	Counter []*ReportCounter `protobuf:"bytes,4,rep,name=counter,proto3" json:"counter,omitempty"`
}

func (x *ReportMethod) Reset() {
	*x = ReportMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMethod) ProtoMessage() {}

func (x *ReportMethod) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMethod.ProtoReflect.Descriptor instead.
func (*ReportMethod) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{19}
}

func (x *ReportMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportMethod) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReportMethod) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *ReportMethod) GetCounter() []*ReportCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type TestCallBackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestCallBackResponse) Reset() {
	*x = TestCallBackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unittest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCallBackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCallBackResponse) ProtoMessage() {}

func (x *TestCallBackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_unittest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCallBackResponse.ProtoReflect.Descriptor instead.
func (*TestCallBackResponse) Descriptor() ([]byte, []int) {
	return file_unittest_proto_rawDescGZIP(), []int{20}
}

func (x *TestCallBackResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_unittest_proto protoreflect.FileDescriptor

var file_unittest_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x17, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x5c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64,
	0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x15,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71,
	0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x08, 0x0a, 0x0a,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x06, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3e, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x06, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x02,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x06, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0xb5, 0x04, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x09, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x04, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x22, 0xc5, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x03, 0x0a, 0x09, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73,
	0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x07, 0x54,
	0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70,
	0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e,
	0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22,
	0x89, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x14, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc9, 0x05, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x08,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71,
	0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0xfa, 0x81, 0xf9, 0x1b, 0x1f, 0x0a, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x71, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xa8, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x1f, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2d, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x1b, 0x0a, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x71, 0x61, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x71, 0x61, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x13, 0x0a, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c, 0x0b, 0x22, 0x03, 0x64, 0x6f, 0x70, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65,
	0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x6f, 0x70,
	0x2f, 0x71, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_unittest_proto_rawDescOnce sync.Once
	file_unittest_proto_rawDescData = file_unittest_proto_rawDesc
)

func file_unittest_proto_rawDescGZIP() []byte {
	file_unittest_proto_rawDescOnce.Do(func() {
		file_unittest_proto_rawDescData = protoimpl.X.CompressGZIP(file_unittest_proto_rawDescData)
	})
	return file_unittest_proto_rawDescData
}

var file_unittest_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_unittest_proto_goTypes = []interface{}{
	(*TestRecordPagingRequest)(nil),  // 0: erda.dop.qa.unittest.TestRecordPagingRequest
	(*TestRecordPagingResponse)(nil), // 1: erda.dop.qa.unittest.TestRecordPagingResponse
	(*TestRecordPagingResult)(nil),   // 2: erda.dop.qa.unittest.TestRecordPagingResult
	(*TestRecordGetRequest)(nil),     // 3: erda.dop.qa.unittest.TestRecordGetRequest
	(*TestRecordGetResponse)(nil),    // 4: erda.dop.qa.unittest.TestRecordGetResponse
	(*TestRecord)(nil),               // 5: erda.dop.qa.unittest.TestRecord
	(*TestTypeRequest)(nil),          // 6: erda.dop.qa.unittest.TestTypeRequest
	(*TestTypeResponse)(nil),         // 7: erda.dop.qa.unittest.TestTypeResponse
	(*TestCallBackRequest)(nil),      // 8: erda.dop.qa.unittest.TestCallBackRequest
	(*TestResult)(nil),               // 9: erda.dop.qa.unittest.TestResult
	(*TestError)(nil),                // 10: erda.dop.qa.unittest.TestError
	(*Test)(nil),                     // 11: erda.dop.qa.unittest.Test
	(*TestTotal)(nil),                // 12: erda.dop.qa.unittest.TestTotal
	(*TestSuite)(nil),                // 13: erda.dop.qa.unittest.TestSuite
	(*ToolTip)(nil),                  // 14: erda.dop.qa.unittest.ToolTip
	(*CodeCoverageNode)(nil),         // 15: erda.dop.qa.unittest.CodeCoverageNode
	(*ReportCounter)(nil),            // 16: erda.dop.qa.unittest.ReportCounter
	(*ReportPackage)(nil),            // 17: erda.dop.qa.unittest.ReportPackage
	(*ReportClass)(nil),              // 18: erda.dop.qa.unittest.ReportClass
	(*ReportMethod)(nil),             // 19: erda.dop.qa.unittest.ReportMethod
	(*TestCallBackResponse)(nil),     // 20: erda.dop.qa.unittest.TestCallBackResponse
	nil,                              // 21: erda.dop.qa.unittest.TestRecord.ExtraEntry
	nil,                              // 22: erda.dop.qa.unittest.TestRecord.EnvsEntry
	nil,                              // 23: erda.dop.qa.unittest.TestResult.ExtraEntry
	nil,                              // 24: erda.dop.qa.unittest.TestTotal.StatusesEntry
	nil,                              // 25: erda.dop.qa.unittest.TestSuite.PropertiesEntry
	nil,                              // 26: erda.dop.qa.unittest.TestSuite.ExtraEntry
	(*timestamppb.Timestamp)(nil),    // 27: google.protobuf.Timestamp
}
var file_unittest_proto_depIdxs = []int32{
	2,  // 0: erda.dop.qa.unittest.TestRecordPagingResponse.data:type_name -> erda.dop.qa.unittest.TestRecordPagingResult
	5,  // 1: erda.dop.qa.unittest.TestRecordPagingResult.list:type_name -> erda.dop.qa.unittest.TestRecord
	5,  // 2: erda.dop.qa.unittest.TestRecordGetResponse.data:type_name -> erda.dop.qa.unittest.TestRecord
	27, // 3: erda.dop.qa.unittest.TestRecord.createdAt:type_name -> google.protobuf.Timestamp
	27, // 4: erda.dop.qa.unittest.TestRecord.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 5: erda.dop.qa.unittest.TestRecord.totals:type_name -> erda.dop.qa.unittest.TestTotal
	21, // 6: erda.dop.qa.unittest.TestRecord.extra:type_name -> erda.dop.qa.unittest.TestRecord.ExtraEntry
	22, // 7: erda.dop.qa.unittest.TestRecord.envs:type_name -> erda.dop.qa.unittest.TestRecord.EnvsEntry
	13, // 8: erda.dop.qa.unittest.TestRecord.suites:type_name -> erda.dop.qa.unittest.TestSuite
	15, // 9: erda.dop.qa.unittest.TestRecord.coverageReport:type_name -> erda.dop.qa.unittest.CodeCoverageNode
	9,  // 10: erda.dop.qa.unittest.TestCallBackRequest.results:type_name -> erda.dop.qa.unittest.TestResult
	12, // 11: erda.dop.qa.unittest.TestCallBackRequest.totals:type_name -> erda.dop.qa.unittest.TestTotal
	13, // 12: erda.dop.qa.unittest.TestCallBackRequest.suites:type_name -> erda.dop.qa.unittest.TestSuite
	15, // 13: erda.dop.qa.unittest.TestCallBackRequest.coverageReport:type_name -> erda.dop.qa.unittest.CodeCoverageNode
	23, // 14: erda.dop.qa.unittest.TestResult.extra:type_name -> erda.dop.qa.unittest.TestResult.ExtraEntry
	10, // 15: erda.dop.qa.unittest.Test.error:type_name -> erda.dop.qa.unittest.TestError
	24, // 16: erda.dop.qa.unittest.TestTotal.statuses:type_name -> erda.dop.qa.unittest.TestTotal.StatusesEntry
	25, // 17: erda.dop.qa.unittest.TestSuite.properties:type_name -> erda.dop.qa.unittest.TestSuite.PropertiesEntry
	11, // 18: erda.dop.qa.unittest.TestSuite.tests:type_name -> erda.dop.qa.unittest.Test
	12, // 19: erda.dop.qa.unittest.TestSuite.totals:type_name -> erda.dop.qa.unittest.TestTotal
	26, // 20: erda.dop.qa.unittest.TestSuite.extra:type_name -> erda.dop.qa.unittest.TestSuite.ExtraEntry
	14, // 21: erda.dop.qa.unittest.CodeCoverageNode.tooltip:type_name -> erda.dop.qa.unittest.ToolTip
	15, // 22: erda.dop.qa.unittest.CodeCoverageNode.children:type_name -> erda.dop.qa.unittest.CodeCoverageNode
	16, // 23: erda.dop.qa.unittest.CodeCoverageNode.counter:type_name -> erda.dop.qa.unittest.ReportCounter
	18, // 24: erda.dop.qa.unittest.ReportPackage.class:type_name -> erda.dop.qa.unittest.ReportClass
	16, // 25: erda.dop.qa.unittest.ReportPackage.counter:type_name -> erda.dop.qa.unittest.ReportCounter
	19, // 26: erda.dop.qa.unittest.ReportClass.method:type_name -> erda.dop.qa.unittest.ReportMethod
	16, // 27: erda.dop.qa.unittest.ReportClass.counter:type_name -> erda.dop.qa.unittest.ReportCounter
	16, // 28: erda.dop.qa.unittest.ReportMethod.counter:type_name -> erda.dop.qa.unittest.ReportCounter
	8,  // 29: erda.dop.qa.unittest.UnitTestService.Callback:input_type -> erda.dop.qa.unittest.TestCallBackRequest
	6,  // 30: erda.dop.qa.unittest.UnitTestService.GetTestTypes:input_type -> erda.dop.qa.unittest.TestTypeRequest
	0,  // 31: erda.dop.qa.unittest.UnitTestService.ListRecords:input_type -> erda.dop.qa.unittest.TestRecordPagingRequest
	3,  // 32: erda.dop.qa.unittest.UnitTestService.GetRecord:input_type -> erda.dop.qa.unittest.TestRecordGetRequest
	20, // 33: erda.dop.qa.unittest.UnitTestService.Callback:output_type -> erda.dop.qa.unittest.TestCallBackResponse
	7,  // 34: erda.dop.qa.unittest.UnitTestService.GetTestTypes:output_type -> erda.dop.qa.unittest.TestTypeResponse
	1,  // 35: erda.dop.qa.unittest.UnitTestService.ListRecords:output_type -> erda.dop.qa.unittest.TestRecordPagingResponse
	4,  // 36: erda.dop.qa.unittest.UnitTestService.GetRecord:output_type -> erda.dop.qa.unittest.TestRecordGetResponse
	33, // [33:37] is the sub-list for method output_type
	29, // [29:33] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_unittest_proto_init() }
func file_unittest_proto_init() {
	if File_unittest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_unittest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRecordPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRecordPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRecordPagingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRecordGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRecordGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCallBackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeCoverageNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unittest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCallBackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_unittest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_unittest_proto_goTypes,
		DependencyIndexes: file_unittest_proto_depIdxs,
		MessageInfos:      file_unittest_proto_msgTypes,
	}.Build()
	File_unittest_proto = out.File
	file_unittest_proto_rawDesc = nil
	file_unittest_proto_goTypes = nil
	file_unittest_proto_depIdxs = nil
}
