// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: unittest.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/qa/unittest/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// UnitTestService unittest.proto
	UnitTestService() pb.UnitTestServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		unitTestService: pb.NewUnitTestServiceClient(cc),
	}
}

type serviceClients struct {
	unitTestService pb.UnitTestServiceClient
}

func (c *serviceClients) UnitTestService() pb.UnitTestServiceClient {
	return c.unitTestService
}

type unitTestServiceWrapper struct {
	client pb.UnitTestServiceClient
	opts   []grpc1.CallOption
}

func (s *unitTestServiceWrapper) Callback(ctx context.Context, req *pb.TestCallBackRequest) (*pb.TestCallBackResponse, error) {
	return s.client.Callback(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *unitTestServiceWrapper) GetTestTypes(ctx context.Context, req *pb.TestTypeRequest) (*pb.TestTypeResponse, error) {
	return s.client.GetTestTypes(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *unitTestServiceWrapper) ListRecords(ctx context.Context, req *pb.TestRecordPagingRequest) (*pb.TestRecordPagingResponse, error) {
	return s.client.ListRecords(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *unitTestServiceWrapper) GetRecord(ctx context.Context, req *pb.TestRecordGetRequest) (*pb.TestRecordGetResponse, error) {
	return s.client.GetRecord(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
