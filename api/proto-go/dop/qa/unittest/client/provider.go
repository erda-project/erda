// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: unittest.proto

package client

import (
	fmt "fmt"
	reflect "reflect"
	strings "strings"

	servicehub "github.com/erda-project/erda-infra/base/servicehub"
	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/qa/unittest/pb"
	grpc1 "google.golang.org/grpc"
)

var dependencies = []string{
	"grpc-client@erda.dop.qa.unittest",
	"grpc-client",
}

// +provider
type provider struct {
	client Client
}

func (p *provider) Init(ctx servicehub.Context) error {
	var conn grpc.ClientConnInterface
	for _, dep := range dependencies {
		c, ok := ctx.Service(dep).(grpc.ClientConnInterface)
		if ok {
			conn = c
			break
		}
	}
	if conn == nil {
		return fmt.Errorf("not found connector in (%s)", strings.Join(dependencies, ", "))
	}
	p.client = New(conn)
	return nil
}

var (
	clientsType               = reflect.TypeOf((*Client)(nil)).Elem()
	unitTestServiceClientType = reflect.TypeOf((*pb.UnitTestServiceClient)(nil)).Elem()
	unitTestServiceServerType = reflect.TypeOf((*pb.UnitTestServiceServer)(nil)).Elem()
)

func (p *provider) Provide(ctx servicehub.DependencyContext, args ...interface{}) interface{} {
	var opts []grpc1.CallOption
	for _, arg := range args {
		if opt, ok := arg.(grpc1.CallOption); ok {
			opts = append(opts, opt)
		}
	}
	switch ctx.Service() {
	case "erda.dop.qa.unittest-client":
		return p.client
	case "erda.dop.qa.unittest.UnitTestService":
		return &unitTestServiceWrapper{client: p.client.UnitTestService(), opts: opts}
	case "erda.dop.qa.unittest.UnitTestService.client":
		return p.client.UnitTestService()
	}
	switch ctx.Type() {
	case clientsType:
		return p.client
	case unitTestServiceClientType:
		return p.client.UnitTestService()
	case unitTestServiceServerType:
		return &unitTestServiceWrapper{client: p.client.UnitTestService(), opts: opts}
	}
	return p
}

func init() {
	servicehub.Register("erda.dop.qa.unittest-client", &servicehub.Spec{
		Services: []string{
			"erda.dop.qa.unittest.UnitTestService",
			"erda.dop.qa.unittest.UnitTestService.client",
			"erda.dop.qa.unittest-client",
		},
		Types: []reflect.Type{
			clientsType,
			// client types
			unitTestServiceClientType,
			// server types
			unitTestServiceServerType,
		},
		OptionalDependencies: dependencies,
		Creator: func() servicehub.Provider {
			return &provider{}
		},
	})
}
