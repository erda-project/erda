// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: devflowrule.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterDevFlowRuleServiceImp devflowrule.proto
func RegisterDevFlowRuleServiceImp(regester transport.Register, srv DevFlowRuleServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterDevFlowRuleServiceHandler(regester, DevFlowRuleServiceHandler(srv), _ops.HTTP...)
	RegisterDevFlowRuleServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.dop.devflowrule.DevFlowRuleService",
	)
}

var (
	devFlowRuleServiceClientType  = reflect.TypeOf((*DevFlowRuleServiceClient)(nil)).Elem()
	devFlowRuleServiceServerType  = reflect.TypeOf((*DevFlowRuleServiceServer)(nil)).Elem()
	devFlowRuleServiceHandlerType = reflect.TypeOf((*DevFlowRuleServiceHandler)(nil)).Elem()
)

// DevFlowRuleServiceClientType .
func DevFlowRuleServiceClientType() reflect.Type { return devFlowRuleServiceClientType }

// DevFlowRuleServiceServerType .
func DevFlowRuleServiceServerType() reflect.Type { return devFlowRuleServiceServerType }

// DevFlowRuleServiceHandlerType .
func DevFlowRuleServiceHandlerType() reflect.Type { return devFlowRuleServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		devFlowRuleServiceClientType,
		// server types
		devFlowRuleServiceServerType,
		// handler types
		devFlowRuleServiceHandlerType,
	}
}
