// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: devflowrule.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DevFlowRuleServiceClient is the client API for DevFlowRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevFlowRuleServiceClient interface {
	CreateDevFlowRule(ctx context.Context, in *CreateDevFlowRuleRequest, opts ...grpc.CallOption) (*CreateDevFlowRuleResponse, error)
	DeleteDevFlowRule(ctx context.Context, in *DeleteDevFlowRuleRequest, opts ...grpc.CallOption) (*DeleteDevFlowRuleResponse, error)
	UpdateDevFlowRule(ctx context.Context, in *UpdateDevFlowRuleRequest, opts ...grpc.CallOption) (*UpdateDevFlowRuleResponse, error)
	GetDevFlowRulesByProjectID(ctx context.Context, in *GetDevFlowRuleRequest, opts ...grpc.CallOption) (*GetDevFlowRuleResponse, error)
}

type devFlowRuleServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDevFlowRuleServiceClient(cc grpc1.ClientConnInterface) DevFlowRuleServiceClient {
	return &devFlowRuleServiceClient{cc}
}

func (c *devFlowRuleServiceClient) CreateDevFlowRule(ctx context.Context, in *CreateDevFlowRuleRequest, opts ...grpc.CallOption) (*CreateDevFlowRuleResponse, error) {
	out := new(CreateDevFlowRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devflowrule.DevFlowRuleService/CreateDevFlowRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devFlowRuleServiceClient) DeleteDevFlowRule(ctx context.Context, in *DeleteDevFlowRuleRequest, opts ...grpc.CallOption) (*DeleteDevFlowRuleResponse, error) {
	out := new(DeleteDevFlowRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devflowrule.DevFlowRuleService/DeleteDevFlowRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devFlowRuleServiceClient) UpdateDevFlowRule(ctx context.Context, in *UpdateDevFlowRuleRequest, opts ...grpc.CallOption) (*UpdateDevFlowRuleResponse, error) {
	out := new(UpdateDevFlowRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devflowrule.DevFlowRuleService/UpdateDevFlowRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devFlowRuleServiceClient) GetDevFlowRulesByProjectID(ctx context.Context, in *GetDevFlowRuleRequest, opts ...grpc.CallOption) (*GetDevFlowRuleResponse, error) {
	out := new(GetDevFlowRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.devflowrule.DevFlowRuleService/GetDevFlowRulesByProjectID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevFlowRuleServiceServer is the server API for DevFlowRuleService service.
// All implementations should embed UnimplementedDevFlowRuleServiceServer
// for forward compatibility
type DevFlowRuleServiceServer interface {
	CreateDevFlowRule(context.Context, *CreateDevFlowRuleRequest) (*CreateDevFlowRuleResponse, error)
	DeleteDevFlowRule(context.Context, *DeleteDevFlowRuleRequest) (*DeleteDevFlowRuleResponse, error)
	UpdateDevFlowRule(context.Context, *UpdateDevFlowRuleRequest) (*UpdateDevFlowRuleResponse, error)
	GetDevFlowRulesByProjectID(context.Context, *GetDevFlowRuleRequest) (*GetDevFlowRuleResponse, error)
}

// UnimplementedDevFlowRuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDevFlowRuleServiceServer struct {
}

func (*UnimplementedDevFlowRuleServiceServer) CreateDevFlowRule(context.Context, *CreateDevFlowRuleRequest) (*CreateDevFlowRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevFlowRule not implemented")
}
func (*UnimplementedDevFlowRuleServiceServer) DeleteDevFlowRule(context.Context, *DeleteDevFlowRuleRequest) (*DeleteDevFlowRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevFlowRule not implemented")
}
func (*UnimplementedDevFlowRuleServiceServer) UpdateDevFlowRule(context.Context, *UpdateDevFlowRuleRequest) (*UpdateDevFlowRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevFlowRule not implemented")
}
func (*UnimplementedDevFlowRuleServiceServer) GetDevFlowRulesByProjectID(context.Context, *GetDevFlowRuleRequest) (*GetDevFlowRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevFlowRulesByProjectID not implemented")
}

func RegisterDevFlowRuleServiceServer(s grpc1.ServiceRegistrar, srv DevFlowRuleServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DevFlowRuleService_serviceDesc(srv, opts...), srv)
}

var _DevFlowRuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.devflowrule.DevFlowRuleService",
	HandlerType: (*DevFlowRuleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "devflowrule.proto",
}

func _get_DevFlowRuleService_serviceDesc(srv DevFlowRuleServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DevFlowRuleService_CreateDevFlowRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateDevFlowRule(ctx, req.(*CreateDevFlowRuleRequest))
	}
	var _DevFlowRuleService_CreateDevFlowRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevFlowRuleService_CreateDevFlowRule_info = transport.NewServiceInfo("erda.dop.devflowrule.DevFlowRuleService", "CreateDevFlowRule", srv)
		_DevFlowRuleService_CreateDevFlowRule_Handler = h.Interceptor(_DevFlowRuleService_CreateDevFlowRule_Handler)
	}

	_DevFlowRuleService_DeleteDevFlowRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteDevFlowRule(ctx, req.(*DeleteDevFlowRuleRequest))
	}
	var _DevFlowRuleService_DeleteDevFlowRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevFlowRuleService_DeleteDevFlowRule_info = transport.NewServiceInfo("erda.dop.devflowrule.DevFlowRuleService", "DeleteDevFlowRule", srv)
		_DevFlowRuleService_DeleteDevFlowRule_Handler = h.Interceptor(_DevFlowRuleService_DeleteDevFlowRule_Handler)
	}

	_DevFlowRuleService_UpdateDevFlowRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateDevFlowRule(ctx, req.(*UpdateDevFlowRuleRequest))
	}
	var _DevFlowRuleService_UpdateDevFlowRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevFlowRuleService_UpdateDevFlowRule_info = transport.NewServiceInfo("erda.dop.devflowrule.DevFlowRuleService", "UpdateDevFlowRule", srv)
		_DevFlowRuleService_UpdateDevFlowRule_Handler = h.Interceptor(_DevFlowRuleService_UpdateDevFlowRule_Handler)
	}

	_DevFlowRuleService_GetDevFlowRulesByProjectID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetDevFlowRulesByProjectID(ctx, req.(*GetDevFlowRuleRequest))
	}
	var _DevFlowRuleService_GetDevFlowRulesByProjectID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DevFlowRuleService_GetDevFlowRulesByProjectID_info = transport.NewServiceInfo("erda.dop.devflowrule.DevFlowRuleService", "GetDevFlowRulesByProjectID", srv)
		_DevFlowRuleService_GetDevFlowRulesByProjectID_Handler = h.Interceptor(_DevFlowRuleService_GetDevFlowRulesByProjectID_Handler)
	}

	var serviceDesc = _DevFlowRuleService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateDevFlowRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateDevFlowRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevFlowRuleServiceServer).CreateDevFlowRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevFlowRuleService_CreateDevFlowRule_info)
				}
				if interceptor == nil {
					return _DevFlowRuleService_CreateDevFlowRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devflowrule.DevFlowRuleService/CreateDevFlowRule",
				}
				return interceptor(ctx, in, info, _DevFlowRuleService_CreateDevFlowRule_Handler)
			},
		},
		{
			MethodName: "DeleteDevFlowRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteDevFlowRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevFlowRuleServiceServer).DeleteDevFlowRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevFlowRuleService_DeleteDevFlowRule_info)
				}
				if interceptor == nil {
					return _DevFlowRuleService_DeleteDevFlowRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devflowrule.DevFlowRuleService/DeleteDevFlowRule",
				}
				return interceptor(ctx, in, info, _DevFlowRuleService_DeleteDevFlowRule_Handler)
			},
		},
		{
			MethodName: "UpdateDevFlowRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateDevFlowRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevFlowRuleServiceServer).UpdateDevFlowRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevFlowRuleService_UpdateDevFlowRule_info)
				}
				if interceptor == nil {
					return _DevFlowRuleService_UpdateDevFlowRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devflowrule.DevFlowRuleService/UpdateDevFlowRule",
				}
				return interceptor(ctx, in, info, _DevFlowRuleService_UpdateDevFlowRule_Handler)
			},
		},
		{
			MethodName: "GetDevFlowRulesByProjectID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetDevFlowRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DevFlowRuleServiceServer).GetDevFlowRulesByProjectID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DevFlowRuleService_GetDevFlowRulesByProjectID_info)
				}
				if interceptor == nil {
					return _DevFlowRuleService_GetDevFlowRulesByProjectID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.devflowrule.DevFlowRuleService/GetDevFlowRulesByProjectID",
				}
				return interceptor(ctx, in, info, _DevFlowRuleService_GetDevFlowRulesByProjectID_Handler)
			},
		},
	}
	return &serviceDesc
}
