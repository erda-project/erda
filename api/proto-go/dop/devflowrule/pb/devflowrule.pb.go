// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: devflowrule.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDevFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CreateDevFlowRuleRequest) Reset() {
	*x = CreateDevFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDevFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevFlowRuleRequest) ProtoMessage() {}

func (x *CreateDevFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateDevFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDevFlowRuleRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateDevFlowRuleRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CreateDevFlowRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DevFlowRule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateDevFlowRuleResponse) Reset() {
	*x = CreateDevFlowRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDevFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevFlowRuleResponse) ProtoMessage() {}

func (x *CreateDevFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateDevFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDevFlowRuleResponse) GetData() *DevFlowRule {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDevFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DeleteDevFlowRuleRequest) Reset() {
	*x = DeleteDevFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevFlowRuleRequest) ProtoMessage() {}

func (x *DeleteDevFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteDevFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteDevFlowRuleRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DeleteDevFlowRuleRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteDevFlowRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDevFlowRuleResponse) Reset() {
	*x = DeleteDevFlowRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevFlowRuleResponse) ProtoMessage() {}

func (x *DeleteDevFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteDevFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{3}
}

type UpdateDevFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string  `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Flows []*Flow `protobuf:"bytes,2,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *UpdateDevFlowRuleRequest) Reset() {
	*x = UpdateDevFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevFlowRuleRequest) ProtoMessage() {}

func (x *UpdateDevFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateDevFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDevFlowRuleRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateDevFlowRuleRequest) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

type UpdateDevFlowRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DevFlowRule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateDevFlowRuleResponse) Reset() {
	*x = UpdateDevFlowRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevFlowRuleResponse) ProtoMessage() {}

func (x *UpdateDevFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateDevFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDevFlowRuleResponse) GetData() *DevFlowRule {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDevFlowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *GetDevFlowRuleRequest) Reset() {
	*x = GetDevFlowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevFlowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevFlowRuleRequest) ProtoMessage() {}

func (x *GetDevFlowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevFlowRuleRequest.ProtoReflect.Descriptor instead.
func (*GetDevFlowRuleRequest) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{6}
}

func (x *GetDevFlowRuleRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type GetDevFlowRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DevFlowRule `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDevFlowRuleResponse) Reset() {
	*x = GetDevFlowRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevFlowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevFlowRuleResponse) ProtoMessage() {}

func (x *GetDevFlowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevFlowRuleResponse.ProtoReflect.Descriptor instead.
func (*GetDevFlowRuleResponse) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{7}
}

func (x *GetDevFlowRuleResponse) GetData() *DevFlowRule {
	if x != nil {
		return x.Data
	}
	return nil
}

type DevFlowRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Flows       []*Flow                `protobuf:"bytes,2,rep,name=flows,proto3" json:"flows,omitempty"`
	OrgID       uint64                 `protobuf:"varint,3,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName     string                 `protobuf:"bytes,4,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID   uint64                 `protobuf:"varint,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName string                 `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeUpdated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timeUpdated,proto3" json:"timeUpdated,omitempty"`
	Creator     string                 `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater     string                 `protobuf:"bytes,10,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *DevFlowRule) Reset() {
	*x = DevFlowRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevFlowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevFlowRule) ProtoMessage() {}

func (x *DevFlowRule) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevFlowRule.ProtoReflect.Descriptor instead.
func (*DevFlowRule) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{8}
}

func (x *DevFlowRule) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DevFlowRule) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *DevFlowRule) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *DevFlowRule) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *DevFlowRule) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DevFlowRule) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *DevFlowRule) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *DevFlowRule) GetTimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *DevFlowRule) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *DevFlowRule) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FlowType           string               `protobuf:"bytes,2,opt,name=flowType,proto3" json:"flowType,omitempty"`
	TargetBranch       string               `protobuf:"bytes,3,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	ChangeFromBranch   string               `protobuf:"bytes,4,opt,name=changeFromBranch,proto3" json:"changeFromBranch,omitempty"`
	ChangeBranch       string               `protobuf:"bytes,5,opt,name=changeBranch,proto3" json:"changeBranch,omitempty"`
	EnableAutoMerge    bool                 `protobuf:"varint,6,opt,name=enableAutoMerge,proto3" json:"enableAutoMerge,omitempty"`
	AutoMergeBranch    string               `protobuf:"bytes,7,opt,name=autoMergeBranch,proto3" json:"autoMergeBranch,omitempty"`
	Artifact           string               `protobuf:"bytes,8,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Environment        string               `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	StartWorkflowHints []*StartWorkflowHint `protobuf:"bytes,10,rep,name=startWorkflowHints,proto3" json:"startWorkflowHints,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{9}
}

func (x *Flow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flow) GetFlowType() string {
	if x != nil {
		return x.FlowType
	}
	return ""
}

func (x *Flow) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *Flow) GetChangeFromBranch() string {
	if x != nil {
		return x.ChangeFromBranch
	}
	return ""
}

func (x *Flow) GetChangeBranch() string {
	if x != nil {
		return x.ChangeBranch
	}
	return ""
}

func (x *Flow) GetEnableAutoMerge() bool {
	if x != nil {
		return x.EnableAutoMerge
	}
	return false
}

func (x *Flow) GetAutoMergeBranch() string {
	if x != nil {
		return x.AutoMergeBranch
	}
	return ""
}

func (x *Flow) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *Flow) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Flow) GetStartWorkflowHints() []*StartWorkflowHint {
	if x != nil {
		return x.StartWorkflowHints
	}
	return nil
}

type StartWorkflowHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Place            string `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	ChangeBranchRule string `protobuf:"bytes,2,opt,name=changeBranchRule,proto3" json:"changeBranchRule,omitempty"`
}

func (x *StartWorkflowHint) Reset() {
	*x = StartWorkflowHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devflowrule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowHint) ProtoMessage() {}

func (x *StartWorkflowHint) ProtoReflect() protoreflect.Message {
	mi := &file_devflowrule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowHint.ProtoReflect.Descriptor instead.
func (*StartWorkflowHint) Descriptor() ([]byte, []int) {
	return file_devflowrule_proto_rawDescGZIP(), []int{10}
}

func (x *StartWorkflowHint) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *StartWorkflowHint) GetChangeBranchRule() string {
	if x != nil {
		return x.ChangeBranchRule
	}
	return ""
}

var File_devflowrule_proto protoreflect.FileDescriptor

var file_devflowrule_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74,
	0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76,
	0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x1b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x52, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xef, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65,
	0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x22, 0x95, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66,
	0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x55, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x32, 0xa5, 0x05, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66,
	0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66,
	0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76,
	0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76,
	0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x49, 0x44,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x17, 0x0a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0xda, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f, 0x77, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12,
	0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a,
	0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c,
	0x0b, 0x22, 0x03, 0x64, 0x6f, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x6f, 0x70, 0x2f, 0x64, 0x65, 0x76, 0x66, 0x6c, 0x6f,
	0x77, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_devflowrule_proto_rawDescOnce sync.Once
	file_devflowrule_proto_rawDescData = file_devflowrule_proto_rawDesc
)

func file_devflowrule_proto_rawDescGZIP() []byte {
	file_devflowrule_proto_rawDescOnce.Do(func() {
		file_devflowrule_proto_rawDescData = protoimpl.X.CompressGZIP(file_devflowrule_proto_rawDescData)
	})
	return file_devflowrule_proto_rawDescData
}

var file_devflowrule_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_devflowrule_proto_goTypes = []interface{}{
	(*CreateDevFlowRuleRequest)(nil),  // 0: erda.dop.devflowrule.CreateDevFlowRuleRequest
	(*CreateDevFlowRuleResponse)(nil), // 1: erda.dop.devflowrule.CreateDevFlowRuleResponse
	(*DeleteDevFlowRuleRequest)(nil),  // 2: erda.dop.devflowrule.DeleteDevFlowRuleRequest
	(*DeleteDevFlowRuleResponse)(nil), // 3: erda.dop.devflowrule.DeleteDevFlowRuleResponse
	(*UpdateDevFlowRuleRequest)(nil),  // 4: erda.dop.devflowrule.UpdateDevFlowRuleRequest
	(*UpdateDevFlowRuleResponse)(nil), // 5: erda.dop.devflowrule.UpdateDevFlowRuleResponse
	(*GetDevFlowRuleRequest)(nil),     // 6: erda.dop.devflowrule.GetDevFlowRuleRequest
	(*GetDevFlowRuleResponse)(nil),    // 7: erda.dop.devflowrule.GetDevFlowRuleResponse
	(*DevFlowRule)(nil),               // 8: erda.dop.devflowrule.DevFlowRule
	(*Flow)(nil),                      // 9: erda.dop.devflowrule.Flow
	(*StartWorkflowHint)(nil),         // 10: erda.dop.devflowrule.StartWorkflowHint
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
}
var file_devflowrule_proto_depIdxs = []int32{
	8,  // 0: erda.dop.devflowrule.CreateDevFlowRuleResponse.data:type_name -> erda.dop.devflowrule.DevFlowRule
	9,  // 1: erda.dop.devflowrule.UpdateDevFlowRuleRequest.flows:type_name -> erda.dop.devflowrule.Flow
	8,  // 2: erda.dop.devflowrule.UpdateDevFlowRuleResponse.data:type_name -> erda.dop.devflowrule.DevFlowRule
	8,  // 3: erda.dop.devflowrule.GetDevFlowRuleResponse.data:type_name -> erda.dop.devflowrule.DevFlowRule
	9,  // 4: erda.dop.devflowrule.DevFlowRule.flows:type_name -> erda.dop.devflowrule.Flow
	11, // 5: erda.dop.devflowrule.DevFlowRule.timeCreated:type_name -> google.protobuf.Timestamp
	11, // 6: erda.dop.devflowrule.DevFlowRule.timeUpdated:type_name -> google.protobuf.Timestamp
	10, // 7: erda.dop.devflowrule.Flow.startWorkflowHints:type_name -> erda.dop.devflowrule.StartWorkflowHint
	0,  // 8: erda.dop.devflowrule.DevFlowRuleService.CreateDevFlowRule:input_type -> erda.dop.devflowrule.CreateDevFlowRuleRequest
	2,  // 9: erda.dop.devflowrule.DevFlowRuleService.DeleteDevFlowRule:input_type -> erda.dop.devflowrule.DeleteDevFlowRuleRequest
	4,  // 10: erda.dop.devflowrule.DevFlowRuleService.UpdateDevFlowRule:input_type -> erda.dop.devflowrule.UpdateDevFlowRuleRequest
	6,  // 11: erda.dop.devflowrule.DevFlowRuleService.GetDevFlowRulesByProjectID:input_type -> erda.dop.devflowrule.GetDevFlowRuleRequest
	1,  // 12: erda.dop.devflowrule.DevFlowRuleService.CreateDevFlowRule:output_type -> erda.dop.devflowrule.CreateDevFlowRuleResponse
	3,  // 13: erda.dop.devflowrule.DevFlowRuleService.DeleteDevFlowRule:output_type -> erda.dop.devflowrule.DeleteDevFlowRuleResponse
	5,  // 14: erda.dop.devflowrule.DevFlowRuleService.UpdateDevFlowRule:output_type -> erda.dop.devflowrule.UpdateDevFlowRuleResponse
	7,  // 15: erda.dop.devflowrule.DevFlowRuleService.GetDevFlowRulesByProjectID:output_type -> erda.dop.devflowrule.GetDevFlowRuleResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_devflowrule_proto_init() }
func file_devflowrule_proto_init() {
	if File_devflowrule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_devflowrule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDevFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDevFlowRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevFlowRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevFlowRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevFlowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevFlowRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevFlowRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devflowrule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflowHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_devflowrule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_devflowrule_proto_goTypes,
		DependencyIndexes: file_devflowrule_proto_depIdxs,
		MessageInfos:      file_devflowrule_proto_msgTypes,
	}.Build()
	File_devflowrule_proto = out.File
	file_devflowrule_proto_rawDesc = nil
	file_devflowrule_proto_goTypes = nil
	file_devflowrule_proto_depIdxs = nil
}
