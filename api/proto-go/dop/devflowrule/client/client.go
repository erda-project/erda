// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: devflowrule.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/devflowrule/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// DevFlowRuleService devflowrule.proto
	DevFlowRuleService() pb.DevFlowRuleServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		devFlowRuleService: pb.NewDevFlowRuleServiceClient(cc),
	}
}

type serviceClients struct {
	devFlowRuleService pb.DevFlowRuleServiceClient
}

func (c *serviceClients) DevFlowRuleService() pb.DevFlowRuleServiceClient {
	return c.devFlowRuleService
}

type devFlowRuleServiceWrapper struct {
	client pb.DevFlowRuleServiceClient
	opts   []grpc1.CallOption
}

func (s *devFlowRuleServiceWrapper) CreateDevFlowRule(ctx context.Context, req *pb.CreateDevFlowRuleRequest) (*pb.CreateDevFlowRuleResponse, error) {
	return s.client.CreateDevFlowRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *devFlowRuleServiceWrapper) DeleteDevFlowRule(ctx context.Context, req *pb.DeleteDevFlowRuleRequest) (*pb.DeleteDevFlowRuleResponse, error) {
	return s.client.DeleteDevFlowRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *devFlowRuleServiceWrapper) UpdateDevFlowRule(ctx context.Context, req *pb.UpdateDevFlowRuleRequest) (*pb.UpdateDevFlowRuleResponse, error) {
	return s.client.UpdateDevFlowRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *devFlowRuleServiceWrapper) GetDevFlowRulesByProjectID(ctx context.Context, req *pb.GetDevFlowRuleRequest) (*pb.GetDevFlowRuleResponse, error) {
	return s.client.GetDevFlowRulesByProjectID(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
