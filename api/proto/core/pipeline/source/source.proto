syntax = "proto3";

package erda.core.pipeline.source;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "common/identity.proto";
import "common/commit.proto";

option go_package = "github.com/erda-project/erda-proto-go/core/pipeline/source/pb";

service SourceService {
  rpc Create (PipelineSourceCreateRequest) returns (PipelineSourceCreateResponse) {
    option (google.api.http) = {
      post: "/api/pipeline-sources",
    };
  }
  rpc Update (PipelineSourceUpdateRequest) returns (PipelineSourceUpdateResponse) {
    option (google.api.http) = {
      put: "/api/pipeline-sources/{pipelineSourceID}",
    };
  }
  rpc Delete (PipelineSourceDeleteRequest) returns (PipelineSourceDeleteResponse) {
    option (google.api.http) = {
      delete: "/api/pipeline-sources/{pipelineSourceID}",
    };
  }
  rpc Get (PipelineSourceGetRequest) returns (PipelineSourceGetResponse) {
    option (google.api.http) = {
      get: "/api/pipeline-sources/{pipelineSourceID}",
    };
  }
  rpc List (PipelineSourceListRequest) returns (PipelineSourceListResponse) {
    option (google.api.http) = {
      get: "/api/pipeline-sources",
    };
  }
}


message PipelineSource {
  string ID = 1 [json_name = "id"];
  string sourceType = 2;
  string remote = 3;
  string ref = 4;
  string path = 5;
  string name = 6;
  string pipelineYml = 7;
  uint64 versionLock = 8;
  int64 softDeletedAt = 9;
  google.protobuf.Timestamp timeCreated = 10;
  google.protobuf.Timestamp timeUpdated = 11;
}

// create
message PipelineSourceCreateRequest {
  string ID = 1 [json_name = "id"];
  string sourceType = 2;
  string remote = 3;
  string ref = 4;
  string path = 5;
  string name = 6;
  string pipelineYml = 7;
  uint64 versionLock = 8;
}

message PipelineSourceCreateResponse {
  PipelineSource pipelineSource = 1;
}

// update
message PipelineSourceUpdateRequest {
  string pipelineYml = 1;
  string pipelineSourceID = 2;
  uint64 versionLock = 3;
}

message PipelineSourceUpdateResponse {
  PipelineSource pipelineSource = 1;
}

// delete
message PipelineSourceDeleteRequest {
  string pipelineSourceID = 1;
}

message PipelineSourceDeleteResponse {

}

// get
message PipelineSourceGetRequest {
  string pipelineSourceID = 1;
}

message PipelineSourceGetResponse {
  PipelineSource pipelineSource = 1;
}

// list
message PipelineSourceListRequest {
  string remote = 1;
  string ref = 2;
  string path = 3;
  string name = 4;
  string sourceType = 5;
  repeated string idList = 6;
}

message PipelineSourceListResponse {
  int64 total = 1;
  repeated PipelineSource data = 2;
}
