syntax = "proto3";

package erda.core.pipeline.base;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "common/identity.proto";
import "common/commit.proto";
import "common/md.proto";
import "core/pipeline/cron_pub.proto";
import "core/pipeline/queue/queue.proto";

option go_package = "github.com/erda-project/erda-proto-go/core/pipeline/base/pb";

message PipelineDTO {
  // base
  uint64 ID = 1 [json_name = "id"];
  string source = 2;
  string ymlName = 3;
  string namespace = 4;
  string clusterName = 5;
  string status = 6;
  string type = 7;
  string triggerMode = 8;
  optional uint64 cronID = 9;
  map<string, string> labels = 10;
  string ymlSource = 11;
  string ymlContent = 12;
  PipelineExtra extra = 13;

  // app related info
  uint64 orgID = 14;
  string orgName = 15;
  uint64 projectID = 16;
  string projectName = 17;
  uint64 applicationID = 18;
  string applicationName = 19;
  string branch = 20;
  string commit = 21;
  common.CommitDetail commitDetail = 22;

  // runtime info
  double progress = 23;
  int64 costTimeSec = 24;
  google.protobuf.Timestamp timeBegin = 25;
  google.protobuf.Timestamp timeEnd = 26;
  google.protobuf.Timestamp timeCreated = 27;
  google.protobuf.Timestamp timeUpdated = 28;

  string ymlNameV1 = 29;
}
message PipelineExtra {
  string diceWorkspace = 1;
  PipelineUser submitUser = 2;
  PipelineUser runUser = 3;
  PipelineUser cancelUser = 4;
  string cronExpr = 5;
  google.protobuf.Timestamp cronTriggerTime = 6;
  ShowMessage show_message = 7;
  repeated string configManageNamespaces = 8;
  bool isAutoRun = 9;
  repeated string callbackURLs = 10;
  PipelineUser ownerUser = 11;
  string pipelineYmlNameV1 = 12;
  Breakpoint breakpoint = 13;
}
message PipelineGC {
  PipelineResourceGC resourceGC = 1;
  PipelineDatabaseGC databaseGC = 2;
}
// PipelineResourceGC releases occupied resource by pipeline, such as:
// - k8s pv (netdata volume)
// - k8s pod
// - k8s namespace
message PipelineResourceGC {
  // SuccessTTLSecond means when to release resource if pipeline status is Success.
  // Normally success ttl should be small even to zero, because everything is ok and don't need to rerun.
  // Default is 1800s(30min)
  optional uint64 successTTLSecond = 1;
  // FailedTTLSecond means when to release resource if pipeline status is Failed.
  // Normally failed ttl should larger than SuccessTTLSecond, because you may want to rerun this failed pipeline,
  // which need these resource.
  // Default is 1800s.
  optional uint64 failedTTLSecond = 2;
}
// PipelineDatabaseGC represents database record gc strategy.
message PipelineDatabaseGC {
  PipelineDBGCItem analyzed = 1;
  PipelineDBGCItem finished = 2;
}
message PipelineDBGCItem {
  // NeedArchive means whether this record need be archived:
  // If true, archive record to specific archive table;
  // If false, delete record and cannot be found anymore.
  optional bool needArchive = 1;
  // TTLSecond means when to do archive or delete operation.
  optional uint64 TTLSecond = 2 [json_name = "ttlSecond"];
}
message PipelineRunParam {
  string name = 1;
  google.protobuf.Value value = 2;
}
message PipelineRunParamWithValue {
  string name = 1;
  google.protobuf.Value value = 2; // parsed from pipeline.yml
  google.protobuf.Value trueValue = 3; // true value: placeholders will be replaced
}
message PipelineUser {
  google.protobuf.Value ID = 1 [json_name = "id"];
  string name = 2;
  string avatar = 3;
}
message ShowMessage {
  string msg = 1;
  repeated string stacks = 2;
  bool abortRun = 3; // if false, canManualRun should be false
}
message StorageConfig {
  bool enableNFS = 1;
  bool enableLocal = 2;
}
message PipelineButton {
  bool canManualRun = 1;
  bool canCancel = 2;
  bool canForceCancel = 3;
  bool canRerun = 4;
  bool canRerunFailed = 5;
  bool canStartCron = 6;
  bool canStopCron = 7;
  bool canPause = 8;
  bool canUnpause = 9;
  bool canDelete = 10;
}
message PipelineExecuteRecord {
  uint64 PipelineID = 1;
  string status = 2;
  string triggerMode = 3;
  google.protobuf.Timestamp timeCreated = 4;
  google.protobuf.Timestamp timeBegin = 5;
  google.protobuf.Timestamp timeEnd = 6;
}

message Breakpoint {
  BreakpointOn on = 1;
  optional google.protobuf.Value timeout = 2;
}

message BreakpointOn {
  bool failure = 1;
}

///////////// event
// PipelineEvent is k8s-event-like stream event.
message PipelineEvent {
  // Optional; this should be a short, machine understandable string that gives the reason
  // for this event being generated. For example, if the event is reporting that a container
  // can't start, the Reason might be "ImageNotFound".
  // +optional
  string reason = 1;

  // Optional. A human-readable description of the status of this operation.
  // +optional
  string message = 2;

  // Optional. The component reporting this event. Should be a short machine understandable string.
  // +optional
  PipelineEventSource source = 3;

  // The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
  // +optional
  google.protobuf.Timestamp firstTimestamp = 4;

  // The time at which the most recent occurrence of this event was recorded.
  // +optional
  google.protobuf.Timestamp lastTimestamp = 5;

  // The number of times this event has occurred.
  // +optional
  int32 count = 6;

  // Type of this event (Normal, Warning), new types could be added in the future.
  // +optional
  string type = 7;
}

// PipelineEventSource represents the source from which an event is generated
message PipelineEventSource {
  // Component from which the event is generated.
  // +optional
  string component = 1;

  // Node name on which the event is generated.
  // +optional
  string host = 2;
}

////////////// metadata
message ErrorResponse {
  string code = 1;
  string msg = 2;
  ErrorContext ctx = 3;
}

///////////// pipelineyaml
message PipelineOutput {
  string name = 1;
  string desc = 2;
  string ref = 3;
}
message PipelineOutputWithValue {
  string name = 1;
  string desc = 2;
  string ref = 3;
  google.protobuf.Value value = 4;
}

message PipelineParam {
  string name = 1;
  bool required = 2;
  google.protobuf.Value default = 3;
  string desc = 4;
  string type = 5;
}
message PipelineParamWithValue {
  string name = 1;
  bool required = 2;
  google.protobuf.Value default = 3;
  string desc = 4;
  string type = 5;

  google.protobuf.Value value = 6;
}
message PipelineYml {
  // used to generated pipeline yaml
  string version = 1;
  map<string, string> envs = 2;
  string cron = 3;
  CronCompensator cronCompensator = 4;
  google.protobuf.ListValue stages = 5; // [][]*PipelineYmlAction
  repeated PipelineYmlAction flatActions = 6;
  repeated PipelineParam params = 7;
  repeated PipelineOutput outputs = 8;

  // --- 以下字段与构造 pipeline yml 无关 ---

  // 1.0 升级相关
  bool needUpgrade = 9; // pipeline yml 是否需要升级

  // YmlContent:
  // 1) 当 needUpgrade 为 true  时，ymlContent 返回升级后的 yml
  // 2) 当 needUpgrade 为 false 时：
  //    1) 用户传入的为 YAML(apistructs.PipelineYml) 时，ymlContent 返回 YAML(spec.PipelineYml)
  //    2) 用户传入的为 YAML(spec.PipelineYml) 时，返回优化后的 YAML(spec.PipelineYml)
  string ymlContent = 10;
  TriggerConfig on = 11;

  // describe the use of network hooks in the pipeline
  repeated NetworkHookInfo lifecycle = 12;
  repeated PipelineTrigger triggers = 13;
}
message PipelineTrigger {
  string on = 1;
  map<string, string> filter = 2;
}
message TriggerConfig {
  PushTrigger push = 1;
  MergeTrigger merge = 2;
}
message PushTrigger {
  repeated string branches = 1;
  repeated string tags = 2;
}
message MergeTrigger {
  repeated string branches = 1;
}
message NetworkHookInfo {
  string hook = 1; // hook type
  string client = 2; // use network client
  map<string, google.protobuf.Value> labels = 3; // additional information
}
message PipelineYmlAction {
  string alias = 1;
  string type = 2;
  string description = 3;
  string version = 4;
  map<string, google.protobuf.Value> params = 5;
  string image = 6;
  google.protobuf.Value commands = 7;
  int64 timeout = 8;
  repeated string namespaces = 9;
  Resources resources = 10;
  string displayName = 11;
  string logoUrl = 12;
  repeated ActionCache caches = 13;
  SnippetConfig snippetConfig = 14;
  string if = 15;
  TaskLoop loop = 16;
  SnippetStages snippetStages = 17;
  string shell = 18;
  bool disable = 19;
}
message Resources {
  double cpu = 1;
  double mem = 2;
  double disk = 3;
}
message CronCompensator {
  bool enable = 1;
  bool latestFirst = 2;
  bool stopIfLatterExecuted = 3;
}
message ActionCache {
  // 缓存生成的 key 或者是用户指定的 key
  // 用户指定的话 需要 {{basePath}}/路径/{{endPath}} 来自定义 key
  // 用户没有指定 key 有一定的生成规则, 具体生成规则看 prepare.go 的 setActionCacheStorageAndBinds 方法
  string key = 1;
  string path = 2; // 指定那个目录被缓存, 只能是由 / 开始的绝对路径
}
message TaskLoop {
  string break = 1;
  TaskLoopStrategy strategy = 2;
}
message TaskLoopStrategy {
  int64 maxTimes = 1; // 最大重试次数，-1 表示不限制
  double declineRatio = 2; // 重试衰退速率  2s - 4s - 8s - 16s
  int64 declineLimitSec = 3;// 重试衰退最大值  2s - 4s - 8s - 8s - 8s
  uint64 intervalSec = 4; // 重试间隔时间 2s - 2s - 2s - 2s
}
message SnippetStages {
  repeated PipelineParam params = 1;
  repeated PipelineOutput outputs = 2;
  google.protobuf.ListValue stages = 3; // [][]*PipelineYmlAction
}

///////////// stage
message PipelineStage {
  uint64 ID = 1 [json_name = "id"];
  uint64 pipelineID = 2;
  string name = 3;
  string status = 4;
  int64  costTimeSec = 5;
  google.protobuf.Timestamp timeBegin = 6;
  google.protobuf.Timestamp timeEnd = 7;
  google.protobuf.Timestamp timeCreated = 8;
  google.protobuf.Timestamp timeUpdated = 9;
}
message PipelineStageDetailDTO {
  uint64 ID = 1 [json_name = "id"];
  uint64 pipelineID = 2;
  string name = 3;
  string status = 4;
  int64  costTimeSec = 5;
  google.protobuf.Timestamp timeBegin = 6;
  google.protobuf.Timestamp timeEnd = 7;
  google.protobuf.Timestamp timeCreated = 8;
  google.protobuf.Timestamp timeUpdated = 9;

  repeated PipelineTaskDTO pipelineTasks = 10;
}

/////////////
message PipelineTaskDTO {
  uint64 ID = 1 [json_name = "id"];
  uint64 pipelineID = 2;
  uint64 stageID = 3;
  string name = 4;
  string type = 5;
  string status = 6;
  PipelineTaskExtra extra = 7;
  map<string, string> labels = 8;
  PipelineTaskResult result = 9;
  bool isSnippet = 10;
  optional uint64 snippetPipelineID = 11;
  PipelineTaskSnippetDetail snippetPipelineDetail = 12; // detail of snippet pipeline
  int64 costTimeSec = 13; // -1 means no cost info, 0 means cost 0s exactly
  int64 queueTimeSec = 14;
  google.protobuf.Timestamp timeBegin = 15;
  google.protobuf.Timestamp timeEnd = 16;
  google.protobuf.Timestamp timeCreated = 17;
  google.protobuf.Timestamp timeUpdated = 18;
  string opType = 19;
}
message TaskContainer {
  string taskName = 1;
  string containerID = 2;
}
message TaskParamDetail {
  string name = 1;
  map<string, string> values = 2;
}
message PipelineTaskExtra {
  string UUID = 1 [json_name = "uuid"];
  bool allowFailure = 2;
  repeated TaskContainer taskContainers = 3;
  repeated TaskParamDetail params = 4;
  PipelineTaskActionDetail action = 5;
  Breakpoint breakpoint = 6;
}
message ErrorContext {
  google.protobuf.Timestamp startTime = 1;
  google.protobuf.Timestamp endTime = 2;
  uint64 count = 3;
}
message PipelineTaskResult {
  repeated common.MetadataField metadata = 1;
  repeated ErrorResponse errors = 2;
  PipelineTaskMachineStat machineStat = 3;
  string inspect = 4;
  string events = 5;
}
message PipelineTaskSnippetDetail {
  repeated PipelineOutputWithValue outputs = 1;
  // direct snippet task number, won't query recursively.
  // -1 means UNKNOWN, concrete value assigned when reconcile.
  int64 directSnippetTasksNum = 2;
  // recursive snippet task number, i.e. the whole expanded tasks number.
  // -1 means UNKNOWN, concrete value will be reported by AOP.
  int64 recursiveSnippetTasksNum = 3;
}

message PipelineTaskMachineStat {
  PipelineTaskMachineHostStat host = 1;
  PipelineTaskMachinePodStat pod = 2;
  PipelineTaskMachineLoadStat load = 3;
  PipelineTaskMachineMemStat mem = 4;
  PipelineTaskMachineSwapStat swap = 5;
}
message PipelineTaskMachineHostStat {
  string hostIP = 1;
  string hostname = 2;
  uint64 uptimeSec = 3;
  uint64 bootTimeSec = 4;
  string os = 5 [json_name = "os"];
  string platform = 6;
  string platformVersion = 7;
  string kernelVersion = 8;
  string kernelArch = 9;
}
message PipelineTaskMachinePodStat {
  string podIP = 1;
}
message PipelineTaskMachineLoadStat {
  double load1 = 1;
  double load5 = 2;
  double load15 = 3;
}
message PipelineTaskMachineMemStat {
  uint64 total = 1;
  uint64 available = 2;
  uint64 used = 3;
  uint64 free = 4;
  double usedPercent = 5;
  uint64 buffers = 6;
  uint64 cached = 7;
}
message PipelineTaskMachineSwapStat {
  uint64 total = 1;
  uint64 used = 2;
  uint64 free = 3;
  double usedPercent = 4;
}

message PipelineTaskActionDetail {
  string logoUrl = 1;
  string displayName = 2;
  string description = 3;
  string name = 4;
  string version = 5;
  string type = 6;
}
message SnippetConfig {
  string source = 1;
  string name = 2;
  map<string, string> labels = 3;
}

message DefinitionPageInfo {
  string name = 1;
  string creator = 2;
  string executor = 3;
  string sourceRemote = 4;
  string  sourceRef = 5;
}
