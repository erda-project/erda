syntax = "proto3";
package erda.core.services.authentication.credentials.accesskey;
option go_package = "github.com/erda-project/erda-proto-go/core/services/authentication/credentials/accesskey/pb";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/openapi.proto";

service AccessKeyService {
    option (erda.common.openapi_service) = {
        service: "msp",
        auth: {
            check_login: true,
            check_token: true,
        }
    };
    rpc QueryAccessKeys (QueryAccessKeysRequest) returns (QueryAccessKeysResponse) {
        option (google.api.http) = {
            post: "/api/credentials/access-keys/query",
        };
        option (erda.common.openapi) = {
            path: "/api/credentials/access-keys/query"
        };
    }

    rpc GetAccessKey (GetAccessKeyRequest) returns (GetAccessKeyResponse) {
        option (google.api.http) = {
            get: "/api/credentials/access-keys/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/credentials/access-keys/{id}"
        };
    }

    rpc CreateAccessKey (CreateAccessKeyRequest) returns (CreateAccessKeyResponse) {
        option (google.api.http) = {
            post: "/api/credentials/access-keys",
        };
        option (erda.common.openapi) = {
            path: "/api/credentials/access-keys"
        };
    }

    rpc UpdateAccessKey (UpdateAccessKeyRequest) returns (UpdateAccessKeyResponse) {
        option (google.api.http) = {
            put: "/api/credentials/access-keys/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/credentials/access-keys/{id}"
        };
    }

    rpc DeleteAccessKey (DeleteAccessKeyRequest) returns (DeleteAccessKeyResponse) {
        option (google.api.http) = {
            delete: "/api/credentials/access-keys/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/credentials/access-keys/{id}"
        };
    }
}

message QueryAccessKeysRequest {
    StatusEnum.Status status = 1;
    SubjectTypeEnum.SubjectType subjectType = 2;
    string subject = 3;
    string accessKey = 4;
    int64 pageNo = 5;
    int64 pageSize = 6;
    string scope = 7;
    string scopeId = 8;
    string token = 9;
}

message QueryAccessKeysResponse {
    repeated AccessKeysItem data = 1;
    int64 total = 2;
}

message GetAccessKeyRequest {
    string id = 1;
}
message GetAccessKeyResponse {
    AccessKeysItem data = 1;
}

message CreateAccessKeyRequest {
    SubjectTypeEnum.SubjectType subjectType = 1;
    string subject = 2;
    string description = 3;
    string scope = 4;
    string scopeId = 5;
}
message CreateAccessKeyResponse {
    AccessKeysItem data = 1;
}

message UpdateAccessKeyRequest {
    string id = 1;
    StatusEnum.Status status = 2;
    string description = 3;
}
message UpdateAccessKeyResponse {}

message DeleteAccessKeyRequest {
    string id = 1;
}
message DeleteAccessKeyResponse {}

message AccessKeysItem {
    string id = 1;
    string accessKey = 2;
    string secretKey = 3;
    StatusEnum.Status status = 4;
    SubjectTypeEnum.SubjectType subjectType = 5;
    string subject = 6;
    string description = 7;
    google.protobuf.Timestamp createdAt = 8;
    string scope = 9;
    string scopeId = 10;
    string token = 11;
}

message SubjectTypeEnum {
    enum SubjectType {
        NOT_SPECIFIED = 0; // TODO workaround for optional
        OTHER = 1;
        SYSTEM = 2;
        MICRO_SERVICE = 3;
        CLUSTER = 4;
    }
}
message StatusEnum {
    enum Status {
        NOT_SPECIFIED = 0; // TODO workaround for optional
        ACTIVATE = 1;
        DISABLED = 2;
        DELETED = 3;
    }
}
