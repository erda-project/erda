// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.core.openapi.component_protocol;

option go_package = "github.com/erda-project/erda-proto-go/core/openapi/component-protocol/pb";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

import "common/openapi.proto";

// generate service from openapi spec: openapi_component_protocol
service openapi_component_protocol {
    option (erda.common.openapi_service) = {
        service: "erda-server",
    };

    rpc Render (google.protobuf.Value) returns (google.protobuf.Value) {
        option (google.api.http) = {
            post: "/api/openapi/component-protocol/actions/render",
        };
        option (erda.common.openapi) = {
            path: "/api/component-protocol/actions/render",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
                check_over_permission : {
                    org_id: {
                        enable: true,
                        expr: ["request_body:inParams.scope","request_body:inParams.scopeId"]
                    }
                }
            },
            doc: "某场景下，用户操作，触发后端业务逻辑，重新渲染协议",
        };
    };
}
