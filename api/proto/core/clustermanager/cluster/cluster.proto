syntax = "proto3";

package erda.core.clustermanager.cluster;
option go_package = "github.com/erda-project/erda-proto-go/core/clustermanager/cluster/pb";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service ClusterService {
  rpc ListCluster(ListClusterRequest) returns (ListClusterResponse) {
    option (google.api.http) = {
      get: "/api/clusters?clusterType={clusterType}&orgID={orgID}"
    };
  }

  rpc GetCluster(GetClusterRequest) returns (GetClusterResponse) {
    option (google.api.http) = {
      get: "/api/clusters/{idOrName}"
    };
  }

  rpc CreateCluster(CreateClusterRequest) returns (CreateClusterResponse) {
    option (google.api.http) = {
      post: "/api/clusters"
    };
  }

  rpc UpdateCluster(UpdateClusterRequest) returns (UpdateClusterResponse) {
    option (google.api.http) = {
      put: "/api/clusters"
    };
  }

  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse) {
    option (google.api.http) = {
      delete: "/api/clusters/{clusterName}"
    };
  }

  rpc PatchCluster(PatchClusterRequest) returns (PatchClusterResponse) {
    option (google.api.http) = {
      patch: "/api/clusters"
    };
  }
}

message ErrResponse {
  string code = 1;
  string msg = 2;
}

message ListClusterRequest {
  string clusterType = 1;
  // optional, return all clusters if orgID == 0
  uint32 orgID = 2;
}

message ListClusterResponse {
  repeated ClusterInfo data = 1;
  bool success = 2;
  ErrResponse err = 3;
}

message GetClusterRequest {
  string idOrName = 1;
}

message GetClusterResponse {
  ClusterInfo data = 1;
  bool success = 2;
  ErrResponse err = 3;
}

message UpdateClusterRequest {
  string name = 1;
  string cloudVendor = 2;
  string displayName = 3;
  string description = 4;
  string type = 5;
  string logo = 6;
  string wildcardDomain = 7;
  ClusterSchedConfig schedulerConfig = 8 [json_name = "scheduler"];
  OpsConfig opsConfig = 9;
  SysConf sysConfig = 10;
  ManageConfig manageConfig = 11;

  // Deprecated
  int32 orgID = 12;
  // Deprecated
  map<string, string> urls = 13;
}

message UpdateClusterResponse {
  bool success = 1;
  ErrResponse err = 2;
}

message CreateClusterRequest {
  string name = 1;
  string cloudVendor = 2;
  string displayName = 3;
  string description = 4;
  string type = 5;
  string logo = 6;
  string wildcardDomain = 7;
  ClusterSchedConfig schedulerConfig = 8 [json_name = "scheduler"];
  OpsConfig opsConfig = 9;
  SysConf sysConfig = 10;
  ManageConfig manageConfig = 11;

  uint32 orgID = 12;
  // Deprecated
  map<string, string> urls = 13;
  // Deprecated
  map<string, string> config = 14;
  // Required. Used to create org cluster relation
  string userID = 15;
}

message CreateClusterResponse {
  bool success = 1;
  ErrResponse err = 2;
}

message DeleteClusterRequest {
  string clusterName = 1;
}

message DeleteClusterResponse {
  bool success = 1;
  ErrResponse err = 2;
}

message PatchClusterRequest {
  string name = 1;
  ManageConfig manageConfig = 2;
}

message PatchClusterResponse {

}

message ClusterInfo {
  int32 id = 1;
  string name = 2;
  string displayName = 3;
  string type = 4;  // dcos, edas, k8s
  string cloudVendor = 5;
  string logo = 6;
  string description = 7;
  string wildcardDomain = 8;
  ClusterSchedConfig schedConfig = 9 [json_name = "scheduler"];
  OpsConfig opsConfig = 10;
  SysConf system = 11;
  ManageConfig manageConfig = 12;
  google.protobuf.Timestamp createdAt = 13;
  google.protobuf.Timestamp updatedAt = 14;

  // Deprecated
  int32 orgID = 15;
  // Deprecated
  map<string, string> urls = 16;
  // Deprecated
  map<string, google.protobuf.Struct> settings = 17;
  // Deprecated
  string isRelation = 18;
  // encode of cluster info
  map<string, string> cm = 19;
}

message ClusterSchedConfig {
  string masterURL = 1 [json_name = "dcosURL"];
  string authType = 2;
  string authUsername = 3;
  string authPassword = 4;
  string caCrt = 5;
  string clientCrt = 6;
  string clientKey = 7;
  bool enableTag = 8;
  bool enableWorkspace = 9;
  string edasConsoleAddr = 10;
  string accessKey = 11;
  string accessSecret = 12;
  string clusterID = 13;
  string regionID = 14;
  string logicalRegionID = 15;
  string k8sAddr = 16;
  string regAddr = 17;
  string cpuSubscribeRatio = 18;
  string devCPUSubscribeRatio = 19;
  string testCPUSubscribeRatio = 20;
  string stagingCPUSubscribeRatio = 21;
}

message OpsConfig {
  string status = 1;  // creating, created, offline
  string accessKey = 2;
  string secretKey = 3;
  string ecsPassword = 4;
  string availabilityZones = 5;
  string vpcID = 6;
  string vSwitchIDs = 7;
  string sgIDs = 8;
  string chargeType = 9;
  int32 chargePeriod = 10;
  string region = 11;
  string scaleMode = 12;
  string essGroupID = 13;
  string essScaleRule = 14;
  string scheduledTaskId = 15;
  int32 scaleNumber = 16;
  int32 scaleDuration = 17;
  string launchTime = 18;
  string repeatMode = 19;
  string repeatValue = 20;
  uint32 scalePipeLineID = 21;
  map<string, string> extra = 22;
}

message SysConf {
  Cluster cluster = 1;
  SSH ssh = 2;
  FPS fps = 3;
  Storage storage = 4;
  Docker docker = 5;
  repeated Node nodes = 6;
  repeated Node newNodes = 7 [json_name = "-"];
  Platform platform = 8;
  Platform mainPlatform = 9;
  map<string, string> envs = 10;
  int32 orgID = 11;
}

message Cluster {
  string name = 1;
  string type = 2; // dcos, k8s
  repeated string nameservers = 3;
  string containerSubnet = 4;
  string virtualSubnet = 5;
  string masterVIP = 6;
  bool offline = 7;
}

message SSH {
  int32 port = 1;
  string user = 2;
  string password = 3;
  string account = 4;
  string privateKey = 5;
  string publicKey = 6;
}

message FPS {
  string host = 1;
  int32 port = 2;
  bool proxy = 3;
}

message Storage {
  string mountPoint = 1;
  string nas = 2;
  Gluster gluster = 3;
}

message Gluster {
  string version = 1;
  repeated string hosts = 2;
  bool server = 3;
  int32 replica = 4;
  string brick = 5;
}

message Docker {
  string dataRoot = 1;
  string execRoot = 2;
  string bip = 3;
  string fixedCIDR = 4;
}

message Node {
  string ip = 1;
  string type = 2; // master, lb, app
  string tag = 3;
}

message MySQL {
  string host = 1;
  int32 port = 2;
  string username = 3;
  string password = 4;
  string diceDB = 5;
  string pandoraDB = 6;
  string sonarDB = 7;
}

message OpenVPN {
  string peerSubnet = 1;
  repeated string subnets = 2;
  string configOPVN = 3;
}

message Platform {
  string environment = 1;
  string wildcardDomain = 2;
  map<string, string> assignDomains = 3;
  map<string, string> assignNodes = 4;
  MySQL mySQL = 5 [json_name = "mysql"];
  bool acceptMaster = 6;
  bool acceptLB = 7;
  string dataDiskDevice = 8;
  string dataRoot = 9;
  string scheme = 10;
  int32 port = 11;
  string registryHost = 12;
  OpenVPN openVPN = 13 [json_name = "openvpn"];
}

message ManageConfig {
  string type = 1;
  string address = 2;
  string caData = 3;
  string certData = 4;
  string keyData = 5;
  string token = 6;
  string accessKey = 7;
  string credentialSource = 8;
}