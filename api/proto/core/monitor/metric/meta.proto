syntax = "proto3";

package erda.core.monitor.metric;
option go_package = "github.com/erda-project/erda-proto-go/core/monitor/metric/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "common/openapi.proto";

service MetricMetaService {
  option (erda.common.openapi_service) = {
    service: "monitor",
    auth: {
      check_login: true,
      check_token: true,
    }
  };

  rpc ListMetricNames (ListMetricNamesRequest) returns (ListMetricNamesResponse)  {
    option (google.api.http) = {
      get: "/api/metric-names?scopeId={scopeID}"
    };
  }
  rpc ListMetricMeta (ListMetricMetaRequest) returns (ListMetricMetaResponse)  {
    option (google.api.http) = {
      get: "/api/metric-meta?scopeId={scopeID}"
    };
  }

  rpc ListMetricGroups (ListMetricGroupsRequest) returns (ListMetricGroupsResponse)  {
    option (google.api.http) = {
      get: "/api/metric-groups?scopeId={scopeID}"
    };
    option (erda.common.openapi) = {
      path: "/api/metadata/groups"
    };
  }
  rpc GetMetricGroup (GetMetricGroupRequest) returns (GetMetricGroupResponse)  {
    option (google.api.http) = {
      get: "/api/metric-groups/{id}?scopeId={scopeID}"
    };
    option (erda.common.openapi) = {
      path: "/api/metadata/groups/{id}"
    };
  }

}

// ListMetricNames
message ListMetricNamesRequest {
  string scope = 1 [(validator.field) = {string_not_empty : true}];
  string scopeID = 2 [(validator.field) = {string_not_empty : true}];
}

message ListMetricNamesResponse {
  repeated NameDefine data = 1;
}

// ListMetricMeta
message ListMetricMetaRequest {
  string scope = 1 [(validator.field) = {string_not_empty : true}];
  string scopeID = 2 [(validator.field) = {string_not_empty : true}];
  repeated string metrics = 3;
}

message ListMetricMetaResponse {
  repeated MetricMeta data = 1;
}

// ListMetricGroups
message ListMetricGroupsRequest {
  string scope = 1 [(validator.field) = {string_not_empty : true}];
  string scopeID = 2 [(validator.field) = {string_not_empty : true}];
  string mode = 3;
}

message ListMetricGroupsResponse {
  repeated Group data = 1;
}

// GetMetricGroup
message GetMetricGroupRequest {
  string scope = 1 [(validator.field) = {string_not_empty : true}];
  string scopeID = 2 [(validator.field) = {string_not_empty : true}];
  string id = 3  [(validator.field) = {string_not_empty : true}];
  string mode = 4;
  string version = 5;
  string format = 6;
  bool appendTags = 7;
}

message GetMetricGroupResponse {
  MetricGroup data = 1;
}

message MetricGroup {
  string id = 1;
  MetaMode meta = 2;
  repeated GroupMetricMeta metrics = 3;
}

message GroupMetricMeta {
  string metric = 1;            
  string name = 2;               
  repeated TagFilter filters = 3;           
  repeated FieldDefine fields = 4;
  repeated TagDefine tags = 5;
}

// common
message MetricMeta {
  NameDefine name = 1;
  map<string, string> labels = 2;
  map<string, TagDefine> tags = 3;
  map<string, FieldDefine> fields = 4;
}

message NameDefine {
  string key = 1;
  string name = 2;
}

message TagDefine {
  string key = 1;
  string name = 2;
  repeated ValueDefine values = 5;
}

message FieldDefine {
  string key = 1;
  string type = 2;
  string name = 3;
  string unit = 4;
  repeated ValueDefine values = 5;
}

message ValueDefine {
  string name = 1;
  google.protobuf.Value value = 2;
}

message Group {
  string id = 1;
  string name = 2;
  int32 order = 3;
  repeated Group children = 4;
}

message MetaMode {
  map<string, TypeDefine> types = 1;
  repeated Operation filters = 2;
}

message TypeDefine  {
  repeated Aggregation aggregations = 1;
  repeated Operation operations = 2;
  repeated Operation filters = 3;
}

message Aggregation {
  string aggregation = 1;
  string name = 2;
  string result_type = 3 [json_name = "result_type"];
}

message Operation {
  string operation = 1;
  string name = 2;
  bool multi = 3;
}

message TagFilter {
  string tag = 1;
  string op = 2;
  string value = 3;
}