syntax = "proto3";

package erda.core.monitor.diagnotor;
option go_package = "github.com/erda-project/erda-proto-go/core/monitor/diagnotor/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";

service DiagnotorService {

  rpc StartDiagnosis (StartDiagnosisRequest) returns (StartDiagnosisResponse) {
    option (google.api.http) = {
      post: "/api/diagnosis"
    };
  }

  rpc QueryDiagnosisStatus (QueryDiagnosisStatusRequest) returns (QueryDiagnosisStatusResponse) {
    option (google.api.http) = {
      get: "/api/diagnosis/namespaces/{namespace}/pods/{podName}/status"
    };
  }

  rpc StopDiagnosis (StopDiagnosisRequest) returns (StopDiagnosisResponse) {
    option (google.api.http) = {
      delete: "/api/diagnosis/namespaces/{namespace}/pods/{podName}"
    };
  }

  rpc ListProcesses (ListProcessesRequest) returns (ListProcessesResponse) {
    option (google.api.http) = {
      get: "/api/diagnosis/namespaces/{namespace}/pods/{podName}/processes"
    };
  }
  
}

message StartDiagnosisRequest {
  string clusterName = 1 [(validator.field) = {string_not_empty: true}];
  string namespace = 2 [(validator.field) = {string_not_empty: true}];
  string podName = 3 [(validator.field) = {string_not_empty: true}];
  map<string, string> labels = 4;
}

message StartDiagnosisResponse {
  DiagnosisInstance data = 1;
}

message QueryDiagnosisStatusRequest {
  string clusterName = 1 [(validator.field) = {string_not_empty: true}];
  string namespace = 2 [(validator.field) = {string_not_empty: true}];
  string podName = 3 [(validator.field) = {string_not_empty: true}];
}

message QueryDiagnosisStatusResponse {
  DiagnosisInstance data = 1;
}

message DiagnosisInstance {
  string clusterName = 1;
  string namespace = 2;
  string podName = 3;
  string hostIP = 5;
  string podIP = 6;
  string status = 7;
  string message = 8;
}

message StopDiagnosisRequest {
  string clusterName = 1 [(validator.field) = {string_not_empty: true}];
  string namespace = 2 [(validator.field) = {string_not_empty: true}];
  string podName = 3 [(validator.field) = {string_not_empty: true}];
}

message StopDiagnosisResponse {
  string data = 1;
}

message ListProcessesRequest {
  string clusterName = 1 [(validator.field) = {string_not_empty: true}];
  string namespace = 2 [(validator.field) = {string_not_empty: true}];
  string podName = 3 [(validator.field) = {string_not_empty: true}];
  string podIP = 4 [(validator.field) = {string_not_empty: true}];
}

message ListProcessesResponse {
  HostProcessStatus data = 1;
}

message HostProcessStatus {
  repeated Process processes = 1;
  int64 totalMemory = 2;
  int64 memoryUsed = 3;
  double memoryUsedPercent = 4;
  double totalCpuCores = 5;
  double cpuUsedCores = 6;
  double cpuUsedPercent = 7;
  int64 connections = 8;
}

message Process {
  string pid = 1;
  string name = 2;
  string cmdline = 3;
  string user = 4;
  int64 createTime = 5;
  int64 numThreads = 6;
  int64 numFDs = 7;
  int64 connections = 8;

  ProcessCPUStatus cpu = 9;
  ProcessMemoryStatus memory = 10;
  ProcessIOStatus io = 11;
  ProcessContextSwitches contextSwitches = 12;
  ProcessRLimit rlimit = 13;

  string appType = 20;
}

message ProcessRLimit {
  ProcessRLimitStatus cpuTime = 1;
  ProcessRLimitStatus memoryData = 2;
  ProcessRLimitStatus memoryStack = 3;
  ProcessRLimitStatus memoryRss = 4;
  ProcessRLimitStatus memoryLocked = 5;
  ProcessRLimitStatus memoryVms = 6;
  ProcessRLimitStatus numFDs = 7;
  ProcessRLimitStatus fileLocks = 8;
  ProcessRLimitStatus signalsPending = 9;
  ProcessRLimitStatus nicePriority = 10;
  ProcessRLimitStatus realtimePriority = 11;
}

message ProcessRLimitStatus {
  int64 soft = 1;
  int64 Hard = 2;
  int64 used = 3;
}

message ProcessMemoryStatus {
  int64 rss  = 1;
  int64 vms  = 2;
  int64 swap  = 3;
  int64 data  = 4;
  int64 stack  = 5;
  int64 locked = 6;
  double usedPercent = 7;
}

message ProcessCPUStatus {
  double user = 1;
  double system = 2;
  // double idle = 3;
  // double nice = 4;
  double ioWait = 5;
  // double irq = 6;
  // double softIrq = 7;
  // double steal = 8;
  // double stolen = 9;
  // double guest = 10;
  // double guestNice = 11;
  double usedCores = 12;
  double usedPercent = 13;
  double usedPercentInHost = 14;
}

message ProcessIOStatus {
  int64 readCount = 8;
  int64 readBytes = 9;
  double readRate = 10;
  int64 writeCount = 11;
  int64 writeBytes = 12;
  double writeRate = 13;
}

message ProcessContextSwitches {
  int64 voluntary = 1;
  int64 involuntary = 2;
}