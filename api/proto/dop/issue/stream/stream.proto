syntax = "proto3";

package erda.dop.issue.stream;
option go_package = "github.com/erda-project/erda-proto-go/dop/issue/stream/pb";
import "google/api/annotations.proto";
import "common/openapi.proto";
import "common/identity.proto";
import "google/protobuf/timestamp.proto";

service CommentIssueStreamService {
  option (erda.common.openapi_service) = {
    service: "dop",
    auth: {
      check_login: true,
      check_token: true,
    }
  };

  rpc BatchCreateIssueStream(CommentIssueStreamBatchCreateRequest)
      returns (CommentIssueStreamBatchCreateResponse) {
    option (google.api.http) = {
      post: "/api/issues/actions/batch-create-comment-stream",
    };
    option (erda.common.openapi) = {
      path: "/api/issues/actions/batch-create-comment-stream",
    };
  }

  rpc CreateIssueStream(IssueStreamCreateRequest)
      returns (IssueStreamCreateResponse) {
    option (google.api.http) = {
      post: "/api/issues/{id}/streams",
    };
    option (erda.common.openapi) = {
      path: "/api/issues/{id}/streams",
    };
  }

  rpc PagingIssueStreams(PagingIssueStreamsRequest)
      returns (PagingIssueStreamsResponse) {
    option (google.api.http) = {
      get: "/api/issues/{id}/streams",
    };
    option (erda.common.openapi) = {
      path: "/api/issues/{id}/streams",
    };
  }
}

message CommentIssueStreamCreateRequest {
  int64 issueID = 1;
  string type = 2;
  string content = 3;
  MRCommentInfo mrInfo = 4;
  string userID = 5;
}

message MRCommentInfo {
  int64 appID = 1;
  int64 mrID = 2;
  string mrTitle = 3;
}

message CommentIssueStreamBatchCreateRequest {
  repeated CommentIssueStreamCreateRequest issueStreams = 1;
}

message CommentIssueStreamBatchCreateResponse {}

message IssueStreamCreateRequest {
  int64 issueID = 1;
  string type = 2;
  string content = 3;
  MRCommentInfo mrInfo = 4;
  common.IdentityInfo identityInfo = 5 [json_name = "-"];
  string id = 6;
}

message IssueStreamCreateResponse {
  int64 data = 1;
}

message PagingIssueStreamsRequest {
  uint64 issueID = 1;
  uint64 pageNo = 2;
  uint64 pageSize = 3;
  string id = 4;
}

message PagingIssueStreamsResponse {
  IssueStreamPagingResponseData data = 1;
  repeated string userIDs = 2;
}

message IssueStreamPagingResponseData {
  int64 total = 1;
  repeated IssueStream list = 2;
}

message IssueStream {
  int64 id = 1;
  int64 issueID = 2;
  string operator = 3;
  string streamType = 4;
  string content = 5;
  MRCommentInfo mrInfo = 6;
  google.protobuf.Timestamp createdAt = 7;
  google.protobuf.Timestamp updatedAt = 8;
}
