syntax = "proto3";

package erda.dop.guide;
option go_package = "github.com/erda-project/erda-proto-go/dop/guide/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "common/openapi.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service GuideService {
  option(erda.common.openapi_service) = {
    service : "dop",
    auth : {
      check_login : true,
      check_token : true,
    }
  };

  rpc CreateGuideByGittarHook(GittarPushPayloadEvent)
      returns(CreateGuideResponse) {
    option(google.api.http) = {
      post : "/api/guide",
    };
    option(erda.common.openapi) = {
      path : "/api/guide",
    };
  }

  rpc ListGuide(ListGuideRequest)
      returns(ListGuideResponse) {
    option(google.api.http) = {
      get : "/api/guide",
    };
    option(erda.common.openapi) = {
      path : "/api/guide",
    };
  }

  rpc JudgeCanCreatePipeline(JudgeCanCreatePipelineRequest)
      returns(JudgeCanCreatePipelineResponse) {
    option(google.api.http) = {
      get : "/api/guide/{ID}/actions/judge",
    };
    option(erda.common.openapi) = {
      path : "/api/guide/{ID}/actions/judge",
    };
  }

  rpc ProcessGuide(ProcessGuideRequest)
      returns(ProcessGuideResponse) {
    option(google.api.http) = {
      post : "/api/guide/actions/process",
    };
    option(erda.common.openapi) = {
      path : "/api/guide/actions/process",
    };
  }
}

message ListGuideRequest {
  string kind = 1 [(validator.field) = {string_not_empty: true}];
  uint64 projectID = 2 [(validator.field) = {int_gt: 0}];
}

message ListGuideResponse {
  repeated Guide data = 1;
}

message Guide {
  string ID = 1 [json_name = "id"];
  string jumpLink = 2;
  string status = 3;
  string creator = 4;
  string kind = 5;
  uint64 OrgID = 6;
  uint64 projectID = 7;
  uint64 appID = 8;
  string branch = 9;
  google.protobuf.Timestamp timeCreated = 10;
  google.protobuf.Timestamp timeUpdated = 11;
}

message JudgeCanCreatePipelineRequest {
  string ID = 1 [json_name = "id", (validator.field) = {string_not_empty: true}];
}

message JudgeCanCreatePipelineResponse {
  bool CanCreate = 1;
  uint64 AppID = 2;
  string Branch = 3;
  string Path = 4;
  string FileName = 5;
}

message GittarPushPayloadEvent {
  string Event = 1;
  string Action = 2;
  string OrgID = 3;
  string ProjectID = 4;
  string ApplicationID = 5;
  string Env = 6;
  string TimeStamp = 7;
  Content content = 8;
}

message Content {
  string Ref = 1;
  string After = 2;
  string Before = 3;
  Pusher Pusher = 4;
}

message Pusher {
  string ID = 1 [json_name = "id"];
  string Name = 2;
  string NickName = 3;
  string Email = 4;
}

message CreateGuideResponse {
  Guide data = 1;
}

message ProcessGuideRequest {
  uint64 appID = 1;
  string branch = 2;
  string kind = 3 [(validator.field) = {string_not_empty: true}];
}

message ProcessGuideResponse {
}