syntax = "proto3";

package erda.dop.projectpipeline;
option go_package = "github.com/erda-project/erda-proto-go/dop/projectpipeline/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "common/openapi.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service ProjectPipelineService {
  option(erda.common.openapi_service) = {
    service : "dop",
    auth : {
      check_login : true,
      check_token : true,
    }
  };

  rpc Create(CreateProjectPipelineRequest)
      returns(CreateProjectPipelineResponse) {
    option(google.api.http) = {
      post : "/api/project-pipeline",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline",
    };
  }

  rpc ListApp(ListAppRequest)
      returns(ListAppResponse) {
    option(google.api.http) = {
      get : "/api/project-pipeline/actions/get-my-apps",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/actions/get-my-apps",
    };
  }

  rpc ListPipelineYml(ListAppPipelineYmlRequest)
      returns(ListAppPipelineYmlResponse) {
    option(google.api.http) = {
      get : "/api/project-pipeline/actions/get-pipeline-yml-list",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/actions/get-pipeline-yml-list",
    };
  }

  rpc CreateNamePreCheck(CreateProjectPipelineNamePreCheckRequest)
      returns(CreateProjectPipelineNamePreCheckResponse) {
    option(google.api.http) = {
      get : "/api/project-pipeline/actions/name-pre-check",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/actions/name-pre-check",
    };
  }

  rpc CreateSourcePreCheck(CreateProjectPipelineSourcePreCheckRequest)
      returns(CreateProjectPipelineSourcePreCheckResponse) {
    option(google.api.http) = {
      get : "/api/project-pipeline/actions/source-pre-check",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/actions/source-pre-check",
    };
  }

  rpc ListPipelineCategory(ListPipelineCategoryRequest)
      returns(ListPipelineCategoryResponse) {
    option(google.api.http) = {
      get : "/api/project-pipeline/actions/list-category",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/actions/list-category",

    };
  }

  rpc Update(UpdateProjectPipelineRequest)
      returns(UpdateProjectPipelineResponse) {
    option(google.api.http) = {
      put : "/api/project-pipeline/definitions/{pipelineDefinitionID}",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/definitions/{pipelineDefinitionID}",
    };
  }

  rpc Run(RunProjectPipelineRequest)
      returns(RunProjectPipelineResponse) {
    option(google.api.http) = {
      post : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/run",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/run",
    };
  }

  rpc Rerun(RerunProjectPipelineRequest)
      returns(RerunProjectPipelineResponse) {
    option(google.api.http) = {
      post : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/rerun",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/rerun",
    };
  }

  rpc RerunFailed(RerunFailedProjectPipelineRequest)
      returns(RerunFailedProjectPipelineResponse) {
    option(google.api.http) = {
      post : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/rerun-failed",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/rerun-failed",
    };
  }

  rpc Cancel(CancelProjectPipelineRequest)
      returns(CancelProjectPipelineResponse) {
    option(google.api.http) = {
      post : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/cancel",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/definitions/{pipelineDefinitionID}/actions/cancel",
    };
  }

  rpc OneClickCreate(OneClickCreateProjectPipelineRequest)
      returns(OneClickCreateProjectPipelineResponse) {
    option(google.api.http) = {
      post : "/api/project-pipeline/actions/one-click-create",
    };
    option(erda.common.openapi) = {
      path : "/api/project-pipeline/actions/one-click-create",
    };
  }
}

message PipelineRunParam {
  string name = 1;
  google.protobuf.Value value = 2;
}

message RunProjectPipelineRequest {
  string pipelineDefinitionID = 1;
  int64 projectID = 2;
  repeated PipelineRunParam runParams = 3;
}

message RunProjectPipelineResponse {
  google.protobuf.Value pipeline = 1;
}

message RerunProjectPipelineRequest {
  string pipelineDefinitionID = 1;
  int64 projectID = 2;
}

message RerunProjectPipelineResponse {
  google.protobuf.Value pipeline = 1;
}

message RerunFailedProjectPipelineRequest {
  string pipelineDefinitionID = 1;
  int64 projectID = 2;
}

message RerunFailedProjectPipelineResponse {
  google.protobuf.Value pipeline = 1;
}

message CancelProjectPipelineRequest {
  string pipelineDefinitionID = 1;
  int64 projectID = 2;
}

message CancelProjectPipelineResponse {}

message CreateProjectPipelineSourcePreCheckRequest {
  uint64 appID = 1 [(validator.field) = {int_gt: 0}];
  string sourceType = 2 [(validator.field) = {string_not_empty: true}];
  string ref = 3 [(validator.field) = {string_not_empty: true}];
  string path = 4;
  string fileName = 5 [(validator.field) = {string_not_empty: true}];
}

message CreateProjectPipelineSourcePreCheckResponse {
  bool pass = 1;
  string message = 2;
}

message CreateProjectPipelineNamePreCheckRequest {
  uint64 projectID = 1 [(validator.field) = {int_gt: 0}];
  string name = 2 [(validator.field) = {string_not_empty: true}];
}

message CreateProjectPipelineNamePreCheckResponse {
  bool pass = 1;
  string message = 2;
}

message ListAppPipelineYmlRequest {
  uint64 appID = 1;
  string branch = 2;
}

message PipelineYmlList {
  string ymlName = 1;
  string ymlPath = 2;
}

message ListAppPipelineYmlResponse {
  repeated PipelineYmlList result = 1;
}

message ListAppRequest {
  uint64 projectID = 1 [(validator.field) = {int_gt: 0}];
  string name = 2;
}

message ListAppResponse {
  repeated Application data = 1;
}

message Application {
  uint64 ID = 1;
  string name = 2;
  string displayName = 3;
  string mode = 4;
  string desc = 5;
  string logo = 6;
  bool isPublic = 7;
  string creator = 8;
  string gitRepo = 9;
  uint64 orgID = 10;
  string orgDisplayName = 11;
  uint64  projectID = 12;
  string projectName = 13;
  bool isExternalRepo = 14;
  google.protobuf.Timestamp createdAt = 15;
  google.protobuf.Timestamp updatedAt = 16;
  uint64  runningNum = 17;
  uint64 failedNum = 18;
  uint64 totalNum = 19;
}

message CreateProjectPipelineRequest {
  uint64 projectID = 1 [(validator.field) = {int_gt: 0}];
  string name = 2 [(validator.field) = {string_not_empty: true}];
  uint64 appID = 3;
  string sourceType = 4 [(validator.field) = {string_not_empty: true}];
  string ref = 5 [(validator.field) = {string_not_empty: true}];
  string path = 6;
  string fileName = 7 [(validator.field) = {string_not_empty: true}];
}

message CreateProjectPipelineResponse {
  ProjectPipeline ProjectPipeline = 1;
}

message ProjectPipeline {
  string ID = 1;
  string name = 2;
  string creator = 3;
  string category = 4;
  google.protobuf.Timestamp timeCreated = 5;
  google.protobuf.Timestamp timeUpdated = 6;
  string sourceType = 7;
  string remote = 8;
  string ref = 9;
  string path = 10;
  string fileName = 11;
  string pipelineSourceID = 12;
}

message ListPipelineCategoryRequest {
  uint64 projectID = 1 [(validator.field) = {int_gt: 0}];
}

message ListPipelineCategoryResponse {
  repeated pipelineCategory data = 1;
}

message pipelineCategory {
  string key = 1;
  string category = 2;
  repeated string rules = 3;
  uint64 runningNum = 4;
  uint64 failedNum = 5;
  uint64 totalNum = 6;
}

message UpdateProjectPipelineRequest {
  string pipelineDefinitionID = 1 [(validator.field) = {string_not_empty: true}];
  uint64 projectID = 2 [(validator.field) = {int_gt: 0}];
  string name = 3 [(validator.field) = {string_not_empty: true}];
  ProjectPipelineSource projectPipelineSource = 4;
}

message UpdateProjectPipelineResponse {
  ProjectPipeline ProjectPipeline = 1;
}

message OneClickCreateProjectPipelineRequest {
  uint64 projectID = 1 [(validator.field) = {int_gt: 0}];
  uint64 appID = 2;
  string sourceType = 3 [(validator.field) = {string_not_empty: true}];
  string ref = 4 [(validator.field) = {string_not_empty: true}];
  repeated string pipelineYmls = 5;
}

message OneClickCreateProjectPipelineResponse {
  repeated ProjectPipeline projectPipelines = 1;
  string errMsg = 2;
}

message ProjectPipelineSource {
  uint64 appID = 1 [(validator.field) = {int_gt: 0}];
  string sourceType = 2 [(validator.field) = {string_not_empty: true}];
  string ref = 3 [(validator.field) = {string_not_empty: true}];
  string path = 4;
  string fileName = 5 [(validator.field) = {string_not_empty: true}];
}