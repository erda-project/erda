syntax = "proto3";

package erda.orchestrator.runtime;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "common/http.proto";
import "common/status.proto";

option go_package = "github.com/erda-project/erda-proto-go/orchestrator/runtime/pb";

message GetRuntimeRequest {
  string nameOrID = 1;
  string appID = 2;
  string workspace = 3;
}

message Resources {
  double cpu = 1;
  int64 mem = 2;
  int64 disk = 3;
}

message Deployments {
  uint64 replicas = 1;
}

message Service {
  string status = 1;
  Deployments deployments = 2;
  Resources resources = 3;
  map<string, string> envs = 4;
  repeated string addrs = 5;
  repeated string expose = 6;
  repeated ErrorResponse errors = 7;
  string type = 8;
  string hpaEnabled = 9 [json_name ="hpaEnabled"];
  string vpaEnabled = 10 [json_name ="vpaEnabled"];
}

message StatusMap {
  string msg = 1 [json_name = "Msg"];
  string reason = 2 [json_name = "Reason"];
}

message Extra {
  uint64 applicationID = 1 [json_name = "applicationId"] ;
  uint64 buildID = 2 [json_name = "buildId"];
  string workspace = 3;
}

message ErrorResponse {
  string code = 1;
  string msg = 2;
  google.protobuf.Value ctx = 3;
}

message RuntimeInspect {
  uint64 id = 1;
  string name = 2;
  string serviceGroupName = 3;
  string serviceGroupNamespace = 4;
  string source = 5;
  string status = 6;
  string deployStatus = 7;
  string deleteStatus = 8;
  string releaseID = 9 [json_name = "releaseId"];
  uint64 clusterID = 10 [json_name = "clusterId"] ;
  string clusterName = 11;
  string clusterType = 12;
  Resources resources = 13;
  Extra extra = 14;
  uint64 projectID = 15 [json_name = "projectId"] ;
  string applicationName = 16 [json_name = "applicationName"];
  map<string, Service> services = 17;
  map<string, StatusMap> lastMessage = 18;
  google.protobuf.Timestamp timeCreated = 19;
  google.protobuf.Timestamp createdAt = 20;
  google.protobuf.Timestamp updatedAt = 21;
  repeated ErrorResponse errors = 22;
}

message DelRuntimeRequest {
  string id = 1;
}

message Runtime {
  uint64 id = 1;
  string name = 2;
  string gitBranch = 3;
  string workspace = 4;
  string clusterName = 5;
  uint64 clusterID = 6 [json_name = "clusterId"] ;
  string status = 7;
  uint64 applicationID = 8 [json_name = "applicationId"] ;
  string applicationName = 9;
  uint64 projectID = 10 [json_name = "projectId"];
  string projectName = 11;
  uint64 orgID = 12 [json_name = "orgId"];
  repeated ErrorResponse errors = 13;
}

message CheckRuntimeExistReq {
  uint64 id = 1;
}

message CheckRuntimeExistResp {
  bool ok = 1;
}

message StringMap {
  map<string, string> data = 1;
}

message StringArray {
  repeated string data = 1;
}

message RuntimeCreateRequestExtra {
  uint64 orgId = 1;
  uint64 projectId = 2;
  uint64 applicationId = 3;
  string applicationName = 4;
  string workspace = 5;
  uint64 buildId = 6;
  string deployType = 7;
  string instanceId = 8;
  string clusterId = 9;
  map<string, google.protobuf.Value> addonActions = 10;
}

message RuntimeCreateRequest {
  string name = 1;
  string releaseId = 2;
  string operator = 3;
  string clusterName = 4;
  string source = 5;
  RuntimeCreateRequestExtra extra = 6;
  bool skipPushByOrch = 7;
  string param = 8;
  string deploymentOrderId = 9;
  string releaseVersion = 10;
  string extraParams = 11;
}

message DeploymentCreateResponse {
  uint64 deploymentId = 1;
  uint64 applicationId = 2;
  uint64 runtimeId = 3;
}

message RuntimeReleaseCreateRequest {
  string releaseId = 1;
  string workspace = 2;
  uint64 projectId = 3;
  uint64 applicationId = 4;
}

message ListRuntimesRequest {
  string applicationID = 1;
  string workSpace = 2;
  string name = 3;
}

message ListRuntimeResponse {
  repeated RuntimeSummary data = 1;
  repeated string userIDs = 2;
}

message RuntimeServiceResource {
  double cpu = 1;
  int64 mem = 2;
  int64 disk = 3;
}

message RuntimeServiceDeployments {
  int64 replicas = 1;
}

message RuntimeInspectService {
  string status = 1;
  string hpaEnabled = 2;
  string vpaEnabled = 3;
  string type = 4;
  RuntimeServiceDeployments deployments = 5;
  RuntimeServiceResource resources = 6;
  map<string, string> envs = 7;
  repeated string addrs = 8;
  repeated string expose = 9;
  repeated ErrorResponse errors = 10;
}

message RuntimeSummary {
  uint64 id = 1;
  string name = 2;
  string serviceGroupName = 3;
  string serviceGroupNamespace = 4;
  string source = 5;
  string status = 6;
  string deployStatus = 7;
  string deleteStatus = 8;
  string releaseId = 9;
  uint64 clusterId = 10;
  string clusterName = 11;
  string clusterType = 12;
  RuntimeServiceResource resources = 13;
  map<string, google.protobuf.Value> extra = 14;
  uint64 projectId = 15;
  map<string, RuntimeInspectService> services = 16;
  map<string, StringMap> moduleErrMsg = 17;
  google.protobuf.Timestamp timeCreated = 18;
  google.protobuf.Timestamp createdAt = 19;
  google.protobuf.Timestamp updatedAt = 20;
  google.protobuf.Timestamp deployAt = 21;
  repeated ErrorResponse errors = 22;
  string creator = 23;
  uint64 applicationId = 24;
  string applicationName = 25;
  string deploymentOrderId = 26;
  string deploymentOrderName = 27;
  string releaseVersion = 28;
  string rawStatus = 29;
  string rawDeploymentStatus = 30;
  string lastOperator = 31;
  string lastOperatorName = 32;
  string lastOperatorAvatar = 33;
  google.protobuf.Timestamp lastOperatorTime = 34;
  uint64 lastOperatorId = 35;
}

message RuntimeStopRequest {
  string runtimeID = 1;
}

message ReDeployRuntimeActionRequest {
  string runtimeID = 1;
}

message RollBackRuntimeActionRequest {
  uint64 deploymentId = 1;
  string runtimeID = 2;
}

message PreDiceDTO {
  string name = 1;
  map<string, string> envs = 2;
  map<string, RuntimeInspectService> services = 3;
}

message RuntimeScaleRecord {
  uint64 applicationId = 1;
  string workspace = 2;
  string name = 3;
  uint64 runtimeId = 4;
  PreDiceDTO payload = 5;
  string errMsg = 6;
}

message RuntimeDeploy {
  uint64 pipelineID = 1;         
  string workspace = 2;          
  string clusterName = 3;       
  uint64 applicationID = 4;     
  string application_name = 5;   
  uint64 projectID = 6;         
  string projectName = 7;       
  uint64 orgID = 8;             
  string orgName = 9;           
  repeated string servicesNames = 10; 
}

message ReferClusterRequest {
  string cluster = 1;
}

message ReferClusterResponse {
  bool data = 1;
}

message RuntimeLogsRequest {
  string source = 1;
  string id = 2;
  string stream = 3;
  int64 count = 4;
  int64 start = 5;
  int64 end = 6;
  bool debug = 7;
  string clusterName = 8;
  string pipelineID = 9;
  string applicationId = 10;
}

message DashboardSpotLogLine {
  string id = 1;
  string source = 2;
  string stream = 3;
  string timestamp = 4;
  string content = 5;
  int64 offset = 6;
  string level = 7;
  string requestId = 8;
}

message DashboardSpotLogData {
  repeated DashboardSpotLogLine lines = 1;
  bool isFallback = 2;
}

message ListRuntimeByAppsRequest {
  repeated string applicationID = 1;
  repeated string workspace = 2;
}

message ListRuntimeByAppsResponse {
  map<uint64, google.protobuf.Value> data = 1;
}

message ListMyRuntimesRequest {
  string projectID = 1;
  repeated string workSpace = 2;
  repeated string appID = 3;
}

message ListMyRuntimesResponse {
  repeated RuntimeSummary data = 1;
}

message CountPRByWorkspaceRequest {
  string projectId = 1;
  string appID = 2;
  repeated string workSpace = 3;
}

message CountPRByWorkspaceResponse {
  map<string, uint64> data = 1;
}

message BatchRuntimeServiceRequest {
  repeated string runtimeID = 1;
}

message BatchRuntimeServiceResponse {
  map<uint64, RuntimeSummary> data = 1;
}

message StartRuntimeRequest {
  string runtimeID = 1;
}

message StartRuntimeResponse {

}

message RestartRuntimeRequest {
  string runtimeID = 1;
}

message RestartRuntimeResponse {

}

service RuntimeService {
  rpc GetRuntime (GetRuntimeRequest) returns (RuntimeInspect) {
    option (google.api.http) = {
      get: "/api/runtimes/{nameOrID}?applicationId={appID}&workspace={workspace}",
    };
  }

  rpc CheckRuntimeExist (CheckRuntimeExistReq) returns (CheckRuntimeExistResp) {}

  rpc DelRuntime (DelRuntimeRequest) returns (Runtime) {
    option (google.api.http) = {
      delete: "/api/runtimes/{id}",
    };
  }

  rpc CreateRuntime(RuntimeCreateRequest) returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes",
    };
  }

  rpc CreateRuntimeByReleaseAction(RuntimeReleaseCreateRequest) returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/actions/deploy-release-action",
    };
  }

  rpc CreateRuntimeByRelease(RuntimeReleaseCreateRequest) returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/actions/deploy-release",
    };
  }

  rpc ListRuntimes(ListRuntimesRequest) returns(ListRuntimeResponse) {
    option (google.api.http) = {
      get: "/api/runtimes?applicationId={applicationID}&workspace={workSpace}&name={name}",
    };
  }

  rpc StopRuntime(RuntimeStopRequest) returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/{runtimeID}/actions/stop"
    };
  }

  rpc ReDeployRuntimeAction(ReDeployRuntimeActionRequest)returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/{runtimeID}/actions/redeploy-action"
    };
  }

  rpc ReDeployRuntime(ReDeployRuntimeActionRequest)returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/{runtimeID}/actions/redeploy"
    };
  }

  rpc RollBackRuntimeAction(RollBackRuntimeActionRequest)returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/{runtimeID}/actions/rollback-action"
    };
  }

  rpc RollBackRuntime(RollBackRuntimeActionRequest)returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post: "/api/runtimes/{runtimeID}/actions/rollback"
    };
  }

  rpc FullGC(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/runtimes/actions/full-gc"
    };
  }

  rpc ReferCluster(ReferClusterRequest) returns (ReferClusterResponse) {
    option (google.api.http) = {
      get: "/api/runtimes/actions/refer-cluster"
    };
  }

  rpc RuntimeLogs(RuntimeLogsRequest) returns (DashboardSpotLogData) {
    option (google.api.http) = {
      get: "/api/runtimes/deploy/logs"
    };
  }

  rpc ListRuntimesGroupByApps(ListRuntimeByAppsRequest) returns (ListRuntimeByAppsResponse) {
    option (google.api.http) = {
      get: "/api/runtimes/actions/group-by-apps?applicationID={applicationID}&workSpace={workspace}"
    };
  }

  rpc ListMyRuntimes(ListMyRuntimesRequest) returns (ListMyRuntimesResponse) {
    option (google.api.http) = {
      get: "/api/runtimes/actions/list-my-runtimes"
    };
  }

  rpc CountPRByWorkspace(CountPRByWorkspaceRequest) returns (CountPRByWorkspaceResponse) {
    option (google.api.http) = {
      get: "/api/countProjectRuntime"
    };
  }

  rpc BatchRuntimeService(BatchRuntimeServiceRequest) returns (BatchRuntimeServiceResponse) {
    option (google.api.http) = {
      get: "/api/runtimesServices"
    };
  }

  rpc StartRuntime(StartRuntimeRequest)returns (StartRuntimeResponse){
    option(google.api.http) = {
      post: "/api_test/runtimes/{runtimeID}/actions/start"
    };
  }

  rpc RestartRuntime(RestartRuntimeRequest)returns (RestartRuntimeResponse){
    option(google.api.http) = {
      post: "/api_test/runtimes/{runtimeID}/actions/restart"
    };
  }


}