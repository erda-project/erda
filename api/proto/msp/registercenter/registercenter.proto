syntax = "proto3";

package erda.msp.registercenter;
option go_package = "github.com/erda-project/erda-proto-go/msp/registercenter/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "common/openapi.proto";

service RegisterCenterService {
  option (erda.common.openapi_service) = {
    service: "msp",
    auth: {
      check_login: true,
      check_token: true,
    }
  };

  rpc ListInterface (ListInterfaceRequest) returns (ListInterfaceResponse)  {
    option (google.api.http) = {
      get: "/api/msp/register/interfaces/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
    option (erda.common.openapi) = {
      path: "/api/tmc/mesh/listinterface/{projectID}/{env}"
    };
  }
  rpc GetHTTPServices (GetHTTPServicesRequest) returns (GetHTTPServicesResponse)  {
    option (google.api.http) = {
      get: "/api/msp/register/http-interfaces/{projectID}/{env}?az={clusterName}&appid={appID}&nacosId={nacosID}",
    };
    option (erda.common.openapi) = {
      path: "/api/tmc/mesh/listhttpinterface/{projectID}/{env}"
    };
  }
  rpc EnableHTTPService (EnableHTTPServiceRequest) returns (EnableHTTPServiceResponse)  {
    option (google.api.http) = {
      post: "/api/msp/register/http-interfaces/{projectID}/{env}/enable?az={clusterName}&nacosId={nacosID}",
      body: "service",
    };
    option (erda.common.openapi) = {
      path: "/api/tmc/mesh/enable/{projectID}/{env}"
    };
  }

  rpc GetServiceIpInfo (ServiceIpRequest) returns (ServiceIpInfoResponse) {
    option (google.api.http) = {
      get: "/api/msp/register/service-ip",
    };
    option (erda.common.openapi) = {
      path: "/api/tmc/service-ip"
    };
  }

  // +depracated
  rpc GetRouteRule (GetRouteRuleRequest) returns (GetRouteRuleResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/interface/route/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
  }
  // +depracated
  rpc CreateRouteRule (CreateRouteRuleRequest) returns (CreateRouteRuleResponse)  {
    option (google.api.http) = {
      post: "/api/msp/mesh/interface/route/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}&runtimeId={runtimeID}",
      body : "rule",
    };
  }
  // +depracated
  rpc DeleteRouteRule (DeleteRouteRuleRequest) returns (DeleteRouteRuleResponse)  {
    option (google.api.http) = {
      delete: "/api/msp/mesh/interface/route/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
  }
  // +depracated
  rpc GetHostRule (CetHostRuleRequest) returns (CetHostRuleResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/rule/branch/{projectID}/{env}/{appID}?az={clusterName}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
  }
  // +depracated
  rpc CreateHostRule (CreateHostRuleRequest) returns (CreateHostRuleResponse)  {
    option (google.api.http) = {
      post: "/api/msp/mesh/rule/branch/{projectID}/{env}/{appID}?az={clusterName}&tenantId={tenantID}&runtimeId={runtimeID}",
      body: "rules",
    };
  }
  // +depracated
  rpc DeleteHostRule (DeleteHostRuleRequest) returns (DeleteHostRuleResponse)  {
    option (google.api.http) = {
      delete: "/api/msp/mesh/rule/branch/{projectID}/{env}/{appID}?az={clusterName}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
  }
  // +depracated
  rpc GetHostRuntimeRule (GetHostRuntimeRuleRequest) returns (GetHostRuntimeRuleResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/rule/host/{projectID}/{env}/{host}?az={clusterName}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
  }
  // +depracated
  rpc CreateHostRuntimeRule (CreateHostRuntimeRuleRequest) returns (CreateHostRuntimeRuleResponse)  {
    option (google.api.http) = {
      post: "/api/msp/mesh/rule/host/{projectID}/{env}/{host}?az={clusterName}&tenantId={tenantID}&runtimeId={runtimeID}",
      body: "rules",
    };
  }
  // +depracated
  rpc GetAllHostRuntimeRules (GetAllHostRuntimeRulesRequest) returns (GetAllHostRuntimeRulesResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/listhostinterface/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}&runtimeId={runtimeID}",
    };
  }
  // +depracated
  rpc GetDubboInterfaceTime (GetDubboInterfaceTimeRequest) returns (GetDubboInterfaceTimeResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/timestamp/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}",
    };
  }
  // +depracated
  rpc GetDubboInterfaceQPS (GetDubboInterfaceQPSRequest) returns (GetDubboInterfaceQPSResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/qps/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}",
    };
  }
  // +depracated
  rpc GetDubboInterfaceFailed (GetDubboInterfaceFailedRequest) returns (GetDubboInterfaceFailedResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/failed/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}",
    };
  }
  // +depracated
  rpc GetDubboInterfaceAvgTime (GetDubboInterfaceAvgTimeRequest) returns (GetDubboInterfaceAvgTimeResponse)  {
    option (google.api.http) = {
      get: "/api/msp/mesh/avgtime/{interfaceName}/{projectID}/{env}?az={clusterName}&appid={appID}&tenantId={tenantID}",
    };
  }
}

// ListInterface
message ListInterfaceRequest {
  string projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string env         = 2 [(validator.field) = {string_not_empty: true}];
  string clusterName = 3;
  string appID       = 4;
  string tenantID    = 5;
  string tenantGroup = 6 [(validator.field) = {string_not_empty: true}];
  string runtimeID   = 7;
}

message ListInterfaceResponse {
  repeated Interface data = 1;
}

// GetHTTPServices 
message GetHTTPServicesRequest {
  string projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string env         = 2 [(validator.field) = {string_not_empty: true}];
  string clusterName = 3 [(validator.field) = {string_not_empty: true}];
  string nacosID     = 4;
  string appID       = 5;
  string tenantGroup = 6 [(validator.field) = {string_not_empty: true}];
}

message GetHTTPServicesResponse {
  HTTPServices data = 1;
}

// EnableHTTPService
message EnableHTTPServiceRequest {
  string            projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string            env         = 2 [(validator.field) = {string_not_empty: true}];
  string            clusterName = 3 [(validator.field) = {string_not_empty: true}];
  string            nacosID     = 4;
  string            tenantGroup = 5 [(validator.field) = {string_not_empty: true}];
  EnableHTTPService service     = 6 [(validator.field) = {msg_exists : true}];
}

message EnableHTTPServiceResponse {
  EnableHTTPService data = 1;
}

message EnableHTTPService {
  string serviceName = 1;
  string address     = 2;
  bool   online      = 3;
}

// GetRouteRule
message GetRouteRuleRequest {
  string interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string projectID     = 2 [(validator.field) = {string_not_empty: true}];
  string env           = 3 [(validator.field) = {string_not_empty: true}];
  string clusterName   = 4;
  string appID         = 5;
  string tenantID      = 6;
  string runtimeID     = 7;
}

message GetRouteRuleResponse {
  RequestRule data = 1;
}

// CreateRouteRule
message CreateRouteRuleRequest {
  string      interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string      projectID     = 2 [(validator.field) = {string_not_empty: true}];
  string      env           = 3 [(validator.field) = {string_not_empty: true}];
  string      clusterName   = 4;
  string      appID         = 5;
  string      tenantID      = 6;
  string      runtimeID     = 7;
  RequestRule rule          = 8 [(validator.field) = {msg_exists : true}];
}

message CreateRouteRuleResponse {
  RequestRule data = 1;
}

// DeleteRouteRule
message DeleteRouteRuleRequest {
  string interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string projectID     = 2 [(validator.field) = {string_not_empty: true}];
  string env           = 3 [(validator.field) = {string_not_empty: true}];
  string clusterName   = 4;
  string appID         = 5;
  string tenantID      = 6;
  string runtimeID     = 7;
}

message DeleteRouteRuleResponse {
  RequestRule data = 1;
}

// GetHostRule
message CetHostRuleRequest {
  string projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string env         = 2 [(validator.field) = {string_not_empty: true}];
  string clusterName = 3;
  string appID       = 4;
  string tenantID    = 5;
  string runtimeID   = 6;
}

message CetHostRuleResponse {
  HostRules data = 1;
}

// CreateHostRule
message CreateHostRuleRequest {
  string    projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string    env         = 2 [(validator.field) = {string_not_empty: true}];
  string    clusterName = 3;
  string    appID       = 4;
  string    tenantID    = 5;
  string    runtimeID   = 6;
  HostRules rules       = 7 [(validator.field) = {msg_exists : true}];
}

message CreateHostRuleResponse {
  HostRules data = 1;
}

// DeleteHostRule
message DeleteHostRuleRequest {
  string projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string env         = 2 [(validator.field) = {string_not_empty: true}];
  string clusterName = 3;
  string appID       = 4;
  string tenantID    = 5;
  string runtimeID   = 6;
}

message DeleteHostRuleResponse {
  HostRules data = 1;
}

// GetHostRuntimeRule
message GetHostRuntimeRuleRequest {
  string projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string env         = 2 [(validator.field) = {string_not_empty: true}];
  string host        = 3 [(validator.field) = {string_not_empty: true}];
  string clusterName = 4;
  string tenantID    = 5;
  string runtimeID   = 6;
}

message GetHostRuntimeRuleResponse {
  HostRuntimeRules data = 1;
}

// CreateHostRuntimeRule
message CreateHostRuntimeRuleRequest {
  string           projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string           env         = 2 [(validator.field) = {string_not_empty: true}];
  string           host        = 3 [(validator.field) = {string_not_empty: true}];
  string           clusterName = 4;
  string           tenantID    = 5;
  string           runtimeID   = 6;
  HostRuntimeRules rules       = 7 [(validator.field) = {msg_exists : true}];
}

message CreateHostRuntimeRuleResponse {
  HostRuntimeRules data = 1;
}

// GetAllHostRuntimeRules
message GetAllHostRuntimeRulesRequest {
  string projectID   = 1 [(validator.field) = {string_not_empty: true}];
  string env         = 2 [(validator.field) = {string_not_empty: true}];
  string clusterName = 3;
  string appID       = 4;
  string tenantID    = 5;
  string runtimeID   = 6;
}

message GetAllHostRuntimeRulesResponse {
  HostRuntimeInterfaces data = 1;
}

// GetDubboInterfaceTime
message GetDubboInterfaceTimeRequest {
  string interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string projectID     = 2 [(validator.field) = {string_not_empty: true}];
  string env           = 3 [(validator.field) = {string_not_empty: true}];
  string clusterName   = 4;
  string appID         = 5;
  string tenantID      = 6;
}

message GetDubboInterfaceTimeResponse {
  DubboInterfaceTime data = 1;
}

message DubboInterfaceTime {
  string providerTime = 1;
  string consumerTime = 2;
}

// GetDubboInterfaceQPS
message GetDubboInterfaceQPSRequest {
  string interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string projectID     = 2 [(validator.field) = {string_not_empty: true}];
  string env           = 3 [(validator.field) = {string_not_empty: true}];
  string start         = 4;
  string end           = 5;
  string point         = 6;
  string clusterName   = 7;
  string appID         = 8;
  string tenantID      = 9;
}

message GetDubboInterfaceQPSResponse {
  DubboInterface data = 1;
}

// GetDubboInterfaceFailed
message GetDubboInterfaceFailedRequest {
  string interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string projectID     = 2 [(validator.field) = {string_not_empty: true}];
  string env           = 3 [(validator.field) = {string_not_empty: true}];
  string start         = 4;
  string end           = 5;
  string point         = 6;
  string clusterName   = 7;
  string appID         = 8;
  string tenantID      = 9;
}

message GetDubboInterfaceFailedResponse {
  DubboInterface data = 1;
}

// GetDubboInterfaceAvgTime
message GetDubboInterfaceAvgTimeRequest {
  string interfaceName = 1 [(validator.field) = {string_not_empty: true}];
  string projectID     = 2  [(validator.field) = {string_not_empty: true}];
  string env           = 3  [(validator.field) = {string_not_empty: true}];
  string start         = 4;
  string end           = 5;
  string point         = 6;
  string clusterName   = 7;
  string appID         = 8;
  string tenantID      = 9;
}

message GetDubboInterfaceAvgTimeResponse {
  DubboInterface data = 1;
}

// common message
message Interface {
  string                      interfacename = 1;
  repeated string             providerlist  = 2;
  repeated string             consumerlist  = 3;
  map<string, InterfaceOwner> providermap   = 4;
  map<string, InterfaceOwner> consumermap   = 5;
}

message InterfaceOwner {
  string ip            = 1;
  string owner         = 2;
  string projectId     = 3;
  string env           = 4;
  string hostIp        = 5;
  string applicationId = 6;
  string feature       = 7;
  string serviceName   = 8;
}

message RequestRule {
  string lb_type              = 1;
  string max_request_per_conn = 2;
  string max_connections      = 3;
  string max_requests         = 4;
}

message HostRules {
  HostRoute rule = 1;
}

message HostRoute {
  string branch = 1;
  int64  weight = 2;
}

message HostRuntimeRules {
  string                   address = 1;
  repeated HostRuntimeRule rule    = 2;
}

message HostRuntimeRule {
  string name   = 1;
  int64  weight = 2;
}

message HostRuntimeInterfaces {
  string                    appid = 1;
  repeated HostRuntimeRules node  = 2;
}

message HTTPServices {
  repeated HTTPService serviceList = 1;
}

message HTTPService {
  string                   serviceName    = 1;
  string                   serviceDomain  = 2;
  repeated HTTPServiceItem httpServiceDto = 3;
}

message HTTPServiceItem {
  string address = 1;
  bool   online  = 2;
}

message DubboInterface {
  string                        title   = 1;
  int64                         total   = 2;
  repeated int64                time    = 3;
  repeated DubboInterfaceResult results = 4;
}

message DubboInterfaceResult {
  string                   name = 1;
  repeated DubboMointorMap data = 2;
}

message DubboMointorMap {
  string       key   = 1;
  DubboMointor value = 2;
}

message DubboMointor {
  string         name      = 1;
  string         tag       = 2;
  repeated int64 data      = 3;
  string         unit      = 4;
  string         unitType  = 5;
  string         chartType = 6;
  int64          axisIndex = 7;
}

message ServiceIpRequest {
  string projectID = 1;
  string workspace = 2;
  string ip = 3;
}

message ServiceIpInfoResponse {
  string appID = 1;
  string runtimeID = 2;
  string serviceName = 3;
}