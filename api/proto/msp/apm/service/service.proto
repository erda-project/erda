syntax = "proto3";

package erda.msp.apm.service;
option go_package = "github.com/erda-project/erda-proto-go/msp/apm/service/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "common/openapi.proto";
import "common/language.proto";

service ApmServiceService {
  rpc GetServices (GetServicesRequest) returns (GetServicesResponse) {
    option (google.api.http)     = {
      get: "/api/msp/apm/services",
    };
    option (erda.common.openapi) = {
      path: "/api/msp/apm/services",
      service: "msp",
      auth: {
        check_login: true,
        check_token: true,
      }
    };
  }

  rpc GetServiceAnalyzerOverview (GetServiceAnalyzerOverviewRequest) returns (GetServiceAnalyzerOverviewResponse) {
    option (google.api.http)     = {
      get: "/api/msp/apm/service/analyzer-overview",
    };
    option (erda.common.openapi) = {
      path: "/api/msp/apm/service/analyzer-overview",
      service: "msp",
      auth: {
        check_login: true,
        check_token: true,
      }
    };
  }

  rpc GetServiceCount (GetServiceCountRequest) returns (GetServiceCountResponse) {
    option (google.api.http)     = {
      get: "/api/msp/apm/service/count",
    };
    option (erda.common.openapi) = {
      path: "/api/msp/apm/service/count",
      service: "msp",
      auth: {
        check_login: true,
        check_token: true,
      }
    };
  }

  rpc GetServiceLanguage (GetServiceLanguageRequest) returns (GetServiceLanguageResponse) {
    option (google.api.http)     = {
      get: "/api/msp/apm/service/language",
    };
    option (erda.common.openapi) = {
      path: "/api/msp/apm/service/language",
      service: "msp",
      auth: {
        check_login: true,
        check_token: true,
      }
    };
  }
}

message GetServiceLanguageResponse {
  string language = 1;
}

message GetServiceLanguageRequest {
  string tenantId  = 1;
  string serviceId = 2;
}

message GetServiceOverviewTopRequest {
  string tenantId = 1;
}

message GetServiceOverviewTopResponse {

}

message GetServiceCountRequest {
  string tenantId = 1;
  string status   = 2;
}

message GetServiceCountResponse {
  int64 totalCount          = 1;
  int64 hasErrorCount       = 2;
  int64 withoutRequestCount = 3;
}

message GetServiceAnalyzerOverviewRequest {
  string          tenantId   = 1;
  repeated string serviceIds = 2;
  string          view       = 3;
  int64           startTime  = 4;
  int64           endTime    = 5;
}

message GetServiceAnalyzerOverviewResponse {
  repeated ServicesView list = 1;
}

message ServicesView {
  string                serviceId = 1;
  repeated ServiceChart views     = 2;
}

message GetServicesRequest {
  int64  pageNo        = 1;
  int64  pageSize      = 2;
  string tenantId      = 3;
  string serviceName   = 4;
  string serviceStatus = 5;
}

message GetServicesResponse {
  int64            pageNo   = 1;
  int64            pageSize = 2;
  int64            total    = 3;
  repeated Service list     = 4;
}

message TopTable {
  string serviceId   = 1;
  string serviceName = 2;
  double value       = 3;
}

enum Status {
  hasError       = 0;
  withoutRequest = 1;
  all            = 2;
}

message Chart {
  int64           timestamp   = 1;
  double          value       = 2;
  string          dimension   = 3;
  repeated double extraValues = 4;
}

message ServiceTop {
  string            type = 1;
  repeated TopTable tops = 2;
}

message ServiceChart {
  string         type     = 1;
  repeated Chart view     = 2;
  double         maxValue = 3;
}

message Service {
  string               id              = 1;
  string               name            = 2;
  erda.common.Language language        = 3;
  string               lastHeartbeat   = 4;
  AggregateMetric      aggregateMetric = 5;
}

message AggregateMetric {
  double avgRps      = 1; // Average throughput
  double avgDuration = 2; // Average duration
  double errorRate   = 3; // Error rate
}

enum ChartType {
  RPS                      = 0;
  AvgDuration              = 1;
  AvgDurationDistribution  = 2;
  ErrorRate                = 3;
  HttpCode                 = 4;
  ErrorCount               = 5;
  SlowCount                = 6;
  SlowDurationDistribution = 7;
}

enum ChartPosition {
  TopologyChart    = 0;
  ServiceListChart = 1;
}

enum ViewType {
  SERVICE_OVERVIEW      = 0;
  TOPOLOGY_SERVICE_NODE = 1;
  RPS_Chart             = 2;
  Avg_Duration_Chart    = 3;
  Error_Rate_Chart      = 4;
  Http_Code_Chart       = 5;
}