syntax = "proto3";

package erda.msp.apm.diagnotor;
option go_package = "github.com/erda-project/erda-proto-go/msp/apm/diagnotor/pb";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";
import "common/openapi.proto";
import "core/monitor/diagnotor/diagnotor.proto";

service DiagnotorService {
  option (erda.common.openapi_service) = {
    service: "msp",
    auth: {
      check_login: true,
      check_token: true,
    }
  };

  rpc ListServices (ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/api/msp/diagnosis/{terminusKey}/services"
    };
    option (erda.common.openapi) = {
      path: "/api/msp/diagnosis/{terminusKey}/services",
    };
  }

  rpc StartDiagnosis (StartDiagnosisRequest) returns (StartDiagnosisResponse) {
    option (google.api.http) = {
      post: "/api/msp/diagnosis/{terminusKey}"
    };
    option (erda.common.openapi) = {
      path: "/api/msp/diagnosis/{terminusKey}",
    };
  }

  rpc QueryDiagnosisStatus (QueryDiagnosisStatusRequest) returns (QueryDiagnosisStatusResponse) {
    option (google.api.http) = {
      get: "/api/msp/diagnosis/{terminusKey}/status"
    };
    option (erda.common.openapi) = {
      path: "/api/msp/diagnosis/{terminusKey}/status",
    };
  }

  rpc StopDiagnosis (StopDiagnosisRequest) returns (StopDiagnosisResponse) {
    option (google.api.http) = {
      delete: "/api/msp/diagnosis/{terminusKey}"
    };
  }

  rpc ListProcesses (ListProcessesRequest) returns (ListProcessesResponse) {
    option (google.api.http) = {
      get: "/api/msp/diagnosis/{terminusKey}/processes"
    };
    option (erda.common.openapi) = {
      path: "/api/msp/diagnosis/{terminusKey}/processes",
    };
  }
  
}

message ListServicesRequest {
  string terminusKey = 1 [(validate.rules).string.min_len = 1];
}

message ListServicesResponse {
  repeated ServiceInfo data = 1;
}

message ServiceInfo {
  string orgName = 1;
  string orgID = 2;
  string clusterName = 3;
  string projectName = 4;
  string projectID = 5;
  string applicationName = 6;
  string applicationID = 7;
  string service = 8;
  repeated InstanceInfo instances = 9;
}

message InstanceInfo {
  string podName = 1;
  string namespace = 2;
  string hostIP = 3;
  string ip = 4;
  string runtimeName = 5;
  string runtimeID = 6;
}

message StartDiagnosisRequest {
  string terminusKey = 1 [(validate.rules).string.min_len = 1];
  string instanceIP = 2 [(validate.rules).string.min_len = 1];
  string clusterName = 3;
}

message StartDiagnosisResponse {
  erda.core.monitor.diagnotor.DiagnosisInstance data = 1;
}

message QueryDiagnosisStatusRequest {
  string terminusKey = 1 [(validate.rules).string.min_len = 1];
  string instanceIP = 2 [(validate.rules).string.min_len = 1];
  string clusterName = 3;
}

message QueryDiagnosisStatusResponse {
  erda.core.monitor.diagnotor.DiagnosisInstance data = 1;
}

message StopDiagnosisRequest {
  string terminusKey = 1 [(validate.rules).string.min_len = 1];
  string instanceIP = 2 [(validate.rules).string.min_len = 1];
  string clusterName = 3;
}

message StopDiagnosisResponse {
  string data = 1;
}

message ListProcessesRequest {
  string terminusKey = 1 [(validate.rules).string.min_len = 1];
  string instanceIP = 2 [(validate.rules).string.min_len = 1];
  string clusterName = 3;
}

message ListProcessesResponse {
  erda.core.monitor.diagnotor.HostProcessStatus data = 1;
}