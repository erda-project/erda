syntax = "proto3";

package erda.msp.apm.trace;
option go_package = "github.com/erda-project/erda-proto-go/msp/apm/trace/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "common/openapi.proto";

service TraceService {
  rpc GetSpans (GetSpansRequest) returns (GetSpansResponse)  {
    option (google.api.http) = {
      get: "/api/msp/apm/traces/{traceID}/spans?scopeId={scopeID}",
    };
  }

  rpc GetSpanDashboards (GetSpanDashboardsRequest) returns (GetSpanDashboardsResponse)  {
    option (google.api.http)     = {
      get: "/api/msp/apm/trace/span-analysis?tenantId={tenantID}&serviceInstanceId={serviceInstanceID}",
    };
    option (erda.common.openapi) = {
      path: "/api/msp/apm/trace/span-analysis",
      service: "msp",
      auth: {
        check_login: true,
        check_token: true,
      }
    };
  }

  rpc GetTraces (GetTracesRequest) returns (GetTracesResponse)  {
    option (google.api.http) = {
      get: "/api/msp/apm/traces?tenantId={tenantID}&traceId={traceID}",
    };
  }

  rpc GetTraceQueryConditions (GetTraceQueryConditionsRequest) returns (GetTraceQueryConditionsResponse)  {
    option (google.api.http) = {
      get: "/api/msp/apm/trace/conditions?tenantId={tenantID}",
    };
  }

  rpc GetTraceDebugHistories (GetTraceDebugHistoriesRequest) returns (GetTraceDebugHistoriesResponse)  {
    option (google.api.http) = {
      get: "/api/msp/apm/trace/debug/histories?terminusKey={scopeID}",
    };
  }

  rpc GetTraceDebugByRequestID (GetTraceDebugRequest) returns (GetTraceDebugResponse)  {
    option (google.api.http) = {
      get: "/api/msp/apm/trace/debug/{requestID}?terminusKey={scopeID}",
    };
  }

  rpc CreateTraceDebug (CreateTraceDebugRequest) returns (CreateTraceDebugResponse)  {
    option (google.api.http) = {
      post: "/api/msp/apm/trace/debug",
    };
  }

  rpc StopTraceDebug (StopTraceDebugRequest) returns (StopTraceDebugResponse)  {
    option (google.api.http) = {
      put: "/api/msp/apm/trace/debug/{requestID}?terminusKey={scopeID}",
    };
  }

  rpc GetTraceDebugHistoryStatusByRequestID (GetTraceDebugStatusByRequestIDRequest) returns (GetTraceDebugStatusByRequestIDResponse)  {
    option (google.api.http) = {
      get: "/api/msp/apm/trace/debug/{requestID}/history/status?terminusKey={scopeID}",
    };
  }
}

message GetTraceQueryConditionsRequest{
  string tenantID = 1;
}

message GetTraceQueryConditionsResponse{
  TraceQueryConditions data = 1;
}

message TraceQueryConditions{
  repeated TraceQueryCondition      sort        = 1;
  repeated TraceQueryCondition      limit       = 2;
  repeated TraceQueryCondition      traceStatus = 3;
  repeated OtherTraceQueryCondition others      = 4;
}

enum SortCondition{
  SPAN_COUNT_DESC     = 0;
  SPAN_COUNT_ASC      = 1;
  TRACE_DURATION_DESC = 2;
  TRACE_DURATION_ASC  = 3;
  TRACE_TIME_DESC     = 4;
  TRACE_TIME_ASC      = 5;
}

enum LimitCondition{
  NUMBER_100  = 0;
  NUMBER_200  = 1;
  NUMBER_500  = 2;
  NUMBER_1000 = 3;
}

enum TraceStatusCondition{
  TRACE_SUCCESS = 0;
  TRACE_ERROR   = 1;
  TRACE_ALL     = 2;
}

enum OtherCondition{
  SERVICE_NAME = 0;
  TRACE_ID     = 1;
  DUBBO_METHOD = 2;
  HTTP_PATH    = 3;
}

message TraceQueryCondition{
  string key         = 1;
  string value       = 2;
  string displayName = 3;
}

message OtherTraceQueryCondition{
  string key         = 1;
  string value       = 2;
  string displayName = 3;
  string type        = 4;
  string paramKey    = 5;
}

message GetTraceDebugRequest {
  string requestID = 1 [(validator.field) = {string_not_empty: true}];
  string scopeID   = 2 [(validator.field) = {string_not_empty: true}];
}

message CreateTraceDebugRequest {
  string              requestID    = 1 [json_name = "requestId"];
  string              scopeID      = 2 [json_name = "terminusKey"];
  string              url          = 3;
  map<string, string> query        = 4;
  map<string, string> header       = 5;
  string              body         = 6;
  int32               status       = 7;
  string              statusName   = 8;
  int32               responseCode = 9;
  string              responseBody = 10;
  string              method       = 11;
  string              createTime   = 12;
  string              updateTime   = 13;
  string              projectID    = 14 [json_name = "projectId"];
  string              name         = 15;
}

message StopTraceDebugRequest {
  string requestID = 1 [(validator.field) = {string_not_empty: true}];
  string scopeID   = 2 [(validator.field) = {string_not_empty: true}];
}

message GetTraceDebugStatusByRequestIDRequest {
  string requestID = 1 [(validator.field) = {string_not_empty: true}];
  string scopeID   = 2 [(validator.field) = {string_not_empty: true}];
}

message GetTraceDebugHistoriesRequest {
  string scopeID = 1 [(validator.field) = {string_not_empty: true}];
  int64  limit   = 2;
}

message GetSpansRequest {
  // Each request will generate a globally unique TraceId,
  // and the TraceId is generally generated by the first server that receives the request.
  string traceID = 1 [(validator.field) = {string_not_empty: true}];
  // The scopeId is similar to the tenant id, which can quickly locate the cluster, project, and environment
  string scopeID = 2 [(validator.field) = {string_not_empty: true}];
  int64  limit   = 3;
}

message GetSpanDashboardsRequest {
  string tenantID          = 1 [(validator.field) = {string_not_empty: true}];
  string type              = 2 [(validator.field) = {string_not_empty: true}];
  string serviceInstanceID = 3 [(validator.field) = {string_not_empty: true}];
  int64  startTime         = 4;
  int64  endTime           = 5;
}

enum SpanType{
  HTTP_CLIENT  = 0;
  HTTP_SERVER  = 1;
  RPC_CLIENT   = 2;
  RPC_SERVER   = 3;
  CACHE_CLIENT = 4;
  DB_CLIENT    = 5;
  MQ_PRODUCER  = 6;
  MQ_CONSUMER  = 7;
  INVOKE_LOCAL = 8;
}

message GetTracesRequest {
  // The tenant id, which can quickly locate the cluster, project, and environment
  string tenantID    = 1 [(validator.field) = {string_not_empty: true}, json_name = "traceId"];
  string status      = 2;
  int64  startTime   = 3;
  int64  endTime     = 4;
  int64  limit       = 5;
  string traceID     = 6 [json_name = "traceId"];
  int64  durationMin = 7;
  int64  durationMax = 8;
  string sort        = 9;
  string serviceName = 10;
  string dubboMethod = 11;
  string httpPath    = 12;
}

message GetSpansResponse {
  repeated Span spans        = 1;
  int64         duration     = 2;
  int64         serviceCount = 3;
  int64         depth        = 4;
  int64         spanCount    = 5;
}

message SpanAnalysis {
  string          dashboardID = 1 [json_name = "dashboardId"];
  repeated string conditions  = 2;
}

message GetSpanDashboardsResponse {
  SpanAnalysis callAnalysis    = 1;
  SpanAnalysis serviceAnalysis = 2;
}

message GetTracesResponse {
  repeated Trace data = 1;
}

message GetTraceDebugHistoriesResponse {
  TraceDebug data = 1;
}

message GetTraceDebugResponse {
  TraceDebugHistory data = 1;
}

message CreateTraceDebugResponse {
  TraceDebugStatus data = 1;
}

message StopTraceDebugResponse {
}

message GetTraceDebugStatusByRequestIDResponse {
  TraceDebugStatus data = 1;
}

message TraceDebug{
  repeated TraceDebugHistory history = 1;
  int32                      limit   = 2;
  int64                      offset  = 3;
  int32                      total   = 4;
}

message TraceDebugStatus{
  string requestID  = 1 [json_name = "requestId"];
  int32  status     = 2;
  string statusName = 3;
  string scopeID    = 4 [json_name = "terminusKey"];
}

message TraceDebugHistory {
  string              requestID    = 1 [json_name = "requestId"];
  string              scopeID      = 2 [json_name = "terminusKey"];
  string              url          = 3;
  map<string, string> query        = 4;
  map<string, string> header       = 5;
  string              body         = 6;
  int32               status       = 7;
  string              statusName   = 8;
  int32               responseCode = 9;
  string              responseBody = 10;
  string              method       = 11;
  string              createTime   = 12;
  string              updateTime   = 13;
  string              name         = 14;
}

// Span is the basic component of a trace, a span represents an independent unit of work,
// for example, it can represent a function call, an http request, etc.
message Span {
  // Span id
  string              id            = 1;
  // The traceId to which the current span belongs
  string              traceId       = 2;
  // Operation name
  string              operationName = 3;
  // Start time of span
  int64               startTime     = 4;
  // End time of span
  int64               endTime       = 5;
  // Parent span id
  string              parentSpanId  = 6;
  int64               timestamp     = 7;
  // Tags store user-defined or agent defined tags in the form of K/V key-value pairs,
  // which are mainly used to query and filter link tracking results
  map<string, string> tags          = 8;
  // The span of total time
  int64               duration      = 9;
  // The span of time,non-include child spans
  int64               selfDuration  = 10;
}

// Trace represents a complete trace link, and trace consists of one or more spans
message Trace {
  // Trace id
  string          id        = 1;
  // The total time of trace
  double          duration  = 2;
  // Service name of the trace link
  repeated string services  = 3;
  // Start time of trace
  int64           startTime = 4;
}