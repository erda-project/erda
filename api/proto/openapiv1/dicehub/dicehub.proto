// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.dicehub;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/dicehub/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message DICEHUB_PIPELINE_TEMPLATE_VERSION_RENDER_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary
}
message ReleaseListResponse {
    google.protobuf.Value data = 1;
}
message CreatePublishItemResponse {
    google.protobuf.Value data = 1;
}
message DICEHUB_PUBLISH_ITEM_ERASE_CREATE_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message DICEHUB_RELEASES_DOWNLOAD_Request {
    string releaseId = 1; // generated from path variable: releaseId. You should change the proto type if necessary
}
message ReleaseResource {
    string type = 1;
    string name = 2;
    string uRL = 3 [json_name = "url"];
    map<string, google.protobuf.Value> meta = 4;
}
message ReleaseTag {
    google.protobuf.Timestamp createdAt = 1;
    google.protobuf.Timestamp updatedAt = 2;
    string creator = 3;
    int64 id = 4;
    string color = 5;
    string name = 6;
    string type = 7;
    int64 projectID = 8;
}
message DeletePublishItemResponse {
    google.protobuf.Value data = 1;
}
message PublishItemDistributionData {
    optional google.protobuf.Value default = 1;
    optional google.protobuf.Value versions = 2;
    string name = 3;
    string displayName = 4;
    string desc = 5;
    string logo = 6;
    google.protobuf.Timestamp createdAt = 7;
    repeated string previewImages = 8;
    string backgroundImage = 9;
}
message CreateUpdateDeleteReleaseRuleRequest {
    uint64 orgID = 1;
    uint64 projectID = 2;
    uint64 userID = 3;
    string ruleID = 4;
    optional google.protobuf.Value body = 5;
}
message DICEHUB_PIPELINE_TEMPLATE_QUERY_Request {
}
message DICEHUB_PUBLISH_ITEM_MONITOR_KEYS_LIST_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message ReleaseData {
    string releaseID = 1 [json_name = "releaseId"];
    string releaseName = 2;
    string diceyml = 3;
    string desc = 4;
    string addon = 5;
    string changelog = 6;
    bool isStable = 7;
    bool isFormal = 8;
    bool isProjectRelease = 9;
    string applicationReleaseList = 10;
    repeated google.protobuf.Value resources = 11;
    repeated string images = 12;
    repeated google.protobuf.Value serviceImages = 13;
    map<string, string> labels = 14;
    repeated google.protobuf.Value tags = 15;
    string version = 16;
    bool crossCluster = 17;
    int64 reference = 18;
    int64 orgID = 19 [json_name = "orgId"];
    int64 projectID = 20 [json_name = "projectId"];
    int64 applicationID = 21 [json_name = "applicationId"];
    string projectName = 22;
    string applicationName = 23;
    string userID = 24 [json_name = "userId"];
    string clusterName = 25;
    google.protobuf.Timestamp createdAt = 26;
    google.protobuf.Timestamp updatedAt = 27;
    bool isLatest = 28;
}
message GetPublishItemLatestVersionRequest {
    string aK = 1 [json_name = "ak"];
    string aI = 2 [json_name = "ai"];
    google.protobuf.Value currentAppInfo = 3;
    repeated google.protobuf.Value currentH5Info = 4;
    string mobileType = 5;
    bool forceBetaH5 = 6;
    bool check = 7;
}
message GetPublishItemLatestVersionData {
    optional google.protobuf.Value appVersion = 1 [json_name = "appVerison"];
    map<string,  google.protobuf.Value> h5Versions = 2;
}
message PUBLISH_ITEM_GET_H5_PACKAGENAME_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message DICEHUB_PUBLISH_ITEM_BLACKLIST_GET_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message PublishItemDistributionResponse {
    google.protobuf.Value data = 1;
}
message RELEASE_RULE_LIST_Request {
}
message CreatePublishItemVersionResponse {
    google.protobuf.Value data = 1;
    google.protobuf.Value publishItem = 2;
}
message QueryPublishItemVersionData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message QueryPublishItemVersionRequest {
    string public = 1;
    int64 pageNo = 2;
    int64 pageSize = 3;
    string mobileType = 4;
    string packageName = 5;
    int64 itemID = 6 [json_name = "-"];
    int64 orgID = 7 [json_name = "-"];
    string isDefault = 8 [json_name = "-"];
    string publishItemId = 9; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message CreateBranchRuleResponse {
    optional google.protobuf.Value data = 1;
}
message DICEHUB_PIPELINE_TEMPLATE_VERSION_QUERY_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary
}
message PublicItemAddEraseResponse {
    google.protobuf.Value data = 1;
}
message DICEHUB_PUBLISH_ITEM_ERASE_GET_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message UpdatePublishItemRequest {
    int64 ID = 1 [json_name = "-"];
    string displayName = 2;
    string logo = 3;
    bool public = 4;
    string desc = 5;
    bool noJailbreak = 6;
    double geofenceLon = 7;
    double geofenceLat = 8;
    double geofenceRadius = 9;
    int64 grayLevelPercent = 10;
    repeated string previewImages = 11;
    string backgroundImage = 12;
    string publishItemId = 13; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message QueryPublishItemData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message PUBLISH_ITEM_VERSION_GET_PUBLIC_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message UpdatePublishItemVersionStatesRequset {
    int64 publishItemID = 1;
    int64 publishItemVersionID = 2;
    string packageName = 3;
    string versionStates = 4;
    int64 grayLevelPercent = 5;
    bool public = 6 [json_name = "-"];
    string action = 7; // generated from path variable: action. You should change the proto type if necessary
}
message PUBLISH_ITEM_DISTRIBUTION_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message QueryPublishItemRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    int64 publisherId = 3;
    string name = 4;
    string type = 5;
    string public = 6;
    string q = 7;
    string ids = 8;
    int64 orgID = 9 [json_name = "-"];
}
message H5VersionInfo {
    google.protobuf.Value versionInfo = 1;
    map<string, google.protobuf.Value> targetMobiles = 2;
}
message DICEHUB_PIPELINE_TEMPLATE_VERSION_GET_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary
}
message DICEHUB_PIPELINE_TEMPLATE_VERSION_RENDER_SPEC_Request {
}
message PublishItem {
    int64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string logo = 4;
    int64 publisherID = 5 [json_name = "publisherId"];
    string aK = 6 [json_name = "ak"];
    string aI = 7 [json_name = "ai"];
    string type = 8;
    bool public = 9;
    int64 orgID = 10 [json_name = "orgId"];
    string desc = 11;
    string creator = 12;
    string downloadUrl = 13;
    google.protobuf.Timestamp createdAt = 14;
    google.protobuf.Timestamp updatedAt = 15;
    bool noJailbreak = 16;
    double geofenceLon = 17;
    double geofenceLat = 18;
    double geofenceRadius = 19;
    int64 grayLevelPercent = 20;
    string latestVersion = 21;
    uint64 refCount = 22;
    repeated string previewImages = 23;
    string backgroundImage = 24;
}
message PublishItemUserListResponse {
    uint64 ID = 1 [json_name = "id"];
    string userID = 2 [json_name = "userId"];
    string userName = 3;
    string eraseStatus = 4;
    string deviceNo = 5;
    uint64 publishItemID = 6 [json_name = "publishItemId"];
    google.protobuf.Timestamp createdAt = 7;
    string publishItemName = 8;
}
message PublicItemAddEraseData {
    google.protobuf.Value data = 1;
    string deviceNo = 2;
}
message DICEHUB_PIPELINE_TEMPLATE_APPLY_Request {
}
message PUBLISH_ITEM_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message RELEASE_RULE_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message PublishItemDeleteBlacklistResponse {
    google.protobuf.Value data = 1;
}
message DICEHUB_PUBLISH_ITEM_BLACKLIST_DELETE_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
    string blacklistId = 2; // generated from path variable: blacklistId. You should change the proto type if necessary
}
message ReleaseListRequest {
    string query = 1 [json_name = "-"];
    string releaseID = 2 [json_name = "-"];
    string releaseName = 3 [json_name = "-"];
    string cluster = 4 [json_name = "-"];
    string branch = 5 [json_name = "-"];
    bool latest = 6 [json_name = "-"];
    optional bool isStable = 7 [json_name = "-"];
    optional bool isFormal = 8 [json_name = "-"];
    optional bool isProjectRelease = 9 [json_name = "-"];
    repeated string userID = 10 [json_name = "-"];
    string version = 11;
    string commitID = 12 [json_name = "-"];
    string tags = 13 [json_name = "-"];
    bool isVersion = 14 [json_name = "-"];
    optional bool crossCluster = 15 [json_name = "-"];
    optional string crossClusterOrSpecifyCluster = 16 [json_name = "-"];
    repeated string applicationID = 17 [json_name = "-"];
    int64 projectID = 18 [json_name = "-"];
    int64 startTime = 19 [json_name = "-"];
    int64 endTime = 20 [json_name = "-"];
    int64 pageSize = 21 [json_name = "-"];
    int64 pageNum = 22 [json_name = "-"];
    string orderBy = 23;
    string order = 24 [json_name = "descOrder"];
}
message CreatePublishItemRequest {
    string name = 1;
    string displayName = 2;
    int64 publisherID = 3 [json_name = "publisherId"];
    string type = 4;
    string logo = 5;
    bool public = 6;
    string desc = 7;
    int64 orgID = 8 [json_name = "-"];
    string creator = 9 [json_name = "-"];
    bool noJailbreak = 10;
    double geofenceLon = 11;
    double geofenceLat = 12;
    double geofenceRadius = 13;
    int64 grayLevelPercent = 14;
    repeated string previewImages = 15;
    string backgroundImage = 16;
}
message PUBLISH_ITEM_CREATE_OFFLINE_VERSION_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message QueryPublishItemVersionResponse {
    google.protobuf.Value data = 1;
}
message PublishItemUserlistRequest {
    uint64 pageNo = 1;
    uint64 pageSize = 2;
    string userID = 3 [json_name = "userId"];
    string userName = 4;
    string deviceNo = 5;
    uint64 publishItemID = 6 [json_name = "publishItemId"];
    string operator = 7;
}
message PUBLISH_ITEM_DELETE_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message UpdatePublishItemResponse {
    google.protobuf.Value data = 1;
}
message VersionInfo {
    string packageName = 1;
    string version = 2;
    string buildID = 3 [json_name = "buildId"];
}
message CreatePublishItemVersionRequest {
    string version = 1;
    string buildID = 2;
    string packageName = 3 [json_name = "package_name"];
    bool public = 4;
    bool isDefault = 5 [json_name = "is_default"];
    string logo = 6;
    string desc = 7;
    string readme = 8;
    string spec = 9;
    string swagger = 10;
    string releaseID = 11 [json_name = "releaseId"];
    string mobileType = 12;
    google.protobuf.Value h5VersionInfo = 13;
    int64 publishItemID = 14 [json_name = "-"];
    int64 orgID = 15 [json_name = "-"];
    uint64 appID = 16;
    string creator = 17 [json_name = "-"];
}
message ReleaseGetDiceYmlRequest {
    string releaseID = 1 [json_name = "-"];
}
message RELEASE_RULE_delete_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message PublishItemAddBlacklistResponse {
    google.protobuf.Value data = 1;
}
message ReleaseListResponseData {
    int64 total = 1;
    repeated google.protobuf.Value releases = 2 [json_name = "list"];
}
message QueryPublishItemResponse {
    google.protobuf.Value data = 1;
}
message PublishItemVersion {
    uint64 ID = 1 [json_name = "id"];
    string version = 2;
    string buildID = 3 [json_name = "buildId"];
    string packageName = 4;
    bool public = 5;
    bool isDefault = 6;
    string desc = 7;
    string logo = 8;
    google.protobuf.Value resources = 9;
    google.protobuf.Value meta = 10;
    google.protobuf.Value swagger = 11;
    int64 orgID = 12 [json_name = "orgId"];
    google.protobuf.Timestamp createdAt = 13;
    google.protobuf.Timestamp updatedAt = 14;
    string spec = 15;
    string readme = 16;
    string mobileType = 17;
    map<string, google.protobuf.Value> targetMobiles = 18;
    string versionStates = 19;
    int64 grayLevelPercent = 20;
}
message GetPublishItemLatestVersionResponse {
    google.protobuf.Value data = 1;
}
message PUBLISH_ITEM_VERSION_SET_STATUS_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
    string versionID = 2; // generated from path variable: versionID. You should change the proto type if necessary
    string action = 3; // generated from path variable: action. You should change the proto type if necessary
}
// generate service from openapi spec: dicehub
service dicehub {
    option (erda.common.openapi_service) = {
        service: "dicehub",
    };

    rpc DICEHUB_PIPELINE_TEMPLATE_APPLY (DICEHUB_PIPELINE_TEMPLATE_APPLY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/pipeline-templates/actions/apply",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-templates/actions/apply",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 新增或修改模板",
        };
    };
    rpc DICEHUB_PIPELINE_TEMPLATE_QUERY (DICEHUB_PIPELINE_TEMPLATE_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/pipeline-templates",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询模板列表",
        };
    };
    rpc DICEHUB_PIPELINE_TEMPLATE_VERSION_GET (DICEHUB_PIPELINE_TEMPLATE_VERSION_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/pipeline-templates/{name}/actions/query-version",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-templates/{name}/actions/query-version",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取模板版本详情",
        };
    };
    rpc DICEHUB_PIPELINE_TEMPLATE_VERSION_QUERY (DICEHUB_PIPELINE_TEMPLATE_VERSION_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/pipeline-templates/{name}/actions/query-versions",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-templates/{name}/actions/query-versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询模板的版本列表",
        };
    };
    rpc DICEHUB_PIPELINE_TEMPLATE_VERSION_RENDER (DICEHUB_PIPELINE_TEMPLATE_VERSION_RENDER_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/pipeline-templates/{name}/actions/render",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-templates/{name}/actions/render",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 渲染模板对应版本的pipeline.yml",
        };
    };
    rpc DICEHUB_PIPELINE_TEMPLATE_VERSION_RENDER_SPEC (DICEHUB_PIPELINE_TEMPLATE_VERSION_RENDER_SPEC_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/pipeline-templates/local/actions/render-spec",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-templates/local/actions/render-spec",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据spec直接渲染模板",
        };
    };
    rpc DICEHUB_PUBLISH_ITEM_BLACKLIST_CREATE (PublishItemUserlistRequest) returns (PublishItemAddBlacklistResponse) {
        option (google.api.http) = {
            post: "/api/publish-items/{publishItemID}/blacklist",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemID}/blacklist",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 添加发布内容黑名单",
        };
    };
    rpc DICEHUB_PUBLISH_ITEM_BLACKLIST_DELETE (DICEHUB_PUBLISH_ITEM_BLACKLIST_DELETE_Request) returns (PublishItemDeleteBlacklistResponse) {
        option (google.api.http) = {
            delete: "/api/publish-items/{publishItemId}/blacklist/{blacklistId}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/blacklist/{blacklistId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除发布内容黑名单",
        };
    };
    rpc DICEHUB_PUBLISH_ITEM_BLACKLIST_GET (DICEHUB_PUBLISH_ITEM_BLACKLIST_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/blacklist",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/blacklist",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 发布内容黑名单列表",
        };
    };
    rpc DICEHUB_PUBLISH_ITEM_ERASE_CREATE (DICEHUB_PUBLISH_ITEM_ERASE_CREATE_Request) returns (PublicItemAddEraseResponse) {
        option (google.api.http) = {
            post: "/api/publish-items/{publishItemId}/erase",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/erase",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 添加发布内容数据擦除",
        };
    };
    rpc DICEHUB_PUBLISH_ITEM_ERASE_GET (DICEHUB_PUBLISH_ITEM_ERASE_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/erase",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/erase",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 发布内容数据擦除列表",
        };
    };
    rpc DICEHUB_PUBLISH_ITEM_MONITOR_KEYS_LIST (DICEHUB_PUBLISH_ITEM_MONITOR_KEYS_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/list-monitor-keys",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/list-monitor-keys",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取发布内容的监控key列表",
        };
    };
    rpc DICEHUB_RELEASES_DOWNLOAD (DICEHUB_RELEASES_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/releases/{releaseId}/actions/download",
        };
        option (erda.common.openapi) = {
            path: "/api/releases/{releaseId}/actions/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "下载Release Yaml文件",
        };
    };
    rpc DICEHUB_RELEASES_YAML_GET (ReleaseGetDiceYmlRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/releases/{releaseID}/actions/get-dice",
        };
        option (erda.common.openapi) = {
            path: "/api/releases/{releaseID}/actions/get-dice",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取指定版本dice.yml内容parameters:  - in: path    name: releaseId    type: string    required: trueproduces:  - application/x-yamlresponses:  '200':    description: Dice.yaml content",
        };
    };
    rpc IMAGEHUB_IMAGE_LIST (ReleaseListRequest) returns (ReleaseListResponse) {
        option (google.api.http) = {
            get: "/api/images",
        };
        option (erda.common.openapi) = {
            path: "/api/images",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 版本镜像列表",
        };
    };
    rpc PUBLISH_ITEM_CREATE (CreatePublishItemRequest) returns (CreatePublishItemResponse) {
        option (google.api.http) = {
            post: "/api/publish-items",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建发布",
        };
    };
    rpc PUBLISH_ITEM_CREATE_OFFLINE_VERSION (PUBLISH_ITEM_CREATE_OFFLINE_VERSION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/publish-items/{publishItemId}/versions/create-offline-version",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/versions/create-offline-version",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 移动应用上传离线包",
        };
    };
    rpc PUBLISH_ITEM_DELETE (PUBLISH_ITEM_DELETE_Request) returns (DeletePublishItemResponse) {
        option (google.api.http) = {
            delete: "/api/publish-items/{publishItemId}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除发布",
        };
    };
    rpc PUBLISH_ITEM_DISTRIBUTION (PUBLISH_ITEM_DISTRIBUTION_Request) returns (PublishItemDistributionResponse) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/distribution",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/distribution",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 发布下载信息",
        };
    };
    rpc PUBLISH_ITEM_GET (PUBLISH_ITEM_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{id}",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询发布内容",
        };
    };
    rpc PUBLISH_ITEM_GET_H5_PACKAGENAME (PUBLISH_ITEM_GET_H5_PACKAGENAME_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/versions/actions/get-h5-packagename",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/versions/actions/get-h5-packagename",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取移动应用H5包名",
        };
    };
    rpc PUBLISH_ITEM_QUERY (QueryPublishItemRequest) returns (QueryPublishItemResponse) {
        option (google.api.http) = {
            get: "/api/publish-items",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询发布",
        };
    };
    rpc PUBLISH_ITEM_UPDATE (UpdatePublishItemRequest) returns (UpdatePublishItemResponse) {
        option (google.api.http) = {
            put: "/api/publish-items/{publishItemId}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新发布",
        };
    };
    rpc PUBLISH_ITEM_VERSION_CREATE (CreatePublishItemVersionRequest) returns (CreatePublishItemVersionResponse) {
        option (google.api.http) = {
            post: "/api/publish-items/{publishItemID}/versions",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemID}/versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建发布版本",
        };
    };
    rpc PUBLISH_ITEM_VERSION_GET_LATEST (GetPublishItemLatestVersionRequest) returns (GetPublishItemLatestVersionResponse) {
        option (google.api.http) = {
            post: "/api/publish-items/actions/latest-versions",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/actions/latest-versions",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取移动应用最新的版本",
        };
    };
    rpc PUBLISH_ITEM_VERSION_GET_PUBLIC (PUBLISH_ITEM_VERSION_GET_PUBLIC_Request) returns (QueryPublishItemVersionResponse) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/versions/actions/public-version",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/versions/actions/public-version",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取线上已发布版本",
        };
    };
    rpc PUBLISH_ITEM_VERSION_QUERY (QueryPublishItemVersionRequest) returns (QueryPublishItemVersionResponse) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/versions",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/versions",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询发布版本",
        };
    };
    rpc PUBLISH_ITEM_VERSION_SET_STATUS (PUBLISH_ITEM_VERSION_SET_STATUS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/publish-items/{publishItemId}/versions/{versionID}/actions/{action}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/versions/{versionID}/actions/{action}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 设置版本状态",
        };
    };
    rpc PUBLISH_ITEM_VERSION_UPDATE (UpdatePublishItemVersionStatesRequset) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/publish-items/versions/actions/{action}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/versions/actions/{action}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 上架/下架版本",
        };
    };
    rpc RELEASE_RULE_CREATE (CreateUpdateDeleteReleaseRuleRequest) returns (CreateBranchRuleResponse) {
        option (google.api.http) = {
            post: "/api/release-rules",
        };
        option (erda.common.openapi) = {
            path: "/api/release-rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "创建制品规则",
        };
    };
    rpc RELEASE_RULE_LIST (RELEASE_RULE_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/release-rules",
        };
        option (erda.common.openapi) = {
            path: "/api/release-rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "列举制品规则",
        };
    };
    rpc RELEASE_RULE_UPDATE (RELEASE_RULE_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/release-rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/release-rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "修改制品规则",
        };
    };
    rpc RELEASE_RULE_delete (RELEASE_RULE_delete_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/release-rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/release-rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "删除制品规则",
        };
    };
}
