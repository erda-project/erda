// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.msp;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/msp/apm/log/service/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message MSP_ADDON_LOGS_AGGREGATION_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_DOWNLOAD_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_FIELDS_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_SEARCH_GET_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_STATISTIC_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
// generate service from openapi spec: msp_apm_log_service
service msp_apm_log_service {
    option (erda.common.openapi_service) = {
        service: "msp",
    };

    rpc MSP_ADDON_LOGS_AGGREGATION (MSP_ADDON_LOGS_AGGREGATION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/log-analytics/{addon}/aggregation",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/aggregation",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志聚合接口",
        };
    };
    rpc MSP_ADDON_LOGS_DOWNLOAD (MSP_ADDON_LOGS_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/log-analytics/{addon}/download",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志下载接口",
        };
    };
    rpc MSP_ADDON_LOGS_FIELDS (MSP_ADDON_LOGS_FIELDS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/log-analytics/{addon}/fields",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/fields",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志字段列表",
        };
    };
    rpc MSP_ADDON_LOGS_SEARCH_GET (MSP_ADDON_LOGS_SEARCH_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/log-analytics/{addon}/search",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志搜索接口",
        };
    };
    rpc MSP_ADDON_LOGS_SEARCH_SEQUENTIAL (MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/log-analytics/{addon}/sequentialSearch",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/sequentialSearch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志连续搜索接口",
        };
    };
    rpc MSP_ADDON_LOGS_STATISTIC (MSP_ADDON_LOGS_STATISTIC_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/log-analytics/{addon}/statistic",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/statistic",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志统计接口",
        };
    };
}
