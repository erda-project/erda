// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.orchestrator;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/orchestrator/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message AddonListRequest {
    string type = 1;
    string value = 2;
}
message ORCHESTRATOR_ADDON_MENU_Request {
}
message AppWorkspaceReleasesGetResponse {
    map<string,  google.protobuf.Value> data = 1;
}
message K8sInstanceMetaInfo {
    string podUid = 1;
    string podName = 2;
    string podNamespace = 3;
    string containerName = 4;
}
message AddonTenantCreateRequest {
    string addonInstanceRoutingID = 1 [json_name = "addonInstanceRoutingId"];
    string name = 2;
    map<string, string> configs = 3;
}
message RuntimeInspectRequest {
    string IDOrName = 1 [json_name = "idOrName"];
    string workspace = 2;
    uint64 applicationID = 3;
}
message RuntimeServiceResourceDTO {
    double cPU = 1 [json_name = "cpu"];
    int64 mem = 2;
    int64 disk = 3;
}
message MiddlewareFetchResponse {
    google.protobuf.Value data = 1;
}
message ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request {
    string deploymentOrderID = 1; // generated from path variable: deploymentOrderID. You should change the proto type if necessary
}
message MiddlewareListResponse {
    google.protobuf.Value data = 1;
}
message ORCHESTRATOR_MIDDLEWARE_FETCH_Request {
    string addonId = 1; // generated from path variable: addonId. You should change the proto type if necessary
}
message RuntimeReleaseCreatePipelineResponse {
    uint64 pipelineID = 1 [json_name = "pipelineId"];
}
message ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request {
}
message RuntimeInspectDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string serviceGroupName = 3;
    string serviceGroupNamespace = 4;
    string source = 5;
    string status = 6;
    string deployStatus = 7;
    string deleteStatus = 8;
    string releaseID = 9 [json_name = "releaseId"];
    uint64 clusterID = 10 [json_name = "clusterId"];
    string clusterName = 11;
    string clusterType = 12;
    google.protobuf.Value resources = 13;
    map<string, google.protobuf.Value> extra = 14;
    uint64 projectID = 15;
    map<string,  google.protobuf.Value> services = 16;
    map<string, google.protobuf.Value> moduleErrMsg = 17 [json_name = "lastMessage"];
    google.protobuf.Timestamp timeCreated = 18;
    google.protobuf.Timestamp createdAt = 19;
    google.protobuf.Timestamp updatedAt = 20;
    google.protobuf.Timestamp deployAt = 21;
    repeated google.protobuf.Value errors = 22;
    string creator = 23;
    uint64 applicationID = 24 [json_name = "applicationId"];
    string applicationName = 25;
    string deploymentOrderId = 26;
    string deploymentOrderName = 27;
    string releaseVersion = 28;
    string rawStatus = 29;
    string rawDeploymentStatus = 30;
}
message MiddlewareListResponseData {
    int64 total = 1;
    google.protobuf.Value overview = 2;
    repeated google.protobuf.Value list = 3;
}
message Pod {
    string uid = 1;
    string iPAddress = 2 [json_name = "ipAddress"];
    string host = 3;
    string phase = 4;
    string message = 5;
    string startedAt = 6;
    string service = 7;
    string clusterName = 8;
    string podName = 9;
    string k8sNamespace = 10;
}
message ORCHESTRATOR_ADDON_EXTENSION_Request {
}
message DeploymentCancelResponse {
}
message ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request {
}
message MicroServiceProjectResponseData {
    string projectID = 1 [json_name = "projectId"];
    string projectName = 2;
    string projectDesc = 3;
    string logoURL = 4 [json_name = "logoUrl"];
    repeated string envs = 5;
    repeated string tenantGroups = 6;
    map<string, string> workspaces = 7;
    google.protobuf.Timestamp createTime = 8;
}
message MiddlewareFetchResponseData {
    string name = 1;
    bool isOperator = 2;
    string instanceID = 3 [json_name = "instanceId"];
    string addonName = 4;
    string logoURL = 5 [json_name = "logoUrl"];
    string plan = 6;
    string version = 7;
    string projectID = 8 [json_name = "projectId"];
    string projectName = 9;
    string category = 10;
    string workspace = 11;
    string status = 12;
    int64 attachCount = 13;
    map<string, google.protobuf.Value> config = 14;
    repeated google.protobuf.Value referenceInfos = 15;
    string cluster = 16;
    google.protobuf.Timestamp createdAt = 17;
    google.protobuf.Timestamp updatedAt = 18;
}
message ORCHESTRATOR_ADDON_REFERENCES_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary
}
message ORCHESTRATOR_MICRO_SERVICE_MENUS_Request {
    string projectID = 1; // generated from path variable: projectID. You should change the proto type if necessary
}
message MiddlewareListItem {
    string instanceID = 1 [json_name = "instanceId"];
    string addonName = 2;
    string projectID = 3 [json_name = "projectId"];
    string projectName = 4;
    string env = 5;
    string clusterName = 6;
    string name = 7;
    double cPU = 8 [json_name = "cpu"];
    uint64 mem = 9;
    int64 nodes = 10;
    int64 attachCount = 11;
    bool isOperator = 12;
}
message ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request {
}
message ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request {
}
message ScheduleLabelSetResponse {
}
message ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request {
}
message ErrorResponse {
    string code = 1;
    string msg = 2;
    google.protobuf.Value ctx = 3;
}
message AddonFetchResponseData {
    string ID = 1 [json_name = "instanceId"];
    string name = 2;
    string tag = 3;
    string addonName = 4;
    string addonDisplayName = 5 [json_name = "displayName"];
    string desc = 6;
    string logoURL = 7 [json_name = "logoUrl"];
    string plan = 8;
    string version = 9;
    string category = 10;
    map<string, google.protobuf.Value> config = 11;
    string shareScope = 12;
    string cluster = 13;
    uint64 orgID = 14 [json_name = "orgId"];
    uint64 projectID = 15 [json_name = "projectId"];
    string projectName = 16;
    string workspace = 17;
    string status = 18;
    string realInstanceID = 19 [json_name = "realInstanceId"];
    int64 reference = 20;
    int64 attachCount = 21;
    bool platform = 22;
    int64 platformServiceType = 23;
    bool canDel = 24;
    string terminusKey = 25;
    string consoleUrl = 26;
    google.protobuf.Timestamp createdAt = 27;
    google.protobuf.Timestamp updatedAt = 28;
    int64 recordID = 29 [json_name = "recordId"];
    string customAddonType = 30;
    string tenantOwner = 31;
    string isInsideAddon = 32;
}
message DeploymentApproveResponse {
}
message ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request {
}
message ORCHESTRATOR_ADDON_FETCH_Request {
    string addonId = 1; // generated from path variable: addonId. You should change the proto type if necessary
}
message DeploymentApproveRequest {
    uint64 ID = 1 [json_name = "id"];
    bool reject = 2;
    string reason = 3;
}
message ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request {
    string deploymentOrderID = 1; // generated from path variable: deploymentOrderID. You should change the proto type if necessary
}
message DomainUpdateRequest {
    uint64 runtimeID = 1 [json_name = "runtimeId"];
    map<string, google.protobuf.Value> body = 2;
}
message Container {
    google.protobuf.Value k8sInstanceMetaInfo = 1;
    string ID = 2 [json_name = "id"];
    string containerID = 3 [json_name = "containerId"];
    string iPAddress = 4 [json_name = "ipAddress"];
    string host = 5;
    string image = 6;
    double cPU = 7 [json_name = "cpu"];
    int64 memory = 8;
    int64 disk = 9;
    string status = 10;
    int64 exitCode = 11;
    string message = 12;
    string stage = 13;
    string startedAt = 14;
    string updatedAt = 15;
    string service = 16;
    string clusterName = 17;
}
message ScheduleLabelListData {
    map<string, bool> labels = 1;
}
message ScheduleLabelListResponse {
    google.protobuf.Value data = 1;
}
message ORCHESTRATOR_PRE_DICE_OVERLAY_UPDATE_Request {
}
message AddonAvailableResponse {
    repeated google.protobuf.Value data = 1;
}
message AddonReferencesResponse {
    repeated google.protobuf.Value data = 1;
}
message DeploymentCancelRequest {
    string runtimeID = 1 [json_name = "runtimeId"];
    string operator = 2;
    string deploymentId = 3; // generated from path variable: deploymentId. You should change the proto type if necessary
}
message DeploymentListResponse {
    optional google.protobuf.Value data = 1;
}
message ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request {
    string addonId = 1; // generated from path variable: addonId. You should change the proto type if necessary
}
message RuntimeDeleteResponse {
    google.protobuf.Value data = 1;
}
message ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request {
    string cluster = 1; // generated from path variable: cluster. You should change the proto type if necessary
}
message RuntimeInspectResponse {
    google.protobuf.Value data = 1;
}
message ORCHESTRATOR_ADDON_CUSTOM_Request {
}
message ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request {
    string deploymentId = 1; // generated from path variable: deploymentId. You should change the proto type if necessary
}
message CustomAddonUpdateRequest {
    map<string, google.protobuf.Value> configs = 1;
    map<string, google.protobuf.Value> options = 2 [json_name = "extra"];
    string addonId = 3; // generated from path variable: addonId. You should change the proto type if necessary
}
message ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request {
    string runtimeId = 1; // generated from path variable: runtimeId. You should change the proto type if necessary
}
message ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request {
    string runtimeId = 1; // generated from path variable: runtimeId. You should change the proto type if necessary
}
message Extension {
    uint64 ID = 1 [json_name = "id"];
    string type = 2;
    string name = 3;
    string desc = 4;
    string displayName = 5;
    string category = 6;
    string logoUrl = 7;
    bool public = 8;
    google.protobuf.Timestamp createdAt = 9;
    google.protobuf.Timestamp updatedAt = 10;
}
message DeploymentDetailListResponse {
    optional google.protobuf.Value data = 1;
}
message DeploymentCreateResponseDTO {
    uint64 deploymentID = 1 [json_name = "deploymentId"];
    uint64 applicationID = 2 [json_name = "applicationId"];
    uint64 runtimeID = 3 [json_name = "runtimeId"];
}
message RuntimeCreateResponse {
    google.protobuf.Value data = 1;
}
message AppWorkspaceReleasesGetRequest {
    uint64 appID = 1;
    string workspace = 2;
}
message MicroServiceProjectResponse {
    repeated google.protobuf.Value data = 1;
}
message ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request {
}
message RuntimeDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string gitBranch = 3;
    string workspace = 4;
    string clusterName = 5;
    uint64 clusterId = 6;
    string status = 7;
    uint64 applicationID = 8 [json_name = "applicationId"];
    string applicationName = 9;
    uint64 projectID = 10 [json_name = "projectId"];
    string projectName = 11;
    uint64 orgID = 12 [json_name = "orgId"];
    repeated google.protobuf.Value errors = 13;
}
message RuntimeReleaseCreateRequest {
    string releaseID = 1 [json_name = "releaseId"];
    string workspace = 2;
    uint64 projectID = 3 [json_name = "projectId"];
    uint64 applicationID = 4 [json_name = "applicationId"];
}
message AddonDirectCreateRequest {
    string clusterName = 1;
    uint64 orgID = 2 [json_name = "orgId"];
    uint64 projectID = 3 [json_name = "projectId"];
    uint64 applicationID = 4 [json_name = "applicationId"];
    string workspace = 5;
    string operator = 6 [json_name = "operatorId"];
    string shareScope = 7;
    map<string,  google.protobuf.Value> addons = 8;
}
message CustomAddonCreateRequest {
    string name = 1;
    string addonName = 2;
    uint64 projectID = 3 [json_name = "projectId"];
    string workspace = 4;
    string tag = 5;
    string operatorID = 6;
    string customAddonType = 7;
    map<string, google.protobuf.Value> configs = 8;
    map<string, google.protobuf.Value> options = 9 [json_name = "extra"];
}
message PodListRequest {
    int64 runtimeID = 1;
    string serviceName = 2;
}
message AddonExtensionResponse {
    repeated google.protobuf.Value data = 1;
}
message DeploymentListRequest {
    google.protobuf.Value pageInfo = 1;
    uint64 runtimeID = 2;
    uint64 orgID = 3;
    string statusIn = 4;
}
message RuntimeKillPodRequest {
    uint64 runtimeID = 1;
    string podName = 2;
}
message ORCHESTRATOR_RUNTIME_CREATE_Request {
}
message DomainListRequest {
    uint64 runtimeID = 1 [json_name = "runtimeId"];
}
message ORCHESTRATOR_ADDONS_SCALE_Request {
}
message AddonFetchResponse {
    google.protobuf.Value data = 1;
}
message ORCHESTRATOR_INSTANCES_USAGE_Request {
}
message MicroServiceMenuResponseData {
    string addonName = 1;
    string addonDisplayName = 2;
    string instanceId = 3;
    string terminusKey = 4;
    string consoleUrl = 5;
    string projectName = 6;
}
message Overview {
    double cPU = 1 [json_name = "cpu"];
    double mem = 2;
    int64 nodes = 3;
}
message ORCHESTRATOR_ORG_JOB_LOG_Request {
}
message ADDON_METRICS_HISTOGRAM_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary
}
message ORCHESTRATOR_ADDON_IMPORT_Request {
}
message ORCHESTRATOR_DEPLOYMENT_ADDONS_Request {
    string deploymentID = 1; // generated from path variable: deploymentID. You should change the proto type if necessary
}
message ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request {
    string deploymentOrderID = 1; // generated from path variable: deploymentOrderID. You should change the proto type if necessary
}
message DomainListResponse {
    map<string, google.protobuf.Value> data = 1;
}
message ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request {
}
message DomainUpdateResponse {
    map<string, google.protobuf.Value> data = 1;
}
message ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request {
    string runtimeId = 1; // generated from path variable: runtimeId. You should change the proto type if necessary
}
message ContainerListResponse {
    repeated google.protobuf.Value data = 1;
}
message ORCHESTRATOR_DEPLOYMENT_SERVICES_Request {
    string deploymentID = 1; // generated from path variable: deploymentID. You should change the proto type if necessary
}
message ContainerListRequest {
    string type = 1;
    int64 runtimeID = 2;
    string serviceName = 3;
    string status = 4;
}
message AddonReferenceInfo {
    uint64 orgID = 1 [json_name = "orgId"];
    uint64 projectID = 2 [json_name = "projectId"];
    string projectName = 3;
    uint64 appID = 4 [json_name = "applicationId"];
    string appName = 5 [json_name = "applicationName"];
    uint64 runtimeID = 6 [json_name = "runtimeId"];
    string runtimeName = 7;
}
message MiddlewareResourceFetchResponse {
    repeated google.protobuf.Value data = 1;
}
message ORCHESTRATOR_RUNTIME_ROLLBACK_Request {
    string runtimeId = 1; // generated from path variable: runtimeId. You should change the proto type if necessary
}
message AddonAvailableRequest {
    string projectID = 1;
    string workspace = 2;
}
message ORCHESTRATOR_ADDON_LOGS_Request {
    string instanceId = 1; // generated from path variable: instanceId. You should change the proto type if necessary
}
message PageInfo {
    int64 pageNO = 1;
    int64 pageSize = 2;
}
message ORCHESTRATOR_RUNTIME_SEARCH_Request {
}
message ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request {
    string deploymentID = 1; // generated from path variable: deploymentID. You should change the proto type if necessary
}
message ORCHESTRATOR_RUNTIME_REDEPLOY_Request {
    string runtimeId = 1; // generated from path variable: runtimeId. You should change the proto type if necessary
}
message ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request {
}
message MiddlewareListRequest {
    uint64 projectID = 1;
    string addonName = 2;
    string workspace = 3;
    string instanceID = 4;
    string instanceIP = 5;
    int64 pageNo = 6;
    int64 pageSize = 7;
    optional google.protobuf.Timestamp endTime = 8;
}
message ORCHESTRATOR_MIGRATION_LOG_Request {
    string migrationId = 1; // generated from path variable: migrationId. You should change the proto type if necessary
}
message ScheduleLabelSetRequest {
    map<string, string> tags = 1 [json_name = "tag"];
    repeated string hosts = 2;
    string clusterName = 3 [json_name = "clustername"];
    string clusterType = 4 [json_name = "clustertype"];
    string soldierURL = 5;
}
message ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request {
}
message MiddlewareResourceFetchResponseData {
    string instanceID = 1 [json_name = "instanceId"];
    string containerID = 2 [json_name = "containerId"];
    string containerIP = 3;
    string clusterName = 4;
    string hostIP = 5;
    string image = 6;
    double cPURequest = 7 [json_name = "cpuRequest"];
    double cPULimit = 8 [json_name = "cpuLimit"];
    uint64 memRequest = 9;
    uint64 memLimit = 10;
    string status = 11;
    google.protobuf.Timestamp startedAt = 12;
}
message ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request {
}
message ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request {
}
message ORCHESTRATOR_ADDON_EXPORT_Request {
}
message ORCHESTRATOR_ADDON_DELETE_Request {
    string addonId = 1; // generated from path variable: addonId. You should change the proto type if necessary
}
message ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request {
}
message ORCHESTRATOR_RUNTIME_DELETE_Request {
    string runtimeId = 1; // generated from path variable: runtimeId. You should change the proto type if necessary
}
message PodListResponse {
    repeated google.protobuf.Value data = 1;
}
message AddonListResponse {
    repeated google.protobuf.Value data = 1;
}
message ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request {
}
message ScheduleLabelListRequest {
}
message ORCHESTRATOR_TERMINAL_Request {
}
// generate service from openapi spec: orchestrator
service orchestrator {
    option (erda.common.openapi_service) = {
        service: "orchestrator",
    };

    rpc ADDON_METRICS_HISTOGRAM (ADDON_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/addon/metrics/charts/{scope}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/addon/metrics/charts/{scope}/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询监控数据曲线图数据",
        };
    };
    rpc ORCHESTRATOR_ADDONS_SCALE (ORCHESTRATOR_ADDONS_SCALE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/addons",
        };
        option (erda.common.openapi) = {
            path: "/api/addons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: batch scale addons",
        };
    };
    rpc ORCHESTRATOR_ADDON_AVAILABLE (AddonAvailableRequest) returns (AddonAvailableResponse) {
        option (google.api.http) = {
            get: "/api/addons/actions/list-available",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/list-available",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取可选 adon 列表(diceyml编辑时)",
        };
    };
    rpc ORCHESTRATOR_ADDON_CREATE (AddonDirectCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/addons/actions/create-addon",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/create-addon",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建 addon",
        };
    };
    rpc ORCHESTRATOR_ADDON_CREATE_CUSTOM (CustomAddonCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/addons/actions/create-custom",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/create-custom",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建自定义 addon",
        };
    };
    rpc ORCHESTRATOR_ADDON_CUSTOM (ORCHESTRATOR_ADDON_CUSTOM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/addons/actions/list-customs",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/list-customs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取第三方addon信息",
        };
    };
    rpc ORCHESTRATOR_ADDON_DELETE (ORCHESTRATOR_ADDON_DELETE_Request) returns (AddonFetchResponse) {
        option (google.api.http) = {
            delete: "/api/addons/{addonId}",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/{addonId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除 addon",
        };
    };
    rpc ORCHESTRATOR_ADDON_EXPORT (ORCHESTRATOR_ADDON_EXPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/addon/action/yml-export",
        };
        option (erda.common.openapi) = {
            path: "/api/addon/action/yml-export",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 导出addon yml",
        };
    };
    rpc ORCHESTRATOR_ADDON_EXTENSION (ORCHESTRATOR_ADDON_EXTENSION_Request) returns (AddonExtensionResponse) {
        option (google.api.http) = {
            get: "/api/addons/actions/list-extension",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/list-extension",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取可选 extension 列表(diceyml编辑时)",
        };
    };
    rpc ORCHESTRATOR_ADDON_FETCH (ORCHESTRATOR_ADDON_FETCH_Request) returns (AddonFetchResponse) {
        option (google.api.http) = {
            get: "/api/addons/{addonId}",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/{addonId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取 addon 详情",
        };
    };
    rpc ORCHESTRATOR_ADDON_IMPORT (ORCHESTRATOR_ADDON_IMPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/addon/action/yml-import",
        };
        option (erda.common.openapi) = {
            path: "/api/addon/action/yml-import",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 导入addon yml",
        };
    };
    rpc ORCHESTRATOR_ADDON_LIST (AddonListRequest) returns (AddonListResponse) {
        option (google.api.http) = {
            get: "/api/addons",
        };
        option (erda.common.openapi) = {
            path: "/api/addons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: addon 列表",
        };
    };
    rpc ORCHESTRATOR_ADDON_LOGS (ORCHESTRATOR_ADDON_LOGS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/addons/{instanceId}/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/{instanceId}/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: addon 日志",
        };
    };
    rpc ORCHESTRATOR_ADDON_MENU (ORCHESTRATOR_ADDON_MENU_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/addons/actions/menu",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/menu",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取 addon 分类菜单",
        };
    };
    rpc ORCHESTRATOR_ADDON_REFERENCES (ORCHESTRATOR_ADDON_REFERENCES_Request) returns (AddonReferencesResponse) {
        option (google.api.http) = {
            get: "/api/addons/{addonID}/actions/references",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/{addonID}/actions/references",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取 addon 引用列表",
        };
    };
    rpc ORCHESTRATOR_ADDON_TENANT_CREATE (AddonTenantCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/addons/actions/create-tenant",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/create-tenant",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建 addon tenant",
        };
    };
    rpc ORCHESTRATOR_ADDON_UPDATE_CUSTOM (CustomAddonUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/addons/{addonId}/actions/update-custom",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/{addonId}/actions/update-custom",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新自定义 addon",
        };
    };
    rpc ORCHESTRATOR_CLUSTER_INSTANCES_USAGE (ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cmdb/clusters/{cluster}/instances-usage",
        };
        option (erda.common.openapi) = {
            path: "/api/cmdb/clusters/{cluster}/instances-usage",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取某类实例集合的资源使用情况parameters:  - in: path    name: cluster    type: string    required: true    description: 集群名或者ID  - in: query    name: type    type: string    required: true    enum: [cluster, host, project, application, runtime, service, component, addon]    description: 指定请求实例的类型    example: project  - in: query    name: host    type: string    description: type 等于 host时，若输入 host，则获取指定 host 信息；如果没有输入，则获取整个集群所有的 hosts 信息  - in: query    name: project    type: string    description: type 等于 project时，若输入 project，则获取指定 project 实例信息；如果没有输入，则获取整个集群所有的 projects 实例信息  - in: query    name: application    type: string    description: type 等于 application时，若输入 application，则获取指定 application 实例信息；如果没有输入，则获取整个集群所有的 applications 实例信息  - in: query    name: runtime    type: string    description: type 等于 runtime时，若输入 runtime，则获取指定 runtime 实例信息；如果没有输入，则获取整个集群所有的 runtimes 实例信息  - in: query    name: service    type: string    description: type 等于 service时，输入 runtime 必要参数。若输入 service，则获取指定 service 实例信息;如果没有输入，则获取指定runtime下所有的 services 实例信息  - in: query    name: component    type: string    description: type 等于 component时。若输入 component，则获取指定 component 实例信息;如果没有输入，则获取指定集群所有的 component 实例信息  - in: query    name: addon    type: string    description: type 等于 addon时。若输入 addon，则获取指定 addon 实例信息;如果没有输入，则获取指定集群所有的 addon 实例信息produces:  - application/jsonresponses:  '200':    description: OK    schema:      type: string      example: 参考 https://yuque.antfin-inc.com/terminus_paas_dev/paas/gosn9b#va3pslcomponents:  schemas:    ComponentUsage:      type: object      properties:        name:            type: string            description: 组件名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    AddonUsage:      type: object      properties:        name:            type: string            description: 组件名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    ProjectUsage:      type: object      properties:        id:            type: string            description: 项目ID        name:            type: string            description: 项目名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    ApplicationUsage:      type: object      properties:        id:            type: string            description: 应用ID        name:            type: string            description: 应用名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    RuntimeUsage:      type: object      properties:        id:            type: string            description: runtime ID        name:            type: string            description: runtime名        application:            type: string            description: 应用名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    ServiceUsage:      type: object      properties:        name:            type: string            description: service名        runtime:            type: string            description: runtime名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ADDONS (ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/deployments/{deploymentID}/actions/deploy-addons",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/{deploymentID}/actions/deploy-addons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "部署 addon 步骤",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_APPROVE (DeploymentApproveRequest) returns (DeploymentApproveResponse) {
        option (google.api.http) = {
            post: "/api/deployments/actions/approve",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/actions/approve",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "审批部署",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_CANCEL (DeploymentCancelRequest) returns (DeploymentCancelResponse) {
        option (google.api.http) = {
            post: "/api/deployments/{deploymentId}/actions/cancel",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/{deploymentId}/actions/cancel",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "取消部署",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_DOMAINS (ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/deployments/{deploymentID}/actions/deploy-domains",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/{deploymentID}/actions/deploy-domains",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "部署 domains 步骤",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_LIST (DeploymentListRequest) returns (DeploymentListResponse) {
        option (google.api.http) = {
            get: "/api/deployments",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "查询部署列表",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED (ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) returns (DeploymentDetailListResponse) {
        option (google.api.http) = {
            get: "/api/deployments/actions/list-approved",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/actions/list-approved",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "查询已审批列表",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL (ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) returns (DeploymentDetailListResponse) {
        option (google.api.http) = {
            get: "/api/deployments/actions/list-launched-approval",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/actions/list-launched-approval",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "查询'user-id'发起的部署审批列表",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL (ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) returns (DeploymentDetailListResponse) {
        option (google.api.http) = {
            get: "/api/deployments/actions/list-pending-approval",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/actions/list-pending-approval",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "查询待审批列表",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL (ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/deployment-orders/{deploymentOrderID}/actions/cancel",
        };
        option (erda.common.openapi) = {
            path: "/api/deployment-orders/{deploymentOrderID}/actions/cancel",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE (ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/deployment-orders",
        };
        option (erda.common.openapi) = {
            path: "/api/deployment-orders",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY (ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/deployment-orders/{deploymentOrderID}/actions/deploy",
        };
        option (erda.common.openapi) = {
            path: "/api/deployment-orders/{deploymentOrderID}/actions/deploy",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ORDER_GET (ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/deployment-orders/{deploymentOrderID}",
        };
        option (erda.common.openapi) = {
            path: "/api/deployment-orders/{deploymentOrderID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ORDER_LIST (ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/deployment-orders",
        };
        option (erda.common.openapi) = {
            path: "/api/deployment-orders",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL (ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/deployment-orders/actions/render-detail",
        };
        option (erda.common.openapi) = {
            path: "/api/deployment-orders/actions/render-detail",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS (ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/deployments/{deploymentId}/status",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/{deploymentId}/status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询部署状态",
        };
    };
    rpc ORCHESTRATOR_DEPLOYMENT_SERVICES (ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/deployments/{deploymentID}/actions/deploy-services",
        };
        option (erda.common.openapi) = {
            path: "/api/deployments/{deploymentID}/actions/deploy-services",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "部署 service 步骤",
        };
    };
    rpc ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES (AppWorkspaceReleasesGetRequest) returns (AppWorkspaceReleasesGetResponse) {
        option (google.api.http) = {
            get: "/api/runtimes/actions/get-app-workspace-releases",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/get-app-workspace-releases",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_INSTANCES_USAGE (ORCHESTRATOR_INSTANCES_USAGE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/instances-usage",
        };
        option (erda.common.openapi) = {
            path: "/api/instances-usage",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取某类实例集合的资源使用情况parameters:  - in: path    name: cluster    type: string    required: true    description: 集群名或者ID  - in: query    name: type    type: string    required: true    enum: [cluster, host, project, application, runtime, service, component, addon]    description: 指定请求实例的类型    example: project  - in: query    name: host    type: string    description: type 等于 host时，若输入 host，则获取指定 host 信息；如果没有输入，则获取整个集群所有的 hosts 信息  - in: query    name: project    type: string    description: type 等于 project时，若输入 project，则获取指定 project 实例信息；如果没有输入，则获取整个集群所有的 projects 实例信息  - in: query    name: application    type: string    description: type 等于 application时，若输入 application，则获取指定 application 实例信息；如果没有输入，则获取整个集群所有的 applications 实例信息  - in: query    name: runtime    type: string    description: type 等于 runtime时，若输入 runtime，则获取指定 runtime 实例信息；如果没有输入，则获取整个集群所有的 runtimes 实例信息  - in: query    name: service    type: string    description: type 等于 service时，输入 runtime 必要参数。若输入 service，则获取指定 service 实例信息;如果没有输入，则获取指定runtime下所有的 services 实例信息  - in: query    name: component    type: string    description: type 等于 component时。若输入 component，则获取指定 component 实例信息;如果没有输入，则获取指定集群所有的 component 实例信息  - in: query    name: addon    type: string    description: type 等于 addon时。若输入 addon，则获取指定 addon 实例信息;如果没有输入，则获取指定集群所有的 addon 实例信息produces:  - application/jsonresponses:  '200':    description: OK    schema:      type: string      example: 参考 https://yuque.antfin-inc.com/terminus_paas_dev/paas/gosn9b#va3pslcomponents:  schemas:    ComponentUsage:      type: object      properties:        name:            type: string            description: 组件名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    AddonUsage:      type: object      properties:        name:            type: string            description: 组件名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    ProjectUsage:      type: object      properties:        id:            type: string            description: 项目ID        name:            type: string            description: 项目名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    ApplicationUsage:      type: object      properties:        id:            type: string            description: 应用ID        name:            type: string            description: 应用名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    RuntimeUsage:      type: object      properties:        id:            type: string            description: runtime ID        name:            type: string            description: runtime名        application:            type: string            description: 应用名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）    ServiceUsage:      type: object      properties:        name:            type: string            description: service名        runtime:            type: string            description: runtime名        instance:            type: integer            description: 实例数        memory:            type: number            format: double            description: 分配的内存（MB）        cpu:            type: number            format: double            description: 分配的cpu数        disk:            type: number            format: double            description: 分配的磁盘空间（MB）",
        };
    };
    rpc ORCHESTRATOR_MICRO_SERVICE_MENUS (ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) returns (MicroServiceMenuResponseData) {
        option (google.api.http) = {
            get: "/api/microservice/project/{projectID}/menus",
        };
        option (erda.common.openapi) = {
            path: "/api/microservice/project/{projectID}/menus",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 项目对应微服务菜单",
        };
    };
    rpc ORCHESTRATOR_MICRO_SERVICE_PROJECTS (ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) returns (MicroServiceProjectResponse) {
        option (google.api.http) = {
            get: "/api/microservice/projects",
        };
        option (erda.common.openapi) = {
            path: "/api/microservice/projects",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 微服务项目列表",
        };
    };
    rpc ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION (MiddlewareListRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/middlewares/resource/classification",
        };
        option (erda.common.openapi) = {
            path: "/api/middlewares/resource/classification",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: middleware addon分类资源占用",
        };
    };
    rpc ORCHESTRATOR_MIDDLEWARE_DAILY (MiddlewareListRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/middlewares/resource/daily",
        };
        option (erda.common.openapi) = {
            path: "/api/middlewares/resource/daily",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: middleware addon每日资源占用",
        };
    };
    rpc ORCHESTRATOR_MIDDLEWARE_FETCH (ORCHESTRATOR_MIDDLEWARE_FETCH_Request) returns (MiddlewareFetchResponse) {
        option (google.api.http) = {
            get: "/api/middlewares/{addonId}",
        };
        option (erda.common.openapi) = {
            path: "/api/middlewares/{addonId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: middleware 详情",
        };
    };
    rpc ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE (ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) returns (MiddlewareResourceFetchResponse) {
        option (google.api.http) = {
            get: "/api/middlewares/{addonId}/actions/get-resource",
        };
        option (erda.common.openapi) = {
            path: "/api/middlewares/{addonId}/actions/get-resource",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: middleware 资源详情",
        };
    };
    rpc ORCHESTRATOR_MIDDLEWARE_LIST (MiddlewareListRequest) returns (MiddlewareListResponse) {
        option (google.api.http) = {
            get: "/api/middlewares",
        };
        option (erda.common.openapi) = {
            path: "/api/middlewares",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: middleware 列表",
        };
    };
    rpc ORCHESTRATOR_MIGRATION_LOG (ORCHESTRATOR_MIGRATION_LOG_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/migration/{migrationId}/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/migration/{migrationId}/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 通过migrationId，获取migration执行日志'",
        };
    };
    rpc ORCHESTRATOR_NODELABEL_LIST (ScheduleLabelListRequest) returns (ScheduleLabelListResponse) {
        option (google.api.http) = {
            get: "/api/nodelabels",
        };
        option (erda.common.openapi) = {
            path: "/api/nodelabels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取可用 nodelabel 列表",
        };
    };
    rpc ORCHESTRATOR_NODELABEL_SET (ScheduleLabelSetRequest) returns (ScheduleLabelSetResponse) {
        option (google.api.http) = {
            post: "/api/nodelabels",
        };
        option (erda.common.openapi) = {
            path: "/api/nodelabels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "设置 nodelabel",
        };
    };
    rpc ORCHESTRATOR_ORG_JOB_LOG (ORCHESTRATOR_ORG_JOB_LOG_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/job/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/job/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: orgcenter job logs'",
        };
    };
    rpc ORCHESTRATOR_PRE_DICE_OVERLAY_UPDATE (ORCHESTRATOR_PRE_DICE_OVERLAY_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/runtimes/actions/update-pre-overlay",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/update-pre-overlay",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新 pre dice overlay",
        };
    };
    rpc ORCHESTRATOR_PROJECT_RUNTIME_COUNT (ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/countProjectRuntime",
        };
        option (erda.common.openapi) = {
            path: "/api/countProjectRuntime",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_RUNTIMES_BATCH_SCALE (ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/runtimes/actions/batch-update-pre-overlay",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/batch-update-pre-overlay",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_BATCH_SERVICES (ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimesServices",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimesServices",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_BULK_GET_STATUS (ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimes/actions/bulk-get-status",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/bulk-get-status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量查询 ServiceGroup Status",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_CREATE (ORCHESTRATOR_RUNTIME_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtimes",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建 Runtimeconsumes:  - application/jsonparameters:  - in: body    description: runtime to create    schema:      type: object      properties:        name:          type: string          description: Runtime Name (pipeline 请用分支名)        releaseId:          type: string          description: diceHub 的 releaseId        operator:          type: string          description: 操作人用户 ID        clusterName:          type: string          description: 告知发布的集群 (aka \"az\")        source:          type: string          description: PIPELINE / RUNTIMEADDON / ABILITY        extra:          type: object          description: |            格式为 key(string) / value(object):                {                  \"k1\": \"v1\",                  \"k2\": 123,                  \"k3\": [\"1\", \"2\", \"3\"],                  \"k4\": {                    \"f1\": \"g1\",                    \"f2\": \"g2\"                  }                }            若为 PIPELINE, 需要传              - orgId (integer)              - projectId (integer)              - applicationId (integer)              - workspace              - buildId (integer)            若为 RUNTIMEADDON, 需要传              - orgId (integer)              - projectId (integer)              - applicationId (integer)              - workspace              - instanceId (string)            若为 ABILITY, 需要传              - orgId (integer)              - applicationId (integer) 或 applicationName (自动创建 application)              - workspace              - clusterId (string)              - addonActions (map[string]interface{})produces:  - application/jsonresponses:  '200':    description: ok    schema:      type: object      properties:        success:          type: boolean        err:          type: object          properties:            code:              type: string            msg:              type: string            ctx:              type: object        data:          type: object          properties:            deploymentId:              type: integer            applicationId:              type: integer            runtimeId:              type: integer  '400':    description: bad request",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_DELETE (ORCHESTRATOR_RUNTIME_DELETE_Request) returns (RuntimeDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/runtimes/{runtimeId}",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "删除应用实例",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_DEPLOY_LOG (ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimes/deploy/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/deploy/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: runtime deploy logs'",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_DOMAIN_GET (DomainListRequest) returns (DomainListResponse) {
        option (google.api.http) = {
            get: "/api/runtimes/{runtimeID}/domains",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeID}/domains",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 Runtime 域名",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE (DomainUpdateRequest) returns (DomainUpdateResponse) {
        option (google.api.http) = {
            put: "/api/runtimes/{runtimeID}/domains",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeID}/domains",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "更新 Runtime 域名",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_GROUP_BY_APPS (ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimes/actions/group-by-apps",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/group-by-apps",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 按给定的 app 分组返回 runtimes 列表",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_INSPECT (RuntimeInspectRequest) returns (RuntimeInspectResponse) {
        option (google.api.http) = {
            get: "/api/runtimes/{IDOrName}",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{IDOrName}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "查询 Runtime",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP (ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimes/{runtimeId}/configuration",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeId}/configuration",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询 ServiceGroup configuration",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_KILLPOD (RuntimeKillPodRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtimes/actions/killpod",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/killpod",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "删除指定 pod",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES (ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimes/actions/list-my-runtimes",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/list-my-runtimes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 按项目下我的 app 分组返回 runtimes 列表",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_REDEPLOY (ORCHESTRATOR_RUNTIME_REDEPLOY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtimes/{runtimeId}/actions/redeploy",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeId}/actions/redeploy",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 重新部署 Runtime (必须要已经部署过一次)consumes:  - application/jsonparameters:  - in: path    name: runtimeId    type: integer    required: true    description: Runtime Idproduces:  - application/jsonresponses:  '200':    description: ok    schema:      type: object      properties:        success:          type: boolean        err:          type: object          properties:            code:              type: string            msg:              type: string            ctx:              type: object        data:          type: object          properties:            deploymentId:              type: integer            applicationId:              type: integer            runtimeId:              type: integer  '400':    description: bad request",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION (ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtimes/{runtimeId}/actions/redeploy-action",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeId}/actions/redeploy-action",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "redeploy 的 action 调用 api",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_RELEASE_CREATE (RuntimeReleaseCreateRequest) returns (RuntimeReleaseCreatePipelineResponse) {
        option (google.api.http) = {
            post: "/api/runtimes/actions/deploy-release",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/deploy-release",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 通过releaseId创建runtime",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION (RuntimeReleaseCreateRequest) returns (RuntimeCreateResponse) {
        option (google.api.http) = {
            post: "/api/runtimes/actions/deploy-release-action",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/actions/deploy-release-action",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_ROLLBACK (ORCHESTRATOR_RUNTIME_ROLLBACK_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtimes/{runtimeId}/actions/rollback",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeId}/actions/rollback",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 回滚 Runtime (只能回滚到成功的部署单)consumes:  - application/jsonparameters:  - in: path    name: runtimeId    type: integer    required: true    description: Runtime Id  - in: body    description: rollback body    schema:      type: object      properties:        deploymentId:          type: int          description: Deployment Idproduces:  - application/jsonresponses:  '200':    description: ok    schema:      type: object      properties:        success:          type: boolean        err:          type: object          properties:            code:              type: string            msg:              type: string            ctx:              type: object        data:          type: object          properties:            deploymentId:              type: integer            applicationId:              type: integer            runtimeId:              type: integer  '400':    description: bad request",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION (ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtimes/{runtimeId}/actions/rollback-action",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes/{runtimeId}/actions/rollback-action",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "rollback 的 action 调用 api",
        };
    };
    rpc ORCHESTRATOR_RUNTIME_SEARCH (ORCHESTRATOR_RUNTIME_SEARCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtimes",
        };
        option (erda.common.openapi) = {
            path: "/api/runtimes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 搜索 Runtime",
        };
    };
    rpc ORCHESTRATOR_SERVICE_INSTANCE_LIST (ContainerListRequest) returns (ContainerListResponse) {
        option (google.api.http) = {
            get: "/api/instances/actions/get-service",
        };
        option (erda.common.openapi) = {
            path: "/api/instances/actions/get-service",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: runtime 下 service  实例列表",
        };
    };
    rpc ORCHESTRATOR_SERVICE_POD_LIST (PodListRequest) returns (PodListResponse) {
        option (google.api.http) = {
            get: "/api/instances/actions/get-service-pods",
        };
        option (erda.common.openapi) = {
            path: "/api/instances/actions/get-service-pods",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: runtime 下 service pod 列表",
        };
    };
    rpc ORCHESTRATOR_TERMINAL (ORCHESTRATOR_TERMINAL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/terminal",
        };
        option (erda.common.openapi) = {
            path: "/api/terminal",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "控制台 websocket api",
        };
    };
}
