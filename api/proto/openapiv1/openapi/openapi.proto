// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapi;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/openapi/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message OPENAPI_EVENT_DOC_Request {
}
message OPENAPI_GEN_CLIENT_TOKEN_Request {
}
message OPENAPI_VERSION_Request {
}
message DICE_METADATA_Request {
}
message OPENAPI_DOC_Request {
}
message OPENAPI_LIST_CLIENT_Request {
}
message OPENAPI_METRICS_Request {
}
message OPENAPI_NEW_CLIENT_Request {
}
message OPENAPI_STAT_Request {
}
message DOC_JSON_Request {
}
// generate service from openapi spec: openapi
service openapi {
    option (erda.common.openapi_service) = {
        service: "openapi",
    };

    rpc DICE_METADATA (DICE_METADATA_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/metadata.json",
        };
        option (erda.common.openapi) = {
            path: "/metadata.json",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "Dice 平台对外的元信息",
        };
    };
    rpc DOC_JSON (DOC_JSON_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi/swagger.json",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/swagger.json",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 返回 swagger.json",
        };
    };
    rpc OPENAPI_DOC (OPENAPI_DOC_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi-doc",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi-doc",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "返回 openapi 文档",
        };
    };
    rpc OPENAPI_EVENT_DOC (OPENAPI_EVENT_DOC_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi-event-doc",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi-event-doc",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 openevent 文档",
        };
    };
    rpc OPENAPI_GEN_CLIENT_TOKEN (OPENAPI_GEN_CLIENT_TOKEN_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/openapi/client-token",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/client-token",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: client token 发放接口description: 通过 header Basic 认证. Basic Header：\"Basic \" + base64(<clientid>+\":\"+<clientsecret>)produces:  - application/jsonresponses:  '200':    description: OK    schema:      type: object      properties:        access_token:          type: string        token_type:          type: string        refresh_token:          type: string        expires_in:          type: int64        scope:          type: string        jti:          type: string  '400':    description: 没有提供 Authorization header",
        };
    };
    rpc OPENAPI_LIST_CLIENT (OPENAPI_LIST_CLIENT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi/manager/clients",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/manager/clients",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取client列表description: 认证： 通过 Authorization 头信息进行认证。 格式为“Bearer <token>”, 注意空格produces:  - application/json",
        };
    };
    rpc OPENAPI_METRICS (OPENAPI_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi/metrics",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/metrics",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "openapi metrics",
        };
    };
    rpc OPENAPI_NEW_CLIENT (OPENAPI_NEW_CLIENT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/openapi/manager/clients",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/manager/clients",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建新clientdescription: 认证： 通过 Authorization 头信息进行认证。 格式为“Bearer <token>”, 注意空格parameters:  - in: body    name: request-json    description: request json body    schema:      type: object      properties:        accessTokenValiditySeconds:          type: integer        autoApprove:          type: boolean        clientId:          type: string        clientLogoUrl:          type: string        clientName:          type: string        clientSecret:          type: string        refreshTokenValiditySeconds:          type: integer        userId:          type: intproduces:  - application/jsonresponses:  '200':    description: OK",
        };
    };
    rpc OPENAPI_STAT (OPENAPI_STAT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi/stat",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/stat",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: openapi 统计",
        };
    };
    rpc OPENAPI_VERSION (OPENAPI_VERSION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/openapi/version",
        };
        option (erda.common.openapi) = {
            path: "/api/openapi/version",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 返回 openapi 版本信息",
        };
    };
}
