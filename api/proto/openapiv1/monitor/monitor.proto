// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.monitor; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/monitor/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message HostStatusListData {
    string hostIP = 1 [json_name = "host_ip"];
    string statusLevel = 2 [json_name = "status_level"];
    string abnormalMsg = 3 [json_name = "abnormal_msg"];
}
message HostStatusListRequest {
    string orgName = 1 [json_name = "org_name"];
    repeated string hosts = 2;
}
message HostStatusListResponse {
    repeated google.protobuf.Value data = 1;
}
message MONITOR_ADDON_LOGS_SEARCH_Request {
    string addon = 1; // generated from path variable: addon. You should change the proto type if necessary.
}
message MONITOR_ADDON_LOGS_TAGS_TREE_Request {
}
message MONITOR_APM_ALERT_ID_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_ALERT_ID_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_ALERT_ID_PUT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_ALERT_ID_SWITCH_PUT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_ALERT_LIST_Request {
}
message MONITOR_APM_ALERT_POST_Request {
}
message MONITOR_APM_ALERT_RULE_LIST_Request {
}
message MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request {
}
message MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request {
}
message MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request {
}
message MONITOR_APM_CUSTOMIZE_ALERT_POST_Request {
}
message MONITOR_APM_INSTANCE_GET_Request {
}
message MONITOR_APM_RUNTIME_GET_Request {
}
message MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request {
}
message MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request {
}
message MONITOR_APM_TOPOLOGY_GET_Request {
}
message MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request {
}
message MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request {
}
message MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request {
}
message MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request {
}
message MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request {
}
message MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request {
}
message MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request {
}
message MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request {
}
message MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request {
}
message MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request {
}
message MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request {
}
message MONITOR_APM_TOPOLOGY_TRANSLATION_Request {
}
message MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request {
}
message MONITOR_APM_TRACE_ID_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_APM_TRACE_LIST_Request {
}
message MONITOR_CLUSTER_STATUS_GET_Request {
}
message MONITOR_DASHBOARD_EXPORT_Request {
}
message MONITOR_DASHBOARD_IMPORT_Request {
}
message MONITOR_DASHBOARD_PARSE_Request {
}
message MONITOR_DASHBOARD_TEMPLATES_Request {
}
message MONITOR_DASHBOARD_TEMPLATE_CREATE_Request {
}
message MONITOR_DASHBOARD_TEMPLATE_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_DASHBOARD_TEMPLATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_FILEMANAGER_DOWNLOAD_Request {
    string containerID = 1; // generated from path variable: containerID. You should change the proto type if necessary.
}
message MONITOR_FILEMANAGER_UPLOAD_Request {
    string containerID = 1; // generated from path variable: containerID. You should change the proto type if necessary.
}
message MONITOR_NOTIFY_CREATE_Request {
}
message MONITOR_NOTIFY_CUSTOMIZE_Request {
}
message MONITOR_NOTIFY_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_NOTIFY_ENABLE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_NOTIFY_LIST_Request {
}
message MONITOR_NOTIFY_TEMPALTES_Request {
}
message MONITOR_NOTIFY_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_ALERTS_RULES_Request {
}
message MONITOR_ORGS_ALERTS_Request {
}
message MONITOR_ORGS_ALERT_CREATE_Request {
}
message MONITOR_ORGS_ALERT_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_ALERT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_ALERT_SWITCH_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_ALERT_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_CUSTOMIZE_ALERTS_Request {
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request {
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request {
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request {
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request {
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORG_ALERT_RECORDS_Request {
}
message MONITOR_ORG_ALERT_RECORD_ATTRS_Request {
}
message MONITOR_ORG_ALERT_RECORD_HISTORIES_Request {
    string groupId = 1; // generated from path variable: groupId. You should change the proto type if necessary.
}
message MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request {
    string groupId = 1; // generated from path variable: groupId. You should change the proto type if necessary.
}
message MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request {
    string groupId = 1; // generated from path variable: groupId. You should change the proto type if necessary.
    string issueId = 2; // generated from path variable: issueId. You should change the proto type if necessary.
}
message MONITOR_ORG_ALERT_RECORD_Request {
    string groupId = 1; // generated from path variable: groupId. You should change the proto type if necessary.
}
message MONITOR_ORG_HOSTS_ALERT_RECORDS_Request {
}
message MONITOR_ORG_LOGS_RULES_CREATE_Request {
}
message MONITOR_ORG_LOGS_RULES_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORG_LOGS_RULES_ENABLE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORG_LOGS_RULES_Request {
}
message MONITOR_ORG_LOGS_RULES_TEMPLATES_Request {
}
message MONITOR_ORG_LOGS_RULES_TEMPLATE_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary.
}
message MONITOR_ORG_LOGS_RULES_TEST_Request {
}
message MONITOR_ORG_LOGS_RULES_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORG_LOGS_RULE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORG_LOGS_SEARCH_Request {
}
message MONITOR_ORG_LOGS_STATISTIC_Request {
}
message MONITOR_ORG_LOGS_TAGS_TREE_Request {
}
message MONITOR_ORG_REPORT_HISTORY_CREATE_Request {
}
message MONITOR_ORG_REPORT_HISTORY_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MONITOR_ORG_REPORT_TASK_CREATE_Request {
}
message MONITOR_ORG_REPORT_TASK_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_RULES_CREATE_Request {
}
message MSP_ADDON_LOGS_RULES_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_RULES_ENABLE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_RULES_Request {
}
message MSP_ADDON_LOGS_RULES_TEMPLATES_Request {
}
message MSP_ADDON_LOGS_RULES_TEMPLATE_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_RULES_TEST_Request {
}
message MSP_ADDON_LOGS_RULES_UPDATE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message MSP_ADDON_LOGS_RULE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request {
}
message SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_ALARM_NOTIFIES_Request {
}
message SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_ALARM_TYPES_Request {
}
message SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_ALERT_METRICS_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_CHART_META_Request {
}
message SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request {
}
message SPOT_DASHBOARD_ORG_METRICS_QUERY_Request {
}
message SPOT_DASHBOARD_ORG_METRICS_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request {
}
message SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request {
}
message SPOT_DASHBOARD_PROJECT_METRICS_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request {
    string metricType = 1; // generated from path variable: metricType. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request {
}
message SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request {
}
message SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request {
    string instanceType = 1; // generated from path variable: instanceType. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_RESOURCES_GROUP_Request {
}
message SPOT_DASHBOARD_RESOURCES_TYPES_Request {
}
message SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request {
}
message SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request {
}
message SPOT_DASHBOARD_RUNTIME_METRICS_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request {
    string scope = 1; // generated from path variable: scope. You should change the proto type if necessary.
}
message SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request {
}
message SPOT_JVM_PROFILER_FINISH_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_HEAP_GC_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_HEAP_GC_STATE_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
    string heapGCID = 3; // generated from path variable: heapGCID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_HEAP_STAT_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_JVM_INFO_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_LIST_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_SERVICES_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_START_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_STATE_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_THREAD_DUMP_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
    string snapshotsID = 3; // generated from path variable: snapshotsID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
    string snapshotsID = 3; // generated from path variable: snapshotsID. You should change the proto type if necessary.
}
message SPOT_JVM_PROFILER_THREAD_STAT_Request {
    string addonID = 1; // generated from path variable: addonID. You should change the proto type if necessary.
    string profilingID = 2; // generated from path variable: profilingID. You should change the proto type if necessary.
}
message SPOT_ORG_LOGS_DOWNLOAD_Request {
}
message SPOT_ORG_LOGS_Request {
}
message SPOT_RUNTIME_LOGS_DOWNLOAD_Request {
}
message SPOT_RUNTIME_LOGS_Request {
}
message SPOT_RUNTIME_REALTIME_LOGS_Request {
}
// generate service from openapi spec: monitor
service monitor {
    option (erda.common.openapi_service) = {
        service: "monitor",
    };

    rpc MONITOR_ADDON_LOGS_SEARCH (MONITOR_ADDON_LOGS_SEARCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/log-analytics/{addon}/search",
        };
        option (erda.common.openapi) = {
            path: "/api/log-analytics/{addon}/search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 日志搜索接口",
        };
    };
    rpc MONITOR_ADDON_LOGS_TAGS_TREE (MONITOR_ADDON_LOGS_TAGS_TREE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/micro-service/logs/tags/tree",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/tags/tree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志查询所需要的tags",
        };
    };
    rpc MONITOR_APM_ALERT_ID_DELETE (MONITOR_APM_ALERT_ID_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/apm/alert/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alert/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID删除微服务告警通知",
        };
    };
    rpc MONITOR_APM_ALERT_ID_GET (MONITOR_APM_ALERT_ID_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/alert/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alert/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID获取微服务告警通知",
        };
    };
    rpc MONITOR_APM_ALERT_ID_PUT (MONITOR_APM_ALERT_ID_PUT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/apm/alert/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alert/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID修改微服务告警通知",
        };
    };
    rpc MONITOR_APM_ALERT_ID_SWITCH_PUT (MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/apm/alert/{id}/switch",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alert/{id}/switch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID修改微服务告警通知是否开启",
        };
    };
    rpc MONITOR_APM_ALERT_LIST (MONITOR_APM_ALERT_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/alerts",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alerts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取租户所有的微服务告警通知",
        };
    };
    rpc MONITOR_APM_ALERT_POST (MONITOR_APM_ALERT_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/apm/alert",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alert",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建微服务告警通知",
        };
    };
    rpc MONITOR_APM_ALERT_RULE_LIST (MONITOR_APM_ALERT_RULE_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/alerts/rules",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/alerts/rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取当前租户告警通知对应的告警规则",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE (MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/apm/customize/alert/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alert/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID删除自定义微服务告警策略",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_ID_GET (MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/customize/alert/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alert/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID获取自定义微服务告警策略",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT (MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/apm/customize/alert/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alert/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID修改自定义微服务告警策略",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT (MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/apm/customize/alert/{id}/switch",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alert/{id}/switch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据ID修改自定义微服务告警策略是否开启",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_LIST (MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/customize/alerts",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alerts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取租户所有的自定义微服务告警策略",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET (MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/customize/alerts/metrics",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alerts/metrics",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取自定义微服务告警指标",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET (MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/customize/alerts/notifies/targets",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alerts/notifies/targets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取可用通知组标签",
        };
    };
    rpc MONITOR_APM_CUSTOMIZE_ALERT_POST (MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/apm/customize/alert",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/customize/alert",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建自定义微服务告警策略",
        };
    };
    rpc MONITOR_APM_INSTANCE_GET (MONITOR_APM_INSTANCE_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/instance",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/instance",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据TerminusKey获取monitor实例",
        };
    };
    rpc MONITOR_APM_RUNTIME_GET (MONITOR_APM_RUNTIME_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/runtime",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/runtime",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取Runtime信息",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET (MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/exception/message",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/exception/message",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取异常分析异常列表",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET (MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/exception/types",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/exception/types",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取异常分析异常类型",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_GET (MONITOR_APM_TOPOLOGY_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取拓扑图数据",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET (MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/overview",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/overview",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取全局概览",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_PROCESS_DISKIO (MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/process/diskio",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/process/diskio",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Disk io speed.",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET (MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/service/instance/ids",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/service/instance/ids",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取进程分析实例ID",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_PROCESS_NETIO (MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/process/netio",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/process/netio",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Network io speed.",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET (MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/search/tags",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/search/tags",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取拓扑图搜索条件",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET (MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/search/tagv",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/search/tagv",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "根据搜索条件获取指标",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_SERVICES_LIST (MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/services",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/services",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取拓扑服务列表",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST (MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/service/instances",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/service/instances",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "The number of running instances.",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET (MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/service/overview",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/service/overview",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取服务概览",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET (MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/service/requests",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/service/requests",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取服务事务分析",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_TRANSLATION (MONITOR_APM_TOPOLOGY_TRANSLATION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/translation",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/translation",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取事务分析概览",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_TRANSLATION_DB (MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/translation/db",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/translation/db",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取数据库调用概览",
        };
    };
    rpc MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW (MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/topology/translation/slow",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/topology/translation/slow",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取慢事务追踪",
        };
    };
    rpc MONITOR_APM_TRACE_ID_GET (MONITOR_APM_TRACE_ID_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/trace/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/trace/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "trace: 链路信息详情",
        };
    };
    rpc MONITOR_APM_TRACE_LIST (MONITOR_APM_TRACE_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apm/traces",
        };
        option (erda.common.openapi) = {
            path: "/api/apm/traces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "traces: 链路追踪",
        };
    };
    rpc MONITOR_CLUSTER_STATUS_GET (MONITOR_CLUSTER_STATUS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/clusters/status",
        };
        option (erda.common.openapi) = {
            path: "/api/org/clusters/status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取集群状态",
        };
    };
    rpc MONITOR_DASHBOARD_EXPORT (MONITOR_DASHBOARD_EXPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/dashboard/blocks/export",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/blocks/export",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 大盘导出",
        };
    };
    rpc MONITOR_DASHBOARD_IMPORT (MONITOR_DASHBOARD_IMPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/dashboard/blocks/import",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/blocks/import",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 大盘导入",
        };
    };
    rpc MONITOR_DASHBOARD_PARSE (MONITOR_DASHBOARD_PARSE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/dashboard/blocks/parse",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/blocks/parse",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 大盘导入校验",
        };
    };
    rpc MONITOR_DASHBOARD_TEMPLATE (MONITOR_DASHBOARD_TEMPLATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/dashboard/template/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/template/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取大盘模板详情",
        };
    };
    rpc MONITOR_DASHBOARD_TEMPLATES (MONITOR_DASHBOARD_TEMPLATES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/dashboard/templates",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取大盘模板列表",
        };
    };
    rpc MONITOR_DASHBOARD_TEMPLATE_CREATE (MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/dashboard/template",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/template",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建大盘模板",
        };
    };
    rpc MONITOR_DASHBOARD_TEMPLATE_DELETE (MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/dashboard/template/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/template/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除大盘模板",
        };
    };
    rpc MONITOR_DASHBOARD_TEMPLATE_UPDATE (MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/dashboard/template/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/dashboard/template/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新大盘模板",
        };
    };
    rpc MONITOR_FILEMANAGER_DOWNLOAD (MONITOR_FILEMANAGER_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/container/{containerID}/files/download",
        };
        option (erda.common.openapi) = {
            path: "/api/container/{containerID}/files/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 下载容器文件",
        };
    };
    rpc MONITOR_FILEMANAGER_UPLOAD (MONITOR_FILEMANAGER_UPLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/container/{containerID}/files/upload",
        };
        option (erda.common.openapi) = {
            path: "/api/container/{containerID}/files/upload",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 上传容器文件",
        };
    };
    rpc MONITOR_HOST_STATUS (HostStatusListRequest) returns (HostStatusListResponse) {
        option (google.api.http) = {
            post: "/api/host-status",
        };
        option (erda.common.openapi) = {
            path: "/api/host-status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "集群主机状态",
        };
    };
    rpc MONITOR_NOTIFY_CREATE (MONITOR_NOTIFY_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/notify/records",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:创建告警通知",
        };
    };
    rpc MONITOR_NOTIFY_CUSTOMIZE (MONITOR_NOTIFY_CUSTOMIZE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/notify/user-define/templates",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/user-define/templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:用户自定义告警通知模版",
        };
    };
    rpc MONITOR_NOTIFY_DELETE (MONITOR_NOTIFY_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/notify/records/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/records/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:删除告警通知",
        };
    };
    rpc MONITOR_NOTIFY_ENABLE (MONITOR_NOTIFY_ENABLE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/notify/{id}/switch",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/{id}/switch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:是否启用该告警通知",
        };
    };
    rpc MONITOR_NOTIFY_LIST (MONITOR_NOTIFY_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/notify/records",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:获取用户创建的通知列表",
        };
    };
    rpc MONITOR_NOTIFY_TEMPALTES (MONITOR_NOTIFY_TEMPALTES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/notify/templates",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:获取可用的告警通知模版",
        };
    };
    rpc MONITOR_NOTIFY_UPDATE (MONITOR_NOTIFY_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/notify/records/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/notify/records/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:更新告警通知",
        };
    };
    rpc MONITOR_ORGS_ALERT (MONITOR_ORGS_ALERT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/alerts/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警详情",
        };
    };
    rpc MONITOR_ORGS_ALERTS (MONITOR_ORGS_ALERTS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/alerts",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警列表",
        };
    };
    rpc MONITOR_ORGS_ALERTS_RULES (MONITOR_ORGS_ALERTS_RULES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/alerts/rules",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts/rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警规则列表",
        };
    };
    rpc MONITOR_ORGS_ALERT_CREATE (MONITOR_ORGS_ALERT_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgCenter/alerts",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建企业告警",
        };
    };
    rpc MONITOR_ORGS_ALERT_DELETE (MONITOR_ORGS_ALERT_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/orgCenter/alerts/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除企业告警",
        };
    };
    rpc MONITOR_ORGS_ALERT_SWITCH (MONITOR_ORGS_ALERT_SWITCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/orgCenter/alerts/{id}/switch",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts/{id}/switch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 切换企业告警开关",
        };
    };
    rpc MONITOR_ORGS_ALERT_UPDATE (MONITOR_ORGS_ALERT_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/orgCenter/alerts/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/alerts/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 修改企业告警",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT (MONITOR_ORGS_CUSTOMIZE_ALERT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/customize/alerts/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业自定义告警详情",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERTS (MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/customize/alerts",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业自定义告警列表",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE (MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgCenter/customize/alerts",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建企业自定义告警",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW (MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgCenter/customize/alerts/dash-preview/query",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/dash-preview/query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据告警规则生成预览大盘",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE (MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/orgCenter/customize/alerts/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除企业自定义告警",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS (MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/customize/alerts/metrics",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/metrics",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业自定义告警指标",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET (MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/customize/alerts/notifies/targets",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/notifies/targets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业自定义告警通知方式",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH (MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/orgCenter/customize/alerts/{id}/switch",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/{id}/switch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 切换企业自定义告警开关",
        };
    };
    rpc MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE (MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/orgCenter/customize/alerts/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/customize/alerts/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 修改企业自定义告警",
        };
    };
    rpc MONITOR_ORG_ALERT_RECORD (MONITOR_ORG_ALERT_RECORD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org-alert-records/{groupId}",
        };
        option (erda.common.openapi) = {
            path: "/api/org-alert-records/{groupId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警记录",
        };
    };
    rpc MONITOR_ORG_ALERT_RECORDS (MONITOR_ORG_ALERT_RECORDS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org-alert-records",
        };
        option (erda.common.openapi) = {
            path: "/api/org-alert-records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警记录列表",
        };
    };
    rpc MONITOR_ORG_ALERT_RECORD_ATTRS (MONITOR_ORG_ALERT_RECORD_ATTRS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org-alert-record-attrs",
        };
        option (erda.common.openapi) = {
            path: "/api/org-alert-record-attrs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警记录属性",
        };
    };
    rpc MONITOR_ORG_ALERT_RECORD_HISTORIES (MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org-alert-records/{groupId}/histories",
        };
        option (erda.common.openapi) = {
            path: "/api/org-alert-records/{groupId}/histories",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业告警记录历史",
        };
    };
    rpc MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE (MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/org-alert-records/{groupId}/issues",
        };
        option (erda.common.openapi) = {
            path: "/api/org-alert-records/{groupId}/issues",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建企业告警记录工单",
        };
    };
    rpc MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE (MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/org-alert-records/{groupId}/issues/{issueId}",
        };
        option (erda.common.openapi) = {
            path: "/api/org-alert-records/{groupId}/issues/{issueId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 修改企业告警记录工单",
        };
    };
    rpc MONITOR_ORG_HOSTS_ALERT_RECORDS (MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/org-hosts-alert-records",
        };
        option (erda.common.openapi) = {
            path: "/api/org-hosts-alert-records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业机器告警记录列表",
        };
    };
    rpc MONITOR_ORG_LOGS_RULE (MONITOR_ORG_LOGS_RULE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志规则详情",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES (MONITOR_ORG_LOGS_RULES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/rules",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志清洗规则列表",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_CREATE (MONITOR_ORG_LOGS_RULES_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/org/logs/rules",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建日志规则",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_DELETE (MONITOR_ORG_LOGS_RULES_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/org/logs/rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除日志规则",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_ENABLE (MONITOR_ORG_LOGS_RULES_ENABLE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/org/logs/rules/{id}/state",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/{id}/state",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 启动日志规则",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_TEMPLATE (MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/rules/templates/{name}",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/templates/{name}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志规则模版详情",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_TEMPLATES (MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/rules/templates",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志规则模版",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_TEST (MONITOR_ORG_LOGS_RULES_TEST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/org/logs/rules/test",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/test",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 测试日志规则",
        };
    };
    rpc MONITOR_ORG_LOGS_RULES_UPDATE (MONITOR_ORG_LOGS_RULES_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/org/logs/rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新日志规则",
        };
    };
    rpc MONITOR_ORG_LOGS_SEARCH (MONITOR_ORG_LOGS_SEARCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/search",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询日志内容",
        };
    };
    rpc MONITOR_ORG_LOGS_STATISTIC (MONITOR_ORG_LOGS_STATISTIC_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/statistic/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/statistic/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 统计企业日志",
        };
    };
    rpc MONITOR_ORG_LOGS_TAGS_TREE (MONITOR_ORG_LOGS_TAGS_TREE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/logs/tags/tree",
        };
        option (erda.common.openapi) = {
            path: "/api/org/logs/tags/tree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志查询所需要的tags",
        };
    };
    rpc MONITOR_ORG_REPORT_HISTORY (MONITOR_ORG_REPORT_HISTORY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/report/histories/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/report/histories/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取报表详情",
        };
    };
    rpc MONITOR_ORG_REPORT_HISTORY_CREATE (MONITOR_ORG_REPORT_HISTORY_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/report/histories",
        };
        option (erda.common.openapi) = {
            path: "/api/report/histories",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建报表详情",
        };
    };
    rpc MONITOR_ORG_REPORT_TASK (MONITOR_ORG_REPORT_TASK_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/org/report/tasks/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/org/report/tasks/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业报表任务详情",
        };
    };
    rpc MONITOR_ORG_REPORT_TASK_CREATE (MONITOR_ORG_REPORT_TASK_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/org/report/tasks",
        };
        option (erda.common.openapi) = {
            path: "/api/org/report/tasks",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建企业报表任务详情",
        };
    };
    rpc MSP_ADDON_LOGS_RULE (MSP_ADDON_LOGS_RULE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/micro-service/logs/rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志规则详情",
        };
    };
    rpc MSP_ADDON_LOGS_RULES (MSP_ADDON_LOGS_RULES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/micro-service/logs/rules",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志清洗规则列表",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_CREATE (MSP_ADDON_LOGS_RULES_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/micro-service/logs/rules",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建日志规则",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_DELETE (MSP_ADDON_LOGS_RULES_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/micro-service/logs/rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除日志规则",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_ENABLE (MSP_ADDON_LOGS_RULES_ENABLE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/micro-service/logs/rules/{id}/state",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/{id}/state",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 启动日志规则",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_TEMPLATE (MSP_ADDON_LOGS_RULES_TEMPLATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/micro-service/logs/rules/templates/{name}",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/templates/{name}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志规则模版详情",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_TEMPLATES (MSP_ADDON_LOGS_RULES_TEMPLATES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/micro-service/logs/rules/templates",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取日志规则模版",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_TEST (MSP_ADDON_LOGS_RULES_TEST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/micro-service/logs/rules/test",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/test",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 测试日志规则",
        };
    };
    rpc MSP_ADDON_LOGS_RULES_UPDATE (MSP_ADDON_LOGS_RULES_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/micro-service/logs/rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/micro-service/logs/rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新日志规则",
        };
    };
    rpc SPOT_DASHBOARD_ALARM_NOTIFIES (SPOT_DASHBOARD_ALARM_NOTIFIES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/alarm/notifies",
        };
        option (erda.common.openapi) = {
            path: "/api/alarm/notifies",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 告警通知列表",
        };
    };
    rpc SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE (SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/alarm/notifies",
        };
        option (erda.common.openapi) = {
            path: "/api/alarm/notifies",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建告警通知",
        };
    };
    rpc SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE (SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/alarm/notifies/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/alarm/notifies/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除告警通知",
        };
    };
    rpc SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT (SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/alarm/notifies/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/alarm/notifies/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 编辑告警通知",
        };
    };
    rpc SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH (SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/alarm/notifies/{id}/switch",
        };
        option (erda.common.openapi) = {
            path: "/api/alarm/notifies/{id}/switch",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 暂停/开启告警通知",
        };
    };
    rpc SPOT_DASHBOARD_ALARM_TYPES (SPOT_DASHBOARD_ALARM_TYPES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/alarm/types",
        };
        option (erda.common.openapi) = {
            path: "/api/alarm/types",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 告警通知类型列表",
        };
    };
    rpc SPOT_DASHBOARD_ALERT_METRICS (SPOT_DASHBOARD_ALERT_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/alert/metrics/{scope}",
        };
        option (erda.common.openapi) = {
            path: "/api/alert/metrics/{scope}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 告警metrics接口",
        };
    };
    rpc SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM (SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/alert/metrics/{scope}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/alert/metrics/{scope}/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 告警metrics曲线图接口",
        };
    };
    rpc SPOT_DASHBOARD_CHART_META (SPOT_DASHBOARD_CHART_META_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/chart/meta",
        };
        option (erda.common.openapi) = {
            path: "/api/chart/meta",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询图表元数据",
        };
    };
    rpc SPOT_DASHBOARD_ORG_METRICS (SPOT_DASHBOARD_ORG_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/metrics/{scope}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/metrics/{scope}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: ORG界面查询监控数据列表数据",
        };
    };
    rpc SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM (SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/metrics/{scope}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/metrics/{scope}/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: ORG界面查询监控数据曲线图数据",
        };
    };
    rpc SPOT_DASHBOARD_ORG_METRICS_QUERY (SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/metrics-query",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/metrics-query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询多云管理平台监控指标数据",
        };
    };
    rpc SPOT_DASHBOARD_ORG_METRICS_QUERY_POST (SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgCenter/metrics-query",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/metrics-query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询多云管理平台监控指标数据",
        };
    };
    rpc SPOT_DASHBOARD_PROJECT_METRICS (SPOT_DASHBOARD_PROJECT_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/project/metrics/{scope}",
        };
        option (erda.common.openapi) = {
            path: "/api/project/metrics/{scope}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: project界面查询监控数据曲线图数据",
        };
    };
    rpc SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM (SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/project/metrics/{scope}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/project/metrics/{scope}/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: PROJECT界面查询监控数据曲线图数据",
        };
    };
    rpc SPOT_DASHBOARD_PROJECT_METRICS_QUERY (SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/project/metrics-query",
        };
        option (erda.common.openapi) = {
            path: "/api/project/metrics-query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: PROJECT界面查询监控数据",
        };
    };
    rpc SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST (SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/project/metrics-query",
        };
        option (erda.common.openapi) = {
            path: "/api/project/metrics-query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: PROJECT界面查询监控数据",
        };
    };
    rpc SPOT_DASHBOARD_RESOURCES_CONTAINERS (SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/resources/containers/{instanceType}",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/resources/containers/{instanceType}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取容器运行的实例列表",
        };
    };
    rpc SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION (SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/resources/containers/group/allocation/{metricType}",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/resources/containers/group/allocation/{metricType}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取组件分配量",
        };
    };
    rpc SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT (SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/resources/containers/group/count",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/resources/containers/group/count",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取组件运行数量",
        };
    };
    rpc SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST (SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cluster/resources/containers/group/list",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/resources/containers/group/list",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取服务列表",
        };
    };
    rpc SPOT_DASHBOARD_RESOURCES_GROUP (SPOT_DASHBOARD_RESOURCES_GROUP_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/resources/group",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/resources/group",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取集群资源分组数据",
        };
    };
    rpc SPOT_DASHBOARD_RESOURCES_TYPES (SPOT_DASHBOARD_RESOURCES_TYPES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cluster/resources/types",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/resources/types",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取集群资源分组类别",
        };
    };
    rpc SPOT_DASHBOARD_RUNTIME_METRICS (SPOT_DASHBOARD_RUNTIME_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtime/metrics/{scope}",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/metrics/{scope}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: RUNTIME界面查询监控数据曲线图数据",
        };
    };
    rpc SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM (SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtime/metrics/{scope}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/metrics/{scope}/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: RUNTIME界面查询监控数据曲线图数据",
        };
    };
    rpc SPOT_DASHBOARD_RUNTIME_METRICS_QUERY (SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtime/metrics-query",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/metrics-query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: RUNTIME界面查询监控数据",
        };
    };
    rpc SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST (SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/runtime/metrics-query",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/metrics-query",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: RUNTIME界面查询监控数据",
        };
    };
    rpc SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM (SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/system/addon/metrics/{scope}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/system/addon/metrics/{scope}/histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查新系统中间件指标的接口",
        };
    };
    rpc SPOT_DASHBOARD_SYSTEM_POD_METRICS (SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/system/pod/metrics",
        };
        option (erda.common.openapi) = {
            path: "/api/system/pod/metrics",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: Pod监控详情的接口",
        };
    };
    rpc SPOT_JVM_PROFILER_FINISH (SPOT_JVM_PROFILER_FINISH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/actions/finish",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/actions/finish",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 结束 profiling",
        };
    };
    rpc SPOT_JVM_PROFILER_HEAP_GC (SPOT_JVM_PROFILER_HEAP_GC_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 启动执行GC",
        };
    };
    rpc SPOT_JVM_PROFILER_HEAP_GC_STATE (SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc/{heapGCID}/state",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-gc/{heapGCID}/state",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取执行GC状态",
        };
    };
    rpc SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST (SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-snapshots",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-snapshots",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取堆内存分析数据",
        };
    };
    rpc SPOT_JVM_PROFILER_HEAP_STAT (SPOT_JVM_PROFILER_HEAP_STAT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-stats",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/heap-stats",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取内存区域使用统计",
        };
    };
    rpc SPOT_JVM_PROFILER_JVM_INFO (SPOT_JVM_PROFILER_JVM_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/jvm-info",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/jvm-info",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取JVM 概览",
        };
    };
    rpc SPOT_JVM_PROFILER_LIST (SPOT_JVM_PROFILER_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取分析列表",
        };
    };
    rpc SPOT_JVM_PROFILER_SERVICES (SPOT_JVM_PROFILER_SERVICES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/services",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/services",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取服务实例列表",
        };
    };
    rpc SPOT_JVM_PROFILER_START (SPOT_JVM_PROFILER_START_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/monitor/jvmprofiler/{addonID}/profiling",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 启动 profiling",
        };
    };
    rpc SPOT_JVM_PROFILER_STATE (SPOT_JVM_PROFILER_STATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/state",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/state",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取 profiling 状态",
        };
    };
    rpc SPOT_JVM_PROFILER_THREAD_DUMP (SPOT_JVM_PROFILER_THREAD_DUMP_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 启动线程dump",
        };
    };
    rpc SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET (SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取线程dump快照结果",
        };
    };
    rpc SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST (SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取线程分析表格数据",
        };
    };
    rpc SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE (SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}/state",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-snapshots/{snapshotsID}/state",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取线程dump状态",
        };
    };
    rpc SPOT_JVM_PROFILER_THREAD_STAT (SPOT_JVM_PROFILER_THREAD_STAT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-stats",
        };
        option (erda.common.openapi) = {
            path: "/api/monitor/jvmprofiler/{addonID}/profiling/{profilingID}/thread-stats",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取线程统计",
        };
    };
    rpc SPOT_ORG_LOGS (SPOT_ORG_LOGS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询ORG日志内容",
        };
    };
    rpc SPOT_ORG_LOGS_DOWNLOAD (SPOT_ORG_LOGS_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgCenter/logs/actions/download",
        };
        option (erda.common.openapi) = {
            path: "/api/orgCenter/logs/actions/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: ORG下载日志内容",
        };
    };
    rpc SPOT_RUNTIME_LOGS (SPOT_RUNTIME_LOGS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtime/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询Runtime日志内容",
        };
    };
    rpc SPOT_RUNTIME_LOGS_DOWNLOAD (SPOT_RUNTIME_LOGS_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtime/logs/actions/download",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/logs/actions/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: Runtime下载日志内容",
        };
    };
    rpc SPOT_RUNTIME_REALTIME_LOGS (SPOT_RUNTIME_REALTIME_LOGS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/runtime/realtime/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/runtime/realtime/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询Runtime实时日志内容",
        };
    };
}
