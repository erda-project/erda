// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.admin;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/admin/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message NoticePublishResponse {
    google.protobuf.Value data = 1;
}
message UserListResponseData {
    repeated google.protobuf.Value users = 1;
}
message ApproveDTO {
    uint64 ID = 1 [json_name = "id"];
    uint64 orgID = 2 [json_name = "orgId"];
    uint64 entityID = 3 [json_name = "entityId"];
    uint64 targetID = 4 [json_name = "targetId"];
    string targetName = 5;
    string type = 6;
    map<string, string> extra = 7;
    string title = 8;
    string priority = 9;
    string desc = 10;
    string status = 11;
    string submitter = 12;
    string approver = 13;
    optional google.protobuf.Timestamp approvalTime = 14;
    google.protobuf.Timestamp createdAt = 15;
    google.protobuf.Timestamp updatedAt = 16;
}
message NoticeListResponseData {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ADMIN_CLUSTER_GET_Request {
    string clusterName = 1; // generated from path variable: clusterName. You should change the proto type if necessary
}
message NoticeCreateRequest {
    string content = 1;
}
message NoticeCreateResponse {
    google.protobuf.Value data = 1;
}
message NoticeListRequest {
    uint64 orgID = 1;
    string content = 2;
    string status = 3;
    uint64 pageNo = 4;
    uint64 pageSize = 5;
}
message ADMIN_NOTICE_PUBLISH_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message UserListResponse {
    google.protobuf.Value data = 1;
}
message ApproveDetailResponse {
    google.protobuf.Value data = 1;
}
message AuditsListRequest {
    bool sys = 1;
    uint64 orgID = 2;
    string startAt = 3;
    string endAt = 4;
    string fDPProjectID = 5;
    repeated string userID = 6;
    int64 pageNo = 7;
    int64 pageSize = 8;
}
message AuditsListResponse {
    optional google.protobuf.Value data = 1;
}
message Notice {
    uint64 ID = 1 [json_name = "id"];
    uint64 orgID = 2;
    string content = 3;
    string status = 4;
    string creator = 5;
    optional google.protobuf.Timestamp createdAt = 6;
    optional google.protobuf.Timestamp updateAt = 7 [json_name = "updatedAt"];
}
message ADMIN_NOTICE_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message NoticeUpdateResponse {
    uint64 data = 1;
}
message UserListRequest {
    string query = 1;
    bool plaintext = 2;
    repeated string userIDs = 3;
}
message ADMIN_APPROVE_GET_Request {
    string approveId = 1; // generated from path variable: approveId. You should change the proto type if necessary
}
message ApproveListRequest {
    uint64 orgID = 1 [json_name = "orgId"];
    repeated string status = 2;
    int64 pageNo = 3;
    int64 pageSize = 4;
    optional int64 ID = 5;
}
message NoticeListResponse {
    google.protobuf.Value data = 1;
}
message ApproveUpdateRequest {
    uint64 orgID = 1 [json_name = "orgId"];
    map<string, string> extra = 2;
    string priority = 3;
    string desc = 4;
    string status = 5;
    string approver = 6;
    string approveId = 7; // generated from path variable: approveId. You should change the proto type if necessary
}
message ApproveUpdateResponse {
    google.protobuf.Value data = 1;
}
message NoticeDeleteResponse {
    google.protobuf.Value data = 1;
}
message UserInfo {
    string ID = 1 [json_name = "id"];
    string name = 2;
    string nick = 3;
    string avatar = 4;
    string phone = 5;
    string email = 6;
    string token = 7;
    string lastLoginAt = 8;
    string pwdExpireAt = 9;
    string source = 10;
}
message PagingApproveDTO {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ClusterListResponse {
    repeated google.protobuf.Value data = 1;
}
message ADMIN_NOTICE_UNPUBLISH_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message NoticeUpdateRequest {
    string content = 1;
    uint64 ID = 2 [json_name = "-"];
}
message ClusterInfo {
    int64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string type = 4;
    string cloudVendor = 5;
    string logo = 6;
    string description = 7;
    string wildcardDomain = 8;
    optional google.protobuf.Value schedConfig = 9 [json_name = "scheduler"];
    optional google.protobuf.Value opsConfig = 10;
    optional google.protobuf.Value system = 11;
    optional google.protobuf.Value manageConfig = 12;
    google.protobuf.Timestamp createdAt = 13;
    google.protobuf.Timestamp updatedAt = 14;
    int64 orgID = 15;
    map<string, string> uRLs = 16 [json_name = "urls"];
    map<string, google.protobuf.Value> settings = 17;
    map<string, string> config = 18;
    string isRelation = 19;
    map<string, string> cM = 20 [json_name = "cm"];
}
message ClusterListRequest {
    int64 orgID = 1;
}
// generate service from openapi spec: admin
service admin {
    option (erda.common.openapi_service) = {
        service: "admin",
    };

    rpc ADMIN_APPROVE_GET (ADMIN_APPROVE_GET_Request) returns (ApproveDetailResponse) {
        option (google.api.http) = {
            get: "/api/approves/{approveId}",
        };
        option (erda.common.openapi) = {
            path: "/api/approves/{approveId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取审批详情",
        };
    };
    rpc ADMIN_APPROVE_LIST (ApproveListRequest) returns (PagingApproveDTO) {
        option (google.api.http) = {
            get: "/api/approves/actions/list-approves",
        };
        option (erda.common.openapi) = {
            path: "/api/approves/actions/list-approves",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询所有审批列表",
        };
    };
    rpc ADMIN_APPROVE_UPDATE (ApproveUpdateRequest) returns (ApproveUpdateResponse) {
        option (google.api.http) = {
            put: "/api/approves/{approveId}",
        };
        option (erda.common.openapi) = {
            path: "/api/approves/{approveId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新审批",
        };
    };
    rpc ADMIN_AUDITS_EXPORT (AuditsListRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/audits/actions/export-excel",
        };
        option (erda.common.openapi) = {
            path: "/api/audits/actions/export-excel",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 导出审计事件",
        };
    };
    rpc ADMIN_AUDITS_LIST (AuditsListRequest) returns (AuditsListResponse) {
        option (google.api.http) = {
            get: "/api/audits/actions/list",
        };
        option (erda.common.openapi) = {
            path: "/api/audits/actions/list",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: List 审计事件",
        };
    };
    rpc ADMIN_CLUSTER_GET (ADMIN_CLUSTER_GET_Request) returns (ClusterInfo) {
        option (google.api.http) = {
            get: "/api/clusters/{clusterName}",
        };
        option (erda.common.openapi) = {
            path: "/api/clusters/{clusterName}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 集群列表",
        };
    };
    rpc ADMIN_CLUSTER_LIST (ClusterListRequest) returns (ClusterListResponse) {
        option (google.api.http) = {
            get: "/api/clusters",
        };
        option (erda.common.openapi) = {
            path: "/api/clusters",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 集群列表",
        };
    };
    rpc ADMIN_NOTICE_CREATE (NoticeCreateRequest) returns (NoticeCreateResponse) {
        option (google.api.http) = {
            post: "/api/notices",
        };
        option (erda.common.openapi) = {
            path: "/api/notices",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建平台公告",
        };
    };
    rpc ADMIN_NOTICE_DELETE (ADMIN_NOTICE_DELETE_Request) returns (NoticeDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/notices/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/notices/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除平台公告",
        };
    };
    rpc ADMIN_NOTICE_LIST (NoticeListRequest) returns (NoticeListResponse) {
        option (google.api.http) = {
            get: "/api/notices",
        };
        option (erda.common.openapi) = {
            path: "/api/notices",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 平台公告列表",
        };
    };
    rpc ADMIN_NOTICE_PUBLISH (ADMIN_NOTICE_PUBLISH_Request) returns (NoticePublishResponse) {
        option (google.api.http) = {
            put: "/api/notices/{id}/actions/publish",
        };
        option (erda.common.openapi) = {
            path: "/api/notices/{id}/actions/publish",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 发布平台公告",
        };
    };
    rpc ADMIN_NOTICE_UNPUBLISH (ADMIN_NOTICE_UNPUBLISH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/notices/{id}/actions/unpublish",
        };
        option (erda.common.openapi) = {
            path: "/api/notices/{id}/actions/unpublish",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 下架平台公告",
        };
    };
    rpc ADMIN_NOTICE_UPDATE (NoticeUpdateRequest) returns (NoticeUpdateResponse) {
        option (google.api.http) = {
            put: "/api/notices/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/notices/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 编辑平台公告",
        };
    };
    rpc ADMIN_USER_LIST (UserListRequest) returns (UserListResponse) {
        option (google.api.http) = {
            get: "/api/users",
        };
        option (erda.common.openapi) = {
            path: "/api/users",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量查询用户",
        };
    };
    rpc ADMIN_USER_SEARCH (UserListRequest) returns (UserListResponse) {
        option (google.api.http) = {
            get: "/api/users/actions/search",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary:search user by page",
        };
    };
}
