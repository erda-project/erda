// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.dop;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/dop/config/manage/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message CONFIG_MANAGE_CONFIG_DEL_Request {
}
message CONFIG_MANAGE_CONFIG_GET_Request {
}
message CONFIG_MANAGE_CONFIG_POST_Request {
}
message CONFIG_MANAGE_NAMESPACE_POST_Request {
}
message CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request {
}
message CONFIG_MANAGE_NAMESPACE_DEL_Request {
}
message CONFIG_MANAGE_NAMESPACE_FIX_Request {
}
message CONFIG_MANAGE_CONFIG_EXPORT_Request {
}
message CONFIG_MANAGE_CONFIG_IMPORT_Request {
}
message CONFIG_MANAGE_CONFIG_PUT_Request {
}
message CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request {
}
// generate service from openapi spec: dop_config_manage
service dop_config_manage {
    option (erda.common.openapi_service) = {
        service: "dop",
    };

    rpc CONFIG_MANAGE_CONFIG_DEL (CONFIG_MANAGE_CONFIG_DEL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/configmanage/configs",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除指定命名空间下的某个配置",
        };
    };
    rpc CONFIG_MANAGE_CONFIG_EXPORT (CONFIG_MANAGE_CONFIG_EXPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/config/actions/export",
        };
        option (erda.common.openapi) = {
            path: "/api/config/actions/export",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "导出配置",
        };
    };
    rpc CONFIG_MANAGE_CONFIG_GET (CONFIG_MANAGE_CONFIG_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/configmanage/configs",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取指定命名空间的所有配置",
        };
    };
    rpc CONFIG_MANAGE_CONFIG_IMPORT (CONFIG_MANAGE_CONFIG_IMPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/config/actions/import",
        };
        option (erda.common.openapi) = {
            path: "/api/config/actions/import",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "导入配置",
        };
    };
    rpc CONFIG_MANAGE_CONFIG_POST (CONFIG_MANAGE_CONFIG_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/configmanage/configs",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 新增指定命名空间下的一个或多个配置",
        };
    };
    rpc CONFIG_MANAGE_CONFIG_PUT (CONFIG_MANAGE_CONFIG_PUT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/configmanage/configs",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 修改指定命名空间下的一个或多个配置",
        };
    };
    rpc CONFIG_MANAGE_DEPLOY_CONFIG_GET (CONFIG_MANAGE_DEPLOY_CONFIG_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/configmanage/configs/deployment",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/configs/deployment",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取指定命名空间的所有部署配置",
        };
    };
    rpc CONFIG_MANAGE_MULTI_NS_CONFIG_GET (CONFIG_MANAGE_MULTI_NS_CONFIG_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/configmanage/multinamespace/configs",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/multinamespace/configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取多个命名空间的所有配置",
        };
    };
    rpc CONFIG_MANAGE_NAMESPACE_DEL (CONFIG_MANAGE_NAMESPACE_DEL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/configmanage/namespace",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/namespace",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除一个配置的命名空间",
        };
    };
    rpc CONFIG_MANAGE_NAMESPACE_FIX (CONFIG_MANAGE_NAMESPACE_FIX_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/config/namespace/fix-namespace-data-err",
        };
        option (erda.common.openapi) = {
            path: "/api/config/namespace/fix-namespace-data-err",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 修复namespace数据缺少",
        };
    };
    rpc CONFIG_MANAGE_NAMESPACE_POST (CONFIG_MANAGE_NAMESPACE_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/configmanage/namespace",
        };
        option (erda.common.openapi) = {
            path: "/api/configmanage/namespace",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 新增一个配置的命名空间",
        };
    };
}
