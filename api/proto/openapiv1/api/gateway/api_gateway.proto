// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.api; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/api/gateway/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message API_GATEWAY_API_CREATE_Request {
}
message API_GATEWAY_API_DELETE_Request {
    string apiId = 1; // generated from path variable: apiId. You should change the proto type if necessary.
}
message API_GATEWAY_API_LIST_Request {
}
message API_GATEWAY_API_UPDATE_Request {
    string apiId = 1; // generated from path variable: apiId. You should change the proto type if necessary.
}
message API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request {
    string category = 1; // generated from path variable: category. You should change the proto type if necessary.
}
message API_GATEWAY_CATEGORY_CREATE_Request {
    string category = 1; // generated from path variable: category. You should change the proto type if necessary.
}
message API_GATEWAY_CATEGORY_DELETE_Request {
    string category = 1; // generated from path variable: category. You should change the proto type if necessary.
    string policyId = 2; // generated from path variable: policyId. You should change the proto type if necessary.
}
message API_GATEWAY_CATEGORY_INFO_Request {
    string category = 1; // generated from path variable: category. You should change the proto type if necessary.
}
message API_GATEWAY_CATEGORY_UPDATE_Request {
    string category = 1; // generated from path variable: category. You should change the proto type if necessary.
    string policyId = 2; // generated from path variable: policyId. You should change the proto type if necessary.
}
message API_GATEWAY_CHECK_COMPAT_Request {
}
message API_GATEWAY_CONSUMER_API_EDIT_Request {
}
message API_GATEWAY_CONSUMER_API_INFO_Request {
}
message API_GATEWAY_CONSUMER_CREATE_Request {
}
message API_GATEWAY_CONSUMER_DELETE_Request {
    string consumerId = 1; // generated from path variable: consumerId. You should change the proto type if necessary.
}
message API_GATEWAY_CONSUMER_EDIT_Request {
}
message API_GATEWAY_CONSUMER_INFO_Request {
    string consumerId = 1; // generated from path variable: consumerId. You should change the proto type if necessary.
}
message API_GATEWAY_CONSUMER_INFO_UPDATE_Request {
    string consumerId = 1; // generated from path variable: consumerId. You should change the proto type if necessary.
}
message API_GATEWAY_CONSUMER_LIST_Request {
}
message API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request {
}
message API_GATEWAY_DOMAIN_INFO_Request {
}
message API_GATEWAY_OPENAPI_CREATE_Request {
}
message API_GATEWAY_OPENAPI_DELETE_Request {
}
message API_GATEWAY_OPENAPI_GET_Request {
}
message API_GATEWAY_OPENAPI_UPDATE_Request {
}
message API_GATEWAY_PUBLISH_AUTHN_GET_Request {
    string apiPublishId = 1; // generated from path variable: apiPublishId. You should change the proto type if necessary.
}
message API_GATEWAY_PUBLISH_SUBSCRIBE_Request {
    string apiPublishId = 1; // generated from path variable: apiPublishId. You should change the proto type if necessary.
}
message API_GATEWAY_PUBLISH_SWAGGER_GET_Request {
    string apiPublishId = 1; // generated from path variable: apiPublishId. You should change the proto type if necessary.
}
message API_GATEWAY_REGISTER_APPS_INFO_Request {
}
message API_GATEWAY_REGISTER_PUBLISH_Request {
    string apiRegisterId = 1; // generated from path variable: apiRegisterId. You should change the proto type if necessary.
}
message API_GATEWAY_REGISTER_Request {
}
message API_GATEWAY_REGISTER_STATUS_GET_Request {
    string apiRegisterId = 1; // generated from path variable: apiRegisterId. You should change the proto type if necessary.
}
message API_GATEWAY_UI_TYPE_INFO_Request {
}
// generate service from openapi spec: api_gateway
service api_gateway {
    option (erda.common.openapi_service) = {
        service: "api",
    };

    rpc API_GATEWAY_API_CREATE (API_GATEWAY_API_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/api",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/api",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建api",
        };
    };
    rpc API_GATEWAY_API_DELETE (API_GATEWAY_API_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/gateway/api/{apiId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/api/{apiId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除api",
        };
    };
    rpc API_GATEWAY_API_LIST (API_GATEWAY_API_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/api",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/api",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取api列表",
        };
    };
    rpc API_GATEWAY_API_UPDATE (API_GATEWAY_API_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/gateway/api/{apiId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/api/{apiId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 修改api配置",
        };
    };
    rpc API_GATEWAY_CATEGORY_CREATE (API_GATEWAY_CATEGORY_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/policies/{category}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/policies/{category}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建限制api调用策略",
        };
    };
    rpc API_GATEWAY_CATEGORY_CREATE_OR_UPDATE (API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/gateway/policies/{category}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/policies/{category}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建或更新策略",
        };
    };
    rpc API_GATEWAY_CATEGORY_DELETE (API_GATEWAY_CATEGORY_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/gateway/policies/{category}/{policyId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/policies/{category}/{policyId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除api调用限制策略",
        };
    };
    rpc API_GATEWAY_CATEGORY_INFO (API_GATEWAY_CATEGORY_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/policies/{category}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/policies/{category}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取api调用限制策略详情",
        };
    };
    rpc API_GATEWAY_CATEGORY_UPDATE (API_GATEWAY_CATEGORY_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/gateway/policies/{category}/{policyId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/policies/{category}/{policyId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 修改api调用限制策略详情",
        };
    };
    rpc API_GATEWAY_CHECK_COMPAT (API_GATEWAY_CHECK_COMPAT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/check-compatibility",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/check-compatibility",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 判断API兼容性",
        };
    };
    rpc API_GATEWAY_CONSUMER_API_EDIT (API_GATEWAY_CONSUMER_API_EDIT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/gateway/consumer-api",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer-api",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 修改调度者各个api的限制策略",
        };
    };
    rpc API_GATEWAY_CONSUMER_API_INFO (API_GATEWAY_CONSUMER_API_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/consumer",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取授权调用者API授权详情",
        };
    };
    rpc API_GATEWAY_CONSUMER_CREATE (API_GATEWAY_CONSUMER_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/consumer",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建授权调用者",
        };
    };
    rpc API_GATEWAY_CONSUMER_DELETE (API_GATEWAY_CONSUMER_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/gateway/consumer/{consumerId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer/{consumerId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除授权调用者",
        };
    };
    rpc API_GATEWAY_CONSUMER_EDIT (API_GATEWAY_CONSUMER_EDIT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/gateway/consumer",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 修改调用者可调用的api授权",
        };
    };
    rpc API_GATEWAY_CONSUMER_INFO (API_GATEWAY_CONSUMER_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/consumer/{consumerId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer/{consumerId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取授权调用者详情",
        };
    };
    rpc API_GATEWAY_CONSUMER_INFO_UPDATE (API_GATEWAY_CONSUMER_INFO_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/gateway/consumer/{consumerId}",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer/{consumerId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新授权调用者详情",
        };
    };
    rpc API_GATEWAY_CONSUMER_LIST (API_GATEWAY_CONSUMER_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/consumer-list",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/consumer-list",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取调用者对api的授权信息列表",
        };
    };
    rpc API_GATEWAY_DOMAIN_CREATE_OR_UPDATE (API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/gateway/domain",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/domain",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新绑定域名信息",
        };
    };
    rpc API_GATEWAY_DOMAIN_INFO (API_GATEWAY_DOMAIN_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/domain",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/domain",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取绑定域名信息",
        };
    };
    rpc API_GATEWAY_OPENAPI_CREATE (API_GATEWAY_OPENAPI_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/openapi/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/openapi/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建openapi",
        };
    };
    rpc API_GATEWAY_OPENAPI_DELETE (API_GATEWAY_OPENAPI_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/gateway/openapi/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/openapi/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除openapi",
        };
    };
    rpc API_GATEWAY_OPENAPI_GET (API_GATEWAY_OPENAPI_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/openapi/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/openapi/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取openapi",
        };
    };
    rpc API_GATEWAY_OPENAPI_UPDATE (API_GATEWAY_OPENAPI_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/gateway/openapi/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/openapi/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新openapi",
        };
    };
    rpc API_GATEWAY_PUBLISH_AUTHN_GET (API_GATEWAY_PUBLISH_AUTHN_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/publications/{apiPublishId}/authn",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/publications/{apiPublishId}/authn",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取认证信息",
        };
    };
    rpc API_GATEWAY_PUBLISH_SUBSCRIBE (API_GATEWAY_PUBLISH_SUBSCRIBE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/publications/{apiPublishId}/subscribe",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/publications/{apiPublishId}/subscribe",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 订阅API",
        };
    };
    rpc API_GATEWAY_PUBLISH_SWAGGER_GET (API_GATEWAY_PUBLISH_SWAGGER_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/publications/{apiPublishId}/swagger",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/publications/{apiPublishId}/swagger",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 下载swagger",
        };
    };
    rpc API_GATEWAY_REGISTER (API_GATEWAY_REGISTER_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/registrations",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/registrations",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 注册API",
        };
    };
    rpc API_GATEWAY_REGISTER_APPS_INFO (API_GATEWAY_REGISTER_APPS_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/register-apps",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/register-apps",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查看已注册的应用服务信息",
        };
    };
    rpc API_GATEWAY_REGISTER_PUBLISH (API_GATEWAY_REGISTER_PUBLISH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gateway/registrations/{apiRegisterId}/publish",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/registrations/{apiRegisterId}/publish",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 发布API",
        };
    };
    rpc API_GATEWAY_REGISTER_STATUS_GET (API_GATEWAY_REGISTER_STATUS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/registrations/{apiRegisterId}/status",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/registrations/{apiRegisterId}/status",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: API注册状态查询",
        };
    };
    rpc API_GATEWAY_UI_TYPE_INFO (API_GATEWAY_UI_TYPE_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gateway/ui-type",
        };
        option (erda.common.openapi) = {
            path: "/api/gateway/ui-type",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取当前的UI类型",
        };
    };
}
