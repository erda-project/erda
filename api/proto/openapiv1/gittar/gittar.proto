// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.gittar; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/gittar/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message Branch {
    string ID = 1 [json_name = "id"];
    string name = 2;
    optional google.protobuf.Value commit = 3;
    bool isDefault = 4;
    bool isProtect = 5;
    bool isMerged = 6;
}
message CheckRun {
    int64 ID = 1 [json_name = "id"];
    string name = 2;
    int64 mrID = 3 [json_name = "mrId"];
    string type = 4;
    string externalID = 5 [json_name = "externalId"];
    string commit = 6;
    string pipelineID = 7 [json_name = "pipelineId"];
    string status = 8;
    string result = 9;
    string output = 10;
    optional google.protobuf.Timestamp completedAt = 11;
    google.protobuf.Timestamp createdAt = 12;
    int64 repoID = 13 [json_name = "repoId"];
    string org = 14; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 15; // generated from path variable: repo. You should change the proto type if necessary.
}
message CheckRuns {
    repeated google.protobuf.Value checkRun = 1 [json_name = "checkrun"];
    string result = 2;
    bool mergable = 3;
}
message Commit {
    string ID = 1 [json_name = "id"];
    optional google.protobuf.Value author = 2 [json_name = "-"];
    optional google.protobuf.Value committer = 3;
    string commitMessage = 4;
    string parentSha = 5;
}
message CreateCheckRunResponse {
    optional google.protobuf.Value data = 1;
}
message DeleteEvent {
    string event = 1;
    string appName = 2;
    string name = 3;
    int64 appID = 4 [json_name = "appId"];
    int64 projectID = 5 [json_name = "projectId"];
}
message Diff {
    int64 filesChanged = 1;
    int64 totalAddition = 2;
    int64 totalDeletion = 3;
    repeated google.protobuf.Value files = 4;
    bool isFinish = 5;
}
message EditActionItem {
    string action = 1;
    string content = 2;
    string path = 3;
    string pathType = 4;
}
message GITTAR_ARCHIVE_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_BLAME_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_BLOB_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_BRANCH_DELETE_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_BRANCH_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_COMMIT_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_COMPARE_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_MERGE_ACTION_POST_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
    string id = 3; // generated from path variable: id. You should change the proto type if necessary.
    string action = 4; // generated from path variable: action. You should change the proto type if necessary.
}
message GITTAR_MERGE_ACTION_QUERY_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
    string id = 3; // generated from path variable: id. You should change the proto type if necessary.
    string action = 4; // generated from path variable: action. You should change the proto type if necessary.
}
message GITTAR_MERGE_GET_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
    string id = 3; // generated from path variable: id. You should change the proto type if necessary.
}
message GITTAR_MR_TEMPLATES_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_RAW_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_REPO_STATS_DEFAULT_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_REPO_STATS_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_TAG_DELETE_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_TAG_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GITTAR_TREE_Request {
    string org = 1; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 2; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarBlameResponse {
    repeated google.protobuf.Value data = 1;
}
message GittarBlobData {
    bool binary = 1;
    string content = 2;
}
message GittarBlobResponse {
    google.protobuf.Value data = 1;
}
message GittarBranchesResponse {
    repeated google.protobuf.Value data = 1;
}
message GittarCommitResponse {
    google.protobuf.Value data = 1;
}
message GittarCommitsRequest {
    string search = 1;
    int64 pageNo = 2;
    int64 pageSize = 3;
    string org = 4; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 5; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarCommitsResponse {
    repeated google.protobuf.Value data = 1;
}
message GittarCompareData {
    string from = 1;
    string to = 2;
    repeated google.protobuf.Value commits = 3;
    google.protobuf.Value diff = 4;
}
message GittarCompareResponse {
    google.protobuf.Value data = 1;
}
message GittarCreateBranchRequest {
    string name = 1;
    string ref = 2;
    string org = 3; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 4; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarCreateBranchResponse {
}
message GittarCreateCommitRequest {
    string message = 1;
    repeated google.protobuf.Value actions = 2;
    string branch = 3;
    string org = 4; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 5; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarCreateCommitResponse {
}
message GittarCreateMergeRequest {
    string title = 1;
    string description = 2;
    string assigneeID = 3 [json_name = "assigneeId"];
    string sourceBranch = 4;
    string targetBranch = 5;
    bool removeSourceBranch = 6;
    string org = 7; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 8; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarCreateMergeResponse {
    optional google.protobuf.Value data = 1;
}
message GittarCreateTagRequest {
    string name = 1;
    string message = 2;
    string ref = 3;
    string org = 4; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 5; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarCreateTagResponse {
}
message GittarDeleteBranchResponse {
}
message GittarDeleteResponse {
    google.protobuf.Value data = 1;
}
message GittarDiffData {
    google.protobuf.Value commit = 1;
    google.protobuf.Value diff = 2;
}
message GittarMergeStatusData {
    bool hasConflict = 1;
    bool isMerged = 2;
    bool hasError = 3;
    string errorMsg = 4;
}
message GittarMergeStatusRequest {
    string sourceBranch = 1;
    string targetBranch = 2;
    string org = 3; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 4; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarMergeStatusResponse {
    google.protobuf.Value data = 1;
}
message GittarMergeTemplatesResponse {
    google.protobuf.Value data = 1;
}
message GittarQueryMrDetailResponse {
    google.protobuf.Value data = 1;
}
message GittarQueryMrRequest {
    string state = 1;
    string query = 2;
    string authorId = 3;
    string assigneeId = 4;
    int64 score = 5;
    int64 page = 6;
    int64 size = 7;
    string targetBranch = 8;
    string sourceBranch = 9;
    string org = 10; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 11; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarQueryMrResponse {
    google.protobuf.Value data = 1;
}
message GittarStatsData {
    int64 commitsCount = 1;
    int64 contributorCount = 2;
    repeated string tags = 3;
    repeated string branches = 4;
    string defaultBranch = 5;
    bool empty = 6;
    string commitID = 7 [json_name = "commitId"];
    int64 mergeRequestCount = 8;
    int64 size = 9;
    string readmeFile = 10;
    int64 applicationID = 11;
    uint64 projectID = 12;
}
message GittarStatsResponse {
    google.protobuf.Value data = 1;
}
message GittarTagsResponse {
    repeated google.protobuf.Value data = 1;
}
message GittarTreeSearchRequest {
    string ref = 1;
    string pattern = 2;
    string org = 3; // generated from path variable: org. You should change the proto type if necessary.
    string repo = 4; // generated from path variable: repo. You should change the proto type if necessary.
}
message GittarTreeSearchResponse {
    repeated google.protobuf.Value data = 1;
}
message MergeRequestInfo {
    int64 id = 1;
    int64 repoMergeId = 2 [json_name = "mergeId"];
    int64 appID = 3 [json_name = "appId"];
    int64 repoID = 4 [json_name = "repoId"];
    string title = 5;
    string authorId = 6;
    optional google.protobuf.Value authorUser = 7;
    string description = 8;
    string assigneeId = 9;
    optional google.protobuf.Value assigneeUser = 10;
    string mergeUserId = 11;
    optional google.protobuf.Value mergeUser = 12;
    string closeUserId = 13;
    optional google.protobuf.Value closeUser = 14;
    string sourceBranch = 15;
    string targetBranch = 16;
    string sourceSha = 17;
    string targetSha = 18;
    bool removeSourceBranch = 19;
    string state = 20;
    bool isCheckRunValid = 21;
    optional google.protobuf.Value targetBranchRule = 22;
    string defaultCommitMessage = 23;
    google.protobuf.Timestamp createdAt = 24;
    optional google.protobuf.Timestamp updatedAt = 25;
    optional google.protobuf.Timestamp closeAt = 26;
    optional google.protobuf.Timestamp mergeAt = 27;
    string link = 28;
    int64 score = 29;
    int64 scoreNum = 30;
    string rebaseBranch = 31;
    string eventName = 32;
    google.protobuf.Value checkRuns = 33;
    string joinTempBranchStatus = 34;
    bool isJoinTempBranch = 35;
}
message MergeTemplatesResponseData {
    string branch = 1;
    string path = 2;
    repeated string names = 3;
}
message QueryMergeRequestsData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message REPO_DELETE_Request {
}
message REPO_GET_Request {
}
message REPO_POST_Request {
}
message REPO_PUT_Request {
}
message Tag {
    string name = 1;
    string ID = 2 [json_name = "id"];
    string object = 3;
    optional google.protobuf.Value tagger = 4;
    string message = 5;
}
// generate service from openapi spec: gittar
service gittar {
    option (erda.common.openapi_service) = {
        service: "gittar",
    };

    rpc GITTAR_ARCHIVE (GITTAR_ARCHIVE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/archive/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/archive/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取压缩包",
        };
    };
    rpc GITTAR_BLAME (GITTAR_BLAME_Request) returns (GittarBlameResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/blame/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/blame/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取文件blame信息",
        };
    };
    rpc GITTAR_BLOB (GITTAR_BLOB_Request) returns (GittarBlobResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/blob/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/blob/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库文件",
        };
    };
    rpc GITTAR_BRANCH (GITTAR_BRANCH_Request) returns (GittarBranchesResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/branches",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/branches",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库分支",
        };
    };
    rpc GITTAR_BRANCH_CREATE (GittarCreateBranchRequest) returns (GittarCreateBranchResponse) {
        option (google.api.http) = {
            post: "/api/gittar/{org}/{repo}/branches",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/branches",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建分支",
        };
    };
    rpc GITTAR_BRANCH_DELETE (GITTAR_BRANCH_DELETE_Request) returns (GittarDeleteBranchResponse) {
        option (google.api.http) = {
            delete: "/api/gittar/{org}/{repo}/branches/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/branches/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除分支",
        };
    };
    rpc GITTAR_CHECK_RUN_CREATE (CheckRun) returns (CreateCheckRunResponse) {
        option (google.api.http) = {
            post: "/api/gittar/{org}/{repo}/check-runs",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/check-runs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建check run纪录",
        };
    };
    rpc GITTAR_CHECK_RUN_QUERY (CheckRun) returns (CreateCheckRunResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/check-runs",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/check-runs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询check run纪录",
        };
    };
    rpc GITTAR_COMMIT (GITTAR_COMMIT_Request) returns (GittarCommitResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/commit/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/commit/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git commit详情",
        };
    };
    rpc GITTAR_COMMITS (GittarCommitsRequest) returns (GittarCommitsResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/commits/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/commits/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git 指定分支,tag的commits",
        };
    };
    rpc GITTAR_COMMITS_CREATE (GittarCreateCommitRequest) returns (GittarCreateCommitResponse) {
        option (google.api.http) = {
            post: "/api/gittar/{org}/{repo}/commits",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/commits",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建git commit",
        };
    };
    rpc GITTAR_COMPARE (GITTAR_COMPARE_Request) returns (GittarCompareResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/compare/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/compare/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 比较两个git分支差异",
        };
    };
    rpc GITTAR_MERGE_ACTION_POST (GITTAR_MERGE_ACTION_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/gittar/{org}/{repo}/merge-requests/{id}/{action}",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-requests/{id}/{action}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: MR变更操作",
        };
    };
    rpc GITTAR_MERGE_ACTION_QUERY (GITTAR_MERGE_ACTION_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/merge-requests/{id}/{action}",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-requests/{id}/{action}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: MR变更操作查询",
        };
    };
    rpc GITTAR_MERGE_CREATE (GittarCreateMergeRequest) returns (GittarCreateMergeResponse) {
        option (google.api.http) = {
            post: "/api/gittar/{org}/{repo}/merge-requests",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-requests",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建MR",
        };
    };
    rpc GITTAR_MERGE_GET (GITTAR_MERGE_GET_Request) returns (GittarQueryMrDetailResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/merge-requests/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-requests/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: MR 详情查看",
        };
    };
    rpc GITTAR_MERGE_QUERY (GittarQueryMrRequest) returns (GittarQueryMrResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/merge-requests",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-requests",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: MR 查询",
        };
    };
    rpc GITTAR_MERGE_STATS (GittarMergeStatusRequest) returns (GittarMergeStatusResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/merge-stats",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-stats",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: mr状态检测",
        };
    };
    rpc GITTAR_MR_TEMPLATES (GITTAR_MR_TEMPLATES_Request) returns (GittarMergeTemplatesResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/merge-templates",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/merge-templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取mr模板信息",
        };
    };
    rpc GITTAR_RAW (GITTAR_RAW_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/raw/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/raw/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库指定路基原始文件",
        };
    };
    rpc GITTAR_REPO_STATS (GITTAR_REPO_STATS_Request) returns (GittarStatsResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/stats/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/stats/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库指定分支信息",
        };
    };
    rpc GITTAR_REPO_STATS_DEFAULT (GITTAR_REPO_STATS_DEFAULT_Request) returns (GittarStatsResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/stats",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/stats",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库默认分支信息",
        };
    };
    rpc GITTAR_TAG (GITTAR_TAG_Request) returns (GittarTagsResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/tags",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/tags",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库tag列表",
        };
    };
    rpc GITTAR_TAG_CREATE (GittarCreateTagRequest) returns (GittarCreateTagResponse) {
        option (google.api.http) = {
            post: "/api/gittar/{org}/{repo}/tags",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/tags",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建tag",
        };
    };
    rpc GITTAR_TAG_DELETE (GITTAR_TAG_DELETE_Request) returns (GittarDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/gittar/{org}/{repo}/tags/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/tags/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除 tag",
        };
    };
    rpc GITTAR_TREE (GITTAR_TREE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/tree/**",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/tree/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取git仓库目录信息",
        };
    };
    rpc GITTAR_TREE_SEARCH (GittarTreeSearchRequest) returns (GittarTreeSearchResponse) {
        option (google.api.http) = {
            get: "/api/gittar/{org}/{repo}/tree-search",
        };
        option (erda.common.openapi) = {
            path: "/api/gittar/{org}/{repo}/tree-search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 搜索文件",
        };
    };
    rpc REPO_DELETE (REPO_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/repo/**",
        };
        option (erda.common.openapi) = {
            path: "/api/repo/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: repo delete api proxy",
        };
    };
    rpc REPO_GET (REPO_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/repo/**",
        };
        option (erda.common.openapi) = {
            path: "/api/repo/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: repo get api proxy",
        };
    };
    rpc REPO_POST (REPO_POST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/repo/**",
        };
        option (erda.common.openapi) = {
            path: "/api/repo/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: repo delete api proxy",
        };
    };
    rpc REPO_PUT (REPO_PUT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/repo/**",
        };
        option (erda.common.openapi) = {
            path: "/api/repo/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: repo delete api proxy",
        };
    };
}
