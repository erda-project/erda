// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.testplatform;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/testplatform/testcase/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message GET_Request {
    string testCaseID = 1; // generated from path variable: testCaseID. You should change the proto type if necessary.
}
message TestCaseBatchCleanFromRecycleBinRequest {
    repeated uint64 testCaseIDs = 1;
}
message TestCaseBatchCleanFromRecycleBinResponse {
}
message TestCaseBatchCopyRequest {
    uint64 copyToTestSetID = 1;
    uint64 projectID = 2;
    repeated uint64 testCaseIDs = 3;
}
message TestCaseBatchCopyResponse {
    repeated uint64 data = 1;
}
message TestCaseBatchUpdateRequest {
    string priority = 1;
    optional bool recycled = 2;
    optional uint64 moveToTestSetID = 3;
    repeated uint64 testCaseIDs = 4;
}
message TestCaseBatchUpdateResponse {
    bool data = 1;
}
message TestCaseCreateRequest {
    uint64 projectID = 1;
    uint64 testSetID = 2;
    string name = 3;
    string preCondition = 4;
    repeated google.protobuf.Value stepAndResults = 5;
    repeated google.protobuf.Value aPIs = 6 [json_name = "apis"];
    string desc = 7;
    string priority = 8;
    repeated uint64 labelIDs = 9;
}
message TestCaseCreateResponse {
    uint64 data = 1;
}
message TestCaseExportRequest {
    google.protobuf.Value testCasePagingRequest = 1;
    string fileType = 2;
    string locale = 3;
}
message TestCaseExportResponse {
    uint64 data = 1;
}
message TestCaseGetResponse {
    optional google.protobuf.Value data = 1;
}
message TestCaseImportRequest {
    uint64 testSetID = 1;
    uint64 projectID = 2;
    string fileType = 3;
}
message TestCaseImportResponse {
    optional google.protobuf.Value data = 1;
}
message TestCasePagingRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    uint64 projectID = 3;
    uint64 testSetID = 4;
    bool noSubTestSet = 5;
    repeated uint64 notInTestPlanIDs = 6;
    repeated uint64 testCaseIDs = 7;
    repeated uint64 notInTestCaseIDs = 8;
    map<uint64, google.protobuf.Value> testSetCaseMap = 9;
    string query = 10;
    repeated string priorities = 11;
    repeated string updaterIDs = 12;
    optional google.protobuf.Duration timestampSecUpdatedAtBegin = 13;
    optional google.protobuf.Duration timestampSecUpdatedAtEnd = 14;
    optional google.protobuf.Timestamp updatedAtBeginInclude = 15;
    optional google.protobuf.Timestamp updatedAtEndInclude = 16;
    repeated uint64 labels = 17;
    bool recycled = 18;
    repeated string orderFields = 19;
    optional bool orderByPriorityAsc = 20;
    optional bool orderByPriorityDesc = 21;
    optional bool orderByUpdaterIDAsc = 22;
    optional bool orderByUpdaterIDDesc = 23;
    optional bool orderByUpdatedAtAsc = 24;
    optional bool orderByUpdatedAtDesc = 25;
    optional bool orderByIDAsc = 26;
    optional bool orderByIDDesc = 27;
    optional bool orderByTestSetIDAsc = 28;
    optional bool orderByTestSetIDDesc = 29;
    optional bool orderByTestSetNameAsc = 30;
    optional bool orderByTestSetNameDesc = 31;
}
message TestCasePagingResponse {
    optional google.protobuf.Value data = 1;
}
message TestCaseStepAndResult {
    string step = 1;
    string result = 2;
}
message TestCaseUpdateRequest {
    uint64 ID = 1 [json_name = "-"];
    string name = 2;
    string priority = 3;
    string preCondition = 4;
    repeated google.protobuf.Value stepAndResults = 5;
    repeated google.protobuf.Value aPIs = 6 [json_name = "apis"];
    string desc = 7;
    repeated uint64 labelIDs = 8;
    string testCaseID = 9; // generated from path variable: testCaseID. You should change the proto type if necessary.
}
message TestCaseUpdateResponse {
}
// generate service from openapi spec: testplatform_testcase
service testplatform_testcase {
    option (erda.common.openapi_service) = {
        service: "testplatform",
    };

    rpc BATCH_CLEAN_FROM_RECYCLE_BIN (TestCaseBatchCleanFromRecycleBinRequest) returns (TestCaseBatchCleanFromRecycleBinResponse) {
        option (google.api.http) = {
            delete: "/api/testcases/actions/batch-clean-from-recycle-bin",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/actions/batch-clean-from-recycle-bin",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 从回收站彻底删除测试用例",
        };
    };
    rpc BATCH_COPY (TestCaseBatchCopyRequest) returns (TestCaseBatchCopyResponse) {
        option (google.api.http) = {
            post: "/api/testcases/actions/batch-copy",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/actions/batch-copy",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 批量复制测试用例到指定测试集",
        };
    };
    rpc BATCH_UPDATE (TestCaseBatchUpdateRequest) returns (TestCaseBatchUpdateResponse) {
        option (google.api.http) = {
            post: "/api/testcases/actions/batch-update",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/actions/batch-update",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 批量更新测试用例",
        };
    };
    rpc CREATE (TestCaseCreateRequest) returns (TestCaseCreateResponse) {
        option (google.api.http) = {
            post: "/api/testcases",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建测试用例",
        };
    };
    rpc EXPORT (TestCaseExportRequest) returns (TestCaseExportResponse) {
        option (google.api.http) = {
            get: "/api/testcases/actions/export",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/actions/export",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导出测试用例",
        };
    };
    rpc GET (GET_Request) returns (TestCaseGetResponse) {
        option (google.api.http) = {
            get: "/api/testcases/{testCaseID}",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/{testCaseID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取指定测试用例详情",
        };
    };
    rpc Import (TestCaseImportRequest) returns (TestCaseImportResponse) {
        option (google.api.http) = {
            post: "/api/testcases/actions/import",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/actions/import",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导入测试用例",
        };
    };
    rpc PAGING (TestCasePagingRequest) returns (TestCasePagingResponse) {
        option (google.api.http) = {
            get: "/api/testcases",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 测试用例分页",
        };
    };
    rpc UPDATE (TestCaseUpdateRequest) returns (TestCaseUpdateResponse) {
        option (google.api.http) = {
            put: "/api/testcases/{testCaseID}",
        };
        option (erda.common.openapi) = {
            path: "/api/testcases/{testCaseID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新测试用例",
        };
    };
}
