// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.testplatform;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/testplatform/testplan/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message AUTOTESTS_TESTPLAN_EXECUTE_Request {
    string testPlanID = 1; // generated from path variable: testPlanID. You should change the proto type if necessary.
}
message AUTOTESTS_TESTPLAN_PAGING_Request {
}
message CANCEL_APITEST_Request {
    string testPlanID = 1; // generated from path variable: testPlanID. You should change the proto type if necessary.
    string pipelineID = 2; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message EXECUTE_APITEST_Request {
    string testPlanID = 1; // generated from path variable: testPlanID. You should change the proto type if necessary.
}
message GENERATE_REPORT_Request {
    string testPlanID = 1; // generated from path variable: testPlanID. You should change the proto type if necessary.
}
message GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary.
}
message TestPlan {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string ownerID = 3;
    repeated string partnerIDs = 4;
    string status = 5;
    uint64 projectID = 6;
    string creatorID = 7;
    string updaterID = 8;
    optional google.protobuf.Timestamp createdAt = 9;
    optional google.protobuf.Timestamp updatedAt = 10;
    string summary = 11;
    optional google.protobuf.Timestamp startedAt = 12;
    optional google.protobuf.Timestamp endedAt = 13;
    google.protobuf.Value relsCount = 14;
    string type = 15;
    string inode = 16;
    bool isArchived = 17;
    uint64 iterationID = 18;
    string iterationName = 19;
}
message TestPlanCreateRequest {
    string name = 1;
    string ownerID = 2;
    repeated string partnerIDs = 3;
    uint64 projectID = 4;
    uint64 iterationID = 5;
    bool isAutoTest = 6;
}
message TestPlanCreateResponse {
    uint64 data = 1;
}
message TestPlanGetResponse {
    google.protobuf.Value data = 1;
}
message TestPlanPagingRequest {
    string name = 1;
    repeated string statuses = 2;
    uint64 projectID = 3;
    repeated uint64 iterationIDs = 4;
    string type = 5;
    optional bool isArchived = 6;
    repeated string ownerIDs = 7;
    repeated string partnerIDs = 8;
    repeated string userIDs = 9;
    uint64 pageNo = 10;
    uint64 pageSize = 11;
}
message TestPlanPagingResponse {
    google.protobuf.Value data = 1;
}
message TestPlanPagingResponseData {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
    repeated string userIDs = 3;
}
message TestPlanRelsCount {
    uint64 total = 1;
    uint64 init = 2;
    uint64 succ = 3;
    uint64 fail = 4;
    uint64 block = 5;
}
message TestPlanReportGenerateResponse {
    optional google.protobuf.Value data = 1;
}
message TestPlanTestSetListResponse {
    repeated google.protobuf.Value data = 1;
}
message TestPlanTestSetsListRequest {
    uint64 testPlanID = 1;
    uint64 parentTestSetID = 2;
}
message TestPlanUpdateRequest {
    string name = 1;
    string ownerID = 2;
    repeated string partnerIDs = 3;
    string status = 4;
    string summary = 5;
    optional google.protobuf.Duration timestampSecStartedAt = 6;
    optional google.protobuf.Duration timestampSecEndedAt = 7;
    uint64 testPlanID = 8 [json_name = "-"];
    optional bool isArchived = 9;
    uint64 iterationID = 10;
}
message TestSet {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    uint64 projectID = 3;
    uint64 parentID = 4;
    bool recycled = 5;
    string directory = 6 [json_name = "directoryName"];
    int64 order = 7;
    string creatorID = 8;
    string updaterID = 9;
}
// generate service from openapi spec: testplatform_testplan
service testplatform_testplan {
    option (erda.common.openapi_service) = {
        service: "testplatform",
    };

    rpc AUTOTESTS_TESTPLAN_EXECUTE (AUTOTESTS_TESTPLAN_EXECUTE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/autotests/testplans/{testPlanID}/actions/execute",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/testplans/{testPlanID}/actions/execute",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: true,
            },
            doc: "自动化测试计划执行",
        };
    };
    rpc AUTOTESTS_TESTPLAN_PAGING (AUTOTESTS_TESTPLAN_PAGING_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/autotests/testplans",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/testplans",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: true,
            },
            doc: "自动化测试计划列表",
        };
    };
    rpc CANCEL_APITEST (CANCEL_APITEST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/testplans/{testPlanID}/actions/cancel-apitest/{pipelineID}",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{testPlanID}/actions/cancel-apitest/{pipelineID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 取消执行接口测试",
        };
    };
    rpc CREATE (TestPlanCreateRequest) returns (TestPlanCreateResponse) {
        option (google.api.http) = {
            post: "/api/testplans",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建测试计划",
        };
    };
    rpc DELETE (DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/testplans/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除测试计划",
        };
    };
    rpc EXECUTE_APITEST (EXECUTE_APITEST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/testplans/{testPlanID}/actions/execute-apitest",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{testPlanID}/actions/execute-apitest",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 执行接口测试",
        };
    };
    rpc GENERATE_REPORT (GENERATE_REPORT_Request) returns (TestPlanReportGenerateResponse) {
        option (google.api.http) = {
            get: "/api/testplans/{testPlanID}/actions/generate-report",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{testPlanID}/actions/generate-report",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 生成测试计划测试报告",
        };
    };
    rpc GET (GET_Request) returns (TestPlanGetResponse) {
        option (google.api.http) = {
            get: "/api/testplans/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 测试计划详情",
        };
    };
    rpc LIST (TestPlanPagingRequest) returns (TestPlanPagingResponse) {
        option (google.api.http) = {
            get: "/api/testplans",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 测试计划列表",
        };
    };
    rpc LIST_TESTSETS (TestPlanTestSetsListRequest) returns (TestPlanTestSetListResponse) {
        option (google.api.http) = {
            get: "/api/testplans/{testPlanID}/testsets",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{testPlanID}/testsets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取测试计划下的测试集列表",
        };
    };
    rpc UPDATE (TestPlanUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/testplans/{testPlanID}",
        };
        option (erda.common.openapi) = {
            path: "/api/testplans/{testPlanID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新测试计划",
        };
    };
}
