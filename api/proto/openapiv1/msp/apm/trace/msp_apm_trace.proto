// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.msp; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/msp/apm/trace/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message GET_SPANS_Request {
    string traceID = 1; // generated from path variable: traceID. You should change the proto type if necessary.
}
message GET_TRACE_CONDITIONS_LIST_Request {
}
message GET_TRACE_DEBUG_HISTORIES_Request {
    string requestId = 1; // generated from path variable: requestId. You should change the proto type if necessary.
}
message GET_TRACE_DEBUG_HISTORY_STATUS_Request {
    string requestId = 1; // generated from path variable: requestId. You should change the proto type if necessary.
}
message GET_TRACE_LIST_Request {
}
message LIST_TRACE_DEBUG_HISTORIES_Request {
}
message POST_TRACE_DEBUG_HISTORIES_Request {
}
message PUT_TRACE_DEBUG_HISTORY_STOP_Request {
    string requestId = 1; // generated from path variable: requestId. You should change the proto type if necessary.
}
// generate service from openapi spec: msp_apm_trace
service msp_apm_trace {
    option (erda.common.openapi_service) = {
        service: "msp",
    };

    rpc GET_SPANS (GET_SPANS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/msp/apm/traces/{traceID}/spans",
        };
        option (erda.common.openapi) = {
            path: "/api/msp/apm/traces/{traceID}/spans",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Query spans by traceID.",
        };
    };
    rpc GET_TRACE_CONDITIONS_LIST (GET_TRACE_CONDITIONS_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/msp/apm/trace/conditions",
        };
        option (erda.common.openapi) = {
            path: "/api/msp/apm/trace/conditions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Query apm traces Conditions.",
        };
    };
    rpc GET_TRACE_DEBUG_HISTORIES (GET_TRACE_DEBUG_HISTORIES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/trace-requests/{requestId}",
        };
        option (erda.common.openapi) = {
            path: "/api/trace-requests/{requestId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Query trace debug info.",
        };
    };
    rpc GET_TRACE_DEBUG_HISTORY_STATUS (GET_TRACE_DEBUG_HISTORY_STATUS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/trace-requests/{requestId}/status",
        };
        option (erda.common.openapi) = {
            path: "/api/trace-requests/{requestId}/status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Query trace debug history status.",
        };
    };
    rpc GET_TRACE_LIST (GET_TRACE_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/msp/apm/traces",
        };
        option (erda.common.openapi) = {
            path: "/api/msp/apm/traces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Query apm traces.",
        };
    };
    rpc LIST_TRACE_DEBUG_HISTORIES (LIST_TRACE_DEBUG_HISTORIES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/trace-requests",
        };
        option (erda.common.openapi) = {
            path: "/api/trace-requests",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "Query trace debug histories.",
        };
    };
    rpc POST_TRACE_DEBUG_HISTORIES (POST_TRACE_DEBUG_HISTORIES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/trace-requests",
        };
        option (erda.common.openapi) = {
            path: "/api/trace-requests",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "send trace debug request",
        };
    };
    rpc PUT_TRACE_DEBUG_HISTORY_STOP (PUT_TRACE_DEBUG_HISTORY_STOP_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/trace-requests/{requestId}/actions/cancel",
        };
        option (erda.common.openapi) = {
            path: "/api/trace-requests/{requestId}/actions/cancel",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "stop trace debug request.",
        };
    };
}
