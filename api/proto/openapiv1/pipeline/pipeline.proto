// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.pipeline; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/pipeline/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message ActionCreateRequest {
    string name = 1;
    string version = 2;
    string specSrc = 3;
    string imageSrc = 4;
}
message ActionCreateResponse {
    optional google.protobuf.Value data = 1;
}
message ActionDetailResponse {
    google.protobuf.Value data = 1;
}
message ActionListResponse {
    google.protobuf.Value data = 1;
}
message ActionQueryResponse {
    repeated google.protobuf.Value data = 1;
}
message ActionSetStatusResponse {
}
message CI_PING_Request {
}
message CommitDetail {
    string commitID = 1;
    string repo = 2;
    string repoAbbr = 3;
    string author = 4;
    string email = 5;
    optional google.protobuf.Timestamp time = 6;
    string comment = 7;
}
message PIPELINE_ACTIONS_DETAIL_Request {
    string actionType = 1; // generated from path variable: actionType. You should change the proto type if necessary.
}
message PIPELINE_ACTIONS_LIST_Request {
}
message PIPELINE_BRANCHES_ALL_VALID_Request {
}
message PIPELINE_CANCEL_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message PIPELINE_CONFIG_NAMESPACE_Request {
}
message PIPELINE_CRON_LIST_Request {
}
message PIPELINE_CRON_START_Request {
    string cronID = 1; // generated from path variable: cronID. You should change the proto type if necessary.
}
message PIPELINE_CRON_STOP_Request {
    string cronID = 1; // generated from path variable: cronID. You should change the proto type if necessary.
}
message PIPELINE_DETAIL_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message PIPELINE_PUBLIC_ACTIONS_LIST_BY_NAME_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary.
}
message PIPELINE_PUBLIC_ACTIONS_LIST_Request {
}
message PIPELINE_PUBLIC_ACTION_REPUBLISH_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary.
    string version = 2; // generated from path variable: version. You should change the proto type if necessary.
}
message PIPELINE_PUBLIC_ACTION_SET_DEFAULT_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary.
    string version = 2; // generated from path variable: version. You should change the proto type if necessary.
}
message PIPELINE_PUBLIC_ACTION_UNSET_DEFAULT_Request {
    string name = 1; // generated from path variable: name. You should change the proto type if necessary.
    string version = 2; // generated from path variable: version. You should change the proto type if necessary.
}
message PIPELINE_RERUN_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message PIPELINE_RUN_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message PIPELINE_SNIPPET_QUERY_OUTPUTS_Request {
}
message PIPELINE_TASK_GET_BOOTSTRAP_INFO_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary.
    string taskID = 2; // generated from path variable: taskID. You should change the proto type if necessary.
}
message PipelineAppAllValidBranchWorkspaceResponse {
    repeated google.protobuf.Value data = 1;
}
message PipelineBatchCreateRequest {
    uint64 appID = 1;
    string branch = 2;
    string source = 3;
    repeated string batchPipelineYmlPaths = 4;
    bool autoRun = 5;
    repeated string callbackURLs = 6;
    string userID = 7;
}
message PipelineBatchCreateResponse {
    map<string, google.protobuf.Value> data = 1;
}
message PipelineCallbackRequest {
    string type = 1;
    repeated uint32 data = 2;
}
message PipelineCallbackResponse {
}
message PipelineCancelResponse {
}
message PipelineConfigNamespacesFetchResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineCreateRequest {
    uint64 appID = 1;
    string branch = 2;
    string source = 3;
    string pipelineYmlSource = 4;
    string pipelineYmlName = 5;
    string pipelineYmlContent = 6;
    bool autoRun = 7;
    repeated string callbackURLs = 8;
    string userID = 9;
    bool isCronTriggered = 10;
}
message PipelineCreateRequestV2 {
    string pipelineYml = 1;
    string clusterName = 2;
    string namespace = 3;
    string pipelineYmlName = 4;
    string pipelineSource = 5;
    map<string, string> labels = 6;
    map<string, string> normalLabels = 7;
    map<string, string> envs = 8;
    repeated string configManageNamespaces = 9;
    bool autoRun = 10;
    bool forceRun = 11;
    bool autoRunAtOnce = 12;
    bool autoStartCron = 13;
    optional google.protobuf.Timestamp cronStartFrom = 14;
    google.protobuf.Value gC = 15 [json_name = "gc"];
    repeated google.protobuf.Value runParams = 16;
    optional google.protobuf.Value bindQueue = 17 [json_name = "-"];
    string definitionID = 18;
    map<string, string> secrets = 19;
    optional google.protobuf.Value ownerUser = 20;
}
message PipelineCreateResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineCronDTO {
    uint64 ID = 1 [json_name = "id"];
    google.protobuf.Timestamp timeCreated = 2;
    google.protobuf.Timestamp timeUpdated = 3;
    uint64 applicationID = 4;
    string branch = 5;
    string cronExpr = 6;
    optional google.protobuf.Timestamp cronStartTime = 7;
    string pipelineYmlName = 8;
    uint64 basePipelineID = 9;
    optional bool enable = 10;
    string pipelineYml = 11;
    repeated string configManageNamespaces = 12;
    map<string, string> secrets = 13;
    string userID = 14;
    uint64 orgID = 15;
    string pipelineDefinitionID = 16;
    string pipelineSource = 17;
    string clusterName = 18;
}
message PipelineCronListResponse {
    repeated google.protobuf.Value data = 1;
}
message PipelineCronStartResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineCronStopResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineDBGCItem {
    optional bool needArchive = 1;
    optional uint64 tTLSecond = 2 [json_name = "ttlSecond"];
}
message PipelineDTO {
    uint64 ID = 1 [json_name = "id"];
    optional uint64 cronID = 2;
    uint64 orgID = 3;
    string orgName = 4;
    uint64 projectID = 5;
    string projectName = 6;
    uint64 applicationID = 7;
    string applicationName = 8;
    string branch = 9;
    string commit = 10;
    google.protobuf.Value commitDetail = 11;
    map<string, string> labels = 12;
    string source = 13;
    string ymlSource = 14;
    string ymlName = 15;
    string ymlNameV1 = 16;
    string ymlContent = 17;
    google.protobuf.Value extra = 18;
    string namespace = 19;
    string type = 20;
    string triggerMode = 21;
    string clusterName = 22;
    string status = 23;
    double progress = 24;
    int64 costTimeSec = 25;
    optional google.protobuf.Timestamp timeBegin = 26;
    optional google.protobuf.Timestamp timeEnd = 27;
    optional google.protobuf.Timestamp timeCreated = 28;
    optional google.protobuf.Timestamp timeUpdated = 29;
}
message PipelineDatabaseGC {
    google.protobuf.Value analyzed = 1;
    google.protobuf.Value finished = 2;
}
message PipelineDetailResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineExtra {
    string diceWorkspace = 1;
    string pipelineYmlNameV1 = 2;
    optional google.protobuf.Value submitUser = 3;
    optional google.protobuf.Value runUser = 4;
    optional google.protobuf.Value cancelUser = 5;
    optional google.protobuf.Value ownerUser = 6;
    string cronExpr = 7;
    optional google.protobuf.Timestamp cronTriggerTime = 8;
    optional google.protobuf.Value showMessage = 9;
    repeated string configManageNamespaces = 10 [json_name = "configmanageNamespaces"];
    bool isAutoRun = 11;
    repeated string callbackURLs = 12;
}
message PipelineGC {
    google.protobuf.Value resourceGC = 1;
    google.protobuf.Value databaseGC = 2;
}
message PipelineInvokedCombo {
    string branch = 1;
    string source = 2;
    string ymlName = 3;
    repeated string pagingYmlNames = 4;
    uint64 pipelineID = 5;
    string commit = 6;
    string status = 7;
    optional google.protobuf.Timestamp timeCreated = 8;
    optional google.protobuf.Value cancelUser = 9;
    string triggerMode = 10;
    string workspace = 11;
}
message PipelineInvokedComboRequest {
    uint64 appID = 1;
    string branches = 2;
    string sources = 3;
    string ymlNames = 4;
}
message PipelineInvokedComboResponse {
    repeated google.protobuf.Value data = 1;
}
message PipelineOperateRequest {
    repeated google.protobuf.Value taskOperates = 1;
    string pipelineID = 2; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message PipelineOperateResponse {
}
message PipelinePageListRequest {
    string commaBranches = 1;
    string commaSources = 2;
    string commaYmlNames = 3;
    string commaStatuses = 4;
    uint64 appID = 5;
    repeated string branches = 6;
    repeated string sources = 7;
    bool allSources = 8;
    repeated string ymlNames = 9;
    repeated string statuses = 10;
    repeated string notStatuses = 11;
    repeated string triggerModes = 12;
    repeated string clusterNames = 13;
    bool includeSnippet = 14;
    google.protobuf.Timestamp startTimeBegin = 15;
    int64 startTimeBeginTimestamp = 16;
    string startTimeBeginCST = 17;
    google.protobuf.Timestamp endTimeBegin = 18;
    int64 endTimeBeginTimestamp = 19;
    string endTimeBeginCST = 20;
    google.protobuf.Timestamp startTimeCreated = 21;
    int64 startTimeCreatedTimestamp = 22;
    google.protobuf.Timestamp endTimeCreated = 23;
    int64 endTimeCreatedTimestamp = 24;
    string mustMatchLabelsJSON = 25;
    repeated string mustMatchLabelsQueryParams = 26;
    map<string, google.protobuf.Value> mustMatchLabels = 27;
    string anyMatchLabelsJSON = 28;
    repeated string anyMatchLabelsQueryParams = 29;
    map<string, google.protobuf.Value> anyMatchLabels = 30;
    int64 pageNum = 31;
    int64 pageNo = 32;
    int64 pageSize = 33;
    bool largePageSize = 34;
    bool countOnly = 35;
    repeated string selectCols = 36;
    repeated string ascCols = 37;
    repeated string descCols = 38;
    uint64 startIDGt = 39;
    uint64 endIDLt = 40;
    optional google.protobuf.Value pipelineDefinitionRequest = 41;
    string pipelineDefinitionRequestJSONBase64 = 42;
}
message PipelinePageListResponse {
    optional google.protobuf.Value data = 1;
}
message PipelinePriorityBatchUpgradeRequest {
    repeated uint64 pipelineIDsOrderByPriorityFromHighToLow = 1;
    uint64 queueID = 2;
}
message PipelineRerunFailedResponse {
    optional google.protobuf.Value data = 1;
    string pipelineID = 2; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message PipelineRerunResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineResourceGC {
    optional uint64 successTTLSecond = 1;
    optional uint64 failedTTLSecond = 2;
}
message PipelineRunParam {
    string name = 1;
    google.protobuf.Value value = 2;
}
message PipelineRunResponse {
}
message PipelineTaskOperateRequest {
    uint64 taskID = 1;
    string taskAlias = 2;
    optional bool disable = 3;
    optional bool pause = 4;
}
message PipelineYmlParseGraphRequest {
    string pipelineYmlContent = 1;
    map<string, string> globalSnippetConfigLabels = 2;
    optional google.protobuf.Value snippetConfig = 3;
}
message PipelineYmlParseGraphResponse {
    optional google.protobuf.Value data = 1;
}
message ValidBranch {
    string name = 1;
    bool isProtect = 2;
    bool needApproval = 3;
    bool isTriggerPipeline = 4;
    string workspace = 5;
    string artifactWorkspace = 6;
}
// generate service from openapi spec: pipeline
service pipeline {
    option (erda.common.openapi_service) = {
        service: "pipeline",
    };

    rpc CI_PING (CI_PING_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/pipelines/ping",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/ping",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: ping 健康检查接口",
        };
    };
    rpc PIPELINE_ACTIONS_DETAIL (PIPELINE_ACTIONS_DETAIL_Request) returns (ActionDetailResponse) {
        option (google.api.http) = {
            get: "/api/actions/{actionType}",
        };
        option (erda.common.openapi) = {
            path: "/api/actions/{actionType}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取单个 action 类型详情",
        };
    };
    rpc PIPELINE_ACTIONS_LIST (PIPELINE_ACTIONS_LIST_Request) returns (ActionListResponse) {
        option (google.api.http) = {
            get: "/api/actions",
        };
        option (erda.common.openapi) = {
            path: "/api/actions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取 action 列表",
        };
    };
    rpc PIPELINE_BATCH_CREATE (PipelineBatchCreateRequest) returns (PipelineBatchCreateResponse) {
        option (google.api.http) = {
            post: "/api/pipelines/actions/batch-create",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/actions/batch-create",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量创建 pipeline",
        };
    };
    rpc PIPELINE_BRANCHES_ALL_VALID (PIPELINE_BRANCHES_ALL_VALID_Request) returns (PipelineAppAllValidBranchWorkspaceResponse) {
        option (google.api.http) = {
            get: "/api/pipelines/actions/app-all-valid-branch-workspaces",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/actions/app-all-valid-branch-workspaces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取应用下所有符合 gitflow 规范的分支列表，以及每个分支对应的 workspace",
        };
    };
    rpc PIPELINE_CANCEL (PIPELINE_CANCEL_Request) returns (PipelineCancelResponse) {
        option (google.api.http) = {
            post: "/api/pipelines/{pipelineID}/actions/cancel",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}/actions/cancel",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 取消 pipeline",
        };
    };
    rpc PIPELINE_CONFIG_NAMESPACE (PIPELINE_CONFIG_NAMESPACE_Request) returns (PipelineConfigNamespacesFetchResponse) {
        option (google.api.http) = {
            get: "/api/pipelines/actions/fetch-config-namespaces",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/actions/fetch-config-namespaces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取应用级别的配置的命名空间",
        };
    };
    rpc PIPELINE_CREATE (PipelineCreateRequest) returns (PipelineCreateResponse) {
        option (google.api.http) = {
            post: "/api/pipelines",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建 pipeline",
        };
    };
    rpc PIPELINE_CRON_LIST (PIPELINE_CRON_LIST_Request) returns (PipelineCronListResponse) {
        option (google.api.http) = {
            get: "/api/pipeline-crons",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-crons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 定时 pipeline 列表",
        };
    };
    rpc PIPELINE_CRON_START (PIPELINE_CRON_START_Request) returns (PipelineCronStartResponse) {
        option (google.api.http) = {
            put: "/api/pipeline-crons/{cronID}/actions/start",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-crons/{cronID}/actions/start",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 开始定时 pipeline",
        };
    };
    rpc PIPELINE_CRON_STOP (PIPELINE_CRON_STOP_Request) returns (PipelineCronStopResponse) {
        option (google.api.http) = {
            put: "/api/pipeline-crons/{cronID}/actions/stop",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-crons/{cronID}/actions/stop",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 停止定时 pipeline",
        };
    };
    rpc PIPELINE_DETAIL (PIPELINE_DETAIL_Request) returns (PipelineDetailResponse) {
        option (google.api.http) = {
            get: "/api/pipelines/{pipelineID}",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 详情",
        };
    };
    rpc PIPELINE_INVOKED_COMBO (PipelineInvokedComboRequest) returns (PipelineInvokedComboResponse) {
        option (google.api.http) = {
            get: "/api/pipelines/actions/app-invoked-combos",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/actions/app-invoked-combos",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 侧边栏 combo",
        };
    };
    rpc PIPELINE_LIST (PipelinePageListRequest) returns (PipelinePageListResponse) {
        option (google.api.http) = {
            get: "/api/pipelines",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 列表",
        };
    };
    rpc PIPELINE_OPERATE (PipelineOperateRequest) returns (PipelineOperateResponse) {
        option (google.api.http) = {
            put: "/api/pipelines/{pipelineID}",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 操作 pipeline",
        };
    };
    rpc PIPELINE_PLATFORM_CALLBACK (PipelineCallbackRequest) returns (PipelineCallbackResponse) {
        option (google.api.http) = {
            post: "/api/pipelines/actions/callback",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/actions/callback",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 所有回调统一接口",
        };
    };
    rpc PIPELINE_PUBLIC_ACTIONS_LIST (PIPELINE_PUBLIC_ACTIONS_LIST_Request) returns (ActionQueryResponse) {
        option (google.api.http) = {
            get: "/api/public-actions",
        };
        option (erda.common.openapi) = {
            path: "/api/public-actions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取action市场有效的action列表",
        };
    };
    rpc PIPELINE_PUBLIC_ACTIONS_LIST_BY_NAME (PIPELINE_PUBLIC_ACTIONS_LIST_BY_NAME_Request) returns (ActionQueryResponse) {
        option (google.api.http) = {
            get: "/api/public-actions/{name}",
        };
        option (erda.common.openapi) = {
            path: "/api/public-actions/{name}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据action名字获取历史action版本",
        };
    };
    rpc PIPELINE_PUBLIC_ACTION_PUBLISH (ActionCreateRequest) returns (ActionCreateResponse) {
        option (google.api.http) = {
            post: "/api/public-actions",
        };
        option (erda.common.openapi) = {
            path: "/api/public-actions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 发布 action 列表",
        };
    };
    rpc PIPELINE_PUBLIC_ACTION_REPUBLISH (PIPELINE_PUBLIC_ACTION_REPUBLISH_Request) returns (ActionSetStatusResponse) {
        option (google.api.http) = {
            post: "/api/public-actions/{name}/{version}/actions/republish",
        };
        option (erda.common.openapi) = {
            path: "/api/public-actions/{name}/{version}/actions/republish",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 对发布失败的action重新发布",
        };
    };
    rpc PIPELINE_PUBLIC_ACTION_SET_DEFAULT (PIPELINE_PUBLIC_ACTION_SET_DEFAULT_Request) returns (ActionSetStatusResponse) {
        option (google.api.http) = {
            post: "/api/public-actions/{name}/{version}/actions/set-default",
        };
        option (erda.common.openapi) = {
            path: "/api/public-actions/{name}/{version}/actions/set-default",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 设置指定版本action为默认版本",
        };
    };
    rpc PIPELINE_PUBLIC_ACTION_UNSET_DEFAULT (PIPELINE_PUBLIC_ACTION_UNSET_DEFAULT_Request) returns (ActionSetStatusResponse) {
        option (google.api.http) = {
            post: "/api/public-actions/{name}/{version}/actions/unset-default",
        };
        option (erda.common.openapi) = {
            path: "/api/public-actions/{name}/{version}/actions/unset-default",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 取消设置指定版本action的默认状态",
        };
    };
    rpc PIPELINE_QUEUE_BATCH_UPGRADE_PRIORITY (PipelinePriorityBatchUpgradeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/pipeline-queues/actions/batch-upgrade-pipeline-priority",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-queues/actions/batch-upgrade-pipeline-priority",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量更新 pipeline 队列优先级",
        };
    };
    rpc PIPELINE_RERUN (PIPELINE_RERUN_Request) returns (PipelineRerunResponse) {
        option (google.api.http) = {
            post: "/api/pipelines/{pipelineID}/actions/rerun",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}/actions/rerun",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 全流程重试",
        };
    };
    rpc PIPELINE_RERUN_FAILED (PipelineRerunFailedResponse) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/pipelines/{pipelineID}/actions/rerun-failed",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}/actions/rerun-failed",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 从失败节点处开始重试",
        };
    };
    rpc PIPELINE_RUN (PIPELINE_RUN_Request) returns (PipelineRunResponse) {
        option (google.api.http) = {
            post: "/api/pipelines/{pipelineID}/actions/run",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}/actions/run",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 开始 pipeline",
        };
    };
    rpc PIPELINE_SNIPPET_QUERY_OUTPUTS (PIPELINE_SNIPPET_QUERY_OUTPUTS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/pipeline-snippets/actions/query-details",
        };
        option (erda.common.openapi) = {
            path: "/api/pipeline-snippets/actions/query-details",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 用于查询 snippet 的 detail, 包括 params 和 outputs",
        };
    };
    rpc PIPELINE_TASK_GET_BOOTSTRAP_INFO (PIPELINE_TASK_GET_BOOTSTRAP_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/pipelines/{pipelineID}/tasks/{taskID}/actions/get-bootstrap-info",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/{pipelineID}/tasks/{taskID}/actions/get-bootstrap-info",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: task 调用 pipeline 获取启动参数",
        };
    };
    rpc PIPELINE_V2_CREATE (PipelineCreateRequestV2) returns (PipelineCreateResponse) {
        option (google.api.http) = {
            post: "/api/v2/pipelines",
        };
        option (erda.common.openapi) = {
            path: "/api/v2/pipelines",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: v2 版本创建 pipeline",
        };
    };
    rpc PIPELINE_YML_GRAPH (PipelineYmlParseGraphRequest) returns (PipelineYmlParseGraphResponse) {
        option (google.api.http) = {
            post: "/api/pipelines/actions/pipeline-yml-graph",
        };
        option (erda.common.openapi) = {
            path: "/api/pipelines/actions/pipeline-yml-graph",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline yml 图形化展示接口",
        };
    };
}
