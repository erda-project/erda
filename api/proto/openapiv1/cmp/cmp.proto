// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.cmp;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/cmp/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message AddNodesData {
    uint64 recordID = 1;
}
message AddNodesRequest {
    string clusterName = 1;
    uint64 orgID = 2;
    repeated string hosts = 3;
    repeated string labels = 4;
    int64 port = 5;
    string user = 6;
    string password = 7;
    string sudoHasPassword = 8;
    string dataDiskDevice = 9;
    string source = 10;
    string detail = 11;
}
message AddNodesResponse {
    google.protobuf.Value data = 1;
}
message AddonConfigRequest {
    string addonID = 1;
}
message AddonConfigResponse {
    optional google.protobuf.Value data = 1;
}
message AddonConfigUpdateRequest {
    google.protobuf.Value addonOpsBaseRequest = 1;
    map<string, string> config = 2;
}
message AddonConfigUpdateResponse {
    bool success = 1;
    google.protobuf.Value error = 2 [json_name = "err"];
}
message AddonOpsBaseRequest {
    string clusterName = 1;
    string projectName = 2;
    string projectID = 3;
    string addonID = 4;
    string addonName = 5;
}
message AddonScaleRequest {
    google.protobuf.Value addonOpsBaseRequest = 1;
    double cPU = 2 [json_name = "cpu"];
    uint64 mem = 3;
    int64 nodes = 4;
}
message AddonScaleResponse {
    bool success = 1;
    google.protobuf.Value error = 2 [json_name = "err"];
}
message ApiGatewayInfo {
    string ID = 1 [json_name = "instanceID"];
    string name = 2;
}
message AutoRenewCloudResourceEcsRequest {
    string vendor = 1;
    string region = 2;
    repeated string instanceIds = 3;
    int64 duration = 4;
    bool switch = 5;
}
message BatchUpgradeEdgeClusterRequest {
    repeated google.protobuf.Value clusters = 1;
}
message BatchUpgradeEdgeClusterResponse {
}
message CMP_ALERT_CONDITIONS_Request {
}
message CMP_ALERT_CONDITIONS_VALUE_Request {
}
message CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request {
}
message CMP_CLOUD_RESOURCE_ECS_TREND_Request {
}
message CMP_CLOUD_RESOURCE_LIST_Request {
}
message CMP_CLOUD_RESOURCE_Request {
}
message CMP_CLUSTER_IMPORT_Request {
}
message CMP_CLUSTER_INFO_Request {
}
message CMP_CLUSTER_INIT_COMMAND_Request {
}
message CMP_CLUSTER_INIT_RETRY_Request {
}
message CMP_CLUSTER_PREVIEW_Request {
}
message CMP_CREDENTIAL_ACCESSKEY_CREATE_Request {
}
message CMP_CREDENTIAL_ACCESSKEY_GET_Request {
}
message CMP_CREDENTIAL_ACCESSKEY_RESET_Request {
}
message CMP_K8S_CLUSTERS_Request {
}
message CMP_NODE_LABELS_LIST_Request {
}
message CMP_NODE_LOGS_Request {
}
message CMP_RECORDS_Request {
}
message CMP_RECORDTYPES_Request {
}
message CMP_RESOURCE_OVERVIEW_CLASS_Request {
}
message CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request {
}
message CMP_RESOURCE_OVERVIEW_GAUGE_Request {
}
message CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request {
}
message CMP_RESOURCE_OVERVIEW_REPORT_Request {
}
message CMP_STEVE_CREATE_Request {
}
message CMP_STEVE_DELETE_Request {
}
message CMP_STEVE_GET_Request {
}
message CMP_STEVE_PATCH_Request {
}
message CMP_STEVE_UPDATE_Request {
}
message CMP_STEVE_WS_Request {
}
message CloudAddonResourceDeleteRequest {
    string source = 1;
    string recordID = 2;
    string projectID = 3;
    string addonID = 4;
    string instanceID = 5;
    string vendor = 6;
    string region = 7;
}
message CloudAddonResourceDeleteRespnse {
}
message CloudClusterContainerInfo {
    string dockerRoot = 1;
    string execRoot = 2;
    string serviceCIDR = 3;
    string podCIDR = 4;
    string dockerCIDR = 5;
    string dockerBip = 6;
}
message CloudClusterGlusterfs {
    string glusterfsIps = 1;
}
message CloudClusterHostsInfo {
    string hostIps = 1;
    string device = 2;
    string dataPath = 3;
}
message CloudClusterInfo {
    string clusterName = 1;
    string clusterAccessKey = 2;
    string displayName = 3;
    string rootDomain = 4;
    bool enableHttps = 5;
    string clusterSize = 6;
    string nameservers = 7;
    string collectorURL = 8;
    string openAPI = 9 [json_name = "openapi"];
    string clusterDialer = 10;
}
message CloudClusterInstaller {
    string installerIp = 1;
    string user = 2;
    string password = 3;
    string port = 4;
}
message CloudClusterNas {
    string nasDomain = 1;
    string nasPath = 2;
}
message CloudClusterNewCreateInfo {
    string cloudVendor = 1;
    string cloudVendorName = 2;
    string cloudBasicRsc = 3;
    string region = 4;
    string clusterType = 5;
    string clusterSpec = 6;
    string chargeType = 7;
    int64 chargePeriod = 8;
    int64 appNodeNum = 9;
    string accessKey = 10;
    string secretKey = 11;
    string vpcID = 12;
    string vpcCIDR = 13;
    string vSwitchID = 14;
    string vSwitchCIDR = 15;
    string natGatewayID = 16;
    string forwardTableID = 17;
    string snatTableID = 18;
    string k8sVersion = 19;
    string ecsInstType = 20;
    string terraform = 21;
}
message CloudClusterRequest {
    uint64 orgID = 1;
    string orgName = 2;
    string diceVersion = 3;
    string centralClusterName = 4;
    string centralRootDomain = 5;
    string centralDiceProtocol = 6;
    google.protobuf.Value cloudClusterInfo = 7;
    google.protobuf.Value cloudClusterContainerInfo = 8;
    google.protobuf.Value cloudClusterNewCreateInfo = 9;
    google.protobuf.Value cloudClusterInstaller = 10;
    google.protobuf.Value cloudClusterNas = 11;
    google.protobuf.Value cloudClusterGlusterfs = 12;
    google.protobuf.Value cloudClusterHostsInfo = 13;
}
message CloudClusterResponse {
    google.protobuf.Value data = 1;
}
message CloudNodesRequest {
    string clusterName = 1;
    uint64 orgID = 2;
    string cloudVendor = 3;
    string availabilityZone = 4;
    string region = 5;
    string chargeType = 6;
    int64 chargePeriod = 7;
    string accessKey = 8;
    string secretKey = 9;
    string cloudResource = 10;
    string instancePassword = 11;
    int64 instanceNum = 12;
    string instanceType = 13;
    string diskType = 14;
    int64 diskSize = 15;
    repeated string securityGroupIds = 16;
    string vSwitchId = 17;
    repeated string labels = 18;
    string terraform = 19;
}
message CloudNodesResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceDetailInfo {
    string label = 1;
    repeated google.protobuf.Value items = 2;
}
message CloudResourceDetailItem {
    string name = 1;
    string value = 2;
}
message CloudResourceMysqlAccount {
    string account = 1;
    string password = 2;
    string accountPrivilege = 3;
}
message CloudResourceMysqlAccountPrivileges {
    string dBName = 1;
    string accountPrivilege = 2;
}
message CloudResourceMysqlBasicData {
    string ID = 1 [json_name = "id"];
    string name = 2;
    string region = 3;
    string category = 4;
    string spec = 5;
    string version = 6;
    string status = 7;
    string chargeType = 8;
    string createTime = 9;
    string expireTime = 10;
    map<string, string> tag = 11;
}
message CloudResourceMysqlDB {
    string dBName = 1 [json_name = "dbName"];
    string addonID = 2;
    repeated google.protobuf.Value accounts = 3;
}
message CloudResourceMysqlDBInfo {
    int64 total = 1;
    string instanceID = 2;
    repeated google.protobuf.Value list = 3;
}
message CloudResourceMysqlDBRequest {
    google.protobuf.Value cloudResourceMysqlDetailInfoRequest = 1;
    string dBName = 2;
    string instanceID = 3; // generated from path variable: instanceID. You should change the proto type if necessary.
}
message CloudResourceMysqlDBResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceMysqlData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message CloudResourceMysqlDetailInfoData {
    string ID = 1 [json_name = "id"];
    string name = 2;
    string category = 3;
    string regionId = 4 [json_name = "regionID"];
    string vpcId = 5 [json_name = "vpcID"];
    string vSwitchId = 6 [json_name = "vSwitchID"];
    string zoneId = 7 [json_name = "zoneID"];
    string host = 8;
    string port = 9;
    string memory = 10;
    string storageSize = 11;
    string storageType = 12;
    string status = 13;
}
message CloudResourceMysqlDetailInfoRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
    string idorname = 4; // generated from path variable: idorname. You should change the proto type if necessary.
}
message CloudResourceMysqlDetailInfoResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceMysqlListAccountData {
    repeated google.protobuf.Value list = 1;
}
message CloudResourceMysqlListAccountItem {
    string accountName = 1;
    string accountStatus = 2;
    string accountType = 3;
    string accountDescription = 4;
    repeated google.protobuf.Value databasePrivileges = 5;
}
message CloudResourceMysqlListAccountRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
}
message CloudResourceMysqlListAccountResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceOnsBasicData {
    string region = 1;
    string ID = 2 [json_name = "id"];
    string name = 3;
    string instanceType = 4;
    string status = 5;
    map<string, string> tags = 6;
}
message CloudResourceOnsData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message CloudResourceOnsDetailInfoRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
}
message CloudResourceOnsDetailInfoResponse {
    repeated google.protobuf.Value data = 1;
}
message CloudResourceOnsGroupBaseInfo {
    string groupId = 1 [json_name = "groupID"];
    string groupType = 2;
    string remark = 3;
}
message CloudResourceOnsGroupBasicData {
    string groupId = 1;
    string remark = 2;
    string instanceId = 3;
    string groupType = 4;
    string createTime = 5;
    map<string, string> tags = 6;
}
message CloudResourceOnsGroupInfoData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message CloudResourceOnsGroupInfoRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
    string groupID = 4;
    string groupType = 5;
}
message CloudResourceOnsGroupInfoResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceOnsTopicAndGroup {
    google.protobuf.Value cloudResourceOnsGroupBaseInfo = 1;
    string topicName = 2;
    string addonID = 3;
    int64 messageType = 4;
    string remark = 5;
}
message CloudResourceOnsTopicInfo {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message CloudResourceOnsTopicInfoRequest {
    google.protobuf.Value cloudResourceMysqlDetailInfoRequest = 1;
    string topicName = 2;
}
message CloudResourceOnsTopicInfoResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceOssBasicData {
    string name = 1;
    string location = 2;
    string createDate = 3;
    string storageClass = 4;
    map<string, string> tags = 5;
}
message CloudResourceOssData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message CloudResourceOssDetailInfoData {
    string bucketName = 1;
    string internetEndpoint = 2;
    string intranetEndpoint = 3;
    string location = 4;
    string acl = 5;
}
message CloudResourceOssDetailInfoRequest {
    string vendor = 1;
    string region = 2;
    string name = 3;
    string bucketname = 4; // generated from path variable: bucketname. You should change the proto type if necessary.
}
message CloudResourceOssDetailInfoResponse {
    google.protobuf.Value data = 1;
}
message CloudResourceOverviewRequest {
    string vendor = 1;
    string region = 2;
}
message CloudResourceOverviewResponse {
    map<string,  google.protobuf.Value> data = 1;
}
message CloudResourceRedisBasicData {
    string ID = 1 [json_name = "id"];
    string name = 2;
    string region = 3;
    string spec = 4;
    string version = 5;
    string capacity = 6;
    string status = 7;
    map<string, string> tags = 8;
    string chargeType = 9;
    string expireTime = 10;
    string createTime = 11;
}
message CloudResourceRedisDetailInfoRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
}
message CloudResourceRedisDetailInfoResponse {
    repeated google.protobuf.Value data = 1;
}
message CloudResourceSetTagRequest {
    repeated string tags = 1;
    string resourceType = 2;
    string instanceID = 3;
    repeated google.protobuf.Value items = 4;
}
message CloudResourceSetTagResponse {
}
message CloudResourceTagItem {
    string vendor = 1;
    string region = 2;
    string resourceID = 3;
    repeated string oldTags = 4;
}
message ClusterUpdateRequest {
    string name = 1;
    string displayName = 2;
    string type = 3;
    string cloudVendor = 4;
    string logo = 5;
    string description = 6;
    string wildcardDomain = 7;
    optional google.protobuf.Value schedulerConfig = 8 [json_name = "scheduler"];
    optional google.protobuf.Value opsConfig = 9;
    optional google.protobuf.Value sysConfig = 10;
    optional google.protobuf.Value manageConfig = 11;
    int64 orgID = 12;
    map<string, string> uRLs = 13 [json_name = "urls"];
}
message ClusterUpdateResponse {
    google.protobuf.Value data = 1;
}
message ClustersData {
    repeated string ready = 1;
    repeated string unReady = 2;
}
message CreateCloudAccountRequest {
    string vendor = 1;
    string accessKey = 2 [json_name = "accessKeyID"];
    string secret = 3 [json_name = "accessKeySecret"];
    string description = 4;
}
message CreateCloudAccountResponse {
}
message CreateCloudResourceBaseInfo {
    string vendor = 1;
    string region = 2;
    string vpcID = 3;
    string vSwitchID = 4;
    string zoneID = 5;
    string orgID = 6;
    string userID = 7;
    string clusterName = 8;
    string projectID = 9;
    string source = 10;
    string clientToken = 11;
}
message CreateCloudResourceBaseResponseData {
    uint64 recordID = 1;
}
message CreateCloudResourceMysqlAccountRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
    string account = 4;
    string password = 5;
    string description = 6;
}
message CreateCloudResourceMysqlAccountResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceMysqlDBRequest {
    google.protobuf.Value createCloudResourceBaseInfo = 1;
    string instanceID = 2;
    repeated google.protobuf.Value databases = 3;
}
message CreateCloudResourceMysqlDBResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceMysqlRequest {
    optional google.protobuf.Value createCloudResourceBaseRequest = 1;
    string version = 2;
    string specType = 3;
    string specSize = 4 [json_name = "spec"];
    string storageType = 5;
    int64 storageSize = 6;
    string securityIPList = 7;
    repeated google.protobuf.Value databases = 8;
}
message CreateCloudResourceMysqlResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceOnsGroupRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
    repeated google.protobuf.Value groups = 4;
}
message CreateCloudResourceOnsGroupResponse {
}
message CreateCloudResourceOnsRequest {
    optional google.protobuf.Value createCloudResourceBaseInfo = 1;
    string name = 2;
    string remark = 3;
    repeated google.protobuf.Value topics = 4;
}
message CreateCloudResourceOnsResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceOnsTopicRequest {
    google.protobuf.Value createCloudResourceBaseInfo = 1;
    string instanceID = 2;
    repeated google.protobuf.Value topics = 3;
}
message CreateCloudResourceOnsTopicResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceOssRequest {
    optional google.protobuf.Value createCloudResourceBaseInfo = 1;
    repeated google.protobuf.Value buckets = 2;
}
message CreateCloudResourceOssResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceRedisRequest {
    optional google.protobuf.Value createCloudResourceBaseRequest = 1;
    string version = 2;
    string spec = 3;
    string password = 4;
    string addonID = 5;
}
message CreateCloudResourceRedisResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceVPC {
    string vPCID = 1 [json_name = "vpcID"];
}
message CreateCloudResourceVPCRequest {
    string vendor = 1;
    string region = 2;
    string vPCName = 3 [json_name = "vpcName"];
    string cidrBlock = 4;
    string description = 5;
}
message CreateCloudResourceVPCResponse {
    google.protobuf.Value data = 1;
}
message CreateCloudResourceVSW {
    string vSWID = 1 [json_name = "vswID"];
}
message CreateCloudResourceVSWRequest {
    string vendor = 1;
    string region = 2;
    string vSWName = 3 [json_name = "vswName"];
    string vPCID = 4 [json_name = "vpcID"];
    string cidrBlock = 5;
    string zoneID = 6;
    string description = 7;
}
message CreateCloudResourceVSWResponse {
    google.protobuf.Value data = 1;
}
message DeleteCloudAccountRequest {
    string vendor = 1;
    string accessKey = 2 [json_name = "accessKeyID"];
}
message DeleteCloudAccountResponse {
}
message DeleteCloudResourceMysqlDBRequest {
    google.protobuf.Value cloudAddonResourceDeleteRequest = 1;
    string databaseName = 2;
}
message DeleteCloudResourceMysqlRequest {
    string source = 1;
    string recordID = 2;
    string projectID = 3;
    string addonID = 4;
    string instanceID = 5;
    string vendor = 6;
    string region = 7;
}
message DeleteCloudResourceOnsRequest {
    string source = 1;
    string recordID = 2;
    string projectID = 3;
    string addonID = 4;
    string instanceID = 5;
    string vendor = 6;
    string region = 7;
}
message DeleteCloudResourceOssRequest {
    string source = 1;
    string recordID = 2;
    string projectID = 3;
    string addonID = 4;
    string instanceID = 5;
    string vendor = 6;
    string region = 7;
}
message DeleteCloudResourceRedisRequest {
    string source = 1;
    string recordID = 2;
    string projectID = 3;
    string addonID = 4;
    string instanceID = 5;
    string vendor = 6;
    string region = 7;
}
message EdgeHostOffline {
    string siteIP = 1;
    string ID = 2; // generated from path variable: ID. You should change the proto type if necessary.
}
message ErrorResponse {
    string code = 1;
    string msg = 2;
    google.protobuf.Value ctx = 3;
}
message GetCloudResourceECSTrendResponse {
    google.protobuf.Value data = 1;
}
message GrantMysqlAccountPrivilegeRequest {
    string vendor = 1;
    string region = 2;
    string instanceID = 3;
    string account = 4;
    repeated google.protobuf.Value accountPrivileges = 5;
}
message GrantMysqlAccountPrivilegeResponse {
    google.protobuf.Value data = 1;
}
message HandleCloudResourceECSData {
    repeated google.protobuf.Value failedInstances = 1;
}
message HandleCloudResourceECSDataResult {
    string message = 1;
    string instanceId = 2;
}
message HandleCloudResourceECSResponse {
    google.protobuf.Value data = 1;
}
message HandleCloudResourceEcsRequest {
    string vendor = 1;
    string region = 2;
    repeated string instanceIds = 3;
}
message K8SClusters {
    google.protobuf.Value data = 1;
}
message ListCloudAccount {
    string orgID = 1;
    string vendor = 2;
    string accessKey = 3 [json_name = "accessKeyID"];
    string description = 4;
}
message ListCloudAccountData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ListCloudAccountResponse {
    google.protobuf.Value data = 1;
}
message ListCloudGateway {
    repeated google.protobuf.Value slbs = 1;
    repeated google.protobuf.Value gateways = 2;
}
message ListCloudResourceECS {
    string ID = 1 [json_name = "id"];
    string startTime = 2;
    string regionID = 3;
    string regionName = 4;
    string chargeType = 5;
    string vendor = 6;
    string innerIpAddress = 7;
    string hostName = 8 [json_name = "hostname"];
    int64 memory = 9;
    int64 cPU = 10 [json_name = "cpu"];
    string expireTime = 11;
    string osName = 12;
    string status = 13;
    map<string, string> tag = 14;
}
message ListCloudResourceECSData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ListCloudResourceECSRequest {
    string vendor = 1;
    string region = 2;
    string cluster = 3;
    string innerIpAddress = 4;
    int64 pageNo = 5;
    int64 pageSize = 6;
}
message ListCloudResourceECSResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceGatewayRequest {
    string vendor = 1;
    string region = 2;
    string vpcID = 3;
    string projectID = 4;
    string workspace = 5;
}
message ListCloudResourceGatewayResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceMysqlRequest {
    string vendor = 1;
    string region = 2;
    string vpcID = 3;
    string projectID = 4;
    string workspace = 5;
}
message ListCloudResourceMysqlResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceOnsRequest {
    string vendor = 1;
    string region = 2;
    string vpcID = 3;
    string projectID = 4;
    string workspace = 5;
}
message ListCloudResourceOnsResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceOssRequest {
    string vendor = 1;
    string name = 2;
}
message ListCloudResourceOssResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceRedisData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ListCloudResourceRedisRequest {
    string vendor = 1;
    string region = 2;
    string vpcID = 3;
    string projectID = 4;
    string workspace = 5;
}
message ListCloudResourceRedisResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceRegion {
    string regionID = 1;
    string localName = 2;
}
message ListCloudResourceRegionRequest {
    string vendor = 1;
}
message ListCloudResourceRegionResponse {
    repeated google.protobuf.Value data = 1;
}
message ListCloudResourceVPC {
    string vendor = 1;
    string status = 2;
    string regionID = 3;
    string regionName = 4;
    string vpcID = 5;
    string vpcName = 6;
    string cidrBlock = 7;
    int64 vswNum = 8;
    map<string, string> tags = 9;
}
message ListCloudResourceVPCData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ListCloudResourceVPCRequest {
    string vendor = 1;
    string region = 2;
    string cluster = 3;
}
message ListCloudResourceVPCResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceVSW {
    string vswName = 1;
    string vSwitchID = 2;
    string cidrBlock = 3;
    string vpcID = 4;
    string status = 5;
    string region = 6;
    string zoneID = 7;
    string zoneName = 8;
    map<string, string> tags = 9;
}
message ListCloudResourceVSWData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ListCloudResourceVSWRequest {
    string vendor = 1;
    string region = 2;
    string cluster = 3;
    string innerIpAddress = 4;
    int64 pageNo = 5;
    int64 pageSize = 6;
}
message ListCloudResourceVSWResponse {
    google.protobuf.Value data = 1;
}
message ListCloudResourceZone {
    string zoneID = 1;
    string localName = 2;
}
message ListCloudResourceZoneRequest {
    string vendor = 1;
    string region = 2;
}
message ListCloudResourceZoneResponse {
    repeated google.protobuf.Value data = 1;
}
message MonthAddTrend {
    repeated int64 time = 1;
    repeated google.protobuf.Value results = 2;
    int64 total = 3;
    string title = 4;
}
message MonthAddTrendData_0 {
    repeated google.protobuf.Value data = 1;
}
message MysqlAccountPrivilege {
    string dBName = 1 [json_name = "dbName"];
    string accountPrivilege = 2;
}
message MysqlDataBaseInfo {
    string dBName = 1 [json_name = "dbName"];
    string addonID = 2;
    string characterSetName = 3;
    string description = 4;
    google.protobuf.Value cloudResourceMysqlAccount = 5;
}
message OfflineEdgeClusterData {
    uint64 recordID = 1;
    string preCheckHint = 2;
}
message OfflineEdgeClusterRequest {
    uint64 orgID = 1;
    string clusterName = 2;
    bool preCheck = 3;
    bool force = 4;
}
message OfflineEdgeClusterResponse {
    google.protobuf.Value data = 1;
}
message OnsTopic {
    string topicName = 1;
    string messageType = 2;
    int64 relation = 3;
    string relationName = 4;
    string remark = 5;
    string createTime = 6;
    map<string, string> tags = 7;
}
message OpsAddonStatusData {
    string status = 1;
}
message OpsAddonStatusQueryRequest {
    string addonName = 1;
    string addonID = 2;
}
message OpsAddonStatusResponse {
    google.protobuf.Value data = 1;
}
message OrgClusterInfoBasicData {
    string clusterName = 1;
    uint64 orgID = 2;
    string orgName = 3;
    string orgDisplayName = 4;
    string clusterType = 5;
    string version = 6;
    string createTime = 7;
    bool isCentralCluster = 8;
}
message OrgClusterInfoData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message OrgClusterInfoRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    string orgName = 3;
    string clusterType = 4;
}
message OrgClusterInfoResponse {
    google.protobuf.Value data = 1;
}
message OrgRunningTasks {
    uint64 orgID = 1;
    uint64 projectID = 2;
    uint64 applicationID = 3;
    uint64 pipelineID = 4;
    uint64 taskID = 5;
    int64 queueTimeSec = 6;
    int64 costTimeSec = 7;
    string projectName = 8;
    string applicationName = 9;
    string taskName = 10;
    string status = 11;
    string env = 12;
    string clusterName = 13;
    string taskType = 14;
    string userID = 15;
    google.protobuf.Timestamp createdAt = 16;
    string runtimeID = 17;
    string releaseID = 18;
}
message OrgRunningTasksData {
    int64 total = 1;
    repeated google.protobuf.Value tasks = 2;
}
message OrgRunningTasksListRequest {
    string cluster = 1;
    string projectName = 2;
    string appName = 3;
    uint64 pipelineID = 4;
    string status = 5;
    string userID = 6;
    string env = 7;
    string type = 8;
    int64 startTime = 9;
    int64 endTime = 10;
    int64 pageNo = 11;
    int64 pageSize = 12;
}
message OrgRunningTasksListResponse {
    google.protobuf.Value data = 1;
}
message OssBucketInfo {
    string addonID = 1;
    string name = 2;
    string acl = 3;
}
message PrivateSlbInfo {
    string ID = 1 [json_name = "instanceID"];
    string name = 2;
    int64 port = 3;
}
message RmNodesData {
    uint64 recordID = 1;
}
message RmNodesRequest {
    string clusterName = 1;
    uint64 orgID = 2;
    repeated string hosts = 3;
    string password = 4;
    bool force = 5;
}
message RmNodesResponse {
    google.protobuf.Value data = 1;
}
message UpdateLabelsData {
    uint64 recordID = 1;
}
message UpdateLabelsRequest {
    string clusterName = 1;
    uint64 orgID = 2;
    repeated string hosts = 3;
    repeated string labels = 4;
    map<string, string> labelsWithValue = 5;
}
message UpdateLabelsResponse {
    google.protobuf.Value data = 1;
}
message UpgradeClusterInfo {
    uint64 orgID = 1;
    string clusterName = 2;
    string clusterType = 3;
    string version = 4;
    bool isCentralCluster = 5;
}
message UpgradeEdgeClusterData {
    uint64 recordID = 1;
    int64 status = 2;
    string precheckHint = 3;
}
message UpgradeEdgeClusterRequest {
    uint64 orgID = 1;
    string clusterName = 2;
    bool preCheck = 3 [json_name = "precheck"];
}
message UpgradeEdgeClusterResponse {
    google.protobuf.Value data = 1;
}
// generate service from openapi spec: cmp
service cmp {
    option (erda.common.openapi_service) = {
        service: "cmp",
    };

    rpc CMP_ADDON_CONFIG (AddonConfigRequest) returns (AddonConfigResponse) {
        option (google.api.http) = {
            get: "/api/addons/actions/config",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/config",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "Addon 运行配置参数获取",
        };
    };
    rpc CMP_ADDON_CONFIG_UPDATE (AddonConfigUpdateRequest) returns (AddonConfigUpdateResponse) {
        option (google.api.http) = {
            post: "/api/addons/actions/config",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/config",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "Addon 运行配置参数更新",
        };
    };
    rpc CMP_ADDON_SCALE (AddonScaleRequest) returns (AddonScaleResponse) {
        option (google.api.http) = {
            post: "/api/addons/actions/scale",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/actions/scale",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "Addon 扩缩容",
        };
    };
    rpc CMP_ADDON_STATUS (OpsAddonStatusQueryRequest) returns (OpsAddonStatusResponse) {
        option (google.api.http) = {
            get: "/api/addons/status",
        };
        option (erda.common.openapi) = {
            path: "/api/addons/status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "调用scheduler api 获取 addon status",
        };
    };
    rpc CMP_ALERT_CONDITIONS (CMP_ALERT_CONDITIONS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cmp/alerts/conditions",
        };
        option (erda.common.openapi) = {
            path: "/api/cmp/alerts/conditions",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_ALERT_CONDITIONS_VALUE (CMP_ALERT_CONDITIONS_VALUE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cmp/alerts/conditions/value",
        };
        option (erda.common.openapi) = {
            path: "/api/cmp/alerts/conditions/value",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_CLOUD_CLUSTERS (CloudClusterRequest) returns (CloudClusterResponse) {
        option (google.api.http) = {
            post: "/api/cloud-clusters",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-clusters",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建并添加云集群",
        };
    };
    rpc CMP_CLOUD_NODES (CloudNodesRequest) returns (CloudNodesResponse) {
        option (google.api.http) = {
            post: "/api/ops/cloud-nodes",
        };
        option (erda.common.openapi) = {
            path: "/api/ops/cloud-nodes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建并添加云机器",
        };
    };
    rpc CMP_CLOUD_RESOURCE (CMP_CLOUD_RESOURCE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/ops/cloud-resource",
        };
        option (erda.common.openapi) = {
            path: "/api/ops/cloud-resource",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取云资源信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ACCOUNT_CREATE (CreateCloudAccountRequest) returns (CreateCloudAccountResponse) {
        option (google.api.http) = {
            post: "/api/cloud-account",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-account",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "导入 云账号",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ACCOUNT_DELETE (DeleteCloudAccountRequest) returns (DeleteCloudAccountResponse) {
        option (google.api.http) = {
            delete: "/api/cloud-account",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-account",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 云账号",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ACCOUNT_LIST (CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) returns (ListCloudAccountResponse) {
        option (google.api.http) = {
            get: "/api/cloud-account",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-account",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 云账号 列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW (AutoRenewCloudResourceEcsRequest) returns (HandleCloudResourceECSResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ecs/actions/config-renew-attribute",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ecs/actions/config-renew-attribute",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "配置ECS实例的自动续费",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ECS_LIST (ListCloudResourceECSRequest) returns (ListCloudResourceECSResponse) {
        option (google.api.http) = {
            get: "/api/cloud-ecs",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ecs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 ecs 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ECS_RESTART (HandleCloudResourceEcsRequest) returns (HandleCloudResourceECSResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ecs/actions/restart",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ecs/actions/restart",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "重启ECS实例",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ECS_START (HandleCloudResourceEcsRequest) returns (HandleCloudResourceECSResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ecs/actions/start",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ecs/actions/start",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "启动ECS实例",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ECS_STOP (HandleCloudResourceEcsRequest) returns (HandleCloudResourceECSResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ecs/actions/stop",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ecs/actions/stop",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "停止ECS实例",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ECS_TREND (CMP_CLOUD_RESOURCE_ECS_TREND_Request) returns (GetCloudResourceECSTrendResponse) {
        option (google.api.http) = {
            get: "/api/ecs-trending",
        };
        option (erda.common.openapi) = {
            path: "/api/ecs-trending",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 ecs 增量趋势",
        };
    };
    rpc CMP_CLOUD_RESOURCE_GATEWAY_LIST (ListCloudResourceGatewayRequest) returns (ListCloudResourceGatewayResponse) {
        option (google.api.http) = {
            get: "/api/cloud-gateway",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-gateway",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 gateway 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_LIST (CMP_CLOUD_RESOURCE_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/ops/cloud-resource-list",
        };
        option (erda.common.openapi) = {
            path: "/api/ops/cloud-resource-list",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "云资源类型列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE (CreateCloudResourceMysqlAccountRequest) returns (CreateCloudResourceMysqlAccountResponse) {
        option (google.api.http) = {
            post: "/api/cloud-mysql/actions/create-account",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/actions/create-account",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 mysql account",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO (CloudResourceMysqlListAccountRequest) returns (CloudResourceMysqlListAccountResponse) {
        option (google.api.http) = {
            get: "/api/cloud-mysql/{instanceID}/accounts",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/{instanceID}/accounts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "list mysql accounts",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET (CreateCloudResourceMysqlAccountRequest) returns (CreateCloudResourceMysqlAccountResponse) {
        option (google.api.http) = {
            post: "/api/cloud-mysql/actions/reset-password",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/actions/reset-password",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "reset account password",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT (GrantMysqlAccountPrivilegeRequest) returns (GrantMysqlAccountPrivilegeResponse) {
        option (google.api.http) = {
            post: "/api/cloud-mysql/actions/grant-privilege",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/actions/grant-privilege",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "grant account privilege",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_CREATE (CreateCloudResourceMysqlRequest) returns (CreateCloudResourceMysqlResponse) {
        option (google.api.http) = {
            post: "/api/cloud-mysql",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 mysql",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO (CloudResourceMysqlDBRequest) returns (CloudResourceMysqlDBResponse) {
        option (google.api.http) = {
            get: "/api/cloud-mysql/{instanceID}/databases",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/{instanceID}/databases",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "query参数传入dbName, 返回相应db info; 未传入，则返回所有db info",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE (CreateCloudResourceMysqlDBRequest) returns (CreateCloudResourceMysqlDBResponse) {
        option (google.api.http) = {
            post: "/api/cloud-mysql/actions/create-db",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/actions/create-db",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 mysql databases",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE (DeleteCloudResourceMysqlDBRequest) returns (CloudAddonResourceDeleteRespnse) {
        option (google.api.http) = {
            delete: "/api/cloud-mysql/actions/delete-db",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/actions/delete-db",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 mysql database",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_DELETE (DeleteCloudResourceMysqlRequest) returns (CloudAddonResourceDeleteRespnse) {
        option (google.api.http) = {
            delete: "/api/cloud-mysql",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 mysql",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO (CloudResourceMysqlDetailInfoRequest) returns (CloudResourceMysqlDetailInfoResponse) {
        option (google.api.http) = {
            get: "/api/cloud-mysql/{idorname}",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql/{id_or_name}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 mysql instance 详细信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_MYSQL_LIST (ListCloudResourceMysqlRequest) returns (ListCloudResourceMysqlResponse) {
        option (google.api.http) = {
            get: "/api/cloud-mysql",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-mysql",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 mysql 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_CREATE (CreateCloudResourceOnsRequest) returns (CreateCloudResourceOnsResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ons",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 ons",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_DELETE (DeleteCloudResourceOnsRequest) returns (CloudAddonResourceDeleteRespnse) {
        option (google.api.http) = {
            delete: "/api/cloud-ons",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 ons",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO (CloudResourceOnsDetailInfoRequest) returns (CloudResourceOnsDetailInfoResponse) {
        option (google.api.http) = {
            get: "/api/cloud-ons/{instanceID}",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons/{instanceID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 ons instance 详细信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE (CreateCloudResourceOnsGroupRequest) returns (CreateCloudResourceOnsGroupResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ons/actions/create-group",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons/actions/create-group",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 ons group",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_GROUP_INFO (CloudResourceOnsGroupInfoRequest) returns (CloudResourceOnsGroupInfoResponse) {
        option (google.api.http) = {
            get: "/api/cloud-ons/actions/list-group",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons/actions/list-group",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "query参数传入topicName时，返回相应topic信息；未传入则返回所有topic信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_LIST (ListCloudResourceOnsRequest) returns (ListCloudResourceOnsResponse) {
        option (google.api.http) = {
            get: "/api/cloud-ons",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 ons 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE (CreateCloudResourceOnsTopicRequest) returns (CreateCloudResourceOnsTopicResponse) {
        option (google.api.http) = {
            post: "/api/cloud-ons/actions/create-topic",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons/actions/create-topic",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 ons topic",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE (DeleteCloudResourceOnsRequest) returns (CloudAddonResourceDeleteRespnse) {
        option (google.api.http) = {
            delete: "/api/cloud-ons/actions/delete-topic",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons/actions/delete-topic",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 ons topic",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO (CloudResourceOnsTopicInfoRequest) returns (CloudResourceOnsTopicInfoResponse) {
        option (google.api.http) = {
            get: "/api/cloud-ons/actions/list-topic",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-ons/actions/list-topic",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "query参数传入topicName时，返回相应topic信息；未传入则返回所有topic信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_OSS_CREATE (CreateCloudResourceOssRequest) returns (CreateCloudResourceOssResponse) {
        option (google.api.http) = {
            post: "/api/cloud-oss",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-oss",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 oss bucket",
        };
    };
    rpc CMP_CLOUD_RESOURCE_OSS_DELETE (DeleteCloudResourceOssRequest) returns (CloudAddonResourceDeleteRespnse) {
        option (google.api.http) = {
            delete: "/api/cloud-oss",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-oss",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 oss",
        };
    };
    rpc CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO (CloudResourceOssDetailInfoRequest) returns (CloudResourceOssDetailInfoResponse) {
        option (google.api.http) = {
            get: "/api/cloud-oss/{bucketname}",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-oss/{bucket_name}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 oss bucket 详细信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_OSS_LIST (ListCloudResourceOssRequest) returns (ListCloudResourceOssResponse) {
        option (google.api.http) = {
            get: "/api/cloud-oss",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-oss",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 oss 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_OVERVIEW (CloudResourceOverviewRequest) returns (CloudResourceOverviewResponse) {
        option (google.api.http) = {
            get: "/api/cloud-resource-overview",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-resource-overview",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取云资源信息总览",
        };
    };
    rpc CMP_CLOUD_RESOURCE_REDIS_CREATE (CreateCloudResourceRedisRequest) returns (CreateCloudResourceRedisResponse) {
        option (google.api.http) = {
            post: "/api/cloud-redis",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-redis",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 redis",
        };
    };
    rpc CMP_CLOUD_RESOURCE_REDIS_DELETE (DeleteCloudResourceRedisRequest) returns (CloudAddonResourceDeleteRespnse) {
        option (google.api.http) = {
            delete: "/api/cloud-redis",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-redis",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 redis",
        };
    };
    rpc CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO (CloudResourceRedisDetailInfoRequest) returns (CloudResourceRedisDetailInfoResponse) {
        option (google.api.http) = {
            get: "/api/cloud-redis/{instanceID}",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-redis/{instanceID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 redis instance 详细信息",
        };
    };
    rpc CMP_CLOUD_RESOURCE_REGION_LIST (ListCloudResourceRegionRequest) returns (ListCloudResourceRegionResponse) {
        option (google.api.http) = {
            get: "/api/cloud-region",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-region",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 region 列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_Redis_LIST (ListCloudResourceRedisRequest) returns (ListCloudResourceRedisResponse) {
        option (google.api.http) = {
            get: "/api/cloud-redis",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-redis",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 redis 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_SET_TAG (CloudResourceSetTagRequest) returns (CloudResourceSetTagResponse) {
        option (google.api.http) = {
            post: "/api/cloud-resource/set-tag",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-resource/set-tag",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "tag cluster on vpc",
        };
    };
    rpc CMP_CLOUD_RESOURCE_VPC_CREATE (CreateCloudResourceVPCRequest) returns (CreateCloudResourceVPCResponse) {
        option (google.api.http) = {
            post: "/api/cloud-vpc",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-vpc",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 vpc",
        };
    };
    rpc CMP_CLOUD_RESOURCE_VPC_LIST (ListCloudResourceVPCRequest) returns (ListCloudResourceVPCResponse) {
        option (google.api.http) = {
            get: "/api/cloud-vpc",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-vpc",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 vpc 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_VSW_CREATE (CreateCloudResourceVSWRequest) returns (CreateCloudResourceVSWResponse) {
        option (google.api.http) = {
            post: "/api/cloud-vsw",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-vsw",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建 vswitch",
        };
    };
    rpc CMP_CLOUD_RESOURCE_VSW_LIST (ListCloudResourceVSWRequest) returns (ListCloudResourceVSWResponse) {
        option (google.api.http) = {
            get: "/api/cloud-vsw",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-vsw",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 vswitch 信息列表",
        };
    };
    rpc CMP_CLOUD_RESOURCE_ZONE_LIST (ListCloudResourceZoneRequest) returns (ListCloudResourceZoneResponse) {
        option (google.api.http) = {
            get: "/api/cloud-zone",
        };
        option (erda.common.openapi) = {
            path: "/api/cloud-zone",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 zone 列表",
        };
    };
    rpc CMP_CLUSTER_BATCH_UPGRADE (BatchUpgradeEdgeClusterRequest) returns (BatchUpgradeEdgeClusterResponse) {
        option (google.api.http) = {
            post: "/api/cluster/actions/batch-upgrade",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/actions/batch-upgrade",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "边缘集群批量升级",
        };
    };
    rpc CMP_CLUSTER_IMPORT (CMP_CLUSTER_IMPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/clusters",
        };
        option (erda.common.openapi) = {
            path: "/api/clusters",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建集群",
        };
    };
    rpc CMP_CLUSTER_INFO (CMP_CLUSTER_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cluster",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取集群详情",
        };
    };
    rpc CMP_CLUSTER_INIT_COMMAND (CMP_CLUSTER_INIT_COMMAND_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cluster/init-command",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/init-command",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取集群初始化命令",
        };
    };
    rpc CMP_CLUSTER_INIT_RETRY (CMP_CLUSTER_INIT_RETRY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/actions/init-retry",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/actions/init-retry",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 集群初始化重试",
        };
    };
    rpc CMP_CLUSTER_OFFLINE (OfflineEdgeClusterRequest) returns (OfflineEdgeClusterResponse) {
        option (google.api.http) = {
            delete: "/api/cluster",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "集群下线",
        };
    };
    rpc CMP_CLUSTER_PREVIEW (CMP_CLUSTER_PREVIEW_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster-preview",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster-preview",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建集群预览",
        };
    };
    rpc CMP_CLUSTER_UPDATE (ClusterUpdateRequest) returns (ClusterUpdateResponse) {
        option (google.api.http) = {
            put: "/api/clusters",
        };
        option (erda.common.openapi) = {
            path: "/api/clusters",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新集群",
        };
    };
    rpc CMP_CLUSTER_UPGRADE (UpgradeEdgeClusterRequest) returns (UpgradeEdgeClusterResponse) {
        option (google.api.http) = {
            post: "/api/cluster/actions/upgrade",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/actions/upgrade",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "边缘集群升级",
        };
    };
    rpc CMP_CREDENTIAL_ACCESSKEY_CREATE (CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/credential/access-keys",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/credential/access-keys",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 集群认证TOKEN创建",
        };
    };
    rpc CMP_CREDENTIAL_ACCESSKEY_GET (CMP_CREDENTIAL_ACCESSKEY_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cluster/credential/access-keys",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/credential/access-keys",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取集群认证TOKEN",
        };
    };
    rpc CMP_CREDENTIAL_ACCESSKEY_RESET (CMP_CREDENTIAL_ACCESSKEY_RESET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cluster/credential/access-keys/actions/reset",
        };
        option (erda.common.openapi) = {
            path: "/api/cluster/credential/access-keys/actions/reset",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 重置集群认证TOKEN",
        };
    };
    rpc CMP_EDGE_HOST_OFFLINE (EdgeHostOffline) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/edge/site/offline/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/edge/site/offline/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "下线边缘计算站点机器",
        };
    };
    rpc CMP_K8S_CLUSTERS (CMP_K8S_CLUSTERS_Request) returns (K8SClusters) {
        option (google.api.http) = {
            get: "/api/k8s/clusters",
        };
        option (erda.common.openapi) = {
            path: "/api/k8s/clusters",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "list ready and unready k8s clusters",
        };
    };
    rpc CMP_NODES (AddNodesRequest) returns (AddNodesResponse) {
        option (google.api.http) = {
            post: "/api/nodes",
        };
        option (erda.common.openapi) = {
            path: "/api/nodes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "增加节点",
        };
    };
    rpc CMP_NODES_REMOVE (RmNodesRequest) returns (RmNodesResponse) {
        option (google.api.http) = {
            delete: "/api/nodes",
        };
        option (erda.common.openapi) = {
            path: "/api/nodes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "下线节点",
        };
    };
    rpc CMP_NODE_LABELS_LIST (CMP_NODE_LABELS_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/node-labels",
        };
        option (erda.common.openapi) = {
            path: "/api/node-labels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 node label 列表",
        };
    };
    rpc CMP_NODE_LABELS_UPDATE (UpdateLabelsRequest) returns (UpdateLabelsResponse) {
        option (google.api.http) = {
            post: "/api/node-labels",
        };
        option (erda.common.openapi) = {
            path: "/api/node-labels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "更新 node label",
        };
    };
    rpc CMP_NODE_LOGS (CMP_NODE_LOGS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/node-logs",
        };
        option (erda.common.openapi) = {
            path: "/api/node-logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询 cmp 操作日志",
        };
    };
    rpc CMP_ORG_CLUSTER_INFO (OrgClusterInfoRequest) returns (OrgClusterInfoResponse) {
        option (google.api.http) = {
            get: "/api/org-cluster-info",
        };
        option (erda.common.openapi) = {
            path: "/api/org-cluster-info",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取企业集群相关信息",
        };
    };
    rpc CMP_RECORDS (CMP_RECORDS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/records",
        };
        option (erda.common.openapi) = {
            path: "/api/records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询 cmp 操作记录",
        };
    };
    rpc CMP_RECORDTYPES (CMP_RECORDTYPES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/recordtypes",
        };
        option (erda.common.openapi) = {
            path: "/api/recordtypes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "获取 recordtype 列表",
        };
    };
    rpc CMP_RESOURCE_OVERVIEW_CLASS (CMP_RESOURCE_OVERVIEW_CLASS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/resource-overview/class",
        };
        option (erda.common.openapi) = {
            path: "/api/resource-overview/class",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_RESOURCE_OVERVIEW_CLUSTER_TREND (CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/resource-overview/cluster-trend",
        };
        option (erda.common.openapi) = {
            path: "/api/resource-overview/cluster-trend",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_RESOURCE_OVERVIEW_GAUGE (CMP_RESOURCE_OVERVIEW_GAUGE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/resource-overview/gauge",
        };
        option (erda.common.openapi) = {
            path: "/api/resource-overview/gauge",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_RESOURCE_OVERVIEW_PROJECT_TREND (CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/resource-overview/project-trend",
        };
        option (erda.common.openapi) = {
            path: "/api/resource-overview/project-trend",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_RESOURCE_OVERVIEW_REPORT (CMP_RESOURCE_OVERVIEW_REPORT_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/resource-overview/report-table",
        };
        option (erda.common.openapi) = {
            path: "/api/resource-overview/report-table",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc CMP_RUNNING_TASKS_LIST (OrgRunningTasksListRequest) returns (OrgRunningTasksListResponse) {
        option (google.api.http) = {
            get: "/api/org/actions/list-running-tasks",
        };
        option (erda.common.openapi) = {
            path: "/api/org/actions/list-running-tasks",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取指定企业的任务 (job/deployment) 列表",
        };
    };
    rpc CMP_STEVE_CREATE (CMP_STEVE_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/k8s/clusters/**",
        };
        option (erda.common.openapi) = {
            path: "/api/k8s/clusters/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "create a k8s resource",
        };
    };
    rpc CMP_STEVE_DELETE (CMP_STEVE_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/k8s/clusters/**",
        };
        option (erda.common.openapi) = {
            path: "/api/k8s/clusters/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "delete a k8s resource",
        };
    };
    rpc CMP_STEVE_GET (CMP_STEVE_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/k8s/clusters/**",
        };
        option (erda.common.openapi) = {
            path: "/api/k8s/clusters/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "get or list k8s resource",
        };
    };
    rpc CMP_STEVE_PATCH (CMP_STEVE_PATCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/k8s/clusters/**",
        };
        option (erda.common.openapi) = {
            path: "/api/k8s/clusters/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "update a k8s resource",
        };
    };
    rpc CMP_STEVE_UPDATE (CMP_STEVE_UPDATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/k8s/clusters/**",
        };
        option (erda.common.openapi) = {
            path: "/api/k8s/clusters/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "update a k8s resource",
        };
    };
    rpc CMP_STEVE_WS (CMP_STEVE_WS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/websocket/k8s/clusters/**",
        };
        option (erda.common.openapi) = {
            path: "/api/websocket/k8s/clusters/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "k8s websocket for cluster shell, pod logs or exec",
        };
    };
}
