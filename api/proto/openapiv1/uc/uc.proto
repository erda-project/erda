// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.uc; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/uc/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message PwdSecurityConfig {
    int64 captchaChallengeNumber = 1;
    int64 continuousPwdErrorNumber = 2;
    int64 maxPwdErrorNumber = 3;
    int64 resetPassWordPeriod = 4;
}
message PwdSecurityConfigGetResponse {
    optional google.protobuf.Value data = 1;
}
message PwdSecurityConfigUpdateRequest {
    google.protobuf.Value pwdSecurityConfig = 1;
}
message PwdSecurityConfigUpdateResponse {
}
message UC_PWD_SECURITY_CONFIG_GET_Request {
}
message UC_USER_LIST_LOGIN_METHOD_Request {
}
message UserBatchFreezeRequest {
    repeated string userIDs = 1;
}
message UserBatchFreezeResponse {
}
message UserBatchUnFreezeRequest {
    repeated string userIDs = 1;
}
message UserBatchUnFreezeResponse {
}
message UserBatchUpdateLoginMethodRequest {
    repeated string userIDs = 1;
    string source = 2;
}
message UserBatchUpdateLoginMethodResponse {
}
message UserCreateItem {
    string name = 1;
    string nick = 2;
    string phone = 3;
    string email = 4;
    string password = 5;
}
message UserCreateRequest {
    repeated google.protobuf.Value users = 1;
}
message UserCreateResponse {
}
message UserFreezeRequest {
    string userID = 1;
}
message UserFreezeResponse {
}
message UserListLoginMethodData {
    string displayName = 1;
    string value = 2;
}
message UserListLoginMethodResponse {
    repeated google.protobuf.Value data = 1;
}
message UserPagingRequest {
    string name = 1;
    string nick = 2;
    string phone = 3;
    string email = 4;
    optional int64 locked = 5;
    string source = 6;
    int64 pageNo = 7;
    int64 pageSize = 8;
}
message UserPagingResponse {
    optional google.protobuf.Value data = 1;
}
message UserUnfreezeRequest {
    string userID = 1;
}
message UserUnfreezeResponse {
}
message UserUpdateInfoRequset {
    string userID = 1 [json_name = "userId"];
    string name = 2;
    string nick = 3;
    string mobile = 4;
    string email = 5;
}
message UserUpdateInfoResponse {
}
message UserUpdateLoginMethodRequest {
    string ID = 1 [json_name = "id"];
    string source = 2;
    string userID = 3; // generated from path variable: userID. You should change the proto type if necessary.
}
message UserUpdateLoginMethodResponse {
}
// generate service from openapi spec: uc
service uc {
    option (erda.common.openapi_service) = {
        service: "uc",
    };

    rpc UC_PWD_SECURITY_CONFIG_GET (UC_PWD_SECURITY_CONFIG_GET_Request) returns (PwdSecurityConfigGetResponse) {
        option (google.api.http) = {
            get: "/api/users/actions/get-pwd-security-config",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/get-pwd-security-config",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询密码安全配置",
        };
    };
    rpc UC_PWD_SECURITY_CONFIG_UPDATE (PwdSecurityConfigUpdateRequest) returns (PwdSecurityConfigUpdateResponse) {
        option (google.api.http) = {
            post: "/api/users/actions/update-pwd-security-config",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/update-pwd-security-config",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新密码安全配置",
        };
    };
    rpc UC_USER_BATCH_FREEZE (UserBatchFreezeRequest) returns (UserBatchFreezeResponse) {
        option (google.api.http) = {
            put: "/api/users/actions/batch-freeze",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/batch-freeze",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量用户冻结",
        };
    };
    rpc UC_USER_BATCH_UNFREEZE (UserBatchUnFreezeRequest) returns (UserBatchUnFreezeResponse) {
        option (google.api.http) = {
            put: "/api/users/actions/batch-unfreeze",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/batch-unfreeze",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量用户解冻",
        };
    };
    rpc UC_USER_BATCH_UPDATE_LOGIN_METHOD (UserBatchUpdateLoginMethodRequest) returns (UserBatchUpdateLoginMethodResponse) {
        option (google.api.http) = {
            post: "/api/users/actions/batch-update-login-method",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/batch-update-login-method",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量修改用户登录方式",
        };
    };
    rpc UC_USER_CREATE (UserCreateRequest) returns (UserCreateResponse) {
        option (google.api.http) = {
            post: "/api/users",
        };
        option (erda.common.openapi) = {
            path: "/api/users",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 用户创建",
        };
    };
    rpc UC_USER_EXPORT (UserPagingRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/users/actions/export",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/export",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 导出用户",
        };
    };
    rpc UC_USER_FREEZE (UserFreezeRequest) returns (UserFreezeResponse) {
        option (google.api.http) = {
            put: "/api/users/{userID}/actions/freeze",
        };
        option (erda.common.openapi) = {
            path: "/api/users/{userID}/actions/freeze",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 用户冻结",
        };
    };
    rpc UC_USER_LIST_LOGIN_METHOD (UC_USER_LIST_LOGIN_METHOD_Request) returns (UserListLoginMethodResponse) {
        option (google.api.http) = {
            get: "/api/users/actions/list-login-method",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/list-login-method",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取当前环境支持的登录方式",
        };
    };
    rpc UC_USER_PAGING (UserPagingRequest) returns (UserPagingResponse) {
        option (google.api.http) = {
            get: "/api/users/actions/paging",
        };
        option (erda.common.openapi) = {
            path: "/api/users/actions/paging",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 用户分页",
        };
    };
    rpc UC_USER_UNFREEZE (UserUnfreezeRequest) returns (UserUnfreezeResponse) {
        option (google.api.http) = {
            put: "/api/users/{userID}/actions/unfreeze",
        };
        option (erda.common.openapi) = {
            path: "/api/users/{userID}/actions/unfreeze",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 用户解冻",
        };
    };
    rpc UC_USER_UPDATE_LOGIN_METHOD (UserUpdateLoginMethodRequest) returns (UserUpdateLoginMethodResponse) {
        option (google.api.http) = {
            post: "/api/users/{userID}/actions/update-login-method",
        };
        option (erda.common.openapi) = {
            path: "/api/users/{userID}/actions/update-login-method",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 修改用户登录方式",
        };
    };
    rpc UC_USER_UPDATE_USERINFO (UserUpdateInfoRequset) returns (UserUpdateInfoResponse) {
        option (google.api.http) = {
            put: "/api/user/admin/update-userinfo",
        };
        option (erda.common.openapi) = {
            path: "/api/user/admin/update-userinfo",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新用户信息",
        };
    };
}
