// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.openapiv1.testplatform; // remove 'openapiv1.' when you make this proto file effective

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/testplatform/autotest/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message ACTION_LOG_DOWNLOAD_Request {
    string inode = 1; // generated from path variable: inode. You should change the proto type if necessary.
}
message ACTION_LOG_GET_Request {
    string inode = 1; // generated from path variable: inode. You should change the proto type if necessary.
}
message AUTOTESTS_SCENES_CANCEL_Request {
    string sceneID = 1; // generated from path variable: sceneID. You should change the proto type if necessary.
}
message AUTOTESTS_SCENES_EXECUTE_Request {
    string sceneID = 1; // generated from path variable: sceneID. You should change the proto type if necessary.
}
message AutoTestCaseSavePipelineRequest {
    string inode = 1;
    string pipelineYml = 2;
    repeated google.protobuf.Value runParams = 3;
}
message AutoTestCaseSavePipelineResponse {
    optional google.protobuf.Value data = 1;
}
message AutoTestGlobalConfig {
    string scope = 1;
    string scopeID = 2;
    string ns = 3;
    string displayName = 4;
    string desc = 5;
    string creatorID = 6;
    string updaterID = 7;
    google.protobuf.Timestamp createdAt = 8;
    google.protobuf.Timestamp updatedAt = 9;
    optional google.protobuf.Value aPIConfig = 10 [json_name = "apiConfig"];
    optional google.protobuf.Value uIConfig = 11 [json_name = "uiConfig"];
}
message AutoTestGlobalConfigCreateRequest {
    string scope = 1;
    string scopeID = 2;
    string displayName = 3;
    string desc = 4;
    optional google.protobuf.Value aPIConfig = 5 [json_name = "apiConfig"];
    optional google.protobuf.Value uIConfig = 6 [json_name = "uiConfig"];
}
message AutoTestGlobalConfigCreateResponse {
    optional google.protobuf.Value data = 1;
}
message AutoTestGlobalConfigDeleteRequest {
    string pipelineCmsNs = 1 [json_name = "ns"];
    string ns = 2; // generated from path variable: ns. You should change the proto type if necessary.
}
message AutoTestGlobalConfigDeleteResponse {
    optional google.protobuf.Value data = 1;
}
message AutoTestGlobalConfigListRequest {
    string scope = 1;
    string scopeID = 2;
}
message AutoTestGlobalConfigListResponse {
    repeated google.protobuf.Value data = 1;
}
message AutoTestGlobalConfigUpdateRequest {
    string pipelineCmsNs = 1 [json_name = "ns"];
    string displayName = 2;
    string desc = 3;
    optional google.protobuf.Value aPIConfig = 4 [json_name = "apiConfig"];
    optional google.protobuf.Value uIConfig = 5 [json_name = "uiConfig"];
    string ns = 6; // generated from path variable: ns. You should change the proto type if necessary.
}
message AutoTestGlobalConfigUpdateResponse {
    optional google.protobuf.Value data = 1;
}
message AutoTestSceneSetImportRequest {
    uint64 projectID = 1;
    uint64 spaceID = 2;
    string fileType = 3;
}
message AutoTestSceneSetImportResponse {
    uint64 data = 1;
}
message AutoTestSpaceExportRequest {
    uint64 ID = 1 [json_name = "id"];
    string locale = 2;
    bool isCopy = 3 [json_name = "-"];
    string fileType = 4;
    uint64 projectID = 5;
    string spaceName = 6;
}
message AutoTestSpaceExportResponse {
    uint64 data = 1;
}
message AutoTestSpaceImportRequest {
    uint64 projectID = 1;
    string fileType = 2;
}
message AutoTestSpaceImportResponse {
    uint64 data = 1;
}
message CreateTestReportRecordResponse {
    uint64 id = 1;
}
message GetTestReportRecordResponse {
    google.protobuf.Value data = 1;
}
message PipelineRunParam {
    string name = 1;
    google.protobuf.Value value = 2;
}
message QA_REPORTSETS_LIST_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary.
}
message TestReportData {
    optional google.protobuf.Value issueDashboard = 1 [json_name = "issue-dashboard"];
    optional google.protobuf.Value testDashboard = 2 [json_name = "test-dashboard"];
}
message TestReportRecord {
    uint64 ID = 1 [json_name = "id"];
    uint64 projectID = 2;
    uint64 iterationID = 3;
    string creatorID = 4;
    google.protobuf.Timestamp createdAt = 5;
    google.protobuf.Timestamp updatedAt = 6;
    string name = 7;
    string summary = 8;
    double qualityScore = 9;
    google.protobuf.Value reportData = 10;
}
message UnifiedFileTreeNode {
    string type = 1;
    string inode = 2;
    string pinode = 3;
    string scope = 4;
    string scopeID = 5;
    string name = 6;
    string desc = 7;
    string creatorID = 8;
    string updaterID = 9;
    google.protobuf.Timestamp createdAt = 10;
    google.protobuf.Timestamp updatedAt = 11;
    map<string, google.protobuf.Value> meta = 12;
}
message UnifiedFileTreeNodeCopyRequest {
    string inode = 1;
    string pinode = 2;
}
message UnifiedFileTreeNodeCopyResponse {
    optional google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeCreateRequest {
    string type = 1;
    string scope = 2;
    string scopeID = 3;
    string pinode = 4;
    string name = 5;
    string desc = 6;
}
message UnifiedFileTreeNodeCreateResponse {
    optional google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeDeleteRequest {
    string inode = 1;
    string scope = 2;
    string scopeID = 3;
}
message UnifiedFileTreeNodeDeleteResponse {
    optional google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeFindAncestorsRequest {
    string inode = 1;
    string scope = 2;
    string scopeID = 3;
}
message UnifiedFileTreeNodeFindAncestorsResponse {
    repeated google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeFuzzySearchRequest {
    string scope = 1;
    string scopeID = 2;
    string fromPinode = 3;
    bool recursive = 4;
    string prefixFuzzy = 5;
    string suffixFuzzy = 6;
    string fuzzy = 7;
    string creatorID = 8;
}
message UnifiedFileTreeNodeFuzzySearchResponse {
    repeated google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeGetRequest {
    string inode = 1;
    string scope = 2;
    string scopeID = 3;
}
message UnifiedFileTreeNodeGetResponse {
    optional google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeHistorySearchRequest {
    string inode = 1;
}
message UnifiedFileTreeNodeListRequest {
    string scope = 1;
    string scopeID = 2;
    string pinode = 3;
    string pipelineCategoryKey = 4;
}
message UnifiedFileTreeNodeListResponse {
    repeated google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeMoveRequest {
    string inode = 1;
    string pinode = 2;
}
message UnifiedFileTreeNodeMoveResponse {
    optional google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeUpdateBasicInfoRequest {
    string inode = 1;
    optional string name = 2;
    optional string desc = 3;
}
message UnifiedFileTreeNodeUpdateBasicInfoResponse {
    optional google.protobuf.Value data = 1;
}
// generate service from openapi spec: testplatform_autotest
service testplatform_autotest {
    option (erda.common.openapi_service) = {
        service: "testplatform",
    };

    rpc ACTION_LOG_DOWNLOAD (ACTION_LOG_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/autotests/filetree/{inode}/actions/download-action-log",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/download-action-log",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "下载自动化测试节点 action 日志",
        };
    };
    rpc ACTION_LOG_GET (ACTION_LOG_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/autotests/filetree/{inode}/actions/get-action-log",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/get-action-log",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "查看自动化测试节点 action 日志",
        };
    };
    rpc AUTOTESTS_SCENES_CANCEL (AUTOTESTS_SCENES_CANCEL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/autotests/scenes/{sceneID}/actions/cancel",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/scenes/{sceneID}/actions/cancel",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "自动化测试场景取消执行",
        };
    };
    rpc AUTOTESTS_SCENES_EXECUTE (AUTOTESTS_SCENES_EXECUTE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/autotests/scenes/{sceneID}/actions/execute",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/scenes/{sceneID}/actions/execute",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "自动化测试场景执行",
        };
    };
    rpc BATCH_QUERY_PIPELINE_SNIPPET_YAML (AutoTestCaseSavePipelineRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/autotests/pipeline-snippets/actions/batch-query-snippet-yml",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/pipeline-snippets/actions/batch-query-snippet-yml",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "批量查询自动化测试用例流水线文件",
        };
    };
    rpc FILETREE_NODE_COPY (UnifiedFileTreeNodeCopyRequest) returns (UnifiedFileTreeNodeCopyResponse) {
        option (google.api.http) = {
            post: "/api/autotests/filetree/{inode}/actions/copy",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/copy",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "复制自动化测试目录树节点",
        };
    };
    rpc FILETREE_NODE_CREATE (UnifiedFileTreeNodeCreateRequest) returns (UnifiedFileTreeNodeCreateResponse) {
        option (google.api.http) = {
            post: "/api/autotests/filetree",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建自动化测试目录树节点",
        };
    };
    rpc FILETREE_NODE_DELETE (UnifiedFileTreeNodeDeleteRequest) returns (UnifiedFileTreeNodeDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/autotests/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除自动化测试目录树节点",
        };
    };
    rpc FILETREE_NODE_FIND_ANCESTORS (UnifiedFileTreeNodeFindAncestorsRequest) returns (UnifiedFileTreeNodeFindAncestorsResponse) {
        option (google.api.http) = {
            get: "/api/autotests/filetree/{inode}/actions/find-ancestors",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/find-ancestors",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "自动化测试目录树节点寻祖",
        };
    };
    rpc FILETREE_NODE_FUZZY_SEARCH (UnifiedFileTreeNodeFuzzySearchRequest) returns (UnifiedFileTreeNodeFuzzySearchResponse) {
        option (google.api.http) = {
            get: "/api/autotests/filetree/actions/fuzzy-search",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/actions/fuzzy-search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "自动化测试目录树节点模糊搜索",
        };
    };
    rpc FILETREE_NODE_GET (UnifiedFileTreeNodeGetRequest) returns (UnifiedFileTreeNodeGetResponse) {
        option (google.api.http) = {
            get: "/api/autotests/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询自动化测试目录树节点详情",
        };
    };
    rpc FILETREE_NODE_HISTORY_LIST (UnifiedFileTreeNodeHistorySearchRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/autotests/filetree/{inode}/actions/get-histories",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/get-histories",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询自动化测试的历史记录",
        };
    };
    rpc FILETREE_NODE_LIST (UnifiedFileTreeNodeListRequest) returns (UnifiedFileTreeNodeListResponse) {
        option (google.api.http) = {
            get: "/api/autotests/filetree",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询自动化测试目录树节点列表",
        };
    };
    rpc FILETREE_NODE_MOVE (UnifiedFileTreeNodeMoveRequest) returns (UnifiedFileTreeNodeMoveResponse) {
        option (google.api.http) = {
            post: "/api/autotests/filetree/{inode}/actions/move",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/move",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "移动自动化测试目录树节点失败",
        };
    };
    rpc FILETREE_NODE_SAVE_PIPELINE (AutoTestCaseSavePipelineRequest) returns (AutoTestCaseSavePipelineResponse) {
        option (google.api.http) = {
            post: "/api/autotests/filetree/{inode}/actions/save-pipeline",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}/actions/save-pipeline",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "保存自动化测试用例流水线",
        };
    };
    rpc FILETREE_NODE_UPDATE_BASIC_INFO (UnifiedFileTreeNodeUpdateBasicInfoRequest) returns (UnifiedFileTreeNodeUpdateBasicInfoResponse) {
        option (google.api.http) = {
            put: "/api/autotests/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "更新自动化测试目录树节点基础信息",
        };
    };
    rpc GLOBAL_CONFIG_CREATE (AutoTestGlobalConfigCreateRequest) returns (AutoTestGlobalConfigCreateResponse) {
        option (google.api.http) = {
            post: "/api/autotests/global-configs",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/global-configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "创建自动化测试全局配置",
        };
    };
    rpc GLOBAL_CONFIG_DELETE (AutoTestGlobalConfigDeleteRequest) returns (AutoTestGlobalConfigDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/autotests/global-configs/{ns}",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/global-configs/{ns}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除自动化测试全局配置",
        };
    };
    rpc GLOBAL_CONFIG_LIST (AutoTestGlobalConfigListRequest) returns (AutoTestGlobalConfigListResponse) {
        option (google.api.http) = {
            get: "/api/autotests/global-configs",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/global-configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询自动化测试全局配置列表",
        };
    };
    rpc GLOBAL_CONFIG_UPDATE (AutoTestGlobalConfigUpdateRequest) returns (AutoTestGlobalConfigUpdateResponse) {
        option (google.api.http) = {
            put: "/api/autotests/global-configs/{ns}",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/global-configs/{ns}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "更新自动化测试全局配置",
        };
    };
    rpc QA_REPORTSETS_LIST (QA_REPORTSETS_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/reportsets/{pipelineID}",
        };
        option (erda.common.openapi) = {
            path: "/api/reportsets/{pipelineID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "QA的上报数据查询",
        };
    };
    rpc QUERY_PIPELINE_SNIPPET_YAML (AutoTestCaseSavePipelineRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/autotests/pipeline-snippets/actions/query-snippet-yml",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/pipeline-snippets/actions/query-snippet-yml",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询自动化测试用例流水线文件",
        };
    };
    rpc REPORT_CREATE (TestReportRecord) returns (CreateTestReportRecordResponse) {
        option (google.api.http) = {
            post: "/api/projects/{projectID}/test-reports",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectID}/test-reports",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建测试报告记录",
        };
    };
    rpc REPORT_GET (TestReportRecord) returns (GetTestReportRecordResponse) {
        option (google.api.http) = {
            get: "/api/projects/{projectID}/test-reports/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectID}/test-reports/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取单个测试报告记录",
        };
    };
    rpc SCENE_SET_IMPORT (AutoTestSceneSetImportRequest) returns (AutoTestSceneSetImportResponse) {
        option (google.api.http) = {
            post: "/api/autotests/scenesets/actions/import",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/scenesets/actions/import",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导入自动化测试场景集",
        };
    };
    rpc SPACE_EXPORT (AutoTestSpaceExportRequest) returns (AutoTestSpaceExportResponse) {
        option (google.api.http) = {
            get: "/api/autotests/spaces/actions/export",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/spaces/actions/export",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导出自动化测试空间",
        };
    };
    rpc SPACE_IMPORT (AutoTestSpaceImportRequest) returns (AutoTestSpaceImportResponse) {
        option (google.api.http) = {
            post: "/api/autotests/spaces/actions/import",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/spaces/actions/import",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导入自动化测试空间",
        };
    };
}
