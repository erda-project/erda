// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.elf;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/elf/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message EnvironmentSpec {
    repeated google.protobuf.Value requires = 1;
    string dBRequires = 2 [json_name = "-"];
    map<string, string> labels = 3;
    string dBLabels = 4 [json_name = "-"];
    int64 notebookCount = 5 [json_name = "notebook_count"];
}
message ListMetadata {
    int64 total = 1;
}
message ElfResource {
    double cPU = 1 [json_name = "cpu"];
    int64 memory = 2;
}
message NoteBookListSpec {
    repeated google.protobuf.Value items = 1 [json_name = "data"];
}
message DependencyPackageType {
    string type = 1;
    repeated google.protobuf.Value packages = 2;
}
message NotebookSpec {
    repeated google.protobuf.Value envs = 1;
    string clusterName = 2;
    string projectName = 3;
    string applicationName = 4;
    string dBEnvs = 5 [json_name = "-"];
    string image = 6;
    uint64 requirementEnvID = 7;
    uint64 dataSourceID = 8 [json_name = "datasourceID"];
    string genericDomain = 9;
    string clusterDomain = 10;
    google.protobuf.Value elfResource = 11 [json_name = "resource"];
}
message ELF_NOTEBOOK_GET_Request {
}
message ELF_PACKAGE_LIST_Request {
}
message Environment {
    google.protobuf.Value elfMetadata = 1;
    google.protobuf.Value environmentSpec = 2;
}
message ELF_ENVIROMENT_LIST_Request {
}
message NotebookStatus {
    google.protobuf.Timestamp startedAt = 1;
    string state = 2;
}
message Notebook {
    repeated google.protobuf.Value metadata = 1;
    google.protobuf.Value notebookSpec = 2;
    google.protobuf.Value notebookStatus = 3;
}
message NotebookListResponse {
    google.protobuf.Value data = 1;
}
message EnvironmentResponse {
    google.protobuf.Value data = 1;
}
message MetadataField {
    string name = 1;
    string value = 2;
    string type = 3;
    bool optional = 4;
    map<string, string> labels = 5;
    string level = 6;
}
message NoteBookList {
    google.protobuf.Value listMetadata = 1;
    google.protobuf.Value noteBookListSpec = 2;
}
message DependencyPackageSpec {
    repeated google.protobuf.Value items = 1 [json_name = "data"];
}
message DependencyPackageListResponse {
    google.protobuf.Value data = 1;
}
message EnvironmentListSpec {
    repeated google.protobuf.Value items = 1 [json_name = "data"];
}
message NotebookResponse {
    google.protobuf.Value data = 1;
}
message ELF_NOTEBOOK_LIST_Request {
}
message Package {
    string name = 1;
    string version = 2;
}
message EnvironmentList {
    google.protobuf.Value listMetadata = 1;
    google.protobuf.Value environmentListSpec = 2;
}
message DependencyPackageTypeItem {
    string name = 1;
    repeated string version = 2;
}
message EnvironmentListResponse {
    google.protobuf.Value data = 1;
}
message ElfMetadata {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string description = 3;
    string workspace = 4;
    string ownerName = 5;
    uint64 ownerID = 6;
    uint64 organizationID = 7;
    string organizationName = 8;
    google.protobuf.Timestamp createdAt = 9;
    google.protobuf.Timestamp updatedAt = 10;
}
message Require {
    string type = 1;
    repeated google.protobuf.Value packages = 2;
}
message ELF_ENVIROMENT_DELETE_Request {
}
message ELF_ENVIROMENT_GET_Request {
}
message ELF_NOTEBOOK_DELETE_Request {
}
message DependencyPackageList {
    google.protobuf.Value listMetadata = 1;
    google.protobuf.Value dependencyPackageSpec = 2;
}
// generate service from openapi spec: elf
service elf {
    option (erda.common.openapi_service) = {
        service: "elf",
    };

    rpc ELF_ENVIROMENT_CREATE (Environment) returns (EnvironmentResponse) {
        option (google.api.http) = {
            post: "/api/v1/environments",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/environments",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建环境配置",
        };
    };
    rpc ELF_ENVIROMENT_DELETE (ELF_ENVIROMENT_DELETE_Request) returns (EnvironmentResponse) {
        option (google.api.http) = {
            delete: "/api/v1/environments/**",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/environments/**",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除环境配置",
        };
    };
    rpc ELF_ENVIROMENT_GET (ELF_ENVIROMENT_GET_Request) returns (EnvironmentResponse) {
        option (google.api.http) = {
            get: "/api/v1/environments/**",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/environments/**",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取环境配置",
        };
    };
    rpc ELF_ENVIROMENT_LIST (ELF_ENVIROMENT_LIST_Request) returns (EnvironmentListResponse) {
        option (google.api.http) = {
            get: "/api/v1/environments",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/environments",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取环境配置列表",
        };
    };
    rpc ELF_ENVIROMENT_UPDATE (Environment) returns (EnvironmentResponse) {
        option (google.api.http) = {
            put: "/api/v1/environments/**",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/environments/**",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新环境配置",
        };
    };
    rpc ELF_NOTEBOOK_CREATE (Notebook) returns (NotebookResponse) {
        option (google.api.http) = {
            post: "/api/v1/notebooks",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/notebooks",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建笔记本配置",
        };
    };
    rpc ELF_NOTEBOOK_DELETE (ELF_NOTEBOOK_DELETE_Request) returns (NotebookResponse) {
        option (google.api.http) = {
            delete: "/api/v1/notebooks/**",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/notebooks/**",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除笔记本配置",
        };
    };
    rpc ELF_NOTEBOOK_GET (ELF_NOTEBOOK_GET_Request) returns (NotebookResponse) {
        option (google.api.http) = {
            get: "/api/v1/notebooks/**",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/notebooks/**",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取笔记本配置详情",
        };
    };
    rpc ELF_NOTEBOOK_LIST (ELF_NOTEBOOK_LIST_Request) returns (NotebookListResponse) {
        option (google.api.http) = {
            get: "/api/v1/notebooks",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/notebooks",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取笔记本配置列表",
        };
    };
    rpc ELF_NOTEBOOK_UPDATE (Notebook) returns (NotebookResponse) {
        option (google.api.http) = {
            put: "/api/v1/notebooks/**",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/notebooks/**",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新笔记本配置",
        };
    };
    rpc ELF_PACKAGE_LIST (ELF_PACKAGE_LIST_Request) returns (DependencyPackageListResponse) {
        option (google.api.http) = {
            get: "/api/v1/mods",
        };
        option (erda.common.openapi) = {
            path: "/api/v1/mods",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新环境配置",
        };
    };
}
