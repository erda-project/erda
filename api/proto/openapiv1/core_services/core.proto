// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.core;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/core/services/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message CreateReviewUser {
    int64 orgId = 1;
    string operator = 2;
    int64 taskId = 3;
    google.protobuf.Timestamp createdAt = 4;
}
message GetReviewByTaskIdIdRequest {
    int64 taskId = 1 [json_name = "TaskId"];
    string id = 2; // generated from path variable: id. You should change the proto type if necessary
}
message CMDB_NOTIFY_DELETE_Request {
    string notifyID = 1; // generated from path variable: notifyID. You should change the proto type if necessary
}
message CMDB_FILE_HEAD_Request {
    string uuid = 1; // generated from path variable: uuid. You should change the proto type if necessary
}
message ProjectLabelListRequest {
    uint64 projectID = 1;
    string key = 2;
    string type = 3;
    uint64 pageNo = 4;
    uint64 pageSize = 5;
}
message LicenseResponse {
    bool valid = 1;
    string message = 2;
    uint64 currentHostCount = 3;
    optional google.protobuf.Value license = 4;
}
message GetReviewByTaskIdIdResponse {
    int64 total = 1;
    string approvalStatus = 2;
    int64 id = 3;
}
message CMDB_NOTIFY_DISABLE_Request {
    string notifyID = 1; // generated from path variable: notifyID. You should change the proto type if necessary
}
message NotifyTarget {
    string type = 1;
    repeated google.protobuf.Value values = 2;
}
message ProjectNameSpaceInfoResponse {
    google.protobuf.Value data = 1;
}
message ApplicationListResponse {
    google.protobuf.Value data = 1;
}
message ErrorLog {
    int64 ID = 1 [json_name = "id"];
    string level = 2;
    string resourceType = 3;
    string resourceID = 4 [json_name = "resourceId"];
    string occurrenceTime = 5;
    string humanLog = 6;
    string primevalLog = 7;
    string dedupID = 8 [json_name = "deDupId"];
}
message ProjectListRequest {
    uint64 orgID = 1;
    string query = 2;
    string name = 3;
    string orderBy = 4;
    bool asc = 5;
    bool joined = 6;
    int64 pageNo = 7;
    int64 pageSize = 8;
    repeated uint64 projectIDs = 9;
    bool keepMsp = 10;
    bool isPublic = 11;
}
message PagingProjectDTO {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ScopeRoleList {
    repeated google.protobuf.Value list = 1;
}
message ProjectWorkSpaceAbility {
    string ID = 1 [json_name = "id"];
    google.protobuf.Timestamp updatedAt = 2 [json_name = "updated_at"];
    google.protobuf.Timestamp createdAt = 3 [json_name = "created_at"];
    uint64 projectID = 4 [json_name = "project_id"];
    uint64 orgID = 5 [json_name = "org_id"];
    string orgName = 6 [json_name = "org_Name"];
    string workspace = 7;
    string abilities = 8 [json_name = "deployment_abilities"];
}
message CMDB_FILE_DOWNLOAD_Request {
}
message QueryNotifyHistoryResponse {
    google.protobuf.Value data = 1;
}
message UpdateNotifyResponse {
    optional google.protobuf.Value data = 1;
}
message ProjectUpdateRequest {
    uint64 projectID = 1 [json_name = "-"];
    google.protobuf.Value body = 2;
}
message QueryMBoxData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
    int64 unRead = 3;
}
message ProjectUpdateResponse {
    google.protobuf.Value data = 1;
}
message MemberAddByInviteCodeResponse {
    string data = 1;
}
message ScopeRoleListResponse {
    google.protobuf.Value data = 1;
}
message CMDB_PROJECT_FUNCTIONS_GET_Request {
}
message QueryNotifyItemData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message ProjectUpdateBody {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string logo = 4;
    string desc = 5;
    string ddHook = 6;
    map<string, string> clusterConfig = 7;
    optional google.protobuf.Value resourceConfigs = 8 [json_name = "resourceConfig"];
    bool isPublic = 9;
    map<string, int64> rollbackConfig = 10;
    double cpuQuota = 11;
    double memQuota = 12;
}
message ApplicationListResponseData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message AuditListCleanCronResponse {
    optional google.protobuf.Value data = 1;
}
message CMDB_MBOX_READ_ALL_Request {
}
message MemberLabelList {
    repeated google.protobuf.Value list = 1;
}
message MemberRemoveRequest {
    google.protobuf.Value scope = 1;
    repeated string userIDs = 2 [json_name = "userIds"];
}
message ScopeRole {
    google.protobuf.Value scope = 1;
    bool access = 2;
    repeated string roles = 3;
}
message FileUploadResponse {
    optional google.protobuf.Value data = 1;
}
message CMDB_FILE_UPLOAD_Request {
}
message CMDB_MBOX_STATS_Request {
}
message ProjectResourceUsage {
    double cpuServiceUsed = 1;
    double memServiceUsed = 2;
    double cpuAddonUsed = 3;
    double memAddonUsed = 4;
}
message CMDB_NOTIFY_GET_Request {
    string notifyID = 1; // generated from path variable: notifyID. You should change the proto type if necessary.
}
message CMDB_PROJECT_METRICS_HISTOGRAM_Request {
    string resourceType = 1; // generated from path variable: resourceType. You should change the proto type if necessary
}
message ApplicationFetchResponse {
    google.protobuf.Value data = 1;
}
message AuditListCleanCronRequest {
    uint64 orgID = 1;
}
message ProjectLabelCreateResponse {
    int64 data = 1;
}
message MemberListResponse {
    google.protobuf.Value data = 1;
}
message NotifySource {
    int64 ID = 1 [json_name = "-"];
    string name = 2;
    string sourceType = 3;
    string sourceID = 4 [json_name = "sourceId"];
    google.protobuf.Value params = 5;
}
message QueryNotifyResponse {
    google.protobuf.Value data = 1;
}
message QueryMBoxRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    string label = 3;
    string status = 4;
    string type = 5;
    int64 orgID = 6 [json_name = "-"];
    string userID = 7 [json_name = "-"];
}
message QueryNotifyHistoryData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message EVENTBOX_WEBSOCKET_Request {
    string a = 1; // generated from path variable: a. You should change the proto type if necessary
    string b = 2; // generated from path variable: b. You should change the proto type if necessary
}
message EVENTBOX_WEBSOCKET_INFO_Request {
}
message ApplicationWorkspace {
    string clusterName = 1;
    string workspace = 2;
    string configNamespace = 3;
}
message ApproveDTO {
    uint64 ID = 1 [json_name = "id"];
    uint64 orgID = 2 [json_name = "orgId"];
    uint64 entityID = 3 [json_name = "entityId"];
    uint64 targetID = 4 [json_name = "targetId"];
    string targetName = 5;
    string type = 6;
    map<string, string> extra = 7;
    string title = 8;
    string priority = 9;
    string desc = 10;
    string status = 11;
    string submitter = 12;
    string approver = 13;
    optional google.protobuf.Timestamp approvalTime = 14;
    google.protobuf.Timestamp createdAt = 15;
    google.protobuf.Timestamp updatedAt = 16;
}
message GetReviewsByUserIdResponse {
    int64 id = 1;
    string projectName = 2;
    string applicationName = 3;
    int64 projectId = 4;
    int64 applicationId = 5;
    int64 buildId = 6;
    string branchName = 7;
    string commitId = 8;
    string commitMessage = 9;
    string operator = 10;
    string approvalStatus = 11;
    string approvalContent = 12;
    string approvalReason = 13;
    google.protobuf.Timestamp createdAt = 14;
    google.protobuf.Timestamp updatedAt = 15;
}
message ProjectListResponse {
    google.protobuf.Value data = 1;
}
message UpdateNotifyItemRequest {
    int64 ID = 1 [json_name = "id"];
    string mobileTemplate = 2;
    string notifyItemID = 3; // generated from path variable: notifyItemID. You should change the proto type if necessary
}
message UpdateNotifyRequest {
    int64 ID = 1 [json_name = "id"];
    string channels = 2;
    int64 notifyGroupID = 3 [json_name = "notifyGroupId"];
    repeated int64 notifyItemIDs = 4 [json_name = "notifyItemIds"];
    repeated google.protobuf.Value notifySources = 5;
    bool withGroup = 6;
    repeated google.protobuf.Value groupTargets = 7;
    string groupName = 8 [json_name = "-"];
    int64 orgID = 9 [json_name = "-"];
    string notifyID = 10; // generated from path variable: notifyID. You should change the proto type if necessary
}
message GetAuthorityByUserIdResponse {
    string authority = 1;
}
message UpdateApproval {
    int64 id = 1;
    int64 orgId = 2;
    bool reject = 3;
    string reason = 4;
}
message QueryNotifyItemRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    string category = 3;
    string label = 4;
    string scopeType = 5;
}
message ScopeRoleAccessRequest {
    google.protobuf.Value scope = 1;
}
message ProjectNameSpaceInfo {
    bool enabled = 1;
    map<string, string> namespaces = 2;
}
message QUOTA_GET_PROJECT_NAMESPACES_Request {
}
message CMDB_FILE_DOWNLOAD_V2_Request {
    string uuid = 1; // generated from path variable: uuid. You should change the proto type if necessary
}
message CMDB_IMAGE_UPLOAD_Request {
}
message CMDB_LABEL_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message MemberLabelInfo {
    string label = 1;
    string name = 2;
}
message MemberLabelListResponse {
    google.protobuf.Value data = 1;
}
message MemberRemoveResponse {
}
message CMDB_PROJECT_GET_NSINFO_Request {
    string projectID = 1; // generated from path variable: projectID. You should change the proto type if necessary
}
message ProjectWorkSpaceAbilityResponse {
    google.protobuf.Value data = 1;
}
message Scope {
    string type = 1;
    string ID = 2 [json_name = "id"];
}
message QueryNotifyItemResponse {
    google.protobuf.Value data = 1;
}
message ProjectFunctionSetRequest {
    uint64 projectID = 1 [json_name = "projectId"];
    map<string, bool> projectFunction = 2;
}
message PermissionList {
    bool access = 1;
    repeated string roles = 2;
    repeated google.protobuf.Value permissionList = 3;
    repeated google.protobuf.Value resourceRoleList = 4;
    bool exist = 5;
    repeated string contactsWhenNoPermission = 6;
    optional google.protobuf.Value scopeInfo = 7;
}
message ApplicationListRequest {
    uint64 projectID = 1;
    string mode = 2;
    string query = 3;
    string name = 4;
    int64 pageNo = 5;
    int64 pageSize = 6;
    string public = 7;
    string orderBy = 8;
    repeated uint64 applicationID = 9;
    bool isSimple = 10;
}
message MemberList {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message CMDB_NOTIFY_FUZZY_QUERY_Request {
}
message QueryNotifyRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    bool groupDetail = 3;
    string scopeType = 4;
    string scopeID = 5;
    string label = 6;
    string clusterName = 7;
    int64 orgID = 8 [json_name = "-"];
}
message CMDB_APPLICATION_UNPIN_Request {
    string applicationId = 1; // generated from path variable: applicationId. You should change the proto type if necessary
}
message ApproveCreateRequest {
    uint64 orgID = 1 [json_name = "orgId"];
    uint64 targetID = 2 [json_name = "targetId"];
    uint64 entityID = 3 [json_name = "entityId"];
    string targetName = 4;
    string type = 5;
    map<string, string> extra = 6;
    string title = 7;
    string priority = 8;
    string desc = 9;
}
message PermissionCheckResponseData {
    bool access = 1;
}
message CMDB_PERMISSION_LIST_Request {
}
message ApplicationFetchRequest {
    string applicationIDOrName = 1 [json_name = "applicationIdOrName"];
    string projectID = 2;
}
message GetAuthorityByUserIdRequest {
    int64 operator = 1;
    int64 orgId = 2;
    int64 taskId = 3 [json_name = "TaskId"];
}
message ProjectStats {
    int64 countApplications = 1;
    int64 countMembers = 2;
    int64 totalApplicationsCount = 3;
    int64 totalMembersCount = 4;
    int64 totalIterationsCount = 5;
    int64 runningIterationsCount = 6;
    int64 planningIterationsCount = 7;
    double totalManHourCount = 8;
    double usedManHourCount = 9;
    double planningManHourCount = 10;
    int64 doneBugCount = 11;
    int64 totalBugCount = 12;
    double doneBugPercent = 13;
}
message ProjectDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string dDHook = 4 [json_name = "ddHook"];
    uint64 orgID = 5 [json_name = "orgId"];
    string creator = 6;
    string logo = 7;
    string desc = 8;
    repeated string owners = 9;
    string activeTime = 10;
    bool joined = 11;
    optional bool canUnblock = 12;
    string blockStatus = 13;
    bool canManage = 14 [json_name = "CanManage"];
    bool isPublic = 15;
    google.protobuf.Value stats = 16;
    google.protobuf.Value projectResourceUsage = 17;
    map<string, string> clusterConfig = 18;
    optional google.protobuf.Value resourceConfig = 19;
    map<string, int64> rollbackConfig = 20;
    double cpuQuota = 21;
    double memQuota = 22;
    google.protobuf.Timestamp createdAt = 23;
    google.protobuf.Timestamp updatedAt = 24;
    string type = 25;
}
message AuditSetCleanCronResponse {
    uint64 data = 1;
}
message GetReviewsBySponsorIdResponse {
    int64 id = 1;
    int64 projectId = 2;
    string projectName = 3;
    int64 applicationId = 4;
    string applicationName = 5;
    int64 buildId = 6;
    string branchName = 7;
    string commitId = 8;
    string commitMessage = 9;
    repeated string approver = 10;
    string approvalContent = 11;
    string approvalReason = 12;
}
message UpdateNotifyItemResponse {
}
message QUOTA_GET_PROJECT_QUOTA_Request {
}
message DereferenceClusterResponse {
    string data = 1;
}
message ProjectLabelUpdateRequest {
    string name = 1;
    string color = 2;
    int64 ID = 3 [json_name = "-"];
}
message GetReviewsByUserIdRequest {
    int64 userId = 1;
    int64 id = 2;
    int64 projectId = 3 [json_name = "buildId"];
    int64 operator = 4;
    string approvalStatus = 5;
    int64 orgId = 6;
    int64 pageNo = 7;
    int64 pageSize = 8;
}
message MemberListRequest {
    string scopeType = 1;
    int64 scopeID = 2;
    repeated string roles = 3;
    repeated string labels = 4;
    string q = 5;
    int64 pageNo = 6;
    int64 pageSize = 7;
}
message CMDB_APP_LIST_TEMPLATES_Request {
}
message CMDB_LICENSE_Request {
}
message CMDB_MBOX_GET_Request {
    string mboxID = 1; // generated from path variable: mboxID. You should change the proto type if necessary
}
message Target {
    string receiver = 1;
    string secret = 2;
}
message PermissionCheckRequest {
    string userID = 1;
    string scope = 2;
    uint64 scopeID = 3;
    string resource = 4;
    string action = 5;
    string resourceRole = 6;
}
message CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request {
    string projectID = 1; // generated from path variable: projectID. You should change the proto type if necessary
    string workspace = 2; // generated from path variable: workspace. You should change the proto type if necessary
}
message ListMemberRolesByUserResponse {
    google.protobuf.Value data = 1;
}
message CMDB_MANUAL_REVIEW_ADD_Request {
}
message QueryMBoxResponse {
    google.protobuf.Value data = 1;
}
message QueryNotifyData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message PermissionCheckResponse {
    google.protobuf.Value data = 1;
}
message ApplicationStats {
    uint64 countRuntimes = 1;
    uint64 countMembers = 2;
    string timeLastModified = 3;
}
message CreateNotifyResponse {
    optional google.protobuf.Value data = 1;
}
message UserRoleListResponseData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message CMDB_APPLICATION_PIN_Request {
    string applicationId = 1; // generated from path variable: applicationId. You should change the proto type if necessary
}
message DereferenceClusterRequest {
    string cluster = 1;
    int64 orgID = 2;
}
message ErrorLogCreateResponse {
    string data = 1;
}
message DeleteNotifyResponse {
    optional google.protobuf.Value data = 1;
}
message ScopeResource {
    string resource = 1;
    string action = 2;
    string resourceRole = 3;
}
message ErrorLogCreateRequest {
    google.protobuf.Value errorLog = 1;
}
message CMDB_IMAGE_FETCH_Request {
    string imageName = 1; // generated from path variable: imageName. You should change the proto type if necessary
}
message MemberAddRequest {
    google.protobuf.Value scope = 1;
    string targetScopeType = 2;
    repeated int64 targetScopeIDs = 3 [json_name = "targetScopeIds"];
    repeated string roles = 4;
    repeated string userIDs = 5 [json_name = "userIds"];
    google.protobuf.Value options = 6;
    repeated string labels = 7;
    string verifyCode = 8;
}
message CMDB_MEMBER_LABEL_LIST_Request {
}
message CMDB_NOTIFY_ENABLE_Request {
    string notifyID = 1; // generated from path variable: notifyID. You should change the proto type if necessary
}
message AuditSetCleanCronRequest {
    uint64 orgID = 1 [json_name = "orgId"];
    uint64 interval = 2;
}
message MemberAddResponse {
}
message MemberAddByInviteCodeRequest {
    string verifyCode = 1;
    repeated string userIDs = 2 [json_name = "userIds"];
    string orgID = 3 [json_name = "orgId"];
}
message CreateNotifyRequest {
    string name = 1;
    string scopeType = 2;
    string scopeID = 3 [json_name = "scopeId"];
    bool enabled = 4;
    string channels = 5;
    int64 notifyGroupID = 6 [json_name = "notifyGroupId"];
    repeated int64 notifyItemIDs = 7 [json_name = "notifyItemIds"];
    bool withGroup = 8;
    repeated google.protobuf.Value groupTargets = 9;
    string label = 10;
    string clusterName = 11;
    repeated google.protobuf.Value notifySources = 12;
    string workSpace = 13 [json_name = "workspace"];
    string creator = 14 [json_name = "-"];
    int64 orgID = 15 [json_name = "-"];
}
message ProjectLabelCreateRequest {
    string name = 1;
    string type = 2;
    string color = 3;
    uint64 projectID = 4;
}
message MemberAddOptions {
    bool rewrite = 1;
}
message PermissionListResponse {
    google.protobuf.Value data = 1;
}
message UserScopeRole {
    string scopeType = 1;
    int64 scopeID = 2 [json_name = "scopeId"];
    string scopeName = 3;
    repeated string roles = 4;
}
message ApplicationDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string mode = 4;
    bool pined = 5;
    string desc = 6;
    string logo = 7;
    map<string, google.protobuf.Value> config = 8;
    bool isPublic = 9;
    string creator = 10;
    optional google.protobuf.Timestamp unBlockStart = 11;
    optional google.protobuf.Timestamp unBlockEnd = 12;
    string blockStatus = 13;
    google.protobuf.Value stats = 14;
    string gitRepo = 15;
    string gitRepoAbbrev = 16;
    string gitRepoNew = 17;
    string token = 18;
    uint64 orgID = 19 [json_name = "orgId"];
    string orgName = 20;
    string orgDisplayName = 21;
    uint64 projectID = 22 [json_name = "projectId"];
    string projectName = 23;
    string projectDisplayName = 24;
    repeated google.protobuf.Value workspaces = 25;
    bool isExternalRepo = 26;
    optional google.protobuf.Value repoConfig = 27;
    optional google.protobuf.Value sonarConfig = 28;
    repeated string memberRoles = 29;
    google.protobuf.Timestamp createdAt = 30;
    google.protobuf.Timestamp updatedAt = 31;
    string extra = 32 [json_name = "-"];
}
message ApproveCreateResponse {
    google.protobuf.Value data = 1;
}
message ProjectLabelListResponse {
    optional google.protobuf.Value data = 1;
}
message GetReviewsBySponsorIdRequest {
    int64 sponsorId = 1;
    int64 id = 2;
    int64 projectId = 3;
    string approvalStatus = 4;
    int64 orgId = 5;
    int64 pageNo = 6;
    int64 pageSize = 7;
}
message Member {
    string userID = 1 [json_name = "userId"];
    string email = 2;
    string mobile = 3;
    string name = 4;
    string nick = 5;
    string avatar = 6;
    string status = 7;
    google.protobuf.Value scope = 8;
    repeated string roles = 9;
    repeated string labels = 10;
    bool removed = 11;
    bool deleted = 12;
    string token = 13;
}
message QueryNotifyHistoryRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    string notifyName = 3;
    string startTime = 4;
    string endTime = 5;
    string channel = 6;
    string label = 7;
    string clusterName = 8;
    int64 orgID = 9 [json_name = "-"];
}
message ProjectFunctionSetResponse {
    string data = 1;
}
message CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request {
}
message ListMemberRolesByUserRequest {
    string userID = 1;
    string scopeType = 2;
    int64 parentID = 3;
    int64 pageNo = 4;
    int64 pageSize = 5;
}
// generate service from openapi spec: core_services
service core_services {
    option (erda.common.openapi_service) = {
        service: "core",
    };

    rpc CMDB_APPLICATIONS_LIST (ApplicationListRequest) returns (ApplicationListResponse) {
        option (google.api.http) = {
            get: "/api/applications",
        };
        option (erda.common.openapi) = {
            path: "/api/applications",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询应用",
        };
    };
    rpc CMDB_APPLICATION_FETCH (ApplicationFetchRequest) returns (ApplicationFetchResponse) {
        option (google.api.http) = {
            get: "/api/applications/{applicationIDOrName}",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{applicationIDOrName}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取应用",
        };
    };
    rpc CMDB_APPLICATION_PIN (CMDB_APPLICATION_PIN_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/applications/{applicationId}/actions/pin",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{applicationId}/actions/pin",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pin应用",
        };
    };
    rpc CMDB_APPLICATION_UNPIN (CMDB_APPLICATION_UNPIN_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/applications/{applicationId}/actions/unpin",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{applicationId}/actions/unpin",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: unpin应用",
        };
    };
    rpc CMDB_APPROVE_CREATE (ApproveCreateRequest) returns (ApproveCreateResponse) {
        option (google.api.http) = {
            post: "/api/approves",
        };
        option (erda.common.openapi) = {
            path: "/api/approves",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建审批",
        };
    };
    rpc CMDB_APP_LIST_TEMPLATES (CMDB_APP_LIST_TEMPLATES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/applications/actions/list-templates",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/actions/list-templates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 应用模板列表",
        };
    };
    rpc CMDB_AUDITS_LIST_SET (AuditListCleanCronRequest) returns (AuditListCleanCronResponse) {
        option (google.api.http) = {
            get: "/api/audits/actions/setting",
        };
        option (erda.common.openapi) = {
            path: "/api/audits/actions/setting",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查看审计事件设置",
        };
    };
    rpc CMDB_AUDITS_SET (AuditSetCleanCronRequest) returns (AuditSetCleanCronResponse) {
        option (google.api.http) = {
            put: "/api/audits/actions/setting",
        };
        option (erda.common.openapi) = {
            path: "/api/audits/actions/setting",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新审计事件设置",
        };
    };
    rpc CMDB_CLUSTER_DEREFERENCE (DereferenceClusterRequest) returns (DereferenceClusterResponse) {
        option (google.api.http) = {
            put: "/api/clusters/actions/dereference",
        };
        option (erda.common.openapi) = {
            path: "/api/clusters/actions/dereference",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 解除企业关联集群关系",
        };
    };
    rpc CMDB_ERRORLOG_CREATE (ErrorLogCreateRequest) returns (ErrorLogCreateResponse) {
        option (google.api.http) = {
            post: "/api/task-error/actions/create",
        };
        option (erda.common.openapi) = {
            path: "/api/task-error/actions/create",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 上报错误日志",
        };
    };
    rpc CMDB_FILE_DOWNLOAD (CMDB_FILE_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/files",
        };
        option (erda.common.openapi) = {
            path: "/api/files",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 文件下载，在 query param 中通过 file=<uuid> 指定具体文件",
        };
    };
    rpc CMDB_FILE_DOWNLOAD_V2 (CMDB_FILE_DOWNLOAD_V2_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/files/{uuid}",
        };
        option (erda.common.openapi) = {
            path: "/api/files/{uuid}",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 文件下载，在 path 中指定具体文件",
        };
    };
    rpc CMDB_FILE_HEAD (CMDB_FILE_HEAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            custom: {
                kind: "head",
                path: "/api/files/{uuid}",
            },
        };
        option (erda.common.openapi) = {
            path: "/api/files/{uuid}",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: HEAD 请求，文件下载，在 path 中指定具体文件",
        };
    };
    rpc CMDB_FILE_UPLOAD (CMDB_FILE_UPLOAD_Request) returns (FileUploadResponse) {
        option (google.api.http) = {
            post: "/api/files",
        };
        option (erda.common.openapi) = {
            path: "/api/files",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 文件上传",
        };
    };
    rpc CMDB_IMAGE_FETCH (CMDB_IMAGE_FETCH_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/images/{imageName}",
        };
        option (erda.common.openapi) = {
            path: "/api/images/{imageName}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 图片获取",
        };
    };
    rpc CMDB_IMAGE_UPLOAD (CMDB_IMAGE_UPLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/images/actions/upload",
        };
        option (erda.common.openapi) = {
            path: "/api/images/actions/upload",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 图片上传",
        };
    };
    rpc CMDB_LABEL_CREATE (ProjectLabelCreateRequest) returns (ProjectLabelCreateResponse) {
        option (google.api.http) = {
            post: "/api/labels",
        };
        option (erda.common.openapi) = {
            path: "/api/labels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建 label",
        };
    };
    rpc CMDB_LABEL_DELETE (CMDB_LABEL_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/labels/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/labels/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除 label",
        };
    };
    rpc CMDB_LABEL_LIST (ProjectLabelListRequest) returns (ProjectLabelListResponse) {
        option (google.api.http) = {
            get: "/api/labels",
        };
        option (erda.common.openapi) = {
            path: "/api/labels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 分页查询 label",
        };
    };
    rpc CMDB_LABEL_UPDATE (ProjectLabelUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/labels/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/labels/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新 label",
        };
    };
    rpc CMDB_LICENSE (CMDB_LICENSE_Request) returns (LicenseResponse) {
        option (google.api.http) = {
            get: "/api/license",
        };
        option (erda.common.openapi) = {
            path: "/api/license",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询license信息",
        };
    };
    rpc CMDB_MANUAL_REVIEW_ADD (CMDB_MANUAL_REVIEW_ADD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/reviews/actions/review/approve",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/review/approve",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 添加成员",
        };
    };
    rpc CMDB_MANUAL_REVIEW_ADDUSER (CreateReviewUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/reviews/actions/user/create",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/user/create",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 添加用户审核记录",
        };
    };
    rpc CMDB_MANUAL_REVIEW_AUTHORITY (GetAuthorityByUserIdRequest) returns (GetAuthorityByUserIdResponse) {
        option (google.api.http) = {
            get: "/api/reviews/actions/authority",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/authority",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询用户是否有权限",
        };
    };
    rpc CMDB_MANUAL_REVIEW_GET (GetReviewByTaskIdIdRequest) returns (GetReviewByTaskIdIdResponse) {
        option (google.api.http) = {
            get: "/api/reviews/actions/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 通过taskId查询审核记录是否存在",
        };
    };
    rpc CMDB_MANUAL_REVIEW_LISTBYSPONSORID (GetReviewsBySponsorIdRequest) returns (GetReviewsBySponsorIdResponse) {
        option (google.api.http) = {
            get: "/api/reviews/actions/list-launched-approval",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/list-launched-approval",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询sponsorId(发起人)发起部署审批列表",
        };
    };
    rpc CMDB_MANUAL_REVIEW_LISTBYUserID (GetReviewsByUserIdRequest) returns (GetReviewsByUserIdResponse) {
        option (google.api.http) = {
            get: "/api/reviews/actions/list-approved",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/list-approved",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询用户需要审批的列表",
        };
    };
    rpc CMDB_MANUAL_REVIEW_UPDATE (UpdateApproval) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/reviews/actions/updateReview",
        };
        option (erda.common.openapi) = {
            path: "/api/reviews/actions/updateReview",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 添加成员",
        };
    };
    rpc CMDB_MBOX_GET (CMDB_MBOX_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/mboxs/{mboxID}",
        };
        option (erda.common.openapi) = {
            path: "/api/mboxs/{mboxID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询站内信详情",
        };
    };
    rpc CMDB_MBOX_LIST (QueryMBoxRequest) returns (QueryMBoxResponse) {
        option (google.api.http) = {
            get: "/api/mboxs",
        };
        option (erda.common.openapi) = {
            path: "/api/mboxs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询站内信列表",
        };
    };
    rpc CMDB_MBOX_READ_ALL (CMDB_MBOX_READ_ALL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/mboxs/actions/read-all",
        };
        option (erda.common.openapi) = {
            path: "/api/mboxs/actions/read-all",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: read all unread mbox with one click",
        };
    };
    rpc CMDB_MBOX_STATS (CMDB_MBOX_STATS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/mboxs/actions/stats",
        };
        option (erda.common.openapi) = {
            path: "/api/mboxs/actions/stats",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询站内信统计信息",
        };
    };
    rpc CMDB_MEMBER_ADD (MemberAddRequest) returns (MemberAddResponse) {
        option (google.api.http) = {
            post: "/api/members",
        };
        option (erda.common.openapi) = {
            path: "/api/members",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 添加成员",
        };
    };
    rpc CMDB_MEMBER_ADD_BY_INVITECODE (MemberAddByInviteCodeRequest) returns (MemberAddByInviteCodeResponse) {
        option (google.api.http) = {
            post: "/api/members/actions/create-by-invitecode",
        };
        option (erda.common.openapi) = {
            path: "/api/members/actions/create-by-invitecode",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 通过邀请码添加成员",
        };
    };
    rpc CMDB_MEMBER_LABEL_LIST (CMDB_MEMBER_LABEL_LIST_Request) returns (MemberLabelListResponse) {
        option (google.api.http) = {
            get: "/api/members/actions/list-labels",
        };
        option (erda.common.openapi) = {
            path: "/api/members/actions/list-labels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询成员标签列表",
        };
    };
    rpc CMDB_MEMBER_LIST (MemberListRequest) returns (MemberListResponse) {
        option (google.api.http) = {
            get: "/api/members",
        };
        option (erda.common.openapi) = {
            path: "/api/members",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询成员列表",
        };
    };
    rpc CMDB_MEMBER_REMOVE (MemberRemoveRequest) returns (MemberRemoveResponse) {
        option (google.api.http) = {
            post: "/api/members/actions/remove",
        };
        option (erda.common.openapi) = {
            path: "/api/members/actions/remove",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除成员",
        };
    };
    rpc CMDB_MY_APPLICATIONS_LIST (ApplicationListRequest) returns (ApplicationListResponse) {
        option (google.api.http) = {
            get: "/api/applications/actions/list-my-applications",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/actions/list-my-applications",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询我的应用列表",
        };
    };
    rpc CMDB_MY_PROJECTS_LIST (ProjectListRequest) returns (ProjectListResponse) {
        option (google.api.http) = {
            get: "/api/projects/actions/list-my-projects",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/actions/list-my-projects",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询我的项目列表",
        };
    };
    rpc CMDB_NOTIFYITEM_QUERY (QueryNotifyItemRequest) returns (QueryNotifyItemResponse) {
        option (google.api.http) = {
            get: "/api/notify-items",
        };
        option (erda.common.openapi) = {
            path: "/api/notify-items",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询通知项",
        };
    };
    rpc CMDB_NOTIFYITEM_UPDATE (UpdateNotifyItemRequest) returns (UpdateNotifyItemResponse) {
        option (google.api.http) = {
            put: "/api/notify-items/{notifyItemID}",
        };
        option (erda.common.openapi) = {
            path: "/api/notify-items/{notifyItemID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新通知项",
        };
    };
    rpc CMDB_NOTIFY_CREATE (CreateNotifyRequest) returns (CreateNotifyResponse) {
        option (google.api.http) = {
            post: "/api/notifies",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建通知",
        };
    };
    rpc CMDB_NOTIFY_DELETE (CMDB_NOTIFY_DELETE_Request) returns (DeleteNotifyResponse) {
        option (google.api.http) = {
            delete: "/api/notifies/{notifyID}",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies/{notifyID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除通知",
        };
    };
    rpc CMDB_NOTIFY_DISABLE (CMDB_NOTIFY_DISABLE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/notifies/{notifyID}/actions/disable",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies/{notifyID}/actions/disable",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 禁用通知",
        };
    };
    rpc CMDB_NOTIFY_ENABLE (CMDB_NOTIFY_ENABLE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/notifies/{notifyID}/actions/enable",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies/{notifyID}/actions/enable",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 启用通知",
        };
    };
    rpc CMDB_NOTIFY_FUZZY_QUERY (CMDB_NOTIFY_FUZZY_QUERY_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/notifies/actions/fuzzy-query-by-source",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies/actions/fuzzy-query-by-source",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 模糊查询通知",
        };
    };
    rpc CMDB_NOTIFY_GET (CMDB_NOTIFY_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/notifies/{notifyID}",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies/{notifyID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取通知详情",
        };
    };
    rpc CMDB_NOTIFY_HISTORIES (QueryNotifyHistoryRequest) returns (QueryNotifyHistoryResponse) {
        option (google.api.http) = {
            get: "/api/notify-histories",
        };
        option (erda.common.openapi) = {
            path: "/api/notify-histories",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询通知项",
        };
    };
    rpc CMDB_NOTIFY_QUERY (QueryNotifyRequest) returns (QueryNotifyResponse) {
        option (google.api.http) = {
            get: "/api/notifies",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询通知",
        };
    };
    rpc CMDB_NOTIFY_UPDATE (UpdateNotifyRequest) returns (UpdateNotifyResponse) {
        option (google.api.http) = {
            put: "/api/notifies/{notifyID}",
        };
        option (erda.common.openapi) = {
            path: "/api/notifies/{notifyID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新通知",
        };
    };
    rpc CMDB_PERMISSION_ACCESS (ScopeRoleAccessRequest) returns (PermissionListResponse) {
        option (google.api.http) = {
            post: "/api/permissions/actions/access",
        };
        option (erda.common.openapi) = {
            path: "/api/permissions/actions/access",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 访问权限列表",
        };
    };
    rpc CMDB_PERMISSION_CHECK (PermissionCheckRequest) returns (PermissionCheckResponse) {
        option (google.api.http) = {
            post: "/api/permissions/actions/check",
        };
        option (erda.common.openapi) = {
            path: "/api/permissions/actions/check",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 鉴权",
        };
    };
    rpc CMDB_PERMISSION_LIST (CMDB_PERMISSION_LIST_Request) returns (ScopeRoleListResponse) {
        option (google.api.http) = {
            get: "/api/permissions",
        };
        option (erda.common.openapi) = {
            path: "/api/permissions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 列出用户所有权限",
        };
    };
    rpc CMDB_PROJECT_FUNCTIONS_GET (CMDB_PROJECT_FUNCTIONS_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/projects/actions/get-project-functions",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/actions/get-project-functions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取项目功能配置",
        };
    };
    rpc CMDB_PROJECT_FUNCTIONS_SET (ProjectFunctionSetRequest) returns (ProjectFunctionSetResponse) {
        option (google.api.http) = {
            post: "/api/projects/actions/set-project-functions",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/actions/set-project-functions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 设置项目功能",
        };
    };
    rpc CMDB_PROJECT_GET_NSINFO (CMDB_PROJECT_GET_NSINFO_Request) returns (ProjectNameSpaceInfoResponse) {
        option (google.api.http) = {
            get: "/api/projects/{projectID}/actions/get-ns-info",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectID}/actions/get-ns-info",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取项目级命名空间信息",
        };
    };
    rpc CMDB_PROJECT_METRICS_HISTOGRAM (CMDB_PROJECT_METRICS_HISTOGRAM_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/projects/resource/{resourceType}/actions/list-usage-histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/resource/{resourceType}/actions/list-usage-histogram",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询项目资源汇总监控数据曲线图数据",
        };
    };
    rpc CMDB_PROJECT_UPDATE (ProjectUpdateRequest) returns (ProjectUpdateResponse) {
        option (google.api.http) = {
            put: "/api/projects/{projectID}",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新项目",
        };
    };
    rpc CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE (ProjectWorkSpaceAbility) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/project-workspace-abilities",
        };
        option (erda.common.openapi) = {
            path: "/api/project-workspace-abilities",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建项目环境能力",
        };
    };
    rpc CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE (CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/project-workspace-abilities",
        };
        option (erda.common.openapi) = {
            path: "/api/project-workspace-abilities",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除项目环境能力",
        };
    };
    rpc CMDB_PROJECT_WORKSPACE_ABILITIES_GET (CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) returns (ProjectWorkSpaceAbilityResponse) {
        option (google.api.http) = {
            get: "/api/project-workspace-abilities/{projectID}/{workspace}",
        };
        option (erda.common.openapi) = {
            path: "/api/project-workspace-abilities/{projectID}/{workspace}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取创建项目环境能力",
        };
    };
    rpc CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE (ProjectWorkSpaceAbility) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/project-workspace-abilities",
        };
        option (erda.common.openapi) = {
            path: "/api/project-workspace-abilities",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新项目环境能力",
        };
    };
    rpc CMDB_ROLES_LIST_BY_USER (ListMemberRolesByUserRequest) returns (ListMemberRolesByUserResponse) {
        option (google.api.http) = {
            get: "/api/members/actions/list-user-roles",
        };
        option (erda.common.openapi) = {
            path: "/api/members/actions/list-user-roles",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据用户id获取成员角色列表",
        };
    };
    rpc EVENTBOX_WEBSOCKET (EVENTBOX_WEBSOCKET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/websocket/{a}/{b}/websocket",
        };
        option (erda.common.openapi) = {
            path: "/api/websocket/{a}/{b}/websocket",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: dice's websocket proxy",
        };
    };
    rpc EVENTBOX_WEBSOCKET_INFO (EVENTBOX_WEBSOCKET_INFO_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/websocket/info",
        };
        option (erda.common.openapi) = {
            path: "/api/websocket/info",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: dice's websocket proxy info",
        };
    };
    rpc QUOTA_GET_PROJECT_NAMESPACES (QUOTA_GET_PROJECT_NAMESPACES_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/projects-namespaces",
        };
        option (erda.common.openapi) = {
            path: "/api/projects-namespaces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc QUOTA_GET_PROJECT_QUOTA (QUOTA_GET_PROJECT_QUOTA_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/projects-quota",
        };
        option (erda.common.openapi) = {
            path: "/api/projects-quota",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
}
