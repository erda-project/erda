// generated by openapi-gen-protobuf

syntax = "proto3";

package erda.dop;

option go_package = "github.com/erda-project/erda-proto-go/openapiv1/dop/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "common/openapi.proto";
import "common/identity.proto";

message ADAPTOR_CICD_CRON_START_Request {
    string cronID = 1; // generated from path variable: cronID. You should change the proto type if necessary
}
message IterationPagingResponse {
    optional google.protobuf.Value data = 1;
}
message PublisherDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string publisherType = 3 [json_name = "publishType"];
    string publisherKey = 4 [json_name = "publishKey"];
    uint64 orgID = 5 [json_name = "orgId"];
    string creator = 6;
    string logo = 7;
    string desc = 8;
    bool joined = 9;
    google.protobuf.Timestamp createdAt = 10;
    google.protobuf.Timestamp updatedAt = 11;
    repeated google.protobuf.Value nexusRepositories = 12;
    repeated string pipelineCmNamespaces = 13;
}
message TicketReopenResponse {
    int64 data = 1;
}
message CertificateListRequest {
    uint64 orgID = 1;
    string query = 2;
    string name = 3;
    string type = 4;
    string status = 5;
    int64 pageNo = 6;
    int64 pageSize = 7;
}
message CommentUpdateResponse {
    int64 data = 1;
}
message BaseModel {
    uint64 ID = 1 [json_name = "id"];
    google.protobuf.Timestamp createdAt = 2;
    google.protobuf.Timestamp updatedAt = 3;
    string creatorID = 4;
    string updaterID = 5;
}
message SonarIssueResponse {
    google.protobuf.Value data = 1;
}
message PipelineRerunResponse {
    optional google.protobuf.Value data = 1;
}
message PipelineRerunFailedResponse {
    optional google.protobuf.Value data = 1;
    string pipelineID = 2; // generated from path variable: pipelineID. You should change the proto type if necessary
}
message APIDocWebsocket_Request {
    string inode = 1; // generated from path variable: inode. You should change the proto type if necessary
}
message APITestsAttemptRequest {
    int64 projectTestEnvID = 1;
    int64 usecaseTestEnvID = 2;
    repeated google.protobuf.Value aPIs = 3 [json_name = "apis"];
}
message QA_SONAR_ISSUES_Request {
}
message PipelineDetailResponse {
    optional google.protobuf.Value data = 1;
}
message ProjectPackageParse_Request {
}
message UpdateBranchRuleRequest {
    int64 ID = 1 [json_name = "-"];
    string rule = 2;
    bool isProtect = 3;
    bool needApproval = 4;
    bool isTriggerPipeline = 5;
    string desc = 6;
    string workspace = 7;
    string artifactWorkspace = 8;
}
message CertificateUpdateRequest {
    string uUID = 1 [json_name = "uuid"];
    string desc = 2;
    string filename = 3;
    string certificateID = 4; // generated from path variable: certificateID. You should change the proto type if necessary
}
message PublisherUpdateResponse {
    google.protobuf.Value data = 1;
}
message CreateSLAReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 6; // generated from path variable: swaggerVersion. You should change the proto type if necessary
}
message PagingProjectDTO {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message BaseResponse {
    bool success = 1;
    optional google.protobuf.Value err = 2;
    repeated uint32 data = 3;
}
message ListSwaggerVersionRsp {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message PUBLISH_ITEM_CERTIFICATION_GET_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message ADAPTOR_CICD_BRANCHES_ALL_VALID_Request {
}
message PipelineInvokedComboResponse {
    repeated google.protobuf.Value data = 1;
}
message OrgNexusShowPasswordResponse {
    map<uint64, string> data = 1;
}
message CMDB_ORG_PUBLISHER_CREATE_GET_Request {
    string orgID = 1; // generated from path variable: orgID. You should change the proto type if necessary
}
message PublishItemStatisticsErrTrendResponse {
    uint64 crashTimes = 1;
    string crashRate = 2;
    double crashRateGrowth = 3;
    uint64 affectUsers = 4;
    string affectUsersProportion = 5;
    double affectUsersProportionGrowth = 6;
}
message PagingAPIAssetsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value queryParams = 3;
}
message QA_SONAR_METRIC_RULES_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message TicketReopenRequest {
    int64 ticketID = 1;
}
message CreateContractReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string clientID = 5; // generated from path variable: clientID. You should change the proto type if necessary
}
message SLAModel {
    google.protobuf.Value baseModel = 1;
    string name = 2;
    string desc = 3;
    string approval = 4;
    uint64 accessID = 5;
    string source = 6;
}
message PipelineTaskOperateRequest {
    uint64 taskID = 1;
    string taskAlias = 2;
    optional bool disable = 3;
    optional bool pause = 4;
}
message ADAPTOR_CICD_PROJECT_DETAIL_Request {
}
message OrgGetByDomainResponse {
    optional google.protobuf.Value data = 1;
}
message TicketFetchRequest {
    int64 ticketID = 1;
}
message ListAPIGatewaysReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string assetID = 4; // generated from path variable: assetID. You should change the proto type if necessary
}
message UpdateContract_Request {
    string clientID = 1; // generated from path variable: clientID. You should change the proto type if necessary
    string contractID = 2; // generated from path variable: contractID. You should change the proto type if necessary
}
message APITestsAttemptResponse {
    repeated google.protobuf.Value data = 1;
}
message CertificateUpdateResponse {
    google.protobuf.Value data = 1;
}
message IterationUpdateRequest {
    string title = 1;
    string content = 2;
    optional google.protobuf.Timestamp startedAt = 3;
    optional google.protobuf.Timestamp finishedAt = 4;
    string state = 5;
    string id = 6; // generated from path variable: id. You should change the proto type if necessary
}
message DeleteSLAReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string assetID = 4; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 5; // generated from path variable: swaggerVersion. You should change the proto type if necessary
    string slaID = 6; // generated from path variable: slaID. You should change the proto type if necessary
}
message PublisherDetailResponse {
    google.protobuf.Value data = 1;
}
message GetAddonInstanceDetailResponse {
    google.protobuf.Value data = 1;
}
message GetTestFileRecordResponse {
    google.protobuf.Value data = 1;
}
message QA_TESTENV_CREATE_Request {
}
message PipelineRunResponse {
}
message ProjectListResponse {
    google.protobuf.Value data = 1;
}
message ProxyMetrics_Request {
}
message ListTestFileRecordsResponse {
    optional google.protobuf.Value data = 1;
}
message ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary
    string taskID = 2; // generated from path variable: taskID. You should change the proto type if necessary
}
message ApplicationDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string mode = 4;
    bool pined = 5;
    string desc = 6;
    string logo = 7;
    map<string, google.protobuf.Value> config = 8;
    bool isPublic = 9;
    string creator = 10;
    optional google.protobuf.Timestamp unBlockStart = 11;
    optional google.protobuf.Timestamp unBlockEnd = 12;
    string blockStatus = 13;
    google.protobuf.Value stats = 14;
    string gitRepo = 15;
    string gitRepoAbbrev = 16;
    string gitRepoNew = 17;
    string token = 18;
    uint64 orgID = 19 [json_name = "orgId"];
    string orgName = 20;
    string orgDisplayName = 21;
    uint64 projectID = 22 [json_name = "projectId"];
    string projectName = 23;
    string projectDisplayName = 24;
    repeated google.protobuf.Value workspaces = 25;
    bool isExternalRepo = 26;
    optional google.protobuf.Value repoConfig = 27;
    optional google.protobuf.Value sonarConfig = 28;
    repeated string memberRoles = 29;
    google.protobuf.Timestamp createdAt = 30;
    google.protobuf.Timestamp updatedAt = 31;
    string extra = 32 [json_name = "-"];
}
message TicketFetchResponse {
    google.protobuf.Value data = 1;
}
message QA_APITESTS_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message APITestEnvGetResponse {
    optional google.protobuf.Value data = 1;
}
message ImportProjectTemplateRequest {
    uint64 projectID = 1;
    string projectName = 2;
    string projectDisplayName = 3;
    int64 orgID = 4;
}
message QA_AUTOTEST_SPACE_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message UpdateClientReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    optional google.protobuf.Value body = 5;
    string clientID = 6; // generated from path variable: clientID. You should change the proto type if necessary
}
message MonitorKeys {
    string aK = 1 [json_name = "ak"];
    string aI = 2 [json_name = "ai"];
    string env = 3;
    int64 appID = 4 [json_name = "appId"];
}
message CertificateFileDTO {
    string uUID = 1 [json_name = "uuid"];
    string fileName = 2;
}
message IterationCreateResponse {
    optional google.protobuf.Value data = 1;
}
message ListContractsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    string clientID = 5; // generated from path variable: clientID. You should change the proto type if necessary
}
message CertificateCreateRequest {
    uint64 orgID = 1 [json_name = "orgId"];
    string type = 2;
    string name = 3;
    string desc = 4;
    google.protobuf.Value androidInfo = 5;
    google.protobuf.Value iOSInfo = 6 [json_name = "iosInfo"];
    google.protobuf.Value messageInfo = 7;
}
message CMDB_LIBREFERENCE_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message ListSwaggerVersionClientsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 6; // generated from path variable: swaggerVersion. You should change the proto type if necessary
}
message AutoTestSpaceResponse {
    optional google.protobuf.Value data = 1;
}
message UnifiedFileTreeNodeGetRequest {
    string inode = 1;
    string scope = 2;
    string scopeID = 3;
}
message PipelineOperateRequest {
    repeated google.protobuf.Value taskOperates = 1;
    string pipelineID = 2; // generated from path variable: pipelineID. You should change the proto type if necessary
}
message ADAPTOR_CICD_RUN_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary
}
message IOSCertificateKeyDTO {
    string keyChainP12File = 1;
    string keyChainP12Password = 2;
    string debugMobileProvision = 3;
    string releaseMobileProvision = 4;
}
message QueryBranchRuleRequest {
    int64 projectID = 1;
    int64 appID = 2;
}
message TicketUpdateRequestBody {
    string title = 1;
    string content = 2;
    string type = 3;
    string priority = 4;
}
message SonarMetricRuleDto {
    int64 ID = 1 [json_name = "id"];
    google.protobuf.Timestamp createdAt = 2;
    google.protobuf.Timestamp updatedAt = 3;
    string description = 4;
    string scopeType = 5;
    string scopeID = 6 [json_name = "scopeId"];
    string metricKey = 7;
    int64 metricKeyID = 8 [json_name = "metricKeyId"];
    string operational = 9;
    string metricValue = 10;
    string metricKeyDesc = 11;
    int64 decimalScale = 12;
    string valueType = 13;
}
message SonarCredentialGetResponse {
    optional google.protobuf.Value data = 1;
}
message QA_TESTENV_LIST_Request {
}
message PipelineCreateResponse {
    optional google.protobuf.Value data = 1;
}
message ADAPTOR_CICD_CRON_STOP_Request {
    string cronID = 1; // generated from path variable: cronID. You should change the proto type if necessary
}
message CertificateDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string type = 3;
    uint64 orgID = 4 [json_name = "orgId"];
    string creator = 5;
    string operator = 6;
    string desc = 7;
    google.protobuf.Value androidInfo = 8;
    google.protobuf.Value iOSInfo = 9 [json_name = "iosInfo"];
    google.protobuf.Value messageInfo = 10;
    google.protobuf.Timestamp createdAt = 11;
    google.protobuf.Timestamp updatedAt = 12;
}
message PushCertificateConfigsRequest {
    bool enable = 1;
    uint64 appID = 2 [json_name = "appId"];
    uint64 certificateID = 3 [json_name = "certificateId"];
    string certificateType = 4;
    repeated string envs = 5;
    google.protobuf.Value iOSKey = 6 [json_name = "iosKey"];
    google.protobuf.Value androidKey = 7;
    google.protobuf.Value messageKey = 8;
}
message ListSwaggerVersionsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
}
message TestIssuesStatistics {
    string bugs = 1;
    string coverage = 2;
    string vulnerabilities = 3;
    string codeSmells = 4;
    string duplications = 5;
    optional google.protobuf.Value rating = 6;
    string sonarKey = 7;
    string path = 8;
    string uT = 9 [json_name = "ut"];
    string commitID = 10 [json_name = "commitId"];
    string branch = 11;
    google.protobuf.Timestamp time = 12;
}
message TicketListRequest {
    repeated string type = 1;
    string priority = 2;
    string status = 3;
    string targetType = 4;
    string targetID = 5;
    string key = 6;
    int64 orgID = 7;
    string metric = 8;
    repeated string metricID = 9;
    int64 startTime = 10;
    int64 endTime = 11;
    bool comment = 12;
    string q = 13;
    int64 pageNo = 14;
    int64 pageSize = 15;
}
message GetOperationReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    google.protobuf.Value uRIParams = 3;
    string id = 4; // generated from path variable: id. You should change the proto type if necessary
}
message ListProjectAPIGatewaysReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string projectID = 4; // generated from path variable: projectID. You should change the proto type if necessary
}
message TicketDeleteResponse {
    int64 data = 1;
}
message GetAPIAssetVersionReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string versionID = 6; // generated from path variable: versionID. You should change the proto type if necessary
}
message ApiTestsGetResponse {
    optional google.protobuf.Value data = 1;
}
message APITestEnvData {
    int64 ID = 1 [json_name = "id"];
    int64 envID = 2;
    string envType = 3;
    string name = 4;
    string domain = 5;
    map<string, string> header = 6;
    map<string,  google.protobuf.Value> global = 7;
}
message ApplicationUpdateRequest {
    int64 applicationID = 1 [json_name = "-"];
    google.protobuf.Value body = 2;
}
message AppCertificateListRequest {
    uint64 appID = 1;
    string status = 2;
    int64 pageNo = 3;
    int64 pageSize = 4;
}
message ISummary {
    google.protobuf.Value requirement = 1;
    google.protobuf.Value task = 2;
    google.protobuf.Value bug = 3;
}
message OrgSearchRequest {
    string q = 1;
    int64 pageNo = 2;
    int64 pageSize = 3;
    string org = 4;
}
message PUBLISH_ITEM_USERS_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message PipelineGetBranchRuleResponse {
    optional google.protobuf.Value data = 1;
}
message OrgCreateResponse {
    google.protobuf.Value data = 1;
}
message CodeCoverageUpdateRequest {
    uint64 ID = 1 [json_name = "id"];
    string status = 2;
    string msg = 3;
    string reportXmlUUID = 4;
    string reportTarUrl = 5;
}
message PublishItemStatisticsDetailRequest {
    uint64 endTime = 1;
    string publishItemId = 2; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message IterationCreateRequest {
    optional google.protobuf.Timestamp startedAt = 1;
    optional google.protobuf.Timestamp finishedAt = 2;
    uint64 projectID = 3;
    string title = 4;
    string content = 5;
}
message ProjectResourceUsage {
    double cpuServiceUsed = 1;
    double memServiceUsed = 2;
    double cpuAddonUsed = 3;
    double memAddonUsed = 4;
}
message LibReference {
    uint64 ID = 1 [json_name = "id"];
    uint64 appID = 2;
    uint64 libID = 3;
    string libName = 4;
    string libDesc = 5;
    uint64 approvalID = 6;
    string approvalStatus = 7;
    string creator = 8;
    optional google.protobuf.Timestamp createdAt = 9;
    optional google.protobuf.Timestamp updatedAt = 10;
}
message BlockoutConfig {
    bool blockDEV = 1 [json_name = "blockDev"];
    bool blockTEST = 2 [json_name = "blockTest"];
    bool blockStage = 3;
    bool blockProd = 4;
}
message APIAssetVersionCreateRequest {
    uint64 orgID = 1;
    string aPIAssetID = 2 [json_name = "apiAssetID"];
    uint64 major = 3;
    uint64 minor = 4;
    uint64 patch = 5;
    string desc = 6;
    string specProtocol = 7;
    string specDiceFileUUID = 8;
    string spec = 9;
    string inode = 10;
    repeated google.protobuf.Value instances = 11;
    string source = 12;
    uint64 appID = 13;
    string branch = 14;
    string serviceName = 15;
    string assetID = 16; // generated from path variable: assetID. You should change the proto type if necessary
}
message DeleteClient_Request {
    string clientID = 1; // generated from path variable: clientID. You should change the proto type if necessary
}
message GetAssetVersionRsp {
    optional google.protobuf.Value asset = 1;
    optional google.protobuf.Value version = 2;
    optional google.protobuf.Value spec = 3;
    bool hasInstantiation = 4;
    bool hasAccess = 5;
    optional google.protobuf.Value access = 6;
}
message ListContractRecordsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string clientID = 4; // generated from path variable: clientID. You should change the proto type if necessary
    string contractID = 5; // generated from path variable: contractID. You should change the proto type if necessary
}
message UpdateAPIAssetReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    map<string, google.protobuf.Value> keys = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
}
message ProjectCreateResponse {
    uint64 data = 1;
}
message PublisherCreateRequest {
    string name = 1;
    string publisherType = 2;
    string logo = 3;
    string desc = 4;
    uint64 orgID = 5 [json_name = "orgId"];
}
message APIAssetVersionInstanceCreateRequest {
    string name = 1;
    string instanceType = 2;
    uint64 runtimeID = 3;
    string serviceName = 4;
    string endpointID = 5;
    string uRL = 6 [json_name = "url"];
    string assetID = 7 [json_name = "-"];
    uint64 versionID = 8 [json_name = "-"];
}
message DownloadSpecTextReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string versionID = 6; // generated from path variable: versionID. You should change the proto type if necessary
}
message APP_PUBLISH_ITEM_RELATION_GET_Request {
    string application = 1; // generated from path variable: application. You should change the proto type if necessary
}
message CertificateCreateResponse {
    google.protobuf.Value data = 1;
}
message CommentUpdateRequest {
    int64 commentID = 1 [json_name = "-"];
    google.protobuf.Value body = 2;
}
message CMDB_ORG_RESOURCE_GET_Request {
}
message APIAssetPagingResponse {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
    repeated string userIDs = 3;
}
message UpdateBranchRuleResponse {
    optional google.protobuf.Value data = 1;
}
message PagingAppCertificateDTO {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message OrgUpdateRequestBody {
    string logo = 1;
    string name = 2;
    string displayName = 3;
    string desc = 4;
    string locale = 5;
    uint64 ID = 6 [json_name = "id"];
    string publisherName = 7;
    optional google.protobuf.Value config = 8;
    optional google.protobuf.Value blockoutConfig = 9;
    bool isPublic = 10;
}
message CreateClientReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value body = 3;
}
message PipelineCronStopResponse {
    optional google.protobuf.Value data = 1;
}
message ADAPTOR_CICD_GET_BRANCH_RULE_Request {
    string pipelineid = 1; // generated from path variable: pipelineid. You should change the proto type if necessary
}
message PipelineOperateResponse {
}
message SonarStoreResponse {
    google.protobuf.Value data = 1;
}
message PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
    string metricName = 2; // generated from path variable: metricName. You should change the proto type if necessary
}
message ApiTestsUpdateRequest {
    google.protobuf.Value apiTestInfo = 1;
    bool isResult = 2;
    string id = 3; // generated from path variable: id. You should change the proto type if necessary
}
message CommentCreateRequest {
    int64 ticketID = 1;
    string commentType = 2;
    string content = 3;
    google.protobuf.Value iRComment = 4 [json_name = "irComment"];
    string userID = 5;
}
message CommentListResponseData {
    int64 total = 1;
    repeated google.protobuf.Value comments = 2;
}
message QueryPublishItemData {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message ListSLAsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value queryParams = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 6; // generated from path variable: swaggerVersion. You should change the proto type if necessary
    string slaID = 7; // generated from path variable: slaID. You should change the proto type if necessary
}
message ADAPTOR_CICD_FETCH_PIPELINE_ID_Request {
}
message UnifiedFileTreeNodeListRequest {
    string scope = 1;
    string scopeID = 2;
    string pinode = 3;
    string pipelineCategoryKey = 4;
}
message PipelineInvokedComboRequest {
    uint64 appID = 1;
    string branches = 2;
    string sources = 3;
    string ymlNames = 4;
}
message FileTreeDeleteNode_Request {
    string treeName = 1; // generated from path variable: treeName. You should change the proto type if necessary
    string inode = 2; // generated from path variable: inode. You should change the proto type if necessary
}
message PagingPublisherDTO {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message MemberRoleListResponse {
    google.protobuf.Value data = 1;
}
message TicketUpdateResponse {
    int64 data = 1;
}
message CreateBranchRuleResponse {
    optional google.protobuf.Value data = 1;
}
message TicketCreateResponse {
    int64 data = 1;
}
message PUBLISH_ITEM_METIRCS_COMMON_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
    string metricName = 2; // generated from path variable: metricName. You should change the proto type if necessary
}
message OrgGetByDomainRequest {
    string domain = 1;
    string orgName = 2;
}
message DeleteAccess_Request {
    string accessID = 1; // generated from path variable: accessID. You should change the proto type if necessary
}
message ListInstantiations_Request {
}
message PipelineCronDTO {
    uint64 ID = 1 [json_name = "id"];
    google.protobuf.Timestamp timeCreated = 2;
    google.protobuf.Timestamp timeUpdated = 3;
    uint64 applicationID = 4;
    string branch = 5;
    string cronExpr = 6;
    optional google.protobuf.Timestamp cronStartTime = 7;
    string pipelineYmlName = 8;
    uint64 basePipelineID = 9;
    optional bool enable = 10;
    string pipelineYml = 11;
    repeated string configManageNamespaces = 12;
    map<string, string> secrets = 13;
    string userID = 14;
    uint64 orgID = 15;
    string pipelineDefinitionID = 16;
    string pipelineSource = 17;
    string clusterName = 18;
}
message QueryAppPublishItemRelationResponse {
    repeated google.protobuf.Value data = 1;
}
message ApplicationDeleteResponse {
    google.protobuf.Value data = 1;
}
message OrgSearchResponse {
    google.protobuf.Value data = 1;
}
message GetAPIAssetReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string assetID = 4; // generated from path variable: assetID. You should change the proto type if necessary
}
message DashboardSpotLogLine {
    string ID = 1 [json_name = "id"];
    string source = 2;
    string stream = 3;
    string timeStamp = 4 [json_name = "timestamp"];
    string content = 5;
    int64 offset = 6;
    string level = 7;
    string requestID = 8 [json_name = "requestId"];
}
message PipelineCronListResponse {
    repeated google.protobuf.Value data = 1;
}
message ApplicationDeleteRequest {
    string projectID = 1 [json_name = "projectId"];
    string applicationId = 2; // generated from path variable: applicationId. You should change the proto type if necessary
}
message TicketUpdateRequest {
    int64 ticketID = 1 [json_name = "-"];
    google.protobuf.Value body = 2;
}
message APITestReq {
    string clientID = 1;
    string clientSecret = 2;
    repeated google.protobuf.Value aPIs = 3 [json_name = "apis"];
    string assetID = 4; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 5; // generated from path variable: swaggerVersion. You should change the proto type if necessary
}
message Comment {
    int64 commentID = 1 [json_name = "id"];
    int64 ticketID = 2;
    string commentType = 3;
    string content = 4;
    google.protobuf.Value iRComment = 5 [json_name = "irComment"];
    string userID = 6;
    google.protobuf.Timestamp createdAt = 7;
    google.protobuf.Timestamp updatedAt = 8;
}
message CMDB_ORG_DELETE_Request {
    string orgID = 1; // generated from path variable: orgID. You should change the proto type if necessary
}
message ProjectDetailResponse {
    google.protobuf.Value data = 1;
}
message TicketCloseRequest {
    int64 ticketID = 1;
}
message ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request {
}
message ADAPTOR_CICD_RERUN_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary
}
message ApplicationUpdateResponse {
    google.protobuf.Value data = 1;
}
message AndroidCertificateDTO {
    bool isManualCreate = 1 [json_name = "manualCreate"];
    google.protobuf.Value manualInfo = 2;
    google.protobuf.Value autoInfo = 3;
}
message QA_TESTPLAN_PIPELINE_DETAIL_Request {
    string pipelineId = 1; // generated from path variable: pipelineId. You should change the proto type if necessary
}
message APIDocCreateNodeReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string treeName = 5; // generated from path variable: treeName. You should change the proto type if necessary
}
message FileTreeListNodes_Request {
    string treeName = 1; // generated from path variable: treeName. You should change the proto type if necessary
}
message ListContractRecordsRsp {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message TestFileRecord {
    uint64 ID = 1 [json_name = "id"];
    string fileName = 2 [json_name = "name"];
    string description = 3;
    string projectName = 4;
    string projectDisplayName = 5;
    uint64 orgID = 6;
    uint64 projectID = 7;
    uint64 testSetID = 8;
    string apiFileUUID = 9;
    uint64 spaceID = 10;
    string type = 11;
    string state = 12;
    string errorInfo = 13;
    google.protobuf.Timestamp createdAt = 14;
    google.protobuf.Timestamp updatedAt = 15;
    string operatorID = 16;
}
message CMDB_ORG_PUBLISHER_CREATE_Request {
    string orgID = 1; // generated from path variable: orgID. You should change the proto type if necessary
}
message ListSLAsRsp {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ListAPIGatewaysResp {
    google.protobuf.Value data = 1;
}
message ADAPTOR_CICD_CONFIG_WORKSPACES_Request {
}
message ApplicationCreateRequest {
    string name = 1;
    string displayName = 2;
    string logo = 3;
    string desc = 4;
    uint64 projectID = 5 [json_name = "projectId"];
    string mode = 6;
    map<string, google.protobuf.Value> config = 7;
    bool isExternalRepo = 8;
    optional google.protobuf.Value repoConfig = 9;
    optional google.protobuf.Value sonarConfig = 10;
}
message ApplicationInitRequest {
    uint64 applicationID = 1 [json_name = "-"];
    string mobileAppName = 2;
    string mobileDisplayName = 3;
    string bundleID = 4;
    string packageName = 5;
}
message DeleteBranchRuleResponse {
    optional google.protobuf.Value data = 1;
}
message TicketListResponse {
    google.protobuf.Value data = 1;
}
message PublishItemStatisticsTrendData {
    google.protobuf.Value data = 1;
}
message SonarMetricRulesDefinitionListRequest {
    string scopeType = 1;
    string scopeID = 2 [json_name = "scopeId"];
}
message UpdateAssetVersionReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string versionID = 6; // generated from path variable: versionID. You should change the proto type if necessary
}
message UpdateAppPublishItemRelationRequest {
    int64 appID = 1 [json_name = "-"];
    string userID = 2 [json_name = "-"];
    int64 prodItemID = 3 [json_name = "PROD"];
    int64 sTAGINGItemID = 4 [json_name = "STAGING"];
    int64 tESTItemID = 5 [json_name = "TEST"];
    int64 dEVItemID = 6 [json_name = "DEV"];
    map<string, google.protobuf.Value> aKAIMap = 7 [json_name = "-"];
    string application = 8; // generated from path variable: application. You should change the proto type if necessary
}
message PagingCertificateDTO {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message CommentListResponse {
    google.protobuf.Value data = 1;
}
message IterationPagingRequest {
    uint64 pageNo = 1;
    uint64 pageSize = 2;
    string deadline = 3;
    uint64 projectID = 4;
    string state = 5;
    bool withoutIssueSummary = 6;
    repeated uint64 IDs = 7 [json_name = "ids"];
}
message PUBLISH_ITEM_ERR_EFFACTS_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message ProjectPackageRequest {
    uint64 projectID = 1;
    string projectName = 2;
    string projectDisplayName = 3;
    uint64 orgID = 4;
    string orgName = 5;
}
message APITestEnvCreateRequest {
    google.protobuf.Value aPITestEnvData = 1;
}
message APITestEnvListResponse {
    repeated google.protobuf.Value data = 1;
}
message CICDPipelineYmlListRequest {
    int64 appID = 1;
    string branch = 2;
}
message ApplicationUpdateRequestBody {
    string logo = 1;
    string desc = 2;
    string displayName = 3;
    map<string, google.protobuf.Value> config = 4;
    optional google.protobuf.Value repoConfig = 5;
    bool isPublic = 6;
    optional google.protobuf.Value sonarConfig = 7;
}
message ProjectDetailRequest {
    string projectIDOrName = 1 [json_name = "projectIdOrName"];
    uint64 orgID = 2;
    uint64 orgName = 3;
}
message ListRuntimeServices_Request {
    string appID = 1; // generated from path variable: appID. You should change the proto type if necessary
}
message UnifiedFileTreeNodeCreateRequest {
    string type = 1;
    string scope = 2;
    string scopeID = 3;
    string pinode = 4;
    string name = 5;
    string desc = 6;
}
message OrgUpdateRequest {
    int64 orgID = 1 [json_name = "-"];
    google.protobuf.Value body = 2;
}
message GetContractReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string clientID = 4; // generated from path variable: clientID. You should change the proto type if necessary
    string contractID = 5; // generated from path variable: contractID. You should change the proto type if necessary
}
message FileTreeUpdateNode_Request {
    string treeName = 1; // generated from path variable: treeName. You should change the proto type if necessary
    string inode = 2; // generated from path variable: inode. You should change the proto type if necessary
}
message PipelineAppAllValidBranchWorkspaceResponse {
    repeated google.protobuf.Value data = 1;
}
message ProjectStats {
    int64 countApplications = 1;
    int64 countMembers = 2;
    int64 totalApplicationsCount = 3;
    int64 totalMembersCount = 4;
    int64 totalIterationsCount = 5;
    int64 runningIterationsCount = 6;
    int64 planningIterationsCount = 7;
    double totalManHourCount = 8;
    double usedManHourCount = 9;
    double planningManHourCount = 10;
    int64 doneBugCount = 11;
    int64 totalBugCount = 12;
    double doneBugPercent = 13;
}
message PublishItemStatisticsErrListData {
    repeated google.protobuf.Value data = 1;
}
message APITestEnvUpdateResponse {
    int64 data = 1;
}
message FileTreeMvCpNode_Request {
    string treeName = 1; // generated from path variable: treeName. You should change the proto type if necessary
    string inode = 2; // generated from path variable: inode. You should change the proto type if necessary
    string action = 3; // generated from path variable: action. You should change the proto type if necessary
}
message SonarMetricRulesUpdateRequest {
    int64 ID = 1 [json_name = "id"];
    string description = 2;
    string metricValue = 3;
    string scopeType = 4;
    string scopeID = 5 [json_name = "scopeId"];
}
message PublisherUpdateRequest {
    uint64 ID = 1 [json_name = "id"];
    string logo = 2;
    string desc = 3;
}
message TicketListResponseData {
    int64 total = 1;
    repeated google.protobuf.Value tickets = 2;
}
message QueryBranchRuleResponse {
    repeated google.protobuf.Value data = 1;
}
message IterationUpdateResponse {
    uint64 data = 1;
}
message OrgResourceInfo {
    double totalCpu = 1;
    double totalMem = 2;
    double availableCpu = 3;
    double availableMem = 4;
}
message PublisherDeleteResponse {
    uint64 data = 1;
}
message APITestEnvDeleteResponse {
    optional google.protobuf.Value data = 1;
}
message UpdateSLAReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 6; // generated from path variable: swaggerVersion. You should change the proto type if necessary
    string slaID = 7; // generated from path variable: slaID. You should change the proto type if necessary
}
message AndroidCertificateManualKeyStoreDTO {
    google.protobuf.Value certificateFileDTO = 1;
    google.protobuf.Value androidCertificateKeyStoreDTO = 2;
}
message TicketDeleteRequest {
    int64 ticketID = 1;
}
message GetClientReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string clientID = 4; // generated from path variable: clientID. You should change the proto type if necessary
}
message GetSLAReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string assetID = 4; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 5; // generated from path variable: swaggerVersion. You should change the proto type if necessary
}
message ListTestFileRecordsRequest {
    uint64 projectID = 1;
    repeated uint64 projectIDs = 2 [json_name = "-"];
    string projectName = 3;
    string projectDisplayName = 4;
    uint64 orgID = 5;
    uint64 spaceID = 6;
    repeated string types = 7;
    string locale = 8;
    int64 pageNo = 9;
    int64 pageSize = 10;
    bool asc = 11;
}
message UpdateInstantiationReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 6; // generated from path variable: swaggerVersion. You should change the proto type if necessary
    string minor = 7; // generated from path variable: minor. You should change the proto type if necessary
    string instantiationID = 8; // generated from path variable: instantiationID. You should change the proto type if necessary
}
message PipelineCancelResponse {
}
message CMDB_CERTIFICATE_GET_Request {
    string certificateID = 1; // generated from path variable: certificateID. You should change the proto type if necessary
}
message Ticket {
    int64 ticketID = 1 [json_name = "id"];
    string title = 2;
    string content = 3;
    string type = 4;
    string priority = 5;
    string status = 6;
    string key = 7;
    string orgID = 8;
    string metric = 9;
    string metricID = 10;
    int64 count = 11;
    string creator = 12;
    string lastOperator = 13;
    map<string, google.protobuf.Value> label = 14;
    string targetType = 15;
    optional google.protobuf.Value lastComment = 16;
    string targetID = 17;
    google.protobuf.Timestamp createdAt = 18;
    google.protobuf.Timestamp updatedAt = 19;
    google.protobuf.Timestamp closedAt = 20;
    google.protobuf.Timestamp triggeredAt = 21;
}
message PublishItemStatisticsErrTrendData {
    google.protobuf.Value data = 1;
}
message PipelineConfigNamespacesFetchResponse {
    optional google.protobuf.Value data = 1;
}
message ProjectDTO {
    uint64 ID = 1 [json_name = "id"];
    string name = 2;
    string displayName = 3;
    string dDHook = 4 [json_name = "ddHook"];
    uint64 orgID = 5 [json_name = "orgId"];
    string creator = 6;
    string logo = 7;
    string desc = 8;
    repeated string owners = 9;
    string activeTime = 10;
    bool joined = 11;
    optional bool canUnblock = 12;
    string blockStatus = 13;
    bool canManage = 14 [json_name = "CanManage"];
    bool isPublic = 15;
    google.protobuf.Value stats = 16;
    google.protobuf.Value projectResourceUsage = 17;
    map<string, string> clusterConfig = 18;
    optional google.protobuf.Value resourceConfig = 19;
    map<string, int64> rollbackConfig = 20;
    double cpuQuota = 21;
    double memQuota = 22;
    google.protobuf.Timestamp createdAt = 23;
    google.protobuf.Timestamp updatedAt = 24;
    string type = 25;
}
message APIAssetGetResponse {
    optional google.protobuf.Value data = 1;
}
message DashboardSpotLogData {
    repeated google.protobuf.Value lines = 1;
}
message RoleList {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message ListContractsRsp {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message PublishItemStatisticsErrListResponse {
    string errSummary = 1;
    string appVersion = 2;
    google.protobuf.Timestamp timeOfFirst = 3;
    google.protobuf.Timestamp timeOfRecent = 4;
    uint64 totalErr = 5;
    uint64 affectUsers = 6;
}
message SonarMetricRulesDeleteRequest {
    int64 ID = 1 [json_name = "id"];
    string scopeType = 2;
    string scopeID = 3 [json_name = "scopeId"];
}
message ADAPTOR_CICD_PIPELINE_DETAIL_Request {
}
message AndroidCertificateKeyDTO {
    string debugKeyStoreFile = 1;
    string debugKeyStoreAlias = 2;
    string debugKeyPassword = 3;
    string debugStorePassword = 4;
    string releaseKeyStoreFile = 5;
    string releaseKeyStoreAlias = 6;
    string releaseKeyPassword = 7;
    string releaseStorePassword = 8;
}
message CertificateDetailResponse {
    google.protobuf.Value certificateDTO = 1 [json_name = "data"];
}
message ProjectDeleteResponse {
    google.protobuf.Value data = 1;
}
message GetOperationURIParameters {
    uint64 ID = 1;
}
message ListAccessRsp {
    uint64 orgID = 1;
    repeated google.protobuf.Value list = 2;
    uint64 total = 3;
}
message ApiTestsUpdateResponse {
    google.protobuf.Value data = 1;
}
message QA_SONAR_GET_CREDENTIAL_Request {
}
message CMDB_CERTIFICATE_APP_CANCEL_Request {
}
message CertificateQuoteRequest {
    uint64 certificateID = 1 [json_name = "certificateId"];
    uint64 appID = 2 [json_name = "appId"];
}
message CMDB_ITERATION_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message Header {
    bool success = 1;
    google.protobuf.Value error = 2 [json_name = "err"];
}
message SonarMetricRulesPagingRequest {
    string scopeType = 1;
    string scopeID = 2 [json_name = "scopeId"];
    int64 pageNo = 3;
    int64 pageSize = 4;
}
message QA_PIPELINE_TASK_LOGS_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary
    string taskID = 2; // generated from path variable: taskID. You should change the proto type if necessary
}
message SPOT_APITESTS_LOGS_DOWNLOAD_Request {
}
message ValidateSwagger_Request {
}
message IRComment {
    uint64 iterationID = 1;
    int64 issueID = 2;
    string issueTitle = 3;
    string issueType = 4;
    uint64 projectID = 5;
}
message ProjectListRequest {
    uint64 orgID = 1;
    string query = 2;
    string name = 3;
    string orderBy = 4;
    bool asc = 5;
    bool joined = 6;
    int64 pageNo = 7;
    int64 pageSize = 8;
    repeated uint64 projectIDs = 9;
    bool keepMsp = 10;
    bool isPublic = 11;
}
message ImportProjectPackageRequest {
    google.protobuf.Value projectPackageRequest = 1;
    string orgID = 2; // generated from path variable: orgID. You should change the proto type if necessary
    string projectID = 3; // generated from path variable: projectID. You should change the proto type if necessary
}
message ExportProjectTemplateRequest {
    uint64 projectID = 1;
    string projectName = 2;
    string projectDisplayName = 3;
    int64 orgID = 4;
}
message TicketCreateRequest {
    string title = 1;
    string content = 2;
    string type = 3;
    string priority = 4;
    string key = 5;
    string orgID = 6;
    string metric = 7;
    string metricID = 8;
    string userID = 9;
    map<string, google.protobuf.Value> label = 10;
    string targetType = 11;
    string targetID = 12;
    int64 triggeredAt = 13;
    int64 closedAt = 14;
}
message DeleteAPIAssets_Request {
    string assetID = 1; // generated from path variable: assetID. You should change the proto type if necessary
}
message ValidBranch {
    string name = 1;
    bool isProtect = 2;
    bool needApproval = 3;
    bool isTriggerPipeline = 4;
    string workspace = 5;
    string artifactWorkspace = 6;
}
message ApplicationCreateResponse {
    google.protobuf.Value data = 1;
}
message Iteration {
    int64 ID = 1 [json_name = "id"];
    google.protobuf.Timestamp createdAt = 2;
    google.protobuf.Timestamp updatedAt = 3;
    optional google.protobuf.Timestamp startedAt = 4;
    optional google.protobuf.Timestamp finishedAt = 5;
    uint64 projectID = 6;
    string title = 7;
    string content = 8;
    string creator = 9;
    string state = 10;
    google.protobuf.Value issueSummary = 11;
}
message RoleInfo {
    string role = 1;
    string name = 2;
}
message PUBLISH_ITEM_ERR_LIST_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message AndroidCertificateAutoDTO {
    string name = 1;
    string oU = 2 [json_name = "ou"];
    string org = 3;
    string city = 4;
    string province = 5;
    string state = 6;
    google.protobuf.Value debugKeyStore = 7;
    google.protobuf.Value releaseKeyStore = 8;
}
message OrgDTO {
    uint64 ID = 1 [json_name = "id"];
    string creator = 2;
    string desc = 3;
    string logo = 4;
    string name = 5;
    string displayName = 6;
    string locale = 7;
    optional google.protobuf.Value config = 8;
    bool isPublic = 9;
    google.protobuf.Value blockoutConfig = 10;
    bool enableReleaseCrossCluster = 11;
    bool selected = 12;
    string operation = 13;
    string status = 14;
    string type = 15;
    int64 publisherID = 16 [json_name = "publisherId"];
    string domain = 17;
    bool openFdp = 18;
    int64 version = 19;
    google.protobuf.Timestamp createdAt = 20;
    google.protobuf.Timestamp updatedAt = 21;
    google.protobuf.Value auditMessage = 22;
}
message OrgNexusGetRequest {
    repeated string formats = 1;
    repeated string types = 2;
    string orgID = 3; // generated from path variable: orgID. You should change the proto type if necessary
}
message OrgNexusShowPasswordRequest {
    uint64 orgID = 1;
    repeated uint64 nexusUserIDs = 2;
}
message UnifiedFileTreeNodeFindAncestorsRequest {
    string inode = 1;
    string scope = 2;
    string scopeID = 3;
}
message AppPublishItemRelation {
    string env = 1;
    int64 orgID = 2 [json_name = "-"];
    int64 appID = 3 [json_name = "appId"];
    int64 publishItemID = 4 [json_name = "publishItemId"];
    string publishItemName = 5;
    int64 publisherID = 6 [json_name = "publisherId"];
    string publisherName = 7;
    repeated string publishItemNs = 8;
    string aK = 9 [json_name = "ak"];
    string aI = 10 [json_name = "ai"];
}
message IOSCertificateKeyChainP12DTO {
    google.protobuf.Value certificateFileDTO = 1;
    string password = 2;
}
message QA_TESTENV_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message CMDB_PUBLISHER_DELETE_Request {
    string publisherID = 1; // generated from path variable: publisherID. You should change the proto type if necessary
}
message GetAccess_Request {
    string accessID = 1; // generated from path variable: accessID. You should change the proto type if necessary
}
message QA_RECORDS_GET_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message SonarMetricRulesBatchDeleteRequest {
    string scopeType = 1;
    string scopeID = 2 [json_name = "scopeId"];
    repeated int64 IDs = 3 [json_name = "ids"];
}
message ADAPTOR_CICD_CANCEL_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary
}
message ISummaryState {
    int64 done = 1;
    int64 unDone = 2 [json_name = "undone"];
}
message PublisherListRequest {
    uint64 orgID = 1;
    bool joined = 2;
    string query = 3;
    string name = 4;
    int64 pageNo = 5;
    int64 pageSize = 6;
}
message OrgFetchRequest {
    string IDOrName = 1 [json_name = "idOrName"];
    string orgID = 2; // generated from path variable: orgID. You should change the proto type if necessary
}
message OrgNexusGetResponse {
    optional google.protobuf.Value data = 1;
}
message ProjectCreateRequest {
    string name = 1;
    string displayName = 2;
    string logo = 3;
    string ddHook = 4;
    string desc = 5;
    string creator = 6;
    uint64 orgID = 7 [json_name = "orgId"];
    uint64 clusterID = 8 [json_name = "clusterId"];
    string clusterName = 9;
    map<string, string> clusterConfig = 10;
    optional google.protobuf.Value resourceConfigs = 11 [json_name = "resourceConfig"];
    map<string, int64> rollbackConfig = 12;
    double cpuQuota = 13;
    double memQuota = 14;
    string template = 15;
}
message PUBLISH_ITEM_ERR_RATE_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message Artifact {
    string type = 1;
    string name = 2;
    string version = 3;
}
message PipelineInvokedCombo {
    string branch = 1;
    string source = 2;
    string ymlName = 3;
    repeated string pagingYmlNames = 4;
    uint64 pipelineID = 5;
    string commit = 6;
    string status = 7;
    optional google.protobuf.Timestamp timeCreated = 8;
    optional google.protobuf.Value cancelUser = 9;
    string triggerMode = 10;
    string workspace = 11;
}
message ADAPTOR_CICD_PROJECT_CREATE_Request {
}
message CMDB_BRANCH_RULE_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message CertificateDeleteResponse {
    google.protobuf.Value data = 1;
}
message SonarMetricRulesBatchInsertRequest {
    string scopeType = 1;
    string scopeID = 2 [json_name = "scopeId"];
    repeated google.protobuf.Value metrics = 3;
}
message ExportProjectPackageRequest {
    google.protobuf.Value projectPackageRequest = 1;
    repeated google.protobuf.Value artifacts = 2;
    string orgID = 3; // generated from path variable: orgID. You should change the proto type if necessary
    string projectID = 4; // generated from path variable: projectID. You should change the proto type if necessary
}
message ADAPTOR_CICD_CONFIG_NAMESPACES_Request {
}
message CMDB_CERTIFICATE_DELETE_Request {
    string certificatesID = 1; // generated from path variable: certificatesID. You should change the proto type if necessary
}
message GetInstantiationsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    string assetID = 4; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 5; // generated from path variable: swaggerVersion. You should change the proto type if necessary
    string minor = 6; // generated from path variable: minor. You should change the proto type if necessary
}
message QueryPublishItemRequest {
    int64 pageNo = 1;
    int64 pageSize = 2;
    int64 publisherId = 3;
    string name = 4;
    string type = 5;
    string public = 6;
    string q = 7;
    string ids = 8;
    int64 orgID = 9 [json_name = "-"];
}
message PipelinePageListRequest {
    string commaBranches = 1;
    string commaSources = 2;
    string commaYmlNames = 3;
    string commaStatuses = 4;
    uint64 appID = 5;
    repeated string branches = 6;
    repeated string sources = 7;
    bool allSources = 8;
    repeated string ymlNames = 9;
    repeated string statuses = 10;
    repeated string notStatuses = 11;
    repeated string triggerModes = 12;
    repeated string clusterNames = 13;
    bool includeSnippet = 14;
    google.protobuf.Timestamp startTimeBegin = 15;
    int64 startTimeBeginTimestamp = 16;
    string startTimeBeginCST = 17;
    google.protobuf.Timestamp endTimeBegin = 18;
    int64 endTimeBeginTimestamp = 19;
    string endTimeBeginCST = 20;
    google.protobuf.Timestamp startTimeCreated = 21;
    int64 startTimeCreatedTimestamp = 22;
    google.protobuf.Timestamp endTimeCreated = 23;
    int64 endTimeCreatedTimestamp = 24;
    string mustMatchLabelsJSON = 25;
    repeated string mustMatchLabelsQueryParams = 26;
    map<string, google.protobuf.Value> mustMatchLabels = 27;
    string anyMatchLabelsJSON = 28;
    repeated string anyMatchLabelsQueryParams = 29;
    map<string, google.protobuf.Value> anyMatchLabels = 30;
    int64 pageNum = 31;
    int64 pageNo = 32;
    int64 pageSize = 33;
    bool largePageSize = 34;
    bool countOnly = 35;
    repeated string selectCols = 36;
    repeated string ascCols = 37;
    repeated string descCols = 38;
    optional google.protobuf.Value pipelineDefinitionRequest = 39;
    string pipelineDefinitionRequestJSONBase64 = 40;
}
message FileTreeGetNode_Request {
    string treeName = 1; // generated from path variable: treeName. You should change the proto type if necessary
    string inode = 2; // generated from path variable: inode. You should change the proto type if necessary
}
message DashboardSpotLogResponse {
    google.protobuf.Value data = 1;
}
message PipelineCronStartResponse {
    optional google.protobuf.Value data = 1;
}
message LibReferenceCreateResponse {
    uint64 data = 1;
}
message DeleteAPIAssetVersion_Request {
    string assetID = 1; // generated from path variable: assetID. You should change the proto type if necessary
    string versionID = 2; // generated from path variable: versionID. You should change the proto type if necessary
}
message InstanceDetailRes {
    string instanceName = 1;
    string addonName = 2;
    string projectName = 3;
    string logoURL = 4 [json_name = "logoUrl"];
    string status = 5;
    string clusterName = 6;
    string env = 7;
    string envCn = 8;
    string version = 9;
    int64 attachCount = 10;
    string planCnName = 11;
    string createAt = 12;
    bool platform = 13;
    string projectID = 14 [json_name = "projectId"];
    map<string, string> config = 15;
    repeated google.protobuf.Value referenceInfo = 16;
    bool canDel = 17;
}
message SearchOperationQueryParameters {
    string keyword = 1;
}
message UnifiedFileTreeNodeFuzzySearchRequest {
    string scope = 1;
    string scopeID = 2;
    string fromPinode = 3;
    bool recursive = 4;
    string prefixFuzzy = 5;
    string suffixFuzzy = 6;
    string fuzzy = 7;
    string creatorID = 8;
}
message CICDPipelineYmlListResponse {
    repeated string data = 1;
}
message APIAssetCreateRequest {
    string assetID = 1;
    string assetName = 2;
    string desc = 3;
    string logo = 4;
    string source = 5;
    repeated google.protobuf.Value versions = 6;
    uint64 orgID = 7;
    uint64 projectID = 8;
    uint64 appID = 9;
}
message ErrorResponse {
    string code = 1;
    string msg = 2;
    google.protobuf.Value ctx = 3;
}
message CMDB_ROLES_LIST_Request {
}
message ApiTestCancelResponse {
    string data = 1;
}
message PipelinePageListResponse {
    optional google.protobuf.Value data = 1;
}
message UpdateAppPublishItemRelationResponse {
}
message CMDB_ITERATION_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message LibReferenceListResponseData {
    uint64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message ApplicationWorkspace {
    string clusterName = 1;
    string workspace = 2;
    string configNamespace = 3;
}
message AuditMessage {
    string messageZH = 1;
    string messageEN = 2;
}
message PublisherCreateResponse {
    uint64 data = 1;
}
message CreateAPIAssetVersionBody {
    string assetID = 1;
    uint64 major = 2;
    uint64 minor = 3;
    uint64 patch = 4;
    string specProtocol = 5;
    string specDiceFileUUID = 6;
}
message CreateAccessReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value body = 3;
}
message QueryPublishItemResponse {
    google.protobuf.Value data = 1;
}
message SearchOperationsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    google.protobuf.Value queryParams = 3;
}
message ADAPTOR_CICD_CONFIG_GET_Request {
}
message ApplicationStats {
    uint64 countRuntimes = 1;
    uint64 countMembers = 2;
    string timeLastModified = 3;
}
message PublisherListResponse {
    google.protobuf.Value data = 1;
}
message PagingOrgDTO {
    repeated google.protobuf.Value list = 1;
    int64 total = 2;
}
message ApplicationCertificateDTO {
    uint64 ID = 1 [json_name = "id"];
    uint64 appID = 2 [json_name = "appId"];
    uint64 certificateID = 3 [json_name = "certificateId"];
    uint64 approvalID = 4 [json_name = "approvalId"];
    string name = 5;
    string type = 6;
    uint64 orgID = 7 [json_name = "orgId"];
    string status = 8;
    string creator = 9;
    string operator = 10;
    string desc = 11;
    google.protobuf.Value androidInfo = 12;
    google.protobuf.Value iOSInfo = 13 [json_name = "iosInfo"];
    google.protobuf.Value messageInfo = 14;
    google.protobuf.Value pushConfig = 15;
    google.protobuf.Timestamp createdAt = 16;
}
message LibReferenceListRequest {
    uint64 appID = 1;
    uint64 libID = 2;
    string approvalStatus = 3;
    uint64 pageNo = 4;
    uint64 pageSize = 5;
}
message ListAccessReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value queryParams = 3;
}
message APITestEnvUpdateRequest {
    google.protobuf.Value aPITestEnvData = 1;
    string id = 2; // generated from path variable: id. You should change the proto type if necessary
}
message AndroidCertificateManualDTO {
    google.protobuf.Value debugKeyStore = 1;
    google.protobuf.Value releaseKeyStore = 2;
}
message QA_TESTENV_DELETE_Request {
    string id = 1; // generated from path variable: id. You should change the proto type if necessary
}
message LibReferenceCreateRequest {
    uint64 appID = 1;
    string appName = 2;
    uint64 libID = 3;
    string libName = 4;
    string libDesc = 5;
    uint64 orgID = 6;
}
message PUBLISH_ITEM_STATISTICS_TREND_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message ApiTestInfo {
    int64 apiID = 1;
    int64 usecaseID = 2;
    int64 usecaseOrder = 3;
    int64 projectID = 4;
    string status = 5;
    string apiInfo = 6;
    string apiRequest = 7;
    string apiResponse = 8;
    string assertResult = 9;
}
message CommentCreateResponse {
    int64 data = 1;
}
message CreateInstantiationReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value uRIParams = 3;
    optional google.protobuf.Value body = 4;
    string assetID = 5; // generated from path variable: assetID. You should change the proto type if necessary
    string swaggerVersion = 6; // generated from path variable: swaggerVersion. You should change the proto type if necessary
    string minor = 7; // generated from path variable: minor. You should change the proto type if necessary
}
message ListAPIGatewayRespData {
    int64 total = 1;
    repeated google.protobuf.Value list = 2;
}
message PUBLISH_ITEM_ERR_TREND_Request {
    string publishItemId = 1; // generated from path variable: publishItemId. You should change the proto type if necessary
}
message ADAPTOR_CICD_TASK_LOG_Request {
    string pipelineID = 1; // generated from path variable: pipelineID. You should change the proto type if necessary
    string taskID = 2; // generated from path variable: taskID. You should change the proto type if necessary
}
message APPLICATIONS_RESOURCES_LIST_Request {
    string projectID = 1; // generated from path variable: projectID. You should change the proto type if necessary
}
message IOSCertificateDTO {
    google.protobuf.Value debugProvisionFile = 1 [json_name = "debugProvision"];
    google.protobuf.Value releaseProvisionFile = 2 [json_name = "releaseProvision"];
    google.protobuf.Value keyChainP12 = 3;
}
message MessageCertificateKeyDTO {
    string key = 1;
}
message CreateBranchRuleRequest {
    string scopeType = 1;
    int64 scopeID = 2 [json_name = "scopeId"];
    string rule = 3;
    bool isProtect = 4;
    bool needApproval = 5;
    bool isTriggerPipeline = 6;
    string workspace = 7;
    string artifactWorkspace = 8;
    string desc = 9;
}
message ProjectDeleteRequest {
    uint64 projectID = 1 [json_name = "projectId"];
}
message GetSLARsp {
    google.protobuf.Value sLAModel = 1;
    repeated google.protobuf.Value limits = 2;
    string assetID = 3;
    string assetName = 4;
    string swaggerVersion = 5;
    string userTo = 6;
    bool default = 7;
    uint64 clientCount = 8;
}
message UpdateAccess_Request {
    string accessID = 1; // generated from path variable: accessID. You should change the proto type if necessary
}
message CMDB_LIBREFERENCE_LIST_VERSION_Request {
}
message TicketCloseResponse {
    int64 data = 1;
}
message ListMyClientsReq {
    uint64 orgID = 1;
    optional google.protobuf.Value identity = 2;
    optional google.protobuf.Value queryParams = 3;
}
message PublishItemStatisticsDetailResponse {
    string key = 1 [json_name = "versionOrChannel"];
    uint64 totalUsers = 2;
    string totalUsersGrowth = 3;
    uint64 newUsers = 4;
    uint64 activeUsers = 5;
    string activeUsersGrowth = 6;
    uint64 launches = 7;
    uint64 upgradeUser = 8;
}
message AADAPTOR_CICD_CRON_LIST_Request {
}
message UnifiedFileTreeNodeDeleteRequest {
    string inode = 1;
    string scope = 2;
    string scopeID = 3;
}
message SonarStoreRequest {
    int64 applicationID = 1 [json_name = "applicationId"];
    int64 buildID = 2 [json_name = "buildId"];
    int64 projectID = 3 [json_name = "projectId"];
    string applicationName = 4;
    string branch = 5;
    string gitRepo = 6;
    string commitID = 7 [json_name = "commitId"];
    string projectName = 8;
    string operatorID = 9 [json_name = "operatorId"];
    string logID = 10 [json_name = "logId"];
    string key = 11;
    repeated google.protobuf.Value bugs = 12;
    repeated google.protobuf.Value codeSmells = 13 [json_name = "code_smells"];
    repeated google.protobuf.Value vulnerabilities = 14;
    repeated google.protobuf.Value coverage = 15;
    repeated google.protobuf.Value duplications = 16;
    google.protobuf.Value issuesStatistics = 17 [json_name = "issues_statistics"];
}
message CommentUpdateRequestBody {
    string content = 1;
}
message PipelineCreateRequest {
    uint64 appID = 1;
    string branch = 2;
    string source = 3;
    string pipelineYmlSource = 4;
    string pipelineYmlName = 5;
    string pipelineYmlContent = 6;
    bool autoRun = 7;
    repeated string callbackURLs = 8;
    string userID = 9;
    bool isCronTriggered = 10;
}
message CertificateListResponse {
    google.protobuf.Value data = 1;
}
message IterationGetResponse {
    google.protobuf.Value data = 1;
}
message PublishItemStatisticsTrendResponse {
    uint64 sevenDayAvgNewUsers = 1 [json_name = "7dAvgNewUsers"];
    double sevenDayAvgNewUsersGrowth = 2 [json_name = "7dAvgNewUsersGrowth"];
    uint64 sevenDayAvgActiveUsers = 3 [json_name = "7dAvgActiveUsers"];
    double sevenDayAvgActiveUsersGrowth = 4 [json_name = "7dAvgActiveUsersGrowth"];
    string sevenDayAvgNewUsersRetention = 5 [json_name = "7dAvgNewUsersRetention"];
    double sevenDayAvgNewUsersRetentionGrowth = 6 [json_name = "7dAvgNewUsersRetentionGrowth"];
    string sevenDayAvgDuration = 7 [json_name = "7dAvgDuration"];
    double sevenDayAvgDurationGrowth = 8 [json_name = "7dAvgDurationGrowth"];
    uint64 sevenDayTotalActiveUsers = 9 [json_name = "7dTotalActiveUsers"];
    double sevenDayTotalActiveUsersGrowth = 10 [json_name = "7dTotalActiveUsersGrowth"];
    uint64 monthTotalActiveUsers = 11;
    double monthTotalActiveUsersGrowth = 12;
    uint64 totalUsers = 13;
    string totalCrashRate = 14;
}
message LibReferenceListResponse {
    google.protobuf.Value data = 1;
}
message CMDB_PUBLISHER_GET_Request {
    string publisherID = 1; // generated from path variable: publisherID. You should change the proto type if necessary
}
message PublishItemStatisticsDetailData {
    repeated google.protobuf.Value data = 1;
}
message SonarMetricRulesListRequest {
    string scopeType = 1;
    string scopeID = 2 [json_name = "scopeId"];
}
message CommentListRequest {
    int64 ticketID = 1;
}
message OrgCreateRequest {
    string logo = 1;
    string name = 2;
    string displayName = 3;
    string desc = 4;
    string locale = 5;
    repeated string admins = 6;
    string publisherName = 7;
    bool isPublic = 8;
    string type = 9;
}
message InstanceReferenceRes {
    string orgID = 1 [json_name = "orgId"];
    string projectID = 2 [json_name = "projectId"];
    string projectName = 3;
    string applicationID = 4 [json_name = "applicationId"];
    string applicationName = 5;
    string runtimeID = 6 [json_name = "runtimeId"];
    string runtimeName = 7;
}
message ApiTestCancelRequest {
    uint64 pipelineID = 1 [json_name = "pipelineId"];
}
message AndroidCertificateKeyStoreDTO {
    string alias = 1;
    string keyPassword = 2;
    string storePassword = 3;
}
message PushCertificateConfigs {
    bool enable = 1;
    repeated string envs = 2;
    string certificateType = 3;
    google.protobuf.Value iOSKey = 4 [json_name = "iosKey"];
    google.protobuf.Value androidKey = 5;
    google.protobuf.Value messageKey = 6;
}
message SPOT_APITESTS_LOGS_Request {
}
// generate service from openapi spec: dop
service dop {
    option (erda.common.openapi_service) = {
        service: "dop",
    };

    rpc AADAPTOR_CICD_CRON_LIST (AADAPTOR_CICD_CRON_LIST_Request) returns (PipelineCronListResponse) {
        option (google.api.http) = {
            get: "/api/cicd-crons",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-crons",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 定时 pipeline 列表",
        };
    };
    rpc ADAPTOR_CICD_BRANCHES_ALL_VALID (ADAPTOR_CICD_BRANCHES_ALL_VALID_Request) returns (PipelineAppAllValidBranchWorkspaceResponse) {
        option (google.api.http) = {
            get: "/api/cicds/actions/app-all-valid-branch-workspaces",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/app-all-valid-branch-workspaces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取应用下所有符合 gitflow 规范的分支列表，以及每个分支对应的 workspace",
        };
    };
    rpc ADAPTOR_CICD_CANCEL (ADAPTOR_CICD_CANCEL_Request) returns (PipelineCancelResponse) {
        option (google.api.http) = {
            post: "/api/cicds/{pipelineID}/actions/cancel",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/{pipelineID}/actions/cancel",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 取消 pipeline",
        };
    };
    rpc ADAPTOR_CICD_CONFIG_GET (ADAPTOR_CICD_CONFIG_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cicds/multinamespace/configs",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/multinamespace/configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取Pipeline指定命名空间的所有配置",
        };
    };
    rpc ADAPTOR_CICD_CONFIG_NAMESPACES (ADAPTOR_CICD_CONFIG_NAMESPACES_Request) returns (PipelineConfigNamespacesFetchResponse) {
        option (google.api.http) = {
            get: "/api/cicds/actions/fetch-config-namespaces",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/fetch-config-namespaces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取应用级别的配置的命名空间",
        };
    };
    rpc ADAPTOR_CICD_CONFIG_WORKSPACES (ADAPTOR_CICD_CONFIG_WORKSPACES_Request) returns (PipelineConfigNamespacesFetchResponse) {
        option (google.api.http) = {
            get: "/api/cicds/actions/list-workspaces",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/list-workspaces",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取应用级别的配置的环境名称",
        };
    };
    rpc ADAPTOR_CICD_CREATE (PipelineCreateRequest) returns (PipelineCreateResponse) {
        option (google.api.http) = {
            post: "/api/cicds",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建 pipeline",
        };
    };
    rpc ADAPTOR_CICD_CRON_START (ADAPTOR_CICD_CRON_START_Request) returns (PipelineCronStartResponse) {
        option (google.api.http) = {
            put: "/api/cicd-crons/{cronID}/actions/start",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-crons/{cronID}/actions/start",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 开始定时 pipeline",
        };
    };
    rpc ADAPTOR_CICD_CRON_STOP (ADAPTOR_CICD_CRON_STOP_Request) returns (PipelineCronStopResponse) {
        option (google.api.http) = {
            put: "/api/cicd-crons/{cronID}/actions/stop",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-crons/{cronID}/actions/stop",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 停止定时 pipeline",
        };
    };
    rpc ADAPTOR_CICD_FETCH_PIPELINE_ID (ADAPTOR_CICD_FETCH_PIPELINE_ID_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicds/actions/fetch-pipeline-id",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/fetch-pipeline-id",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据 branch & appID 获取 pipelineID",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_CREATE (UnifiedFileTreeNodeCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cicd-pipeline/filetree",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建节点",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_DELETE (UnifiedFileTreeNodeDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/cicd-pipeline/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除节点",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_FIND_ANCESTORS (UnifiedFileTreeNodeFindAncestorsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd-pipeline/filetree/{inode}/actions/find-ancestors",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree/{inode}/actions/find-ancestors",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询所有父节点",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_FUZZY_SEARCH (UnifiedFileTreeNodeFuzzySearchRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd-pipeline/filetree/actions/fuzzy-search",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree/actions/fuzzy-search",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 模糊搜索节点",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_GET (UnifiedFileTreeNodeGetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd-pipeline/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询节点详情",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE (ADAPTOR_CICD_FILETREE_GET_PIPELINE_FILETREE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd-pipeline/filetree/actions/get-inode-by-pipeline",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree/actions/get-inode-by-pipeline",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 根据 pipeline id 查询流水线",
        };
    };
    rpc ADAPTOR_CICD_FILETREE_LIST (UnifiedFileTreeNodeListRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd-pipeline/filetree",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd-pipeline/filetree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询子节点列表",
        };
    };
    rpc ADAPTOR_CICD_GET_BRANCH_RULE (ADAPTOR_CICD_GET_BRANCH_RULE_Request) returns (PipelineGetBranchRuleResponse) {
        option (google.api.http) = {
            get: "/api/cicds/{pipelineid}/actions/get-branch-rule",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/{pipelineid}/actions/get-branch-rule",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "获取pipeline对应的分支规则",
        };
    };
    rpc ADAPTOR_CICD_INVOKED_COMBO (PipelineInvokedComboRequest) returns (PipelineInvokedComboResponse) {
        option (google.api.http) = {
            get: "/api/cicds/actions/app-invoked-combos",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/app-invoked-combos",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 侧边栏 combo",
        };
    };
    rpc ADAPTOR_CICD_LIST (PipelinePageListRequest) returns (PipelinePageListResponse) {
        option (google.api.http) = {
            get: "/api/cicds",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 列表",
        };
    };
    rpc ADAPTOR_CICD_OPERATE (PipelineOperateRequest) returns (PipelineOperateResponse) {
        option (google.api.http) = {
            put: "/api/cicds/{pipelineID}",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/{pipelineID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 操作 pipeline",
        };
    };
    rpc ADAPTOR_CICD_PIPELINE_DETAIL (ADAPTOR_CICD_PIPELINE_DETAIL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicds/actions/pipeline-detail",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/pipeline-detail",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 详情",
        };
    };
    rpc ADAPTOR_CICD_PIPELINE_YML_LIST (CICDPipelineYmlListRequest) returns (CICDPipelineYmlListResponse) {
        option (google.api.http) = {
            get: "/api/cicds/actions/pipelineYmls",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/actions/pipelineYmls",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline yml列表",
        };
    };
    rpc ADAPTOR_CICD_PROJECT_CREATE (ADAPTOR_CICD_PROJECT_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cicds-project",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds-project",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ADAPTOR_CICD_PROJECT_DETAIL (ADAPTOR_CICD_PROJECT_DETAIL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicds-project/actions/pipeline-detail",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds-project/actions/pipeline-detail",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "",
        };
    };
    rpc ADAPTOR_CICD_RERUN (ADAPTOR_CICD_RERUN_Request) returns (PipelineRerunResponse) {
        option (google.api.http) = {
            post: "/api/cicds/{pipelineID}/actions/rerun",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/{pipelineID}/actions/rerun",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 全流程重试",
        };
    };
    rpc ADAPTOR_CICD_RERUN_FAILED (PipelineRerunFailedResponse) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/cicds/{pipelineID}/actions/rerun-failed",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/{pipelineID}/actions/rerun-failed",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: pipeline 从失败节点处开始重试",
        };
    };
    rpc ADAPTOR_CICD_RUN (ADAPTOR_CICD_RUN_Request) returns (PipelineRunResponse) {
        option (google.api.http) = {
            post: "/api/cicds/{pipelineID}/actions/run",
        };
        option (erda.common.openapi) = {
            path: "/api/cicds/{pipelineID}/actions/run",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 开始 pipeline",
        };
    };
    rpc ADAPTOR_CICD_TASK_LOG (ADAPTOR_CICD_TASK_LOG_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd/{pipelineID}/tasks/{taskID}/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd/{pipelineID}/tasks/{taskID}/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: cicd 获取任务日志",
        };
    };
    rpc ADAPTOR_CICD_TASK_LOG_DOWNLOAD (ADAPTOR_CICD_TASK_LOG_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/cicd/{pipelineID}/tasks/{taskID}/logs/actions/download",
        };
        option (erda.common.openapi) = {
            path: "/api/cicd/{pipelineID}/tasks/{taskID}/logs/actions/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: cicd 下载任务日志",
        };
    };
    rpc APIDocWebsocket (APIDocWebsocket_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apim-ws/api-docs/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/apim-ws/api-docs/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "api doc websocket",
        };
    };
    rpc APITEST_ATTEMPT (APITestsAttemptRequest) returns (APITestsAttemptResponse) {
        option (google.api.http) = {
            post: "/api/apitests/actions/attempt-test",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/actions/attempt-test",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 手动尝试执行单个 usecase API 测试",
        };
    };
    rpc APPLICATIONS_RESOURCES_LIST (APPLICATIONS_RESOURCES_LIST_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/projects/{projectID}/applications-resources",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectID}/applications-resources",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "the list of applications resources in the project",
        };
    };
    rpc APP_PUBLISH_ITEM_RELATION_GET (APP_PUBLISH_ITEM_RELATION_GET_Request) returns (QueryAppPublishItemRelationResponse) {
        option (google.api.http) = {
            get: "/api/applications/{application}/actions/get-publish-item-relations",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{application}/actions/get-publish-item-relations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询应用发布关联",
        };
    };
    rpc APP_PUBLISH_ITEM_RELATION_UPDATE (UpdateAppPublishItemRelationRequest) returns (UpdateAppPublishItemRelationResponse) {
        option (google.api.http) = {
            post: "/api/applications/{application}/actions/update-publish-item-relations",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{application}/actions/update-publish-item-relations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新应用发布关联",
        };
    };
    rpc CI_SONAR_STORE (SonarStoreRequest) returns (SonarStoreResponse) {
        option (google.api.http) = {
            post: "/api/qa/actions/sonar-results-store",
        };
        option (erda.common.openapi) = {
            path: "/api/qa/actions/sonar-results-store",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 存储 sonar issue",
        };
    };
    rpc CMDB_APPLICATION_CREATE (ApplicationCreateRequest) returns (ApplicationCreateResponse) {
        option (google.api.http) = {
            post: "/api/applications",
        };
        option (erda.common.openapi) = {
            path: "/api/applications",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建应用",
        };
    };
    rpc CMDB_APPLICATION_DELETE (ApplicationDeleteRequest) returns (ApplicationDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/applications/{applicationId}",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{applicationId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除应用",
        };
    };
    rpc CMDB_APPLICATION_INIT (ApplicationInitRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/applications/{applicationID}/actions/init",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{applicationID}/actions/init",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 应用初始化",
        };
    };
    rpc CMDB_APPLICATION_UPDATE (ApplicationUpdateRequest) returns (ApplicationUpdateResponse) {
        option (google.api.http) = {
            put: "/api/applications/{applicationID}",
        };
        option (erda.common.openapi) = {
            path: "/api/applications/{applicationID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新应用",
        };
    };
    rpc CMDB_BRANCH_RULE_CREATE (CreateBranchRuleRequest) returns (CreateBranchRuleResponse) {
        option (google.api.http) = {
            post: "/api/branch-rules",
        };
        option (erda.common.openapi) = {
            path: "/api/branch-rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建分支规则",
        };
    };
    rpc CMDB_BRANCH_RULE_DELETE (CMDB_BRANCH_RULE_DELETE_Request) returns (DeleteBranchRuleResponse) {
        option (google.api.http) = {
            delete: "/api/branch-rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/branch-rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除分支规则",
        };
    };
    rpc CMDB_BRANCH_RULE_QUERY (QueryBranchRuleRequest) returns (QueryBranchRuleResponse) {
        option (google.api.http) = {
            get: "/api/branch-rules",
        };
        option (erda.common.openapi) = {
            path: "/api/branch-rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询分支规则",
        };
    };
    rpc CMDB_BRANCH_RULE_UPDATE (UpdateBranchRuleRequest) returns (UpdateBranchRuleResponse) {
        option (google.api.http) = {
            put: "/api/branch-rules/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/branch-rules/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新分支规则",
        };
    };
    rpc CMDB_CERTIFICATES_APP_LIST (AppCertificateListRequest) returns (PagingAppCertificateDTO) {
        option (google.api.http) = {
            get: "/api/certificates/actions/list-application-quotes",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/actions/list-application-quotes",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取指定应用的所有引用证书列表",
        };
    };
    rpc CMDB_CERTIFICATES_LIST (CertificateListRequest) returns (CertificateListResponse) {
        option (google.api.http) = {
            get: "/api/certificates/actions/list-certificates",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/actions/list-certificates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询所有证书列表",
        };
    };
    rpc CMDB_CERTIFICATE_APP_CANCEL (CMDB_CERTIFICATE_APP_CANCEL_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/certificates/actions/application-cancel-quote",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/actions/application-cancel-quote",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 应用取消引用证书",
        };
    };
    rpc CMDB_CERTIFICATE_APP_CONFIG (PushCertificateConfigsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/certificates/actions/push-configs",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/actions/push-configs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 推送应用证书到配置管理",
        };
    };
    rpc CMDB_CERTIFICATE_APP_QUOTE (CertificateQuoteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/certificates/actions/application-quote",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/actions/application-quote",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 应用引用证书",
        };
    };
    rpc CMDB_CERTIFICATE_CREATE (CertificateCreateRequest) returns (CertificateCreateResponse) {
        option (google.api.http) = {
            post: "/api/certificates",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建证书",
        };
    };
    rpc CMDB_CERTIFICATE_DELETE (CMDB_CERTIFICATE_DELETE_Request) returns (CertificateDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/certificates/{certificatesID}",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/{certificatesID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除证书",
        };
    };
    rpc CMDB_CERTIFICATE_GET (CMDB_CERTIFICATE_GET_Request) returns (CertificateDetailResponse) {
        option (google.api.http) = {
            get: "/api/certificates/{certificateID}",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/{certificateID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取证书详情",
        };
    };
    rpc CMDB_CERTIFICATE_UPDATE (CertificateUpdateRequest) returns (CertificateUpdateResponse) {
        option (google.api.http) = {
            put: "/api/certificates/{certificateID}",
        };
        option (erda.common.openapi) = {
            path: "/api/certificates/{certificateID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新证书",
        };
    };
    rpc CMDB_COMMENT_CREATE (CommentCreateRequest) returns (CommentCreateResponse) {
        option (google.api.http) = {
            post: "/api/comments",
        };
        option (erda.common.openapi) = {
            path: "/api/comments",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建工单评论",
        };
    };
    rpc CMDB_COMMENT_LIST (CommentListRequest) returns (CommentListResponse) {
        option (google.api.http) = {
            get: "/api/comments",
        };
        option (erda.common.openapi) = {
            path: "/api/comments",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 工单评论列表",
        };
    };
    rpc CMDB_COMMENT_UPDATE (CommentUpdateRequest) returns (CommentUpdateResponse) {
        option (google.api.http) = {
            put: "/api/comments/{commentID}",
        };
        option (erda.common.openapi) = {
            path: "/api/comments/{commentID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新工单评论",
        };
    };
    rpc CMDB_ITERATION_CREATE (IterationCreateRequest) returns (IterationCreateResponse) {
        option (google.api.http) = {
            post: "/api/iterations",
        };
        option (erda.common.openapi) = {
            path: "/api/iterations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建迭代",
        };
    };
    rpc CMDB_ITERATION_DELETE (CMDB_ITERATION_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/iterations/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/iterations/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除迭代",
        };
    };
    rpc CMDB_ITERATION_GET (CMDB_ITERATION_GET_Request) returns (IterationGetResponse) {
        option (google.api.http) = {
            get: "/api/iterations/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/iterations/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 迭代详情",
        };
    };
    rpc CMDB_ITERATION_PAGING (IterationPagingRequest) returns (IterationPagingResponse) {
        option (google.api.http) = {
            get: "/api/iterations",
        };
        option (erda.common.openapi) = {
            path: "/api/iterations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 分页查询迭代",
        };
    };
    rpc CMDB_ITERATION_UPDATE (IterationUpdateRequest) returns (IterationUpdateResponse) {
        option (google.api.http) = {
            put: "/api/iterations/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/iterations/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新迭代",
        };
    };
    rpc CMDB_LIBREFERENCE_CREATE (LibReferenceCreateRequest) returns (LibReferenceCreateResponse) {
        option (google.api.http) = {
            post: "/api/lib-references",
        };
        option (erda.common.openapi) = {
            path: "/api/lib-references",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建库引用",
        };
    };
    rpc CMDB_LIBREFERENCE_DELETE (CMDB_LIBREFERENCE_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/lib-references/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/lib-references/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除库引用",
        };
    };
    rpc CMDB_LIBREFERENCE_LIST (LibReferenceListRequest) returns (LibReferenceListResponse) {
        option (google.api.http) = {
            get: "/api/lib-references",
        };
        option (erda.common.openapi) = {
            path: "/api/lib-references",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 库引用列表",
        };
    };
    rpc CMDB_LIBREFERENCE_LIST_VERSION (CMDB_LIBREFERENCE_LIST_VERSION_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/lib-references/actions/fetch-versions",
        };
        option (erda.common.openapi) = {
            path: "/api/lib-references/actions/fetch-versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取模块订阅版本",
        };
    };
    rpc CMDB_MY_PUBLISHERS_LIST (PublisherListRequest) returns (PublisherListResponse) {
        option (google.api.http) = {
            get: "/api/publishers/actions/list-my-publishers",
        };
        option (erda.common.openapi) = {
            path: "/api/publishers/actions/list-my-publishers",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询我的Publisher列表",
        };
    };
    rpc CMDB_ORG_CREATE (OrgCreateRequest) returns (OrgCreateResponse) {
        option (google.api.http) = {
            post: "/api/orgs",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建组织",
        };
    };
    rpc CMDB_ORG_DELETE (CMDB_ORG_DELETE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/orgs/{orgID}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除企业",
        };
    };
    rpc CMDB_ORG_FETCH (OrgFetchRequest) returns (OrgSearchResponse) {
        option (google.api.http) = {
            get: "/api/orgs/{orgID}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取组织",
        };
    };
    rpc CMDB_ORG_GET_BY_DOMAIN (OrgGetByDomainRequest) returns (OrgGetByDomainResponse) {
        option (google.api.http) = {
            get: "/api/orgs/actions/get-by-domain",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/actions/get-by-domain",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 通过域名获取组织",
        };
    };
    rpc CMDB_ORG_NEXUS_FETCH (OrgNexusGetRequest) returns (OrgNexusGetResponse) {
        option (google.api.http) = {
            get: "/api/orgs/{orgID}/nexus",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/nexus",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业 nexus 信息",
        };
    };
    rpc CMDB_ORG_NEXUS_SHOW_PASSWORD (OrgNexusShowPasswordRequest) returns (OrgNexusShowPasswordResponse) {
        option (google.api.http) = {
            get: "/api/orgs/{orgID}/show-nexus-password",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/show-nexus-password",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业 nexus 密码",
        };
    };
    rpc CMDB_ORG_PUBLIC (OrgSearchRequest) returns (OrgSearchResponse) {
        option (google.api.http) = {
            get: "/api/orgs/actions/list-public",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/actions/list-public",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询公开组织",
        };
    };
    rpc CMDB_ORG_PUBLISHER_CREATE (CMDB_ORG_PUBLISHER_CREATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgs/{orgID}/actions/create-publisher",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/actions/create-publisher",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建发布商",
        };
    };
    rpc CMDB_ORG_PUBLISHER_CREATE_GET (CMDB_ORG_PUBLISHER_CREATE_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgs/{orgID}/actions/create-publisher",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/actions/create-publisher",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建发布商",
        };
    };
    rpc CMDB_ORG_RESOURCE_GET (CMDB_ORG_RESOURCE_GET_Request) returns (OrgResourceInfo) {
        option (google.api.http) = {
            get: "/api/orgs/actions/fetch-resources",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/actions/fetch-resources",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取企业资源使用",
        };
    };
    rpc CMDB_ORG_SEARCH (OrgSearchRequest) returns (OrgSearchResponse) {
        option (google.api.http) = {
            get: "/api/orgs",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询组织",
        };
    };
    rpc CMDB_ORG_UPDATE (OrgUpdateRequest) returns (OrgUpdateRequestBody) {
        option (google.api.http) = {
            put: "/api/orgs/{orgID}",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新组织",
        };
    };
    rpc CMDB_PROJECTS_FETCH (ProjectListRequest) returns (ProjectListResponse) {
        option (google.api.http) = {
            get: "/api/projects",
        };
        option (erda.common.openapi) = {
            path: "/api/projects",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询项目",
        };
    };
    rpc CMDB_PROJECT_CREATE (ProjectCreateRequest) returns (ProjectCreateResponse) {
        option (google.api.http) = {
            post: "/api/projects",
        };
        option (erda.common.openapi) = {
            path: "/api/projects",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建项目",
        };
    };
    rpc CMDB_PROJECT_DELETE (ProjectDeleteRequest) returns (ProjectDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/projects/{projectID}",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除项目",
        };
    };
    rpc CMDB_PROJECT_DETAIL (ProjectDetailRequest) returns (ProjectDetailResponse) {
        option (google.api.http) = {
            get: "/api/projects/{projectIDOrName}",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/{projectIDOrName}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取项目详情",
        };
    };
    rpc CMDB_PUBLISHERS_LIST (PublisherListRequest) returns (PublisherListResponse) {
        option (google.api.http) = {
            get: "/api/publishers",
        };
        option (erda.common.openapi) = {
            path: "/api/publishers",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询所有Publisher列表",
        };
    };
    rpc CMDB_PUBLISHER_CREATE (PublisherCreateRequest) returns (PublisherCreateResponse) {
        option (google.api.http) = {
            post: "/api/publishers",
        };
        option (erda.common.openapi) = {
            path: "/api/publishers",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 创建 Publisher",
        };
    };
    rpc CMDB_PUBLISHER_DELETE (CMDB_PUBLISHER_DELETE_Request) returns (PublisherDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/publishers/{publisherID}",
        };
        option (erda.common.openapi) = {
            path: "/api/publishers/{publisherID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 删除 Publisher",
        };
    };
    rpc CMDB_PUBLISHER_GET (CMDB_PUBLISHER_GET_Request) returns (PublisherDetailResponse) {
        option (google.api.http) = {
            get: "/api/publishers/{publisherID}",
        };
        option (erda.common.openapi) = {
            path: "/api/publishers/{publisherID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 获取Publisher详情",
        };
    };
    rpc CMDB_PUBLISHER_UPDATE (PublisherUpdateRequest) returns (PublisherUpdateResponse) {
        option (google.api.http) = {
            put: "/api/publishers",
        };
        option (erda.common.openapi) = {
            path: "/api/publishers",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 更新 Publisher",
        };
    };
    rpc CMDB_ROLES_LIST (CMDB_ROLES_LIST_Request) returns (MemberRoleListResponse) {
        option (google.api.http) = {
            get: "/api/members/actions/list-roles",
        };
        option (erda.common.openapi) = {
            path: "/api/members/actions/list-roles",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取成员角色列表",
        };
    };
    rpc CMDB_TICKET_CLOSE (TicketCloseRequest) returns (TicketCloseResponse) {
        option (google.api.http) = {
            put: "/api/tickets/{ticketID}/actions/close",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets/{ticketID}/actions/close",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 关闭工单",
        };
    };
    rpc CMDB_TICKET_CREATE (TicketCreateRequest) returns (TicketCreateResponse) {
        option (google.api.http) = {
            post: "/api/tickets",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 创建工单",
        };
    };
    rpc CMDB_TICKET_DELETE (TicketDeleteRequest) returns (TicketDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/tickets/{ticketID}",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets/{ticketID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除工单",
        };
    };
    rpc CMDB_TICKET_FETCH (TicketFetchRequest) returns (TicketFetchResponse) {
        option (google.api.http) = {
            get: "/api/tickets/{ticketID}",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets/{ticketID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取工单详情",
        };
    };
    rpc CMDB_TICKET_LIST (TicketListRequest) returns (TicketListResponse) {
        option (google.api.http) = {
            get: "/api/tickets",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 工单列表",
        };
    };
    rpc CMDB_TICKET_REOPEN (TicketReopenRequest) returns (TicketReopenResponse) {
        option (google.api.http) = {
            put: "/api/tickets/{ticketID}/actions/reopen",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets/{ticketID}/actions/reopen",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 重新打开已关闭工单",
        };
    };
    rpc CMDB_TICKET_UPDATE (TicketUpdateRequest) returns (TicketUpdateResponse) {
        option (google.api.http) = {
            put: "/api/tickets/{ticketID}",
        };
        option (erda.common.openapi) = {
            path: "/api/tickets/{ticketID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新工单",
        };
    };
    rpc CODE_COVERAGE_END_CALLBACK (CodeCoverageUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/code-coverage/actions/end-callBack",
        };
        option (erda.common.openapi) = {
            path: "/api/code-coverage/actions/end-callBack",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: end callback",
        };
    };
    rpc CODE_COVERAGE_READY_CALLBACK (CodeCoverageUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/code-coverage/actions/ready-callBack",
        };
        option (erda.common.openapi) = {
            path: "/api/code-coverage/actions/ready-callBack",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: ready callback",
        };
    };
    rpc CODE_COVERAGE_READY_STATUS (CodeCoverageUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/code-coverage/actions/status",
        };
        option (erda.common.openapi) = {
            path: "/api/code-coverage/actions/status",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: status",
        };
    };
    rpc CODE_COVERAGE_REPORT_CALLBACK (CodeCoverageUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/code-coverage/actions/report-callBack",
        };
        option (erda.common.openapi) = {
            path: "/api/code-coverage/actions/report-callBack",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: end callback",
        };
    };
    rpc CreateAPIAsset (APIAssetCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/api-assets",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "创建 API 资料",
        };
    };
    rpc CreateAPIAssetVersion (APIAssetVersionCreateRequest) returns (CreateAPIAssetVersionBody) {
        option (google.api.http) = {
            post: "/api/api-assets/{assetID}/versions",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "新增 API 资料版本",
        };
    };
    rpc CreateAccess (CreateAccessReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/api-access",
        };
        option (erda.common.openapi) = {
            path: "/api/api-access",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "create access",
        };
    };
    rpc CreateAttempTest (APITestReq) returns (Header) {
        option (google.api.http) = {
            post: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/attempt-test",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/attempt-test",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list access",
        };
    };
    rpc CreateClient (CreateClientReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/api-clients",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "create client",
        };
    };
    rpc CreateContract (CreateContractReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/api-clients/{clientID}/contracts",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}/contracts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "create contract",
        };
    };
    rpc CreateInstantiation (CreateInstantiationReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/minors/{minor}/instantiations",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/minors/{minor}/instantiations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "create instantiation",
        };
    };
    rpc CreateSLA (CreateSLAReq) returns (Header) {
        option (google.api.http) = {
            post: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "create SLA",
        };
    };
    rpc DeleteAPIAssetVersion (DeleteAPIAssetVersion_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/api-assets/{assetID}/versions/{versionID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/versions/{versionID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除指定版本的 API 资料",
        };
    };
    rpc DeleteAPIAssets (DeleteAPIAssets_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/api-assets/{assetID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "删除 API 资料",
        };
    };
    rpc DeleteAccess (DeleteAccess_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/api-access/{accessID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-access/{accessID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "delete access",
        };
    };
    rpc DeleteClient (DeleteClient_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/api-clients/{clientID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "delete client",
        };
    };
    rpc DeleteContract (GetContractReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/api-clients/{clientID}/contracts/{contractID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}/contracts/{contractID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "delete contract",
        };
    };
    rpc DeleteSLA (DeleteSLAReq) returns (Header) {
        option (google.api.http) = {
            delete: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas/{slaID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas/{slaID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "delete SLA",
        };
    };
    rpc ExportSpec (DownloadSpecTextReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/versions/{versionID}/export",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/versions/{versionID}/export",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "导出 swagger 文本",
        };
    };
    rpc FileTreeCreateNode (APIDocCreateNodeReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/apim/{treeName}/filetree",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/{treeName}/filetree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "create file tree node",
        };
    };
    rpc FileTreeDeleteNode (FileTreeDeleteNode_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/apim/{treeName}/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/{treeName}/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "delete file tree node",
        };
    };
    rpc FileTreeGetNode (FileTreeGetNode_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apim/{treeName}/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/{treeName}/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get file tree node",
        };
    };
    rpc FileTreeListNodes (FileTreeListNodes_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apim/{treeName}/filetree",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/{treeName}/filetree",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list file tree nodes",
        };
    };
    rpc FileTreeMvCpNode (FileTreeMvCpNode_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/apim/{treeName}/filetree/{inode}/actions/{action}",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/{treeName}/filetree/{inode}/actions/{action}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "mv or cp file tree node",
        };
    };
    rpc FileTreeUpdateNode (FileTreeUpdateNode_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/apim/{treeName}/filetree/{inode}",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/{treeName}/filetree/{inode}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "update file tree node",
        };
    };
    rpc GetAPIAssetVersion (GetAPIAssetVersionReq) returns (GetAssetVersionRsp) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/versions/{versionID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/versions/{versionID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询 API 资料版本详情",
        };
    };
    rpc GetAPIAssets (GetAPIAssetReq) returns (APIAssetGetResponse) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询 API 资料",
        };
    };
    rpc GetAccess (GetAccess_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/api-access/{accessID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-access/{accessID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get access",
        };
    };
    rpc GetClient (GetClientReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/api-clients/{clientID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get client",
        };
    };
    rpc GetContract (GetContractReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/api-clients/{clientID}/contracts/{contractID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}/contracts/{contractID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get contract",
        };
    };
    rpc GetInstantiations (GetInstantiationsReq) returns (GetAddonInstanceDetailResponse) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/minors/{minor}/instantiations",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/minors/{minor}/instantiations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get instantiations",
        };
    };
    rpc GetOperation (GetOperationReq) returns (BaseResponse) {
        option (google.api.http) = {
            get: "/api/apim/operations/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/operations/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "搜索集市中的接口",
        };
    };
    rpc GetSLA (ListSLAsReq) returns (ListSLAsRsp) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas/{slaID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas/{slaID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get SLA",
        };
    };
    rpc ListAPIAssetVersions (GetAPIAssetVersionReq) returns (GetAssetVersionRsp) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/versions",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "查询 API 资料版本列表",
        };
    };
    rpc ListAPIGateways (ListAPIGatewaysReq) returns (ListAPIGatewaysResp) {
        option (google.api.http) = {
            get: "api/api-assets/{assetID}/api-gateways",
        };
        option (erda.common.openapi) = {
            path: "api/api-assets/{assetID}/api-gateways",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list api-gateways",
        };
    };
    rpc ListAccess (ListAccessReq) returns (ListAccessRsp) {
        option (google.api.http) = {
            get: "/api/api-access",
        };
        option (erda.common.openapi) = {
            path: "/api/api-access",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list access",
        };
    };
    rpc ListContract (ListContractsReq) returns (ListContractsRsp) {
        option (google.api.http) = {
            get: "/api/api-clients/{clientID}/contracts",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}/contracts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list contract",
        };
    };
    rpc ListContractRecords (ListContractRecordsReq) returns (ListContractRecordsRsp) {
        option (google.api.http) = {
            get: "/api/api-clients/{clientID}/contracts/{contractID}/operation-records",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}/contracts/{contractID}/operation-records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list contract records",
        };
    };
    rpc ListInstantiations (ListInstantiations_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/api-instantiations",
        };
        option (erda.common.openapi) = {
            path: "/api/api-instantiations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get instantiations",
        };
    };
    rpc ListMyClients (ListMyClientsReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/api-clients",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list my client",
        };
    };
    rpc ListProjectAPIGateways (ListProjectAPIGatewaysReq) returns (ListAPIGatewaysResp) {
        option (google.api.http) = {
            get: "api/api-gateways/{projectID}",
        };
        option (erda.common.openapi) = {
            path: "api/api-gateways/{projectID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list api-gateways",
        };
    };
    rpc ListRuntimeServices (ListRuntimeServices_Request) returns (Header) {
        option (google.api.http) = {
            get: "/api/api-app-services/{appID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-app-services/{appID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list access",
        };
    };
    rpc ListSLA (GetSLAReq) returns (GetSLARsp) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list SLA",
        };
    };
    rpc ListSwaggerVersionClients (ListSwaggerVersionClientsReq) returns (ListSwaggerVersionRsp) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/clients",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/clients",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list swagger version clients",
        };
    };
    rpc ListSwaggerVersions (ListSwaggerVersionsReq) returns (ListSwaggerVersionRsp) {
        option (google.api.http) = {
            get: "/api/api-assets/{assetID}/swagger-versions",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "list swagger versions",
        };
    };
    rpc PUBLISH_ITEM_CERTIFICATION_GET (PUBLISH_ITEM_CERTIFICATION_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/certification",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/certification",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 发布内容认证列表",
        };
    };
    rpc PUBLISH_ITEM_CHANNELS (PublishItemStatisticsDetailRequest) returns (PublishItemStatisticsDetailData) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/statistics/channels",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/statistics/channels",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 渠道详情，明细数据",
        };
    };
    rpc PUBLISH_ITEM_ERR_EFFACTS (PUBLISH_ITEM_ERR_EFFACTS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/err/effacts",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/err/effacts",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 错误统计，影响用户占比",
        };
    };
    rpc PUBLISH_ITEM_ERR_LIST (PUBLISH_ITEM_ERR_LIST_Request) returns (PublishItemStatisticsErrListData) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/err/list",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/err/list",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 错误报告，错误列表",
        };
    };
    rpc PUBLISH_ITEM_ERR_RATE (PUBLISH_ITEM_ERR_RATE_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/err/rate",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/err/rate",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 错误统计，崩溃率",
        };
    };
    rpc PUBLISH_ITEM_ERR_TREND (PUBLISH_ITEM_ERR_TREND_Request) returns (PublishItemStatisticsErrTrendData) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/err/trend",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/err/trend",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 错误报告，错误趋势",
        };
    };
    rpc PUBLISH_ITEM_METIRCS_COMMON (PUBLISH_ITEM_METIRCS_COMMON_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/metrics/{metricName}",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/metrics/{metricName}",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 通用metrcis接口，转发使用",
        };
    };
    rpc PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON (PUBLISH_ITEM_METIRCS_HISTOGRAM_COMMON_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/metrics/{metricName}/histogram",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/metrics/{metricName}/histogram",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 通用metrcis histogram接口，转发使用",
        };
    };
    rpc PUBLISH_ITEM_QUERY_MY (QueryPublishItemRequest) returns (QueryPublishItemResponse) {
        option (google.api.http) = {
            get: "/api/my-publish-items",
        };
        option (erda.common.openapi) = {
            path: "/api/my-publish-items",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 查询我的发布",
        };
    };
    rpc PUBLISH_ITEM_STATISTICS_TREND (PUBLISH_ITEM_STATISTICS_TREND_Request) returns (PublishItemStatisticsTrendData) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/statistics/trend",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/statistics/trend",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 统一大盘，整体趋势接口",
        };
    };
    rpc PUBLISH_ITEM_USERS (PUBLISH_ITEM_USERS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/statistics/users",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/statistics/users",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 统计大盘，累计用户",
        };
    };
    rpc PUBLISH_ITEM_VERSION_INFO_LIST (PublishItemStatisticsDetailRequest) returns (PublishItemStatisticsDetailData) {
        option (google.api.http) = {
            get: "/api/publish-items/{publishItemId}/statistics/versions",
        };
        option (erda.common.openapi) = {
            path: "/api/publish-items/{publishItemId}/statistics/versions",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 版本详情，明细数据",
        };
    };
    rpc PagingAPIAssets (PagingAPIAssetsReq) returns (APIAssetPagingResponse) {
        option (google.api.http) = {
            get: "/api/api-assets",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "分页查询 API 资料",
        };
    };
    rpc ProjectPackageExport (ExportProjectPackageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgs/{orgID}/projects/{projectID}/package/actions/export",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/projects/{projectID}/package/actions/export",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导出项目工程包",
        };
    };
    rpc ProjectPackageImport (ImportProjectPackageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgs/{orgID}/projects/{projectID}/package/actions/import",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/projects/{projectID}/package/actions/import",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导入项目工程包",
        };
    };
    rpc ProjectPackageParse (ProjectPackageParse_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/projects/package/actions/parse",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/package/actions/parse",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 解析项目工程包",
        };
    };
    rpc ProjectTemplateExport (ExportProjectTemplateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/orgs/{orgID}/projects/{projectID}/template/actions/export",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/projects/{projectID}/template/actions/export",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导出项目模版",
        };
    };
    rpc ProjectTemplateImport (ImportProjectTemplateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/orgs/{orgID}/projects/{projectID}/template/actions/import",
        };
        option (erda.common.openapi) = {
            path: "/api/orgs/{orgID}/projects/{projectID}/template/actions/import",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 导入项目模版",
        };
    };
    rpc ProjectTemplateParse (ImportProjectTemplateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/projects/template/actions/parse",
        };
        option (erda.common.openapi) = {
            path: "/api/projects/template/actions/parse",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: true,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "summary: 解析项目模版",
        };
    };
    rpc ProxyMetrics (ProxyMetrics_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apim/metrics/**",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/metrics/**",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "转发 metrics 请求",
        };
    };
    rpc QA_APITESTS_CANCEL (ApiTestCancelRequest) returns (ApiTestCancelResponse) {
        option (google.api.http) = {
            post: "/api/apitests/actions/cancel-testplan",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/actions/cancel-testplan",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 取消测试计划",
        };
    };
    rpc QA_APITESTS_GET (QA_APITESTS_GET_Request) returns (ApiTestsGetResponse) {
        option (google.api.http) = {
            get: "/api/apitests/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取apitest详情",
        };
    };
    rpc QA_APITESTS_UPDATE (ApiTestsUpdateRequest) returns (ApiTestsUpdateResponse) {
        option (google.api.http) = {
            put: "/api/apitests/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "更新 api test的信息",
        };
    };
    rpc QA_AUTOTEST_SPACE_GET (QA_AUTOTEST_SPACE_GET_Request) returns (AutoTestSpaceResponse) {
        option (google.api.http) = {
            get: "/api/autotests/spaces/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/autotests/spaces/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取autotest-space详情",
        };
    };
    rpc QA_PIPELINE_TASK_LOGS (QA_PIPELINE_TASK_LOGS_Request) returns (DashboardSpotLogResponse) {
        option (google.api.http) = {
            get: "/api/apitests/pipeline/{pipelineID}/task/{taskID}/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/pipeline/{pipelineID}/task/{taskID}/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询测试记录的pipeline task 日志",
        };
    };
    rpc QA_RECORDS_GET (QA_RECORDS_GET_Request) returns (GetTestFileRecordResponse) {
        option (google.api.http) = {
            get: "/api/test-file-records/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/test-file-records/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: get file record",
        };
    };
    rpc QA_RECORDS_LIST (ListTestFileRecordsRequest) returns (ListTestFileRecordsResponse) {
        option (google.api.http) = {
            get: "/api/test-file-records",
        };
        option (erda.common.openapi) = {
            path: "/api/test-file-records",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: get file records",
        };
    };
    rpc QA_SONAR_GET_CREDENTIAL (QA_SONAR_GET_CREDENTIAL_Request) returns (SonarCredentialGetResponse) {
        option (google.api.http) = {
            get: "/api/qa/actions/get-sonar-credential",
        };
        option (erda.common.openapi) = {
            path: "/api/qa/actions/get-sonar-credential",
            auth: {
                no_check: false,
                check_login: false,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: action 获取 sonar credential",
        };
    };
    rpc QA_SONAR_ISSUES (QA_SONAR_ISSUES_Request) returns (SonarIssueResponse) {
        option (google.api.http) = {
            get: "/api/qa",
        };
        option (erda.common.openapi) = {
            path: "/api/qa",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取 sonar issues",
        };
    };
    rpc QA_SONAR_METRIC_RULES_BATCH_DELETE (SonarMetricRulesBatchDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/sonar-metric-rules/actions/batch-delete",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/actions/batch-delete",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量删除 sonar 扫描规则",
        };
    };
    rpc QA_SONAR_METRIC_RULES_BATCH_INSERT (SonarMetricRulesBatchInsertRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/sonar-metric-rules/actions/batch-insert",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/actions/batch-insert",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 批量插入 sonar 扫描规则",
        };
    };
    rpc QA_SONAR_METRIC_RULES_DELETE (SonarMetricRulesDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/sonar-metric-rules/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 删除 sonar 扫描规则",
        };
    };
    rpc QA_SONAR_METRIC_RULES_GET (QA_SONAR_METRIC_RULES_GET_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/sonar-metric-rules/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询 sonar 扫描规则",
        };
    };
    rpc QA_SONAR_METRIC_RULES_PAGING (SonarMetricRulesPagingRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/sonar-metric-rules",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 分页查询 sonar 扫描规则",
        };
    };
    rpc QA_SONAR_METRIC_RULES_QUERY_DEFINITION (SonarMetricRulesDefinitionListRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/sonar-metric-rules/actions/query-metric-definition",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/actions/query-metric-definition",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询 sonar 还未添加的扫描规则",
        };
    };
    rpc QA_SONAR_METRIC_RULES_QUERY_LIST (SonarMetricRulesListRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/sonar-metric-rules/actions/query-list",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/actions/query-list",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询 sonar 的配置列表",
        };
    };
    rpc QA_SONAR_METRIC_RULES_UPDATE (SonarMetricRulesUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/sonar-metric-rules/{ID}",
        };
        option (erda.common.openapi) = {
            path: "/api/sonar-metric-rules/{ID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新 sonar 扫描规则",
        };
    };
    rpc QA_TESTENV_CREATE (QA_TESTENV_CREATE_Request) returns (APITestEnvCreateRequest) {
        option (google.api.http) = {
            post: "/api/testenv",
        };
        option (erda.common.openapi) = {
            path: "/api/testenv",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新项目环境变量信息",
        };
    };
    rpc QA_TESTENV_DELETE (QA_TESTENV_DELETE_Request) returns (APITestEnvDeleteResponse) {
        option (google.api.http) = {
            delete: "/api/testenv/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/testenv/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 更新项目环境变量信息",
        };
    };
    rpc QA_TESTENV_GET (QA_TESTENV_GET_Request) returns (APITestEnvGetResponse) {
        option (google.api.http) = {
            get: "/api/testenv/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/testenv/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取API项目测试的环境变量信息",
        };
    };
    rpc QA_TESTENV_LIST (QA_TESTENV_LIST_Request) returns (APITestEnvListResponse) {
        option (google.api.http) = {
            get: "/api/testenv/actions/list-envs",
        };
        option (erda.common.openapi) = {
            path: "/api/testenv/actions/list-envs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 获取项目API测试环境变量列表",
        };
    };
    rpc QA_TESTENV_UPDATE (APITestEnvUpdateRequest) returns (APITestEnvUpdateResponse) {
        option (google.api.http) = {
            put: "/api/testenv/{id}",
        };
        option (erda.common.openapi) = {
            path: "/api/testenv/{id}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "更新项目环境变量信息",
        };
    };
    rpc QA_TESTPLAN_PIPELINE_DETAIL (QA_TESTPLAN_PIPELINE_DETAIL_Request) returns (PipelineDetailResponse) {
        option (google.api.http) = {
            get: "/api/apitests/pipeline/{pipelineId}",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/pipeline/{pipelineId}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询测试记录的pipeline详情",
        };
    };
    rpc SPOT_APITESTS_LOGS (SPOT_APITESTS_LOGS_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apitests/logs",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/logs",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: 查询 apitest 的日志内容",
        };
    };
    rpc SPOT_APITESTS_LOGS_DOWNLOAD (SPOT_APITESTS_LOGS_DOWNLOAD_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/api/apitests/logs/actions/download",
        };
        option (erda.common.openapi) = {
            path: "/api/apitests/logs/actions/download",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "summary: Apitests 下载日志内容",
        };
    };
    rpc SearchOperations (SearchOperationsReq) returns (BaseResponse) {
        option (google.api.http) = {
            get: "/api/apim/operations",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/operations",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "搜索集市中的接口",
        };
    };
    rpc UpdateAPIAssset (UpdateAPIAssetReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/api-assets/{assetID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "修改 API 资料",
        };
    };
    rpc UpdateAccess (UpdateAccess_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/api-access/{accessID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-access/{accessID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "update access",
        };
    };
    rpc UpdateAssetVersion (UpdateAssetVersionReq) returns (Header) {
        option (google.api.http) = {
            put: "/api/api-assets/{assetID}/versions/{versionID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/versions/{versionID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "修改指定版本的 API 资料",
        };
    };
    rpc UpdateClient (UpdateClientReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/api-clients/{clientID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "get client",
        };
    };
    rpc UpdateContract (UpdateContract_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/api-clients/{clientID}/contracts/{contractID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-clients/{clientID}/contracts/{contractID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "update contract",
        };
    };
    rpc UpdateInstantiation (UpdateInstantiationReq) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/minors/{minor}/instantiations/{instantiationID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/minors/{minor}/instantiations/{instantiationID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "update instantiation",
        };
    };
    rpc UpdateSLA (UpdateSLAReq) returns (Header) {
        option (google.api.http) = {
            put: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas/{slaID}",
        };
        option (erda.common.openapi) = {
            path: "/api/api-assets/{assetID}/swagger-versions/{swaggerVersion}/slas/{slaID}",
            auth: {
                no_check: false,
                check_login: true,
                try_check_login: false,
                check_token: true,
                check_basic_auth: false,
            },
            doc: "update SLA",
        };
    };
    rpc ValidateSwagger (ValidateSwagger_Request) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/apim/validate-swagger",
        };
        option (erda.common.openapi) = {
            path: "/api/apim/validate-swagger",
            auth: {
                no_check: true,
                check_login: false,
                try_check_login: false,
                check_token: false,
                check_basic_auth: false,
            },
            doc: "validate swagger",
        };
    };
}
