// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda/modules/orchestrator/services/addon (interfaces: SourcecovAddonManagementDeps)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	apistructs "github.com/erda-project/erda/apistructs"
	gomock "github.com/golang/mock/gomock"
)

// MockSourcecovAddonManagementDeps is a mock of SourcecovAddonManagementDeps interface.
type MockSourcecovAddonManagementDeps struct {
	ctrl     *gomock.Controller
	recorder *MockSourcecovAddonManagementDepsMockRecorder
}

// MockSourcecovAddonManagementDepsMockRecorder is the mock recorder for MockSourcecovAddonManagementDeps.
type MockSourcecovAddonManagementDepsMockRecorder struct {
	mock *MockSourcecovAddonManagementDeps
}

// NewMockSourcecovAddonManagementDeps creates a new mock instance.
func NewMockSourcecovAddonManagementDeps(ctrl *gomock.Controller) *MockSourcecovAddonManagementDeps {
	mock := &MockSourcecovAddonManagementDeps{ctrl: ctrl}
	mock.recorder = &MockSourcecovAddonManagementDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcecovAddonManagementDeps) EXPECT() *MockSourcecovAddonManagementDepsMockRecorder {
	return m.recorder
}

// GetOpenapiOAuth2Token mocks base method.
func (m *MockSourcecovAddonManagementDeps) GetOpenapiOAuth2Token(arg0 apistructs.OpenapiOAuth2TokenGetRequest) (*apistructs.OpenapiOAuth2Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenapiOAuth2Token", arg0)
	ret0, _ := ret[0].(*apistructs.OpenapiOAuth2Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenapiOAuth2Token indicates an expected call of GetOpenapiOAuth2Token.
func (mr *MockSourcecovAddonManagementDepsMockRecorder) GetOpenapiOAuth2Token(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenapiOAuth2Token", reflect.TypeOf((*MockSourcecovAddonManagementDeps)(nil).GetOpenapiOAuth2Token), arg0)
}

// GetOrg mocks base method.
func (m *MockSourcecovAddonManagementDeps) GetOrg(arg0 interface{}) (*apistructs.OrgDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", arg0)
	ret0, _ := ret[0].(*apistructs.OrgDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockSourcecovAddonManagementDepsMockRecorder) GetOrg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockSourcecovAddonManagementDeps)(nil).GetOrg), arg0)
}

// GetProjectNamespaceInfo mocks base method.
func (m *MockSourcecovAddonManagementDeps) GetProjectNamespaceInfo(arg0 uint64) (*apistructs.ProjectNameSpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNamespaceInfo", arg0)
	ret0, _ := ret[0].(*apistructs.ProjectNameSpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNamespaceInfo indicates an expected call of GetProjectNamespaceInfo.
func (mr *MockSourcecovAddonManagementDepsMockRecorder) GetProjectNamespaceInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNamespaceInfo", reflect.TypeOf((*MockSourcecovAddonManagementDeps)(nil).GetProjectNamespaceInfo), arg0)
}
