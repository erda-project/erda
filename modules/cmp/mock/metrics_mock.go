// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/yj/go/pkg/mod/github.com/erda-project/erda-proto-go@v0.0.0-20210805063629-d4e8ac75e06d/core/monitor/metric/pb/metric_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	pb "github.com/erda-project/erda-proto-go/core/monitor/metric/pb"
)

// MockMetricServiceClient is a mock of MetricServiceClient interface.
type MockMetricServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceClientMockRecorder
}

// MockMetricServiceClientMockRecorder is the mock recorder for MockMetricServiceClient.
type MockMetricServiceClientMockRecorder struct {
	mock *MockMetricServiceClient
}

// NewMockMetricServiceClient creates a new mock instance.
func NewMockMetricServiceClient(ctrl *gomock.Controller) *MockMetricServiceClient {
	mock := &MockMetricServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceClient) EXPECT() *MockMetricServiceClientMockRecorder {
	return m.recorder
}

// GeneralQuery mocks base method.
func (m *MockMetricServiceClient) GeneralQuery(ctx context.Context, in *pb.GeneralQueryRequest, opts ...grpc.CallOption) (*pb.GeneralQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeneralQuery", varargs...)
	ret0, _ := ret[0].(*pb.GeneralQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneralQuery indicates an expected call of GeneralQuery.
func (mr *MockMetricServiceClientMockRecorder) GeneralQuery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneralQuery", reflect.TypeOf((*MockMetricServiceClient)(nil).GeneralQuery), varargs...)
}

// GeneralSearch mocks base method.
func (m *MockMetricServiceClient) GeneralSearch(ctx context.Context, in *pb.GeneralQueryRequest, opts ...grpc.CallOption) (*pb.GeneralQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeneralSearch", varargs...)
	ret0, _ := ret[0].(*pb.GeneralQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneralSearch indicates an expected call of GeneralSearch.
func (mr *MockMetricServiceClientMockRecorder) GeneralSearch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneralSearch", reflect.TypeOf((*MockMetricServiceClient)(nil).GeneralSearch), varargs...)
}

// QueryWithInfluxFormat mocks base method.
func (m *MockMetricServiceClient) QueryWithInfluxFormat(ctx context.Context, in *pb.QueryWithInfluxFormatRequest, opts ...grpc.CallOption) (*pb.QueryWithInfluxFormatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryWithInfluxFormat", varargs...)
	ret0, _ := ret[0].(*pb.QueryWithInfluxFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithInfluxFormat indicates an expected call of QueryWithInfluxFormat.
func (mr *MockMetricServiceClientMockRecorder) QueryWithInfluxFormat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithInfluxFormat", reflect.TypeOf((*MockMetricServiceClient)(nil).QueryWithInfluxFormat), varargs...)
}

// QueryWithTableFormat mocks base method.
func (m *MockMetricServiceClient) QueryWithTableFormat(ctx context.Context, in *pb.QueryWithTableFormatRequest, opts ...grpc.CallOption) (*pb.QueryWithTableFormatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryWithTableFormat", varargs...)
	ret0, _ := ret[0].(*pb.QueryWithTableFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithTableFormat indicates an expected call of QueryWithTableFormat.
func (mr *MockMetricServiceClientMockRecorder) QueryWithTableFormat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithTableFormat", reflect.TypeOf((*MockMetricServiceClient)(nil).QueryWithTableFormat), varargs...)
}

// SearchWithInfluxFormat mocks base method.
func (m *MockMetricServiceClient) SearchWithInfluxFormat(ctx context.Context, in *pb.QueryWithInfluxFormatRequest, opts ...grpc.CallOption) (*pb.QueryWithInfluxFormatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchWithInfluxFormat", varargs...)
	ret0, _ := ret[0].(*pb.QueryWithInfluxFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithInfluxFormat indicates an expected call of SearchWithInfluxFormat.
func (mr *MockMetricServiceClientMockRecorder) SearchWithInfluxFormat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithInfluxFormat", reflect.TypeOf((*MockMetricServiceClient)(nil).SearchWithInfluxFormat), varargs...)
}

// SearchWithTableFormat mocks base method.
func (m *MockMetricServiceClient) SearchWithTableFormat(ctx context.Context, in *pb.QueryWithTableFormatRequest, opts ...grpc.CallOption) (*pb.QueryWithTableFormatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchWithTableFormat", varargs...)
	ret0, _ := ret[0].(*pb.QueryWithTableFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithTableFormat indicates an expected call of SearchWithTableFormat.
func (mr *MockMetricServiceClientMockRecorder) SearchWithTableFormat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithTableFormat", reflect.TypeOf((*MockMetricServiceClient)(nil).SearchWithTableFormat), varargs...)
}

// MockMetricServiceServer is a mock of MetricServiceServer interface.
type MockMetricServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceServerMockRecorder
}

// MockMetricServiceServerMockRecorder is the mock recorder for MockMetricServiceServer.
type MockMetricServiceServerMockRecorder struct {
	mock *MockMetricServiceServer
}

// NewMockMetricServiceServer creates a new mock instance.
func NewMockMetricServiceServer(ctrl *gomock.Controller) *MockMetricServiceServer {
	mock := &MockMetricServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetricServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceServer) EXPECT() *MockMetricServiceServerMockRecorder {
	return m.recorder
}

// GeneralQuery mocks base method.
func (m *MockMetricServiceServer) GeneralQuery(arg0 context.Context, arg1 *pb.GeneralQueryRequest) (*pb.GeneralQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneralQuery", arg0, arg1)
	ret0, _ := ret[0].(*pb.GeneralQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneralQuery indicates an expected call of GeneralQuery.
func (mr *MockMetricServiceServerMockRecorder) GeneralQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneralQuery", reflect.TypeOf((*MockMetricServiceServer)(nil).GeneralQuery), arg0, arg1)
}

// GeneralSearch mocks base method.
func (m *MockMetricServiceServer) GeneralSearch(arg0 context.Context, arg1 *pb.GeneralQueryRequest) (*pb.GeneralQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneralSearch", arg0, arg1)
	ret0, _ := ret[0].(*pb.GeneralQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneralSearch indicates an expected call of GeneralSearch.
func (mr *MockMetricServiceServerMockRecorder) GeneralSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneralSearch", reflect.TypeOf((*MockMetricServiceServer)(nil).GeneralSearch), arg0, arg1)
}

// QueryWithInfluxFormat mocks base method.
func (m *MockMetricServiceServer) QueryWithInfluxFormat(arg0 context.Context, arg1 *pb.QueryWithInfluxFormatRequest) (*pb.QueryWithInfluxFormatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithInfluxFormat", arg0, arg1)
	ret0, _ := ret[0].(*pb.QueryWithInfluxFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithInfluxFormat indicates an expected call of QueryWithInfluxFormat.
func (mr *MockMetricServiceServerMockRecorder) QueryWithInfluxFormat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithInfluxFormat", reflect.TypeOf((*MockMetricServiceServer)(nil).QueryWithInfluxFormat), arg0, arg1)
}

// QueryWithTableFormat mocks base method.
func (m *MockMetricServiceServer) QueryWithTableFormat(arg0 context.Context, arg1 *pb.QueryWithTableFormatRequest) (*pb.QueryWithTableFormatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithTableFormat", arg0, arg1)
	ret0, _ := ret[0].(*pb.QueryWithTableFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithTableFormat indicates an expected call of QueryWithTableFormat.
func (mr *MockMetricServiceServerMockRecorder) QueryWithTableFormat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithTableFormat", reflect.TypeOf((*MockMetricServiceServer)(nil).QueryWithTableFormat), arg0, arg1)
}

// SearchWithInfluxFormat mocks base method.
func (m *MockMetricServiceServer) SearchWithInfluxFormat(arg0 context.Context, arg1 *pb.QueryWithInfluxFormatRequest) (*pb.QueryWithInfluxFormatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithInfluxFormat", arg0, arg1)
	ret0, _ := ret[0].(*pb.QueryWithInfluxFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithInfluxFormat indicates an expected call of SearchWithInfluxFormat.
func (mr *MockMetricServiceServerMockRecorder) SearchWithInfluxFormat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithInfluxFormat", reflect.TypeOf((*MockMetricServiceServer)(nil).SearchWithInfluxFormat), arg0, arg1)
}

// SearchWithTableFormat mocks base method.
func (m *MockMetricServiceServer) SearchWithTableFormat(arg0 context.Context, arg1 *pb.QueryWithTableFormatRequest) (*pb.QueryWithTableFormatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithTableFormat", arg0, arg1)
	ret0, _ := ret[0].(*pb.QueryWithTableFormatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithTableFormat indicates an expected call of SearchWithTableFormat.
func (mr *MockMetricServiceServerMockRecorder) SearchWithTableFormat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithTableFormat", reflect.TypeOf((*MockMetricServiceServer)(nil).SearchWithTableFormat), arg0, arg1)
}
