// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/dop/services/code_coverage/code_coverage.go

// Package code_coverage is a generated GoMock package.
package code_coverage

import (
	io "io"
	reflect "reflect"

	apistructs "github.com/erda-project/erda/apistructs"
	dao "github.com/erda-project/erda/modules/dop/dao"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockCodeCoverageDBer is a mock of CodeCoverageDBer interface.
type MockCodeCoverageDBer struct {
	ctrl     *gomock.Controller
	recorder *MockCodeCoverageDBerMockRecorder
}

// MockCodeCoverageDBerMockRecorder is the mock recorder for MockCodeCoverageDBer.
type MockCodeCoverageDBerMockRecorder struct {
	mock *MockCodeCoverageDBer
}

// NewMockCodeCoverageDBer creates a new mock instance.
func NewMockCodeCoverageDBer(ctrl *gomock.Controller) *MockCodeCoverageDBer {
	mock := &MockCodeCoverageDBer{ctrl: ctrl}
	mock.recorder = &MockCodeCoverageDBerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeCoverageDBer) EXPECT() *MockCodeCoverageDBerMockRecorder {
	return m.recorder
}

// CancelCodeCoverage mocks base method.
func (m *MockCodeCoverageDBer) CancelCodeCoverage(arg0 uint64, arg1 *dao.CodeCoverageExecRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCodeCoverage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelCodeCoverage indicates an expected call of CancelCodeCoverage.
func (mr *MockCodeCoverageDBerMockRecorder) CancelCodeCoverage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCodeCoverage", reflect.TypeOf((*MockCodeCoverageDBer)(nil).CancelCodeCoverage), arg0, arg1)
}

// CreateCodeCoverage mocks base method.
func (m *MockCodeCoverageDBer) CreateCodeCoverage(record *dao.CodeCoverageExecRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodeCoverage", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCodeCoverage indicates an expected call of CreateCodeCoverage.
func (mr *MockCodeCoverageDBerMockRecorder) CreateCodeCoverage(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodeCoverage", reflect.TypeOf((*MockCodeCoverageDBer)(nil).CreateCodeCoverage), record)
}

// GetCodeCoverageByID mocks base method.
func (m *MockCodeCoverageDBer) GetCodeCoverageByID(id uint64) (*dao.CodeCoverageExecRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeCoverageByID", id)
	ret0, _ := ret[0].(*dao.CodeCoverageExecRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeCoverageByID indicates an expected call of GetCodeCoverageByID.
func (mr *MockCodeCoverageDBerMockRecorder) GetCodeCoverageByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeCoverageByID", reflect.TypeOf((*MockCodeCoverageDBer)(nil).GetCodeCoverageByID), id)
}

// ListCodeCoverage mocks base method.
func (m *MockCodeCoverageDBer) ListCodeCoverage(req apistructs.CodeCoverageListRequest) ([]dao.CodeCoverageExecRecordShort, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodeCoverage", req)
	ret0, _ := ret[0].([]dao.CodeCoverageExecRecordShort)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodeCoverage indicates an expected call of ListCodeCoverage.
func (mr *MockCodeCoverageDBerMockRecorder) ListCodeCoverage(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeCoverage", reflect.TypeOf((*MockCodeCoverageDBer)(nil).ListCodeCoverage), req)
}

// ListCodeCoverageByStatus mocks base method.
func (m *MockCodeCoverageDBer) ListCodeCoverageByStatus(projectID uint64, status []apistructs.CodeCoverageExecStatus) ([]dao.CodeCoverageExecRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodeCoverageByStatus", projectID, status)
	ret0, _ := ret[0].([]dao.CodeCoverageExecRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCodeCoverageByStatus indicates an expected call of ListCodeCoverageByStatus.
func (mr *MockCodeCoverageDBerMockRecorder) ListCodeCoverageByStatus(projectID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeCoverageByStatus", reflect.TypeOf((*MockCodeCoverageDBer)(nil).ListCodeCoverageByStatus), projectID, status)
}

// TxBegin mocks base method.
func (m *MockCodeCoverageDBer) TxBegin() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxBegin")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// TxBegin indicates an expected call of TxBegin.
func (mr *MockCodeCoverageDBerMockRecorder) TxBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxBegin", reflect.TypeOf((*MockCodeCoverageDBer)(nil).TxBegin))
}

// UpdateCodeCoverage mocks base method.
func (m *MockCodeCoverageDBer) UpdateCodeCoverage(record *dao.CodeCoverageExecRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodeCoverage", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCodeCoverage indicates an expected call of UpdateCodeCoverage.
func (mr *MockCodeCoverageDBerMockRecorder) UpdateCodeCoverage(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodeCoverage", reflect.TypeOf((*MockCodeCoverageDBer)(nil).UpdateCodeCoverage), record)
}

// MockCodeCoverageBDLer is a mock of CodeCoverageBDLer interface.
type MockCodeCoverageBDLer struct {
	ctrl     *gomock.Controller
	recorder *MockCodeCoverageBDLerMockRecorder
}

// MockCodeCoverageBDLerMockRecorder is the mock recorder for MockCodeCoverageBDLer.
type MockCodeCoverageBDLerMockRecorder struct {
	mock *MockCodeCoverageBDLer
}

// NewMockCodeCoverageBDLer creates a new mock instance.
func NewMockCodeCoverageBDLer(ctrl *gomock.Controller) *MockCodeCoverageBDLer {
	mock := &MockCodeCoverageBDLer{ctrl: ctrl}
	mock.recorder = &MockCodeCoverageBDLerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeCoverageBDLer) EXPECT() *MockCodeCoverageBDLerMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockCodeCoverageBDLer) CheckPermission(req *apistructs.PermissionCheckRequest) (*apistructs.PermissionCheckResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", req)
	ret0, _ := ret[0].(*apistructs.PermissionCheckResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockCodeCoverageBDLerMockRecorder) CheckPermission(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockCodeCoverageBDLer)(nil).CheckPermission), req)
}

// DownloadDiceFile mocks base method.
func (m *MockCodeCoverageBDLer) DownloadDiceFile(uuid string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDiceFile", uuid)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadDiceFile indicates an expected call of DownloadDiceFile.
func (mr *MockCodeCoverageBDLerMockRecorder) DownloadDiceFile(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDiceFile", reflect.TypeOf((*MockCodeCoverageBDLer)(nil).DownloadDiceFile), uuid)
}

// GetProject mocks base method.
func (m *MockCodeCoverageBDLer) GetProject(id uint64) (*apistructs.ProjectDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", id)
	ret0, _ := ret[0].(*apistructs.ProjectDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockCodeCoverageBDLerMockRecorder) GetProject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockCodeCoverageBDLer)(nil).GetProject), id)
}

// JacocoEnd mocks base method.
func (m *MockCodeCoverageBDLer) JacocoEnd(addr string, req *apistructs.JacocoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JacocoEnd", addr, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// JacocoEnd indicates an expected call of JacocoEnd.
func (mr *MockCodeCoverageBDLerMockRecorder) JacocoEnd(addr, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JacocoEnd", reflect.TypeOf((*MockCodeCoverageBDLer)(nil).JacocoEnd), addr, req)
}

// JacocoStart mocks base method.
func (m *MockCodeCoverageBDLer) JacocoStart(addr string, req *apistructs.JacocoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JacocoStart", addr, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// JacocoStart indicates an expected call of JacocoStart.
func (mr *MockCodeCoverageBDLerMockRecorder) JacocoStart(addr, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JacocoStart", reflect.TypeOf((*MockCodeCoverageBDLer)(nil).JacocoStart), addr, req)
}
