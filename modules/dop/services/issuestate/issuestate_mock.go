// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/dop/services/issuestate/issuestate.go

// Package issuestate is a generated GoMock package.
package issuestate

import (
	reflect "reflect"

	apistructs "github.com/erda-project/erda/apistructs"
	dao "github.com/erda-project/erda/modules/dop/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockIssueStater is a mock of IssueStater interface.
type MockIssueStater struct {
	ctrl     *gomock.Controller
	recorder *MockIssueStaterMockRecorder
}

// MockIssueStaterMockRecorder is the mock recorder for MockIssueStater.
type MockIssueStaterMockRecorder struct {
	mock *MockIssueStater
}

// NewMockIssueStater creates a new mock instance.
func NewMockIssueStater(ctrl *gomock.Controller) *MockIssueStater {
	mock := &MockIssueStater{ctrl: ctrl}
	mock.recorder = &MockIssueStaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueStater) EXPECT() *MockIssueStaterMockRecorder {
	return m.recorder
}

// CreateIssuesState mocks base method.
func (m *MockIssueStater) CreateIssuesState(state *dao.IssueState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssuesState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssuesState indicates an expected call of CreateIssuesState.
func (mr *MockIssueStaterMockRecorder) CreateIssuesState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuesState", reflect.TypeOf((*MockIssueStater)(nil).CreateIssuesState), state)
}

// DeleteIssuesState mocks base method.
func (m *MockIssueStater) DeleteIssuesState(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssuesState", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuesState indicates an expected call of DeleteIssuesState.
func (mr *MockIssueStaterMockRecorder) DeleteIssuesState(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuesState", reflect.TypeOf((*MockIssueStater)(nil).DeleteIssuesState), id)
}

// DeleteIssuesStateRelationByStartID mocks base method.
func (m *MockIssueStater) DeleteIssuesStateRelationByStartID(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssuesStateRelationByStartID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssuesStateRelationByStartID indicates an expected call of DeleteIssuesStateRelationByStartID.
func (mr *MockIssueStaterMockRecorder) DeleteIssuesStateRelationByStartID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuesStateRelationByStartID", reflect.TypeOf((*MockIssueStater)(nil).DeleteIssuesStateRelationByStartID), id)
}

// GetIssueByState mocks base method.
func (m *MockIssueStater) GetIssueByState(state int64) (*dao.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueByState", state)
	ret0, _ := ret[0].(*dao.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueByState indicates an expected call of GetIssueByState.
func (mr *MockIssueStaterMockRecorder) GetIssueByState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueByState", reflect.TypeOf((*MockIssueStater)(nil).GetIssueByState), state)
}

// GetIssueStateByID mocks base method.
func (m *MockIssueStater) GetIssueStateByID(ID int64) (*dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStateByID", ID)
	ret0, _ := ret[0].(*dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStateByID indicates an expected call of GetIssueStateByID.
func (mr *MockIssueStaterMockRecorder) GetIssueStateByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStateByID", reflect.TypeOf((*MockIssueStater)(nil).GetIssueStateByID), ID)
}

// GetIssueStateByIDs mocks base method.
func (m *MockIssueStater) GetIssueStateByIDs(ID []int64) ([]dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStateByIDs", ID)
	ret0, _ := ret[0].([]dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStateByIDs indicates an expected call of GetIssueStateByIDs.
func (mr *MockIssueStaterMockRecorder) GetIssueStateByIDs(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStateByIDs", reflect.TypeOf((*MockIssueStater)(nil).GetIssueStateByIDs), ID)
}

// GetIssuesStateRelations mocks base method.
func (m *MockIssueStater) GetIssuesStateRelations(projectID uint64, issueType apistructs.IssueType) ([]dao.IssueStateJoinSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesStateRelations", projectID, issueType)
	ret0, _ := ret[0].([]dao.IssueStateJoinSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesStateRelations indicates an expected call of GetIssuesStateRelations.
func (mr *MockIssueStaterMockRecorder) GetIssuesStateRelations(projectID, issueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesStateRelations", reflect.TypeOf((*MockIssueStater)(nil).GetIssuesStateRelations), projectID, issueType)
}

// GetIssuesStates mocks base method.
func (m *MockIssueStater) GetIssuesStates(req *apistructs.IssueStatesGetRequest) ([]dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesStates", req)
	ret0, _ := ret[0].([]dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (m *MockIssueStater) GetIssuesStatesByTypes(req *apistructs.IssueStatesRequest) ([]dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesStatesByTypes", req)
	ret0, _ := ret[0].([]dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}


// GetIssuesStates indicates an expected call of GetIssuesStates.
func (mr *MockIssueStaterMockRecorder) GetIssuesStates(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesStates", reflect.TypeOf((*MockIssueStater)(nil).GetIssuesStates), req)
}

// GetIssuesStatesByProjectID mocks base method.
func (m *MockIssueStater) GetIssuesStatesByProjectID(projectID uint64, issueType apistructs.IssueType) ([]dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesStatesByProjectID", projectID, issueType)
	ret0, _ := ret[0].([]dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesStatesByProjectID indicates an expected call of GetIssuesStatesByProjectID.
func (mr *MockIssueStaterMockRecorder) GetIssuesStatesByProjectID(projectID, issueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesStatesByProjectID", reflect.TypeOf((*MockIssueStater)(nil).GetIssuesStatesByProjectID), projectID, issueType)
}

// UpdateIssueState mocks base method.
func (m *MockIssueStater) UpdateIssueState(state *dao.IssueState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssueState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssueState indicates an expected call of UpdateIssueState.
func (mr *MockIssueStaterMockRecorder) UpdateIssueState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueState", reflect.TypeOf((*MockIssueStater)(nil).UpdateIssueState), state)
}

// UpdateIssueStateRelations mocks base method.
func (m *MockIssueStater) UpdateIssueStateRelations(projectID int64, issueType apistructs.IssueType, StateRelations []dao.IssueStateRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssueStateRelations", projectID, issueType, StateRelations)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssueStateRelations indicates an expected call of UpdateIssueStateRelations.
func (mr *MockIssueStaterMockRecorder) UpdateIssueStateRelations(projectID, issueType, StateRelations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueStateRelations", reflect.TypeOf((*MockIssueStater)(nil).UpdateIssueStateRelations), projectID, issueType, StateRelations)
}
