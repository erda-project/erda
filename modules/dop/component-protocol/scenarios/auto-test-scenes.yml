# 场景名
scenario: "auto-test-scenes"

hierarchy:
  root: autoTestScenes
  structure:
    autoTestScenes:
      left: leftPage
      right: rightPage
    leftPage:
      - leftHead
      - fileSearch
      - fileTree
      - fileFormModal
    leftHead:
      left: leftHeadTitle
      right:
        - leftHeadAddSceneSet
        - moreOperation
    moreOperation:
      children: moreIcon
    rightPage:
      children:
        - fileDetail
    fileDetail:
      children:
        - fileConfig
        - fileExecute
      tabBarExtraContent:
        - tabExecuteButton
    fileConfig:
      - scenesConfig
      - scenesSetConfig
    scenesConfig:
      - fileInfoHead
      - fileInfo
      - inParamsTitle
      - inParamsForm
      - stagesTitle
      - stages
      - stagesOperations
      - outPutTitle
      - outPutForm
    scenesSetConfig:
      - scenesSetTitle
      - scenesSetInfo
      - scenesStagesTitle
      - scenesStages
      - scenesStagesOperations
    scenesStagesOperations:
      - addScenesButton
      - exportScenesButton
      - referSceneSetButton
    fileInfoHead:
      left: fileInfoTitle
    #      right: fileHistory
    #    fileHistory:
    #      children: fileHistoryButton
    #      content: fileHistoryTable
    stagesOperations:
      - addApiButton
      - addConfigSheetButton
      - addWaitButton
      - addCustomScriptButton
      - apiEditorDrawer
      - waitEditorDrawer
      - configSheetDrawer
      - customScriptDrawer
      - nestedSceneDrawer
      - addCopyApiFormModal
    fileExecute:
      - executeHead
      - executeInfo
      - executeTaskTitle
      - executeAlertInfo
      - executeTaskBreadcrumb
      - executeTaskTable
      - resultDrawer
    apiEditorDrawer:
      content: apiEditorContainer
    waitEditorDrawer:
      content: waitEditor
    customScriptDrawer:
      content: customScriptForm
    configSheetDrawer:
      content:
        - configSheetSelect
        - configSheetInParams
    nestedSceneDrawer:
      content:
        - nestedSceneSelect
        - nestedSceneInParams
    resultDrawer:
      content:
        resultPreview
    apiEditorContainer:
      - marketProtoTitle
      - marketProto
      - apiEditor
    #      - apiExecuteContent
    executeHead:
      left: executeInfoTitle
      right:
        - refreshButton
        - cancelExecuteButton
        - executeHistory
    executeHistory:
      children: executeHistoryButton
      content: executeHistoryPop
    # apiExecuteContent:
    #   right: apiExecute
    executeHistoryPop:
      - executeHistoryRefresh
      - executeHistoryTable

components:
  refreshButton:
    type: Button
  cancelExecuteButton:
    type: Button
  waitEditor:
    type: Form
  customScriptForm:
    type: Form
  configSheetSelect:
    type: TreeSelect
  configSheetInParams:
    type: Form
  nestedSceneSelect:
    type: TreeSelect
  nestedSceneInParams:
    type: Form
  autoTestScenes:
    type: SplitPage
  fileSearch:
    type: Input
  leftPage:
    type: Container
  rightPage:
    type: Container
  leftHead:
    type: LRContainer
  fileInfoHead:
    type: LRContainer
  apiExecuteContent:
    type: LRContainer
  # apiExecute:
  #   type: Button
  fileExecute:
    type: Container
  apiEditorContainer:
    type: Container
  executeHead:
    type: LRContainer
  executeHistoryPop:
    type: Container
  executeTaskBreadcrumb:
    type: Breadcrumb
  executeHistoryRefresh:
    type: Button
  executeHistoryTable:
    type: Table
  executeAlertInfo:
    type: Alert
  leftHeadTitle:
    type: Title
  leftHeadAddSceneSet:
    type: Icon
  moreOperation:
    type: Dropdown
  moreIcon:
    type: Icon
    props:
      iconType: moreOne
      size: 18
      hoverAction: true
  fileTree:
    type: FileTree
  fileFormModal:
    type: FormModal
  fileDetail:
    type: Tabs
  stages:
    type: SortGroup
  apiEditor:
    type: "APIEditor"
    operations:
      onChange:
        key: "onChange"
        reload: true
      close:
        key: "closeApiEdit"
        reload: false
        command:
          key: "set"
          target: "apiEditorDrawer"
          state:
            visible: false
  marketProtoTitle:
    type: Title
    props:
      title: ${{ i18n.marketProto }}
      level: 3
      tips: ${{ i18n.marketProtoTip }}
  marketProto:
    type: 'SelectPro'
    props:
      renderType: "apiProto"
      optionLabelProp: "label"
      showSearch: true
      placeholder: ${{ i18n.marketProtoPlace }}
      allowClear: true
    operations:
      onChange:
        reload: true
        key: changeAPISpec
        confirm:
          title: ${{ i18n.marketProtoChangeApi }}
          subTitle: ${{ i18n.marketProtoChangeApiConfirm }}
        fillMeta: "selectApiSpecId"
        meta:
          selectApiSpecId: ""
      onSearch:
        reload: true
        key: searchAPISpec
        fillMeta: "keyWord"
        meta:
          keyWord: ""
  fileInfo:
    type: Panel
  fileConfig:
    type: Container
  scenesConfig:
    type: Container
  scenesSetConfig:
    type: Container
  fileInfoTitle:
    type: Title
  executeInfoTitle:
    type: Title
  inParamsTitle:
    type: Title
  stagesTitle:
    type: Title
  outPutTitle:
    type: Title
  stagesOperations:
    type: RowContainer
  fileHistory:
    type: Popover
  # fileHistoryButton:
  #   type: Button
  # fileHistoryTable:
  #   type: Table
  executeHistoryButton:
    type: Button
  addApiButton:
    type: Button
  addCopyApiFormModal:
    type: FormModal
  addCustomScriptButton:
    type: Button
  waitEditorDrawer:
    type: Drawer
    state:
      visible: false
    props:
      title: ${{ i18n.waitInfo }}
      size: "l"
  customScriptDrawer:
    type: Drawer
    state:
      visible: false
    props:
      title: ${{ i18n.customScript }}
      size: "l"
  nestedSceneDrawer:
    type: Drawer
    state:
      visible: false
    props:
      title: ${{ i18n.nestedSceneInfo }}
      size: "l"
  configSheetDrawer:
    type: Drawer
    state:
      visible: false
    props:
      title: ${{ i18n.configInfo }}
      size: "l"
  apiEditorDrawer:
    type: Drawer
    state:
      visible: false
    props:
      title: ${{ i18n.apiInfo }}
      size: "l"
      closable: false
      maskClosable: false
  resultDrawer:
    type: Drawer
  addConfigSheetButton:
    type: Button
  addWaitButton:
    type: Button
  inParamsForm:
    type: EditList
  outPutForm:
    type: EditList
  executeInfo:
    type: Panel
  executeHistory:
    type: Popover
  executeTaskTitle:
    type: Title
  executeTaskTable:
    type: Table
  tabExecuteButton:
    type: Button
  resultPreview:
    type: APIPreview
  scenesSetTitle:
    type: Title
  scenesSetInfo:
    type: Panel
  scenesStagesTitle:
    type: Title
  scenesStages:
    type: SortGroup
  scenesStagesOperations:
    type: RowContainer
  addScenesButton:
    type: Button
  exportScenesButton:
    type: Button
  referSceneSetButton:
    type: Button

rendering:
  # 前端触发组件
  # 先渲染前端触发组件，再渲染关联组件
  inParamsForm:
    - name: fileInfo
  outPutForm:
    - name: fileInfo
  fileFormModal:
    - name: fileTree
      state:
        - name: "sceneSetKey"
          value: "{{ fileFormModal.sceneSetKey }}"
    - name: fileInfo
    - name: scenesStages
  fileTree:
    - name: tabExecuteButton
    - name: fileFormModal
      state:
        - name: "visible"
          value: "{{ fileTree.formVisible }}"
        - name: "sceneSetKey"
          value: "{{ fileTree.sceneSetKey }}"
        - name: "actionType"
          value: "{{ fileTree.actionType }}"
        - name: "isAddParallel"
          value: "{{ scenesStages.isAddParallel }}"
    - name: fileDetail
      state:
        - name: "isChangeScene"
          value: "{{ fileTree.isClickScene }}"
    - name: scenesConfig
    - name: fileInfo
    - name: inParamsForm
      state:
        - name: "setId"
          value: "{{ fileTree.sceneSetKey }}"
        - name: "isChangeScene"
          value: "{{ fileTree.isClickScene }}"
    - name: stages
    - name: outPutTitle
    - name: outPutForm
    - name: addApiButton
    - name: addCopyApiFormModal
    - name: addConfigSheetButton
    - name: addWaitButton
    - name: addCustomScriptButton
    - name: executeHead
    - name: executeHistoryTable
    - name: executeAlertInfo
    - name: refreshButton
    - name: cancelExecuteButton
    - name: executeInfo
    - name: executeTaskTitle
    - name: executeTaskBreadcrumb
    - name: executeHistoryButton
    - name: executeTaskTable
    - name: resultDrawer
    - name: cancelExecuteButton
    - name: scenesSetConfig
    - name: scenesSetTitle
    - name: scenesSetInfo
    - name: scenesStages
  leftHeadAddSceneSet:
    - name: "fileFormModal"
      state:
        - name: "visible"
          value: "{{ leftHeadAddSceneSet.formVisible }}"
        - name: "actionType"
          value: "{{ leftHeadAddSceneSet.actionType }}"
  fileDetail:
    - name: scenesConfig
    - name: fileExecute
  addApiButton:
    - name: fileInfo
    - name: stages
    - name: apiEditorDrawer
      state:
        - name: "visible"
          value: "{{ addApiButton.showApiEditorDrawer }}"
    - name: apiEditor
      state:
        - name: "stepId"
          value: "{{ addApiButton.createStepID }}"
        - name: "isFirstIn"
          value: "{{ addApiButton.isClick }}"
    - name: marketProtoTitle
    - name: marketProto
      state:
        - name: "stepId"
          value: "{{ addApiButton.createStepID }}"
  addCopyApiFormModal:
    - name: fileInfo
    - name: stages
  addConfigSheetButton:
    - name: fileInfo
    - name: stages
    - name: configSheetDrawer
      state:
        - name: "visible"
          value: "{{ addConfigSheetButton.showConfigSheetDrawer }}"
    - name: configSheetSelect
      state:
        - name: "visible"
          value: "{{ configSheetDrawer.visible }}"
        - name: "stepId"
          value: "{{ addConfigSheetButton.createStepID }}"
    - name: configSheetInParams
      state:
        - name: "stepId"
          value: "{{ addConfigSheetButton.createStepID }}"
        - name: "configSheetId"
          value: "{{ addConfigSheetButton.configSheetId }}"
  addWaitButton:
    - name: fileInfo
    - name: stages
    - name: waitEditorDrawer
      state:
        - name: "visible"
          value: "{{ addWaitButton.showWaitEditorDrawer }}"
    - name: waitEditor
      state:
        - name: "stepId"
          value: "{{ addWaitButton.createStepID }}"
  addCustomScriptButton:
    - name: fileInfo
    - name: stages
    - name: customScriptDrawer
      state:
        - name: "visible"
          value: "{{ addCustomScriptButton.showCustomEditorDrawer }}"
    - name: customScriptForm
      state:
        - name: "stepId"
          value: "{{ addCustomScriptButton.createStepID }}"
  stages:
    - name: fileInfo
    - name: apiEditorDrawer
      state:
        - name: "visible"
          value: "{{ stages.showApiEditorDrawer }}"
    - name: apiEditor
      state:
        - name: "stepId"
          value: "{{ stages.stepId }}"
        - name: "isFirstIn"
          value: "{{ stages.isClickItem }}"
    - name: marketProtoTitle
    - name: marketProto
      state:
        - name: "stepId"
          value: "{{ stages.stepId }}"
    - name: configSheetDrawer
      state:
        - name: "visible"
          value: "{{ stages.showConfigSheetDrawer }}"
    - name: configSheetSelect
      state:
        - name: "visible"
          value: "{{ stages.showConfigSheetDrawer }}"
        - name: "stepId"
          value: "{{ stages.stepId }}"
    - name: configSheetInParams
      state:
        - name: "stepId"
          value: "{{ stages.stepId }}"
        - name: "visible"
          value: "{{ configSheetDrawer.visible }}"
        - name: "configSheetId"
          value: "{{ stages.configSheetId }}"
    - name: waitEditorDrawer
      state:
        - name: "visible"
          value: "{{ stages.showWaitEditorDrawer }}"
    - name: waitEditor
      state:
        - name: "stepId"
          value: "{{ stages.stepId }}"
    - name: customScriptDrawer
      state:
        - name: "visible"
          value: "{{ stages.showCustomEditorDrawer }}"
    - name: customScriptForm
      state:
        - name: "stepId"
          value: "{{ stages.stepId }}"
    - name: nestedSceneDrawer
      state:
        - name: "visible"
          value: "{{ stages.showNestedSceneDrawer }}"
    - name: nestedSceneSelect
      state:
        - name: "visible"
          value: "{{ stages.showNestedSceneDrawer }}"
        - name: "stepId"
          value: "{{ stages.stepId }}"
    - name: nestedSceneInParams
      state:
        - name: "stepId"
          value: "{{ stages.stepId }}"
        - name: "visible"
          value: "{{ stages.showNestedSceneDrawer }}"

  waitEditor:
    - name: fileInfo
    - name: waitEditorDrawer
      state:
        - name: "visible"
          value: "{{ waitEditor.drawVisible }}"
    - name: stages
  customScriptForm:
    - name: fileInfo
    - name: customScriptDrawer
      state:
        - name: "visible"
          value: "{{ customScriptForm.drawVisible }}"
    - name: stages
  marketProto:
    - name: fileInfo
    - name: apiEditor
      state:
        - name: "changeApiSpecId"
          value: "{{ marketProto.apiSpecId }}"
    - name: stages
  apiEditor:
    - name: fileInfo
    - name: stages
    - name: apiEditorDrawer
      state:
        - name: "visible"
          value: "{{ apiEditor.apiEditorDrawerVisible }}"
    - name: outPutForm
  configSheetDrawer:
    - name: configSheetInParams
      state:
        - name: "visible"
          value: "{{ configSheetDrawer.visible }}"
  configSheetSelect:
    - name: configSheetInParams
      state:
        - name: "configSheetId"
          value: "{{ configSheetSelect.configSheetId }}"
        - name: "stepId"
          value: "{{ configSheetSelect.stepId }}"
        - name: "visible"
          value: "{{ configSheetSelect.visible }}"
    - name: stages
  nestedSceneInParams:
    - name: fileInfo
    - name: nestedSceneDrawer
      state:
        - name: "visible"
          value: "{{ configSheetInParams.visible }}"
    - name: stages
  configSheetInParams:
    - name: fileInfo
    - name: configSheetDrawer
      state:
        - name: "visible"
          value: "{{ configSheetInParams.visible }}"
    - name: stages

  executeHistoryTable:
    - name: executeTaskTable
    - name: executeInfo
    - name: cancelExecuteButton
    - name: refreshButton
    - name: executeAlertInfo
    - name: executeTaskBreadcrumb
  executeTaskTable:
    - name: executeTaskBreadcrumb
      state:
        - name: "name"
          value: "{{ executeTaskTable.name }}"
        - name: "unfold"
          value: "{{ executeTaskTable.unfold }}"
    - name: executeHistoryButton
    - name: refreshButton
    - name: cancelExecuteButton
    - name: executeInfo
  executeTaskBreadcrumb:
    - name: executeTaskTable
    - name: executeInfo
    - name: executeHistoryButton
    - name: refreshButton
    - name: cancelExecuteButton
  refreshButton:
    - name: executeTaskTable
    - name: executeInfo
    - name: cancelExecuteButton
    - name: executeAlertInfo
  executeHistoryRefresh:
    - name: executeHistoryTable
      state:
        - name: pageNo
          value: "{{ executeHistoryRefresh.pageNo }}"
  cancelExecuteButton:
    - name: executeHistoryTable
    - name: refreshButton
    - name: executeTaskTable
    - name: executeInfo
    - name: executeAlertInfo
  tabExecuteButton:
    - name: executeHistoryTable
    - name: cancelExecuteButton
    - name: executeTaskTable
    - name: executeInfo
    - name: refreshButton
    - name: executeTaskBreadcrumb
    - name: fileDetail
    - name: executeAlertInfo
    - name: executeHistoryButton
  scenesStages:
    - name: fileFormModal
      state:
        - name: "actionType"
          value: "{{ scenesStages.actionType }}"
        - name: "visible"
          value: "{{ scenesStages.visible }}"
        - name: "sceneSetKey"
          value: "{{ scenesStages.sceneSetKey }}"
        - name: "sceneId"
          value: "{{ scenesStages.sceneId }}"
        - name: "isAddParallel"
          value: "{{ scenesStages.isAddParallel }}"
    - name: fileTree
      state:
        - name: "clickFolderTableSceneID"
          value: "{{ scenesStages.clickFolderTableRowID }}"
        - name: "isClickFolderTable"
          value: "{{ scenesStages.isClickFolderTableRow }}"
        - name: "sceneId"
          value: "{{ scenesStages.sceneId }}"
    - name: fileConfig
    - name: scenesSetConfig
    - name: scenesSetInfo
    - name: scenesConfig
    - name: fileInfo
    - name: inParamsForm
    - name: outPutTitle
    - name: outPutForm
    - name: stages
    - name: stagesOperations
    - name: executeHead
    - name: executeHistoryTable
    - name: executeAlertInfo
    - name: refreshButton
    - name: cancelExecuteButton
    - name: executeInfo
    - name: executeTaskTitle
    - name: executeTaskBreadcrumb
    - name: executeHistoryButton
    - name: executeTaskTable
    - name: resultDrawer
    - name: cancelExecuteButton
    - name: tabExecuteButton
    - name: addWaitButton
    - name: addConfigSheetButton
    - name: addApiButton
  addScenesButton:
    - name: fileFormModal
      state:
        - name: "actionType"
          value: "{{ addScenesButton.actionType }}"
        - name: "visible"
          value: "{{ addScenesButton.visible }}"
        - name: "sceneSetKey"
          value: "{{ addScenesButton.sceneSetKey }}"
        - name: "isAddParallel"
          value: "{{ scenesStages.isAddParallel }}"
  referSceneSetButton:
    - name: fileFormModal
      state:
        - name: "actionType"
          value: "{{ referSceneSetButton.actionType }}"
        - name: "visible"
          value: "{{ referSceneSetButton.visible }}"
        - name: "sceneSetKey"
          value: "{{ referSceneSetButton.sceneSetKey }}"
