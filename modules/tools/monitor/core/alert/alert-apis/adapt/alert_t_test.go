// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda-infra/providers/i18n (interfaces: Translator)

// Package adapt is a generated GoMock package.
package adapt

import (
	reflect "reflect"

	i18n "github.com/erda-project/erda-infra/providers/i18n"
	gomock "github.com/golang/mock/gomock"
)

// MockTranslator is a mock of Translator interface.
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator.
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance.
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTranslator) Get(arg0 i18n.LanguageCodes, arg1, arg2 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTranslatorMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTranslator)(nil).Get), arg0, arg1, arg2)
}

// Sprintf mocks base method.
func (m *MockTranslator) Sprintf(arg0 i18n.LanguageCodes, arg1 string, arg2 ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sprintf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprintf indicates an expected call of Sprintf.
func (mr *MockTranslatorMockRecorder) Sprintf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprintf", reflect.TypeOf((*MockTranslator)(nil).Sprintf), varargs...)
}

// Text mocks base method.
func (m *MockTranslator) Text(arg0 i18n.LanguageCodes, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockTranslatorMockRecorder) Text(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockTranslator)(nil).Text), arg0, arg1)
}
