// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../../api/proto-go/core/monitor/event/pb/event_query_grpc.pb.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	pb "github.com/erda-project/erda-proto-go/core/monitor/event/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEventQueryServiceClient is a mock of EventQueryServiceClient interface.
type MockEventQueryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventQueryServiceClientMockRecorder
}

// MockEventQueryServiceClientMockRecorder is the mock recorder for MockEventQueryServiceClient.
type MockEventQueryServiceClientMockRecorder struct {
	mock *MockEventQueryServiceClient
}

// NewMockEventQueryServiceClient creates a new mock instance.
func NewMockEventQueryServiceClient(ctrl *gomock.Controller) *MockEventQueryServiceClient {
	mock := &MockEventQueryServiceClient{ctrl: ctrl}
	mock.recorder = &MockEventQueryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventQueryServiceClient) EXPECT() *MockEventQueryServiceClientMockRecorder {
	return m.recorder
}

// GetEvents mocks base method.
func (m *MockEventQueryServiceClient) GetEvents(ctx context.Context, in *pb.GetEventsRequest, opts ...grpc.CallOption) (*pb.GetEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvents", varargs...)
	ret0, _ := ret[0].(*pb.GetEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventQueryServiceClientMockRecorder) GetEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventQueryServiceClient)(nil).GetEvents), varargs...)
}

// MockEventQueryServiceServer is a mock of EventQueryServiceServer interface.
type MockEventQueryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEventQueryServiceServerMockRecorder
}

// MockEventQueryServiceServerMockRecorder is the mock recorder for MockEventQueryServiceServer.
type MockEventQueryServiceServerMockRecorder struct {
	mock *MockEventQueryServiceServer
}

// NewMockEventQueryServiceServer creates a new mock instance.
func NewMockEventQueryServiceServer(ctrl *gomock.Controller) *MockEventQueryServiceServer {
	mock := &MockEventQueryServiceServer{ctrl: ctrl}
	mock.recorder = &MockEventQueryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventQueryServiceServer) EXPECT() *MockEventQueryServiceServerMockRecorder {
	return m.recorder
}

// GetEvents mocks base method.
func (m *MockEventQueryServiceServer) GetEvents(arg0 context.Context, arg1 *pb.GetEventsRequest) (*pb.GetEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventQueryServiceServerMockRecorder) GetEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventQueryServiceServer)(nil).GetEvents), arg0, arg1)
}
