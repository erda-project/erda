# Copyright (c) 2021 Terminus, Inc.
#
# This program is free software: you can use, redistribute, and/or modify
# it under the terms of the GNU Affero General Public License, version 3
# or later ("AGPL"), as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

name: CI AND IT
on:
  push:
    tags:
      - v*
    branches:
      - develop
      - master
      - release/*
  pull_request:

jobs:
  PREPARE:
    runs-on: ubuntu-latest
    container:
      image: registry.erda.cloud/erda/gohub:latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-1
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Gen proto-go
        run: |
          HOME=/root make proto-go-in-local
      - name: Upload proto-go As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
          retention-days: 1
      - name: Go generate
        run: make prepare
      - name: Upload go-generated-files As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: go-generated-files
          # see .gitignore
          path: |
            modules/openapi/api/api.go
            modules/openapi/api/generate/collectAPIs.go
            modules/openapi/api/swagger.json
            modules/openapi/api/swagger_all.json
            modules/openapi/api/generate/collectEvents.go
            modules/openapi/api/events_all.json
            modules/openapi/component-protocol/generate/auto_register/auto_register.go
          retention-days: 1
      - name: test go-generated-files
        uses: actions/download-artifact@v3
        with:
          name: go-generated-files
          path: ./go-generated
      - run: ls -R ./go-generated




  CI:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-1
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run Build
        run: GO_BUILD_OPTIONS="-tags=musl" make build-all

#  CODE-CHECK:
#    runs-on: ubuntu-latest
#    container:
#      image: letmein7788/letmein:golangci-lint
#    needs:
#      - PREPARE
#    steps:
#      - name: Install Tools
#        run: apk add tar
#      - name: Clone repo
#        uses: actions/checkout@v3
#      - name: Fetch proto-go
#        uses: actions/download-artifact@v3
#        with:
#          name: proto-go
#          path: ./api/proto-go
#      - name: Calculate Go Cache Path
#        id: go-cache-paths
#        run: |
#          echo "::set-output name=go-build::$(go env GOCACHE)"
#          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ${{ steps.go-cache-paths.outputs.go-build }}
#            ${{ steps.go-cache-paths.outputs.go-mod }}
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-1
#          restore-keys: |
#            ${{ runner.os }}-go-
#      - name: Go generate files
#        run: make prepare
#      - name: Check Go Imports
#        run: make check-imports
#      - name: Run SQL Lint
#        run: make miglint
#      - name: Run Go Lint
#        uses: golangci/golangci-lint-action@v2.5.2
#        with:
#          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
#          version: v1.29
#          # Optional: working directory, useful for monorepos
#          # working-directory: somedir
#          # Optional: golangci-lint command line arguments.
#          args: --timeout=10m
#          # Optional: show only new issues if it's a pull request. The default value is `false`.
#          # only-new-issues: true
#          # Optional: if set to true then the action will use pre-installed Go.
#          skip-go-installation: true
#          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
#          skip-pkg-cache: false
#          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
#          skip-build-cache: false
#
#  UNIT-TEST-modules:
#    runs-on: ubuntu-latest
#    container:
#      image: letmein7788/letmein:golangci-lint
#    needs:
#      - PREPARE
#    steps:
#      - name: Install Tools
#        run: apk add tar
#      - name: Clone repo
#        uses: actions/checkout@v3
#      - name: Fetch proto-go
#        uses: actions/download-artifact@v3
#        with:
#          name: proto-go
#          path: ./api/proto-go
#      - name: Calculate Go Cache Path
#        id: go-cache-paths
#        run: |
#          echo "::set-output name=go-build::$(go env GOCACHE)"
#          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ${{ steps.go-cache-paths.outputs.go-build }}
#            ${{ steps.go-cache-paths.outputs.go-mod }}
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-1
#          restore-keys: |
#            ${{ runner.os }}-go-
#      - name: Go generate files
#        run: make prepare
#      - name: Run Test
#        env:
#          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
#        run: |
#          go test $(go list ./modules/... | grep -v '/modules/cmp') -tags=musl -work -timeout=5s -failfast -race -coverprofile=coverage-modules.txt
#      - name: Upload coverage as artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-modules
#          path: coverage-modules.txt
#          retention-days: 1
#
#  UNIT-TEST-pkg:
#    runs-on: ubuntu-latest
#    container:
#      image: letmein7788/letmein:golangci-lint
#    needs:
#      - PREPARE
#    steps:
#      - name: Install Tools
#        run: apk add tar
#      - name: Clone repo
#        uses: actions/checkout@v3
#      - name: Fetch proto-go
#        uses: actions/download-artifact@v3
#        with:
#          name: proto-go
#          path: ./api/proto-go
#      - name: Calculate Go Cache Path
#        id: go-cache-paths
#        run: |
#          echo "::set-output name=go-build::$(go env GOCACHE)"
#          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ${{ steps.go-cache-paths.outputs.go-build }}
#            ${{ steps.go-cache-paths.outputs.go-mod }}
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-1
#          restore-keys: |
#            ${{ runner.os }}-go-
#      - name: Go generate files
#        run: make prepare
#      - name: Run Test
#        env:
#          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
#        run: |
#          go test ./pkg/... -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-modules.txt -covermode=atomic -gcflags='-l -N'
#      - name: Upload coverage as artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-pkg
#          path: coverage-pkg.txt
#          retention-days: 1
#
#  UNIT-TEST-cmp:
#    runs-on: ubuntu-latest
#    container:
#      image: letmein7788/letmein:golangci-lint
#    needs:
#      - PREPARE
#    steps:
#      - name: Install Tools
#        run: apk add tar
#      - name: Clone repo
#        uses: actions/checkout@v3
#      - name: Fetch proto-go
#        uses: actions/download-artifact@v3
#        with:
#          name: proto-go
#          path: ./api/proto-go
#      - name: Calculate Go Cache Path
#        id: go-cache-paths
#        run: |
#          echo "::set-output name=go-build::$(go env GOCACHE)"
#          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ${{ steps.go-cache-paths.outputs.go-build }}
#            ${{ steps.go-cache-paths.outputs.go-mod }}
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-1
#          restore-keys: |
#            ${{ runner.os }}-go-
#      - name: Go generate files
#        run: make prepare
#      - name: Run Test
#        env:
#          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
#        run: |
#          go test ./modules/cmp/... -tags=musl -work -timeout=5s -failfast -race -coverprofile=coverage-modules.txt
#      - name: Upload coverage as artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-cmp
#          path: coverage-cmp.txt
#          retention-days: 1
#
#  CODE-COV:
#    runs-on: ubuntu-latest
#    needs:
#      - UNIT-TEST-modules
#      - UNIT-TEST-pkg
#      - UNIT-TEST-cmp
#    steps:
#      - name: download coverage-modules.txt
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage-modules
#          path: .
#      - name: download coverage-pkg.txt
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage-pkg
#          path: .
#      - name: download coverage-cmp.txt
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage-cmp
#          path: .
#      - name: upload codecov
#        uses: codecov/codecov-action@v3
#        with:
#          files: coverage-*.txt
