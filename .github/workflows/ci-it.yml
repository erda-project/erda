# Copyright (c) 2021 Terminus, Inc.
#
# This program is free software: you can use, redistribute, and/or modify
# it under the terms of the GNU Affero General Public License, version 3
# or later ("AGPL"), as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

name: CI AND IT
on:
  push:
    tags:
      - v*
    branches:
      - develop
      - master
      - release/*
  pull_request:

jobs:
  PREPARE:
    runs-on: ubuntu-latest
    container:
      image: registry.erda.cloud/erda/gohub:latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4 # add '-1' to refresh cache
      - name: Gen proto-go
        run: |
          HOME=/root make proto-go-in-local
      - name: Upload proto-go As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
          retention-days: 1
      - name: Go generate # refresh cache
        run: make prepare && go mod tidy

  CI:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run Build
        run: GO_BUILD_OPTIONS="-tags=musl" make build-all

  CODE-CHECK:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files # it's faster than download artifact
        run: make prepare
      - name: Check Go Imports
        run: make check-imports
      - name: Run SQL Lint
        run: make miglint
      - name: Run Go Lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: v1.29
          args: --timeout=10m
          skip-go-installation: true
          skip-pkg-cache: false
          skip-build-cache: false

  UNIT-TEST-modules:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files
        run: make prepare
      - name: Run Go Test
        env:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
        run: |
          go test $(go list ./modules/... | grep -v '/modules/hepa/' | grep -v '/modules/openapi/' |grep -v '/modules/cmp/' | grep -v 'modules/dop/' | grep -v '/modules/monitor/' | grep -v '/modules/core/monitor/' | grep -v '/modules/msp/' | grep -v '/modules/oap/') -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-modules.txt -covermode=atomic -gcflags='-l'
      - name: Upload coverage As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-modules
          path: coverage-modules.txt
          retention-days: 1

  UNIT-TEST-monitor:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files
        run: make prepare
      - name: Run Go Test
        env:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
        run: |
          go test ./modules/monitor/... ./modules/core/monitor/... ./modules/msp/... ./modules/oap/... -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-monitor.txt -covermode=atomic -gcflags='-l'
      - name: Upload coverage As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-monitor
          path: coverage-monitor.txt
          retention-days: 1

  UNIT-TEST-pkg:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files
        run: make prepare
      - name: Run Go Test
        env:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
        run: |
          go test ./pkg/... -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-pkg.txt -covermode=atomic -gcflags='-l'
      - name: Upload coverage As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-pkg
          path: coverage-pkg.txt
          retention-days: 1

  UNIT-TEST-cmp:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files
        run: make prepare
      - name: Run Go Test
        env:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
        run: |
          go test ./modules/cmp/... -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-cmp.txt -covermode=atomic -gcflags='-l'
      - name: Upload coverage As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-cmp
          path: coverage-cmp.txt
          retention-days: 1

  UNIT-TEST-dop:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files
        run: make prepare
      - name: Run Go Test
        env:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
        run: |
          go test ./modules/dop/... -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-dop.txt -covermode=atomic -gcflags='-l'
      - name: Upload coverage As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-dop
          path: coverage-dop.txt
          retention-days: 1
  UNIT-TEST-hepa-openapi:
    runs-on: ubuntu-latest
    container:
      image: letmein7788/letmein:golangci-lint
    needs:
      - PREPARE
    steps:
      - name: Install Tools
        run: apk add tar
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Fetch proto-go
        uses: actions/download-artifact@v3
        with:
          name: proto-go
          path: ./api/proto-go
      - name: Calculate Go Cache Path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-4
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go generate files
        run: make prepare
      - name: Run Go Test
        env:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
        run: |
          go test ./modules/hepa/... ./modules/openapi/... -tags=musl -work -timeout=10s -failfast -race -coverprofile=coverage-hepa-openapi.txt -covermode=atomic -gcflags='-l'
      - name: Upload coverage As Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-hepa-openapi
          path: coverage-hepa-openapi.txt
          retention-days: 1

  CODE-COV:
    runs-on: ubuntu-latest
    needs:
      - UNIT-TEST-modules
      - UNIT-TEST-pkg
      - UNIT-TEST-dop
      - UNIT-TEST-cmp
      - UNIT-TEST-monitor
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: download coverage-modules.txt
        uses: actions/download-artifact@v3
        with:
          name: coverage-modules
          path: .
      - name: download coverage-pkg.txt
        uses: actions/download-artifact@v3
        with:
          name: coverage-pkg
          path: .
      - name: download coverage-cmp.txt
        uses: actions/download-artifact@v3
        with:
          name: coverage-cmp
          path: .
      - name: download coverage-dop.txt
        uses: actions/download-artifact@v3
        with:
          name: coverage-dop
          path: .
      - name: download coverage-monitor.txt
        uses: actions/download-artifact@v3
        with:
          name: coverage-monitor
          path: .
      - name: download coverage-hepa-openapi.txt
        uses: actions/download-artifact@v3
        with:
          name: coverage-hepa-openapi
          path: .
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: ./coverage-pkg.txt,./coverage-modules.txt,./coverage-cmp.txt,./coverage-dop.txt,./coverage-monitor.txt,./coverage-hepa-openapi.txt
          flags: unittests
          verbose: true