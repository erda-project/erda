version: "1.1"

on:
  push:
    branches:
      - develop

stages:
  - stage:
    - git-checkout:
        alias: repo-no-vendor
        params:
          depth: 1
  - stage:
      - custom-script:
          alias: repo
          resources:
            cpu: 2
            memory: 2048
          commands:
            - cp -a ${repo-no-vendor}/. .
            - build/init_vendor.sh
  - stage:
      - custom-script:
          alias: golangci-lint
          image: registry.cn-hangzhou.aliyuncs.com/terminus/terminus-golangci-lint:1.27
          commands:
            # download cache
            - mkdir -p /tmp/cache
            - ossutil config -i ${OSS_ACCESS_KEY_ID} -k ${OSS_ACCESS_KEY_SECRET} -e ${OSS_ENDPOINT}
            - ossutil cp oss://terminus-dice/golangci-lint/cache.tgz /tmp/cache/cache.tgz
            - tar -xzf /tmp/cache/cache.tgz -C ~/.cache/
            - ls -lh ~/.cache

            # golangci-lint run
            - d="${GOPATH}/src/terminus.io/dice"
            - mkdir -p "${d}"
            - ln -sv "${repo}" "${d}/dice"
            - cd "${d}/dice"
            - golangci-lint run -v --timeout=20m

            # upload cache
            - cd ~/.cache
            - tar -czf /tmp/cache/cache.tgz  go-build/ golangci-lint/
            - ossutil cp -f /tmp/cache/cache.tgz oss://terminus-dice/golangci-lint/cache.tgz

  - stage:
    - custom-script:
        alias: command
        commands:
        - cd ..
        - repo/build/command_build.sh
    - custom-script:
        alias: cmdb
        commands:
        - cd ..
        - repo/build/pipeline_build.sh cmdb
  #  - custom-script:
  #      alias: ops
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh ops
    - custom-script:
        alias: soldier
        commands:
        - cd ..
        - repo/build/pipeline_build.sh soldier
  #  - custom-script:
  #      alias: dicehub
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh dicehub
  #  - custom-script:
  #      alias: eventbox
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh eventbox
  #  - custom-script:
  #      alias: openapi
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh openapi
  #  - custom-script:
  #      alias: orchestrator
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh orchestrator
    - custom-script:
        alias: scheduler
        commands:
        - cd ..
        - repo/build/pipeline_build.sh scheduler
  #  - custom-script:
  #      alias: pipeline
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh pipeline
  #  - custom-script:
  #      alias: qa
  #      commands:
  #      - cd ..
  #      - repo/build/pipeline_build.sh qa
    - custom-script:
        alias: action-agent
        commands:
        - cd ..
        - repo/build/pipeline_build.sh action-agent
    - custom-script:
        alias: gittar
        commands:
          - cd ..
          - repo/build/pipeline_build.sh gittar
  #  - custom-script:
  #      alias: gittar-adaptor
  #      commands:
  #        - cd ..
  #        - repo/build/pipeline_build.sh gittar-adaptor
  #  - custom-script:
  #      alias: runner-scheduler
  #      commands:
  #        - cd ..
  #        - repo/build/pipeline_build.sh runner-scheduler
    - custom-script:
        alias: dice-all
        commands:
          - cd ..
          - repo/build/pipeline_build.sh dice-all
        resources:
          cpu: 2
          mem: 3072

  - stage:
    - release:
        alias: release
        params:
          check_diceyml: false
          dice_yml: ${repo}/dice.yml
          image:
            apim: ${dice-all:OUTPUT:image}
            cmdb: ${cmdb:OUTPUT:image}
            soldier: ${soldier:OUTPUT:image}
            dicehub: ${dice-all:OUTPUT:image}
            eventbox: ${dice-all:OUTPUT:image}
            openapi: ${dice-all:OUTPUT:image}
            orchestrator: ${dice-all:OUTPUT:image}
            scheduler: ${scheduler:OUTPUT:image}
            pipeline: ${dice-all:OUTPUT:image}
            qa: ${dice-all:OUTPUT:image}
            gittar: ${gittar:OUTPUT:image}
            gittar-adaptor: ${dice-all:OUTPUT:image}
            ops: ${dice-all:OUTPUT:image}
            runner-scheduler: ${dice-all:OUTPUT:image}
            uc-adaptor: ${dice-all:OUTPUT:image}