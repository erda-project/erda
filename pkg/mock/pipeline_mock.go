// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: api/proto-go/core/pipeline/pipeline/pb/pipeline_grpc.pb.go

// Package pipeline is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	pb "github.com/erda-project/erda-proto-go/core/pipeline/pipeline/pb"
)

// MockPipelineServiceClient is a mock of PipelineServiceClient interface.
type MockPipelineServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceClientMockRecorder
}

// MockPipelineServiceClientMockRecorder is the mock recorder for MockPipelineServiceClient.
type MockPipelineServiceClientMockRecorder struct {
	mock *MockPipelineServiceClient
}

// NewMockPipelineServiceClient creates a new mock instance.
func NewMockPipelineServiceClient(ctrl *gomock.Controller) *MockPipelineServiceClient {
	mock := &MockPipelineServiceClient{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineServiceClient) EXPECT() *MockPipelineServiceClientMockRecorder {
	return m.recorder
}

// PipelineBatchCreate mocks base method.
func (m *MockPipelineServiceClient) PipelineBatchCreate(ctx context.Context, in *pb.PipelineBatchCreateRequest, opts ...grpc.CallOption) (*pb.PipelineBatchCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineBatchCreate", varargs...)
	ret0, _ := ret[0].(*pb.PipelineBatchCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineBatchCreate indicates an expected call of PipelineBatchCreate.
func (mr *MockPipelineServiceClientMockRecorder) PipelineBatchCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineBatchCreate", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineBatchCreate), varargs...)
}

// PipelineCallback mocks base method.
func (m *MockPipelineServiceClient) PipelineCallback(ctx context.Context, in *pb.PipelineCallbackRequest, opts ...grpc.CallOption) (*pb.PipelineCallbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineCallback", varargs...)
	ret0, _ := ret[0].(*pb.PipelineCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCallback indicates an expected call of PipelineCallback.
func (mr *MockPipelineServiceClientMockRecorder) PipelineCallback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCallback", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineCallback), varargs...)
}

// PipelineCancel mocks base method.
func (m *MockPipelineServiceClient) PipelineCancel(ctx context.Context, in *pb.PipelineCancelRequest, opts ...grpc.CallOption) (*pb.PipelineCancelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineCancel", varargs...)
	ret0, _ := ret[0].(*pb.PipelineCancelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCancel indicates an expected call of PipelineCancel.
func (mr *MockPipelineServiceClientMockRecorder) PipelineCancel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCancel", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineCancel), varargs...)
}

// PipelineCreate mocks base method.
func (m *MockPipelineServiceClient) PipelineCreate(ctx context.Context, in *pb.PipelineCreateRequest, opts ...grpc.CallOption) (*pb.PipelineCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineCreate", varargs...)
	ret0, _ := ret[0].(*pb.PipelineCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCreate indicates an expected call of PipelineCreate.
func (mr *MockPipelineServiceClientMockRecorder) PipelineCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCreate", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineCreate), varargs...)
}

// PipelineCreateV2 mocks base method.
func (m *MockPipelineServiceClient) PipelineCreateV2(ctx context.Context, in *pb.PipelineCreateRequestV2, opts ...grpc.CallOption) (*pb.PipelineCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineCreateV2", varargs...)
	ret0, _ := ret[0].(*pb.PipelineCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCreateV2 indicates an expected call of PipelineCreateV2.
func (mr *MockPipelineServiceClientMockRecorder) PipelineCreateV2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCreateV2", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineCreateV2), varargs...)
}

// PipelineDelete mocks base method.
func (m *MockPipelineServiceClient) PipelineDelete(ctx context.Context, in *pb.PipelineDeleteRequest, opts ...grpc.CallOption) (*pb.PipelineDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineDelete", varargs...)
	ret0, _ := ret[0].(*pb.PipelineDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineDelete indicates an expected call of PipelineDelete.
func (mr *MockPipelineServiceClientMockRecorder) PipelineDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDelete", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineDelete), varargs...)
}

// PipelineDetail mocks base method.
func (m *MockPipelineServiceClient) PipelineDetail(ctx context.Context, in *pb.PipelineDetailRequest, opts ...grpc.CallOption) (*pb.PipelineDetailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineDetail", varargs...)
	ret0, _ := ret[0].(*pb.PipelineDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineDetail indicates an expected call of PipelineDetail.
func (mr *MockPipelineServiceClientMockRecorder) PipelineDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDetail", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineDetail), varargs...)
}

// PipelineOperate mocks base method.
func (m *MockPipelineServiceClient) PipelineOperate(ctx context.Context, in *pb.PipelineOperateRequest, opts ...grpc.CallOption) (*pb.PipelineOperateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineOperate", varargs...)
	ret0, _ := ret[0].(*pb.PipelineOperateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineOperate indicates an expected call of PipelineOperate.
func (mr *MockPipelineServiceClientMockRecorder) PipelineOperate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineOperate", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineOperate), varargs...)
}

// PipelinePaging mocks base method.
func (m *MockPipelineServiceClient) PipelinePaging(ctx context.Context, in *pb.PipelinePagingRequest, opts ...grpc.CallOption) (*pb.PipelinePagingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelinePaging", varargs...)
	ret0, _ := ret[0].(*pb.PipelinePagingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelinePaging indicates an expected call of PipelinePaging.
func (mr *MockPipelineServiceClientMockRecorder) PipelinePaging(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelinePaging", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelinePaging), varargs...)
}

// PipelineRerun mocks base method.
func (m *MockPipelineServiceClient) PipelineRerun(ctx context.Context, in *pb.PipelineRerunRequest, opts ...grpc.CallOption) (*pb.PipelineRerunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineRerun", varargs...)
	ret0, _ := ret[0].(*pb.PipelineRerunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRerun indicates an expected call of PipelineRerun.
func (mr *MockPipelineServiceClientMockRecorder) PipelineRerun(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRerun", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineRerun), varargs...)
}

// PipelineRerunFailed mocks base method.
func (m *MockPipelineServiceClient) PipelineRerunFailed(ctx context.Context, in *pb.PipelineRerunFailedRequest, opts ...grpc.CallOption) (*pb.PipelineRerunFailedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineRerunFailed", varargs...)
	ret0, _ := ret[0].(*pb.PipelineRerunFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRerunFailed indicates an expected call of PipelineRerunFailed.
func (mr *MockPipelineServiceClientMockRecorder) PipelineRerunFailed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRerunFailed", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineRerunFailed), varargs...)
}

// PipelineRun mocks base method.
func (m *MockPipelineServiceClient) PipelineRun(ctx context.Context, in *pb.PipelineRunRequest, opts ...grpc.CallOption) (*pb.PipelineRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineRun", varargs...)
	ret0, _ := ret[0].(*pb.PipelineRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRun indicates an expected call of PipelineRun.
func (mr *MockPipelineServiceClientMockRecorder) PipelineRun(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRun", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineRun), varargs...)
}

// PipelineStatistic mocks base method.
func (m *MockPipelineServiceClient) PipelineStatistic(ctx context.Context, in *pb.PipelineStatisticRequest, opts ...grpc.CallOption) (*pb.PipelineStatisticResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineStatistic", varargs...)
	ret0, _ := ret[0].(*pb.PipelineStatisticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineStatistic indicates an expected call of PipelineStatistic.
func (mr *MockPipelineServiceClientMockRecorder) PipelineStatistic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineStatistic", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineStatistic), varargs...)
}

// PipelineTaskView mocks base method.
func (m *MockPipelineServiceClient) PipelineTaskView(ctx context.Context, in *pb.PipelineTaskViewRequest, opts ...grpc.CallOption) (*pb.PipelineTaskViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipelineTaskView", varargs...)
	ret0, _ := ret[0].(*pb.PipelineTaskViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineTaskView indicates an expected call of PipelineTaskView.
func (mr *MockPipelineServiceClientMockRecorder) PipelineTaskView(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineTaskView", reflect.TypeOf((*MockPipelineServiceClient)(nil).PipelineTaskView), varargs...)
}

// QueryPipelineSnippet mocks base method.
func (m *MockPipelineServiceClient) QueryPipelineSnippet(ctx context.Context, in *pb.PipelineSnippetQueryRequest, opts ...grpc.CallOption) (*pb.PipelineSnippetQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryPipelineSnippet", varargs...)
	ret0, _ := ret[0].(*pb.PipelineSnippetQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPipelineSnippet indicates an expected call of QueryPipelineSnippet.
func (mr *MockPipelineServiceClientMockRecorder) QueryPipelineSnippet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPipelineSnippet", reflect.TypeOf((*MockPipelineServiceClient)(nil).QueryPipelineSnippet), varargs...)
}

// MockPipelineServiceServer is a mock of PipelineServiceServer interface.
type MockPipelineServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceServerMockRecorder
}

// MockPipelineServiceServerMockRecorder is the mock recorder for MockPipelineServiceServer.
type MockPipelineServiceServerMockRecorder struct {
	mock *MockPipelineServiceServer
}

// NewMockPipelineServiceServer creates a new mock instance.
func NewMockPipelineServiceServer(ctrl *gomock.Controller) *MockPipelineServiceServer {
	mock := &MockPipelineServiceServer{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineServiceServer) EXPECT() *MockPipelineServiceServerMockRecorder {
	return m.recorder
}

// PipelineBatchCreate mocks base method.
func (m *MockPipelineServiceServer) PipelineBatchCreate(arg0 context.Context, arg1 *pb.PipelineBatchCreateRequest) (*pb.PipelineBatchCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineBatchCreate", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineBatchCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineBatchCreate indicates an expected call of PipelineBatchCreate.
func (mr *MockPipelineServiceServerMockRecorder) PipelineBatchCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineBatchCreate", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineBatchCreate), arg0, arg1)
}

// PipelineCallback mocks base method.
func (m *MockPipelineServiceServer) PipelineCallback(arg0 context.Context, arg1 *pb.PipelineCallbackRequest) (*pb.PipelineCallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCallback", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCallback indicates an expected call of PipelineCallback.
func (mr *MockPipelineServiceServerMockRecorder) PipelineCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCallback", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineCallback), arg0, arg1)
}

// PipelineCancel mocks base method.
func (m *MockPipelineServiceServer) PipelineCancel(arg0 context.Context, arg1 *pb.PipelineCancelRequest) (*pb.PipelineCancelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCancel", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineCancelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCancel indicates an expected call of PipelineCancel.
func (mr *MockPipelineServiceServerMockRecorder) PipelineCancel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCancel", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineCancel), arg0, arg1)
}

// PipelineCreate mocks base method.
func (m *MockPipelineServiceServer) PipelineCreate(arg0 context.Context, arg1 *pb.PipelineCreateRequest) (*pb.PipelineCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCreate", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCreate indicates an expected call of PipelineCreate.
func (mr *MockPipelineServiceServerMockRecorder) PipelineCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCreate", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineCreate), arg0, arg1)
}

// PipelineCreateV2 mocks base method.
func (m *MockPipelineServiceServer) PipelineCreateV2(arg0 context.Context, arg1 *pb.PipelineCreateRequestV2) (*pb.PipelineCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCreateV2", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCreateV2 indicates an expected call of PipelineCreateV2.
func (mr *MockPipelineServiceServerMockRecorder) PipelineCreateV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCreateV2", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineCreateV2), arg0, arg1)
}

// PipelineDelete mocks base method.
func (m *MockPipelineServiceServer) PipelineDelete(arg0 context.Context, arg1 *pb.PipelineDeleteRequest) (*pb.PipelineDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineDelete", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineDelete indicates an expected call of PipelineDelete.
func (mr *MockPipelineServiceServerMockRecorder) PipelineDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDelete", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineDelete), arg0, arg1)
}

// PipelineDetail mocks base method.
func (m *MockPipelineServiceServer) PipelineDetail(arg0 context.Context, arg1 *pb.PipelineDetailRequest) (*pb.PipelineDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineDetail", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineDetail indicates an expected call of PipelineDetail.
func (mr *MockPipelineServiceServerMockRecorder) PipelineDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDetail", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineDetail), arg0, arg1)
}

// PipelineOperate mocks base method.
func (m *MockPipelineServiceServer) PipelineOperate(arg0 context.Context, arg1 *pb.PipelineOperateRequest) (*pb.PipelineOperateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineOperate", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineOperateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineOperate indicates an expected call of PipelineOperate.
func (mr *MockPipelineServiceServerMockRecorder) PipelineOperate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineOperate", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineOperate), arg0, arg1)
}

// PipelinePaging mocks base method.
func (m *MockPipelineServiceServer) PipelinePaging(arg0 context.Context, arg1 *pb.PipelinePagingRequest) (*pb.PipelinePagingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelinePaging", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelinePagingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelinePaging indicates an expected call of PipelinePaging.
func (mr *MockPipelineServiceServerMockRecorder) PipelinePaging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelinePaging", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelinePaging), arg0, arg1)
}

// PipelineRerun mocks base method.
func (m *MockPipelineServiceServer) PipelineRerun(arg0 context.Context, arg1 *pb.PipelineRerunRequest) (*pb.PipelineRerunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineRerun", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineRerunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRerun indicates an expected call of PipelineRerun.
func (mr *MockPipelineServiceServerMockRecorder) PipelineRerun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRerun", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineRerun), arg0, arg1)
}

// PipelineRerunFailed mocks base method.
func (m *MockPipelineServiceServer) PipelineRerunFailed(arg0 context.Context, arg1 *pb.PipelineRerunFailedRequest) (*pb.PipelineRerunFailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineRerunFailed", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineRerunFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRerunFailed indicates an expected call of PipelineRerunFailed.
func (mr *MockPipelineServiceServerMockRecorder) PipelineRerunFailed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRerunFailed", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineRerunFailed), arg0, arg1)
}

// PipelineRun mocks base method.
func (m *MockPipelineServiceServer) PipelineRun(arg0 context.Context, arg1 *pb.PipelineRunRequest) (*pb.PipelineRunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineRun", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRun indicates an expected call of PipelineRun.
func (mr *MockPipelineServiceServerMockRecorder) PipelineRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRun", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineRun), arg0, arg1)
}

// PipelineStatistic mocks base method.
func (m *MockPipelineServiceServer) PipelineStatistic(arg0 context.Context, arg1 *pb.PipelineStatisticRequest) (*pb.PipelineStatisticResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineStatistic", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineStatisticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineStatistic indicates an expected call of PipelineStatistic.
func (mr *MockPipelineServiceServerMockRecorder) PipelineStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineStatistic", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineStatistic), arg0, arg1)
}

// PipelineTaskView mocks base method.
func (m *MockPipelineServiceServer) PipelineTaskView(arg0 context.Context, arg1 *pb.PipelineTaskViewRequest) (*pb.PipelineTaskViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineTaskView", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineTaskViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineTaskView indicates an expected call of PipelineTaskView.
func (mr *MockPipelineServiceServerMockRecorder) PipelineTaskView(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineTaskView", reflect.TypeOf((*MockPipelineServiceServer)(nil).PipelineTaskView), arg0, arg1)
}

// QueryPipelineSnippet mocks base method.
func (m *MockPipelineServiceServer) QueryPipelineSnippet(arg0 context.Context, arg1 *pb.PipelineSnippetQueryRequest) (*pb.PipelineSnippetQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPipelineSnippet", arg0, arg1)
	ret0, _ := ret[0].(*pb.PipelineSnippetQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPipelineSnippet indicates an expected call of QueryPipelineSnippet.
func (mr *MockPipelineServiceServerMockRecorder) QueryPipelineSnippet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPipelineSnippet", reflect.TypeOf((*MockPipelineServiceServer)(nil).QueryPipelineSnippet), arg0, arg1)
}
