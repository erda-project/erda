// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/extension/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structpb "google.golang.org/protobuf/types/known/structpb"

	pb "github.com/erda-project/erda-proto-go/core/extension/pb"
	i18n "github.com/erda-project/erda/pkg/i18n"
)

// MockExtensionInterface is a mock of Interface interface.
type MockExtensionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionInterfaceMockRecorder
}

// MockExtensionInterfaceMockRecorder is the mock recorder for MockExtensionInterface.
type MockExtensionInterfaceMockRecorder struct {
	mock *MockExtensionInterface
}

// NewMockExtensionInterface creates a new mock instance.
func NewMockExtensionInterface(ctrl *gomock.Controller) *MockExtensionInterface {
	mock := &MockExtensionInterface{ctrl: ctrl}
	mock.recorder = &MockExtensionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionInterface) EXPECT() *MockExtensionInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExtensionInterface) Create(req *pb.ExtensionCreateRequest) (*pb.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(*pb.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExtensionInterfaceMockRecorder) Create(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExtensionInterface)(nil).Create), req)
}

// CreateExtensionVersionByRequest mocks base method.
func (m *MockExtensionInterface) CreateExtensionVersionByRequest(req *pb.ExtensionVersionCreateRequest) (*pb.ExtensionVersionCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtensionVersionByRequest", req)
	ret0, _ := ret[0].(*pb.ExtensionVersionCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtensionVersionByRequest indicates an expected call of CreateExtensionVersionByRequest.
func (mr *MockExtensionInterfaceMockRecorder) CreateExtensionVersionByRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionVersionByRequest", reflect.TypeOf((*MockExtensionInterface)(nil).CreateExtensionVersionByRequest), req)
}

// DeleteExtensionVersion mocks base method.
func (m *MockExtensionInterface) DeleteExtensionVersion(name, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtensionVersion", name, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtensionVersion indicates an expected call of DeleteExtensionVersion.
func (mr *MockExtensionInterfaceMockRecorder) DeleteExtensionVersion(name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionVersion", reflect.TypeOf((*MockExtensionInterface)(nil).DeleteExtensionVersion), name, version)
}

// GetExtension mocks base method.
func (m *MockExtensionInterface) GetExtension(name, version string, yamlFormat bool) (*pb.ExtensionVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtension", name, version, yamlFormat)
	ret0, _ := ret[0].(*pb.ExtensionVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtension indicates an expected call of GetExtension.
func (mr *MockExtensionInterfaceMockRecorder) GetExtension(name, version, yamlFormat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtension", reflect.TypeOf((*MockExtensionInterface)(nil).GetExtension), name, version, yamlFormat)
}

// GetExtensionByGit mocks base method.
func (m *MockExtensionInterface) GetExtensionByGit(name, d string, file ...string) (*pb.ExtensionVersion, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, d}
	for _, a := range file {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExtensionByGit", varargs...)
	ret0, _ := ret[0].(*pb.ExtensionVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionByGit indicates an expected call of GetExtensionByGit.
func (mr *MockExtensionInterfaceMockRecorder) GetExtensionByGit(name, d interface{}, file ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, d}, file...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionByGit", reflect.TypeOf((*MockExtensionInterface)(nil).GetExtensionByGit), varargs...)
}

// GetExtensionDefaultVersion mocks base method.
func (m *MockExtensionInterface) GetExtensionDefaultVersion(name string, yamlFormat bool) (*pb.ExtensionVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionDefaultVersion", name, yamlFormat)
	ret0, _ := ret[0].(*pb.ExtensionVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionDefaultVersion indicates an expected call of GetExtensionDefaultVersion.
func (mr *MockExtensionInterfaceMockRecorder) GetExtensionDefaultVersion(name, yamlFormat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionDefaultVersion", reflect.TypeOf((*MockExtensionInterface)(nil).GetExtensionDefaultVersion), name, yamlFormat)
}

// InitSources mocks base method.
func (m *MockExtensionInterface) InitSources() error {
	return nil
}

// InitSources indicates an expected call of InitSources.
func (mr *MockExtensionInterfaceMockRecorder) InitSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSources", reflect.TypeOf((*MockExtensionInterface)(nil).InitSources))
}

// MenuExt mocks base method.
func (m *MockExtensionInterface) MenuExt(extensions []*pb.Extension, confMenu map[string][]string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuExt", extensions, confMenu)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MenuExt indicates an expected call of MenuExt.
func (mr *MockExtensionInterfaceMockRecorder) MenuExt(extensions, confMenu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuExt", reflect.TypeOf((*MockExtensionInterface)(nil).MenuExt), extensions, confMenu)
}

// MenuExtWithLocale mocks base method.
func (m *MockExtensionInterface) MenuExtWithLocale(extensions []*pb.Extension, locale *i18n.LocaleResource, all bool) (map[string][]pb.ExtensionMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuExtWithLocale", extensions, locale, all)
	ret0, _ := ret[0].(map[string][]pb.ExtensionMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MenuExtWithLocale indicates an expected call of MenuExtWithLocale.
func (mr *MockExtensionInterfaceMockRecorder) MenuExtWithLocale(extensions, locale, all interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuExtWithLocale", reflect.TypeOf((*MockExtensionInterface)(nil).MenuExtWithLocale), extensions, locale, all)
}

// QueryExtensionList mocks base method.
func (m *MockExtensionInterface) QueryExtensionList(all bool, typ, labels string) ([]*pb.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryExtensionList", all, typ, labels)
	ret0, _ := ret[0].([]*pb.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryExtensionList indicates an expected call of QueryExtensionList.
func (mr *MockExtensionInterfaceMockRecorder) QueryExtensionList(all, typ, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExtensionList", reflect.TypeOf((*MockExtensionInterface)(nil).QueryExtensionList), all, typ, labels)
}

// QueryExtensionVersions mocks base method.
func (m *MockExtensionInterface) QueryExtensionVersions(ctx context.Context, req *pb.ExtensionVersionQueryRequest) (*pb.ExtensionVersionQueryResponse, error) {
	return &pb.ExtensionVersionQueryResponse{
		Data: []*pb.ExtensionVersion{
			{Name: req.Name, Version: "1.0", IsDefault: true, Public: true},
			{Name: req.Name, Version: "2.0", IsDefault: false, Public: true},
		},
	}, nil
}

// QueryExtensionVersions indicates an expected call of QueryExtensionVersions.
func (mr *MockExtensionInterfaceMockRecorder) QueryExtensionVersions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExtensionVersions", reflect.TypeOf((*MockExtensionInterface)(nil).QueryExtensionVersions), ctx, req)
}

// ToProtoValue mocks base method.
func (m *MockExtensionInterface) ToProtoValue(i interface{}) (*structpb.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToProtoValue", i)
	ret0, _ := ret[0].(*structpb.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToProtoValue indicates an expected call of ToProtoValue.
func (mr *MockExtensionInterfaceMockRecorder) ToProtoValue(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToProtoValue", reflect.TypeOf((*MockExtensionInterface)(nil).ToProtoValue), i)
}
