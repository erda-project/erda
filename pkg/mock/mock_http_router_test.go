// Copyright (c) 2021 Terminus, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package mock_httpserver is a generated GoMock package.
package mock

import (
	reflect "reflect"

	httpserver "github.com/erda-project/erda-infra/providers/httpserver"
	gomock "github.com/golang/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRouter) Add(method, path string, handler interface{}, options ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{method, path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRouterMockRecorder) Add(method, path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method, path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRouter)(nil).Add), varargs...)
}

// Any mocks base method.
func (m *MockRouter) Any(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Any", varargs...)
}

// Any indicates an expected call of Any.
func (mr *MockRouterMockRecorder) Any(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockRouter)(nil).Any), varargs...)
}

// CONNECT mocks base method.
func (m *MockRouter) CONNECT(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CONNECT", varargs...)
}

// CONNECT indicates an expected call of CONNECT.
func (mr *MockRouterMockRecorder) CONNECT(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CONNECT", reflect.TypeOf((*MockRouter)(nil).CONNECT), varargs...)
}

// DELETE mocks base method.
func (m *MockRouter) DELETE(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouterMockRecorder) DELETE(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouter)(nil).DELETE), varargs...)
}

// File mocks base method.
func (m *MockRouter) File(path, filepath string, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, filepath}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "File", varargs...)
}

// File indicates an expected call of File.
func (mr *MockRouterMockRecorder) File(path, filepath interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, filepath}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockRouter)(nil).File), varargs...)
}

// GET mocks base method.
func (m *MockRouter) GET(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockRouterMockRecorder) GET(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouter)(nil).GET), varargs...)
}

// HEAD mocks base method.
func (m *MockRouter) HEAD(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "HEAD", varargs...)
}

// HEAD indicates an expected call of HEAD.
func (mr *MockRouterMockRecorder) HEAD(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockRouter)(nil).HEAD), varargs...)
}

// OPTIONS mocks base method.
func (m *MockRouter) OPTIONS(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "OPTIONS", varargs...)
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockRouterMockRecorder) OPTIONS(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockRouter)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m *MockRouter) PATCH(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PATCH", varargs...)
}

// PATCH indicates an expected call of PATCH.
func (mr *MockRouterMockRecorder) PATCH(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockRouter)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockRouter) POST(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockRouterMockRecorder) POST(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockRouter) PUT(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockRouterMockRecorder) PUT(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockRouter)(nil).PUT), varargs...)
}

// Static mocks base method.
func (m *MockRouter) Static(prefix, root string, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prefix, root}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Static", varargs...)
}

// Static indicates an expected call of Static.
func (mr *MockRouterMockRecorder) Static(prefix, root interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prefix, root}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Static", reflect.TypeOf((*MockRouter)(nil).Static), varargs...)
}

// TRACE mocks base method.
func (m *MockRouter) TRACE(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "TRACE", varargs...)
}

// TRACE indicates an expected call of TRACE.
func (mr *MockRouterMockRecorder) TRACE(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRACE", reflect.TypeOf((*MockRouter)(nil).TRACE), varargs...)
}

// MockRouterManager is a mock of RouterManager interface.
type MockRouterManager struct {
	ctrl     *gomock.Controller
	recorder *MockRouterManagerMockRecorder
}

// MockRouterManagerMockRecorder is the mock recorder for MockRouterManager.
type MockRouterManagerMockRecorder struct {
	mock *MockRouterManager
}

// NewMockRouterManager creates a new mock instance.
func NewMockRouterManager(ctrl *gomock.Controller) *MockRouterManager {
	mock := &MockRouterManager{ctrl: ctrl}
	mock.recorder = &MockRouterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterManager) EXPECT() *MockRouterManagerMockRecorder {
	return m.recorder
}

// NewRouter mocks base method.
func (m *MockRouterManager) NewRouter(opts ...interface{}) httpserver.RouterTx {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRouter", varargs...)
	ret0, _ := ret[0].(httpserver.RouterTx)
	return ret0
}

// NewRouter indicates an expected call of NewRouter.
func (mr *MockRouterManagerMockRecorder) NewRouter(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRouter", reflect.TypeOf((*MockRouterManager)(nil).NewRouter), opts...)
}

// Reloadable mocks base method.
func (m *MockRouterManager) Reloadable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reloadable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reloadable indicates an expected call of Reloadable.
func (mr *MockRouterManagerMockRecorder) Reloadable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reloadable", reflect.TypeOf((*MockRouterManager)(nil).Reloadable))
}

// MockRouterTx is a mock of RouterTx interface.
type MockRouterTx struct {
	ctrl     *gomock.Controller
	recorder *MockRouterTxMockRecorder
}

// MockRouterTxMockRecorder is the mock recorder for MockRouterTx.
type MockRouterTxMockRecorder struct {
	mock *MockRouterTx
}

// NewMockRouterTx creates a new mock instance.
func NewMockRouterTx(ctrl *gomock.Controller) *MockRouterTx {
	mock := &MockRouterTx{ctrl: ctrl}
	mock.recorder = &MockRouterTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterTx) EXPECT() *MockRouterTxMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRouterTx) Add(method, path string, handler interface{}, options ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{method, path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRouterTxMockRecorder) Add(method, path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method, path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRouterTx)(nil).Add), varargs...)
}

// Any mocks base method.
func (m *MockRouterTx) Any(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Any", varargs...)
}

// Any indicates an expected call of Any.
func (mr *MockRouterTxMockRecorder) Any(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Any", reflect.TypeOf((*MockRouterTx)(nil).Any), varargs...)
}

// CONNECT mocks base method.
func (m *MockRouterTx) CONNECT(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CONNECT", varargs...)
}

// CONNECT indicates an expected call of CONNECT.
func (mr *MockRouterTxMockRecorder) CONNECT(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CONNECT", reflect.TypeOf((*MockRouterTx)(nil).CONNECT), varargs...)
}

// Commit mocks base method.
func (m *MockRouterTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockRouterTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRouterTx)(nil).Commit))
}

// DELETE mocks base method.
func (m *MockRouterTx) DELETE(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouterTxMockRecorder) DELETE(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouterTx)(nil).DELETE), varargs...)
}

// File mocks base method.
func (m *MockRouterTx) File(path, filepath string, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, filepath}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "File", varargs...)
}

// File indicates an expected call of File.
func (mr *MockRouterTxMockRecorder) File(path, filepath interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, filepath}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockRouterTx)(nil).File), varargs...)
}

// GET mocks base method.
func (m *MockRouterTx) GET(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockRouterTxMockRecorder) GET(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouterTx)(nil).GET), varargs...)
}

// HEAD mocks base method.
func (m *MockRouterTx) HEAD(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "HEAD", varargs...)
}

// HEAD indicates an expected call of HEAD.
func (mr *MockRouterTxMockRecorder) HEAD(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockRouterTx)(nil).HEAD), varargs...)
}

// OPTIONS mocks base method.
func (m *MockRouterTx) OPTIONS(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "OPTIONS", varargs...)
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockRouterTxMockRecorder) OPTIONS(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockRouterTx)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m *MockRouterTx) PATCH(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PATCH", varargs...)
}

// PATCH indicates an expected call of PATCH.
func (mr *MockRouterTxMockRecorder) PATCH(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockRouterTx)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockRouterTx) POST(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockRouterTxMockRecorder) POST(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouterTx)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockRouterTx) PUT(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockRouterTxMockRecorder) PUT(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockRouterTx)(nil).PUT), varargs...)
}

// Reloadable mocks base method.
func (m *MockRouterTx) Reloadable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reloadable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reloadable indicates an expected call of Reloadable.
func (mr *MockRouterTxMockRecorder) Reloadable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reloadable", reflect.TypeOf((*MockRouterTx)(nil).Reloadable))
}

// Rollback mocks base method.
func (m *MockRouterTx) Rollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback")
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRouterTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRouterTx)(nil).Rollback))
}

// Static mocks base method.
func (m *MockRouterTx) Static(prefix, root string, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prefix, root}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Static", varargs...)
}

// Static indicates an expected call of Static.
func (mr *MockRouterTxMockRecorder) Static(prefix, root interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prefix, root}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Static", reflect.TypeOf((*MockRouterTx)(nil).Static), varargs...)
}

// TRACE mocks base method.
func (m *MockRouterTx) TRACE(path string, handler interface{}, options ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path, handler}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "TRACE", varargs...)
}

// TRACE indicates an expected call of TRACE.
func (mr *MockRouterTxMockRecorder) TRACE(path, handler interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, handler}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRACE", reflect.TypeOf((*MockRouterTx)(nil).TRACE), varargs...)
}
