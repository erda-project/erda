// Code generated by MockGen. DO NOT EDIT.
// Source: internal/apps/dop/providers/issue/core/query/provider.go

// Package mock is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"

	"github.com/erda-project/erda-proto-go/common/pb"
	pb0 "github.com/erda-project/erda-proto-go/dop/issue/core/pb"
	pb1 "github.com/erda-project/erda-proto-go/dop/issue/sync/pb"
	"github.com/erda-project/erda/apistructs"
	"github.com/erda-project/erda/internal/apps/dop/providers/issue/core/query"
	"github.com/erda-project/erda/internal/apps/dop/providers/issue/dao"
)

// MockIssueQuery is a mock of Interface interface.
type MockIssueQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIssueQueryMockRecorder
}

// MockIssueQueryMockRecorder is the mock recorder for MockIssueQuery.
type MockIssueQueryMockRecorder struct {
	mock *MockIssueQuery
}

// NewMockIssueQuery creates a new mock instance.
func NewMockIssueQuery(ctrl *gomock.Controller) *MockIssueQuery {
	mock := &MockIssueQuery{ctrl: ctrl}
	mock.recorder = &MockIssueQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueQuery) EXPECT() *MockIssueQueryMockRecorder {
	return m.recorder
}

// AfterIssueAppRelationCreate mocks base method.
func (m *MockIssueQuery) AfterIssueAppRelationCreate(issueIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterIssueAppRelationCreate", issueIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterIssueAppRelationCreate indicates an expected call of AfterIssueAppRelationCreate.
func (mr *MockIssueQueryMockRecorder) AfterIssueAppRelationCreate(issueIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterIssueAppRelationCreate", reflect.TypeOf((*MockIssueQuery)(nil).AfterIssueAppRelationCreate), issueIDs)
}

// AfterIssueInclusionRelationChange mocks base method.
func (m *MockIssueQuery) AfterIssueInclusionRelationChange(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterIssueInclusionRelationChange", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterIssueInclusionRelationChange indicates an expected call of AfterIssueInclusionRelationChange.
func (mr *MockIssueQueryMockRecorder) AfterIssueInclusionRelationChange(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterIssueInclusionRelationChange", reflect.TypeOf((*MockIssueQuery)(nil).AfterIssueInclusionRelationChange), id)
}

// AfterIssueUpdate mocks base method.
func (m *MockIssueQuery) AfterIssueUpdate(u *query.IssueUpdated) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterIssueUpdate", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterIssueUpdate indicates an expected call of AfterIssueUpdate.
func (mr *MockIssueQueryMockRecorder) AfterIssueUpdate(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterIssueUpdate", reflect.TypeOf((*MockIssueQuery)(nil).AfterIssueUpdate), u)
}

// BatchGetIssuePropertyInstances mocks base method.
func (m *MockIssueQuery) BatchGetIssuePropertyInstances(orgID int64, issueType string, issueIDs []uint64) (map[uint64]*pb0.IssueAndPropertyAndValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetIssuePropertyInstances", orgID, issueType, issueIDs)
	ret0, _ := ret[0].(map[uint64]*pb0.IssueAndPropertyAndValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetIssuePropertyInstances indicates an expected call of BatchGetIssuePropertyInstances.
func (mr *MockIssueQueryMockRecorder) BatchGetIssuePropertyInstances(orgID, issueType, issueIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetIssuePropertyInstances", reflect.TypeOf((*MockIssueQuery)(nil).BatchGetIssuePropertyInstances), orgID, issueType, issueIDs)
}

// BatchGetProperties mocks base method.
func (m *MockIssueQuery) BatchGetProperties(orgID int64, issuesType []string) ([]*pb0.IssuePropertyIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetProperties", orgID, issuesType)
	ret0, _ := ret[0].([]*pb0.IssuePropertyIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetProperties indicates an expected call of BatchGetProperties.
func (mr *MockIssueQueryMockRecorder) BatchGetProperties(orgID, issuesType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetProperties", reflect.TypeOf((*MockIssueQuery)(nil).BatchGetProperties), orgID, issuesType)
}

// BatchUpdateIssue mocks base method.
func (m *MockIssueQuery) BatchUpdateIssue(req *pb0.BatchUpdateIssueRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateIssue", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateIssue indicates an expected call of BatchUpdateIssue.
func (mr *MockIssueQueryMockRecorder) BatchUpdateIssue(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateIssue", reflect.TypeOf((*MockIssueQuery)(nil).BatchUpdateIssue), req)
}

// CreatePropertyRelation mocks base method.
func (m *MockIssueQuery) CreatePropertyRelation(req *pb0.CreateIssuePropertyInstanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertyRelation", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePropertyRelation indicates an expected call of CreatePropertyRelation.
func (mr *MockIssueQueryMockRecorder) CreatePropertyRelation(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyRelation", reflect.TypeOf((*MockIssueQuery)(nil).CreatePropertyRelation), req)
}

// GetAllIssuesByProject mocks base method.
func (m *MockIssueQuery) GetAllIssuesByProject(req pb0.IssueListRequest) ([]dao.IssueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIssuesByProject", req)
	ret0, _ := ret[0].([]dao.IssueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIssuesByProject indicates an expected call of GetAllIssuesByProject.
func (mr *MockIssueQueryMockRecorder) GetAllIssuesByProject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIssuesByProject", reflect.TypeOf((*MockIssueQuery)(nil).GetAllIssuesByProject), req)
}

// GetIssue mocks base method.
func (m *MockIssueQuery) GetIssue(id int64, identityInfo *pb.IdentityInfo) (*pb0.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", id, identityInfo)
	ret0, _ := ret[0].(*pb0.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockIssueQueryMockRecorder) GetIssue(id, identityInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockIssueQuery)(nil).GetIssue), id, identityInfo)
}

// GetIssueChildren mocks base method.
func (m *MockIssueQuery) GetIssueChildren(id uint64, req pb0.PagingIssueRequest) ([]dao.IssueItem, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueChildren", id, req)
	ret0, _ := ret[0].([]dao.IssueItem)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueChildren indicates an expected call of GetIssueChildren.
func (mr *MockIssueQueryMockRecorder) GetIssueChildren(id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueChildren", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueChildren), id, req)
}

// GetIssueItem mocks base method.
func (m *MockIssueQuery) GetIssueItem(id uint64) (*dao.IssueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueItem", id)
	ret0, _ := ret[0].(*dao.IssueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueItem indicates an expected call of GetIssueItem.
func (mr *MockIssueQueryMockRecorder) GetIssueItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueItem", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueItem), id)
}

// GetIssueLabelsByProjectID mocks base method.
func (m *MockIssueQuery) GetIssueLabelsByProjectID(projectID uint64) ([]dao.IssueLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueLabelsByProjectID", projectID)
	ret0, _ := ret[0].([]dao.IssueLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueLabelsByProjectID indicates an expected call of GetIssueLabelsByProjectID.
func (mr *MockIssueQueryMockRecorder) GetIssueLabelsByProjectID(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueLabelsByProjectID", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueLabelsByProjectID), projectID)
}

// GetIssueParents mocks base method.
func (m *MockIssueQuery) GetIssueParents(issueID uint64, relationType []string) ([]dao.IssueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueParents", issueID, relationType)
	ret0, _ := ret[0].([]dao.IssueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueParents indicates an expected call of GetIssueParents.
func (mr *MockIssueQueryMockRecorder) GetIssueParents(issueID, relationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueParents", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueParents), issueID, relationType)
}

// GetIssuePropertyInstance mocks base method.
func (m *MockIssueQuery) GetIssuePropertyInstance(req *pb0.GetIssuePropertyInstanceRequest) (*pb0.IssueAndPropertyAndValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuePropertyInstance", req)
	ret0, _ := ret[0].(*pb0.IssueAndPropertyAndValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuePropertyInstance indicates an expected call of GetIssuePropertyInstance.
func (mr *MockIssueQueryMockRecorder) GetIssuePropertyInstance(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuePropertyInstance", reflect.TypeOf((*MockIssueQuery)(nil).GetIssuePropertyInstance), req)
}

// GetIssueRelationsByIssueIDs mocks base method.
func (m *MockIssueQuery) GetIssueRelationsByIssueIDs(issueID uint64, relationType []string) ([]uint64, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueRelationsByIssueIDs", issueID, relationType)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueRelationsByIssueIDs indicates an expected call of GetIssueRelationsByIssueIDs.
func (mr *MockIssueQueryMockRecorder) GetIssueRelationsByIssueIDs(issueID, relationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueRelationsByIssueIDs", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueRelationsByIssueIDs), issueID, relationType)
}

// GetIssueStage mocks base method.
func (m *MockIssueQuery) GetIssueStage(req *pb0.IssueStageRequest) ([]*pb0.IssueStage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStage", req)
	ret0, _ := ret[0].([]*pb0.IssueStage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStage indicates an expected call of GetIssueStage.
func (mr *MockIssueQueryMockRecorder) GetIssueStage(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStage", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStage), req)
}

// GetIssueStateIDs mocks base method.
func (m *MockIssueQuery) GetIssueStateIDs(req *pb0.GetIssueStatesRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStateIDs", req)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStateIDs indicates an expected call of GetIssueStateIDs.
func (mr *MockIssueQueryMockRecorder) GetIssueStateIDs(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStateIDs", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStateIDs), req)
}

// GetIssueStateIDsByTypes mocks base method.
func (m *MockIssueQuery) GetIssueStateIDsByTypes(req *apistructs.IssueStatesRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStateIDsByTypes", req)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStateIDsByTypes indicates an expected call of GetIssueStateIDsByTypes.
func (mr *MockIssueQueryMockRecorder) GetIssueStateIDsByTypes(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStateIDsByTypes", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStateIDsByTypes), req)
}

// GetIssueStatesBelong mocks base method.
func (m *MockIssueQuery) GetIssueStatesBelong(req *pb0.GetIssueStateRelationRequest) ([]apistructs.IssueStateState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStatesBelong", req)
	ret0, _ := ret[0].([]apistructs.IssueStateState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStatesBelong indicates an expected call of GetIssueStatesBelong.
func (mr *MockIssueQueryMockRecorder) GetIssueStatesBelong(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStatesBelong", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStatesBelong), req)
}

// GetIssueStatesMap mocks base method.
func (m *MockIssueQuery) GetIssueStatesMap(req *pb0.GetIssueStatesRequest) (map[string][]pb0.IssueStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStatesMap", req)
	ret0, _ := ret[0].(map[string][]pb0.IssueStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStatesMap indicates an expected call of GetIssueStatesMap.
func (mr *MockIssueQueryMockRecorder) GetIssueStatesMap(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStatesMap", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStatesMap), req)
}

// GetIssuesByIssueIDs mocks base method.
func (m *MockIssueQuery) GetIssuesByIssueIDs(issueIDs []uint64) ([]*pb0.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesByIssueIDs", issueIDs)
	ret0, _ := ret[0].([]*pb0.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesByIssueIDs indicates an expected call of GetIssuesByIssueIDs.
func (mr *MockIssueQueryMockRecorder) GetIssuesByIssueIDs(issueIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesByIssueIDs", reflect.TypeOf((*MockIssueQuery)(nil).GetIssuesByIssueIDs), issueIDs)
}

// GetIssuesStatesByProjectID mocks base method.
func (m *MockIssueQuery) GetIssuesStatesByProjectID(projectID uint64, issueType string) ([]dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesStatesByProjectID", projectID, issueType)
	ret0, _ := ret[0].([]dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesStatesByProjectID indicates an expected call of GetIssuesStatesByProjectID.
func (mr *MockIssueQueryMockRecorder) GetIssuesStatesByProjectID(projectID, issueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesStatesByProjectID", reflect.TypeOf((*MockIssueQuery)(nil).GetIssuesStatesByProjectID), projectID, issueType)
}

// GetProperties mocks base method.
func (m *MockIssueQuery) GetProperties(req *pb0.GetIssuePropertyRequest) ([]*pb0.IssuePropertyIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", req)
	ret0, _ := ret[0].([]*pb0.IssuePropertyIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockIssueQueryMockRecorder) GetProperties(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockIssueQuery)(nil).GetProperties), req)
}

// ListStatesTransByProjectID mocks base method.
func (m *MockIssueQuery) ListStatesTransByProjectID(projectID uint64) ([]dao.IssueStateTransition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatesTransByProjectID", projectID)
	ret0, _ := ret[0].([]dao.IssueStateTransition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatesTransByProjectID indicates an expected call of ListStatesTransByProjectID.
func (mr *MockIssueQueryMockRecorder) ListStatesTransByProjectID(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatesTransByProjectID", reflect.TypeOf((*MockIssueQuery)(nil).ListStatesTransByProjectID), projectID)
}

// Paging mocks base method.
func (m *MockIssueQuery) Paging(req pb0.PagingIssueRequest) ([]*pb0.Issue, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paging", req)
	ret0, _ := ret[0].([]*pb0.Issue)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Paging indicates an expected call of Paging.
func (mr *MockIssueQueryMockRecorder) Paging(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paging", reflect.TypeOf((*MockIssueQuery)(nil).Paging), req)
}

// SyncIssueChildrenIteration mocks base method.
func (m *MockIssueQuery) SyncIssueChildrenIteration(issue *pb0.Issue, iterationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncIssueChildrenIteration", issue, iterationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncIssueChildrenIteration indicates an expected call of SyncIssueChildrenIteration.
func (mr *MockIssueQueryMockRecorder) SyncIssueChildrenIteration(issue, iterationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncIssueChildrenIteration", reflect.TypeOf((*MockIssueQuery)(nil).SyncIssueChildrenIteration), issue, iterationID)
}

// SyncLabels mocks base method.
func (m *MockIssueQuery) SyncLabels(value *pb1.Value, issueIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncLabels", value, issueIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncLabels indicates an expected call of SyncLabels.
func (mr *MockIssueQueryMockRecorder) SyncLabels(value, issueIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLabels", reflect.TypeOf((*MockIssueQuery)(nil).SyncLabels), value, issueIDs)
}

// UpdateIssue mocks base method.
func (m *MockIssueQuery) UpdateIssue(req *pb0.UpdateIssueRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssue", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssue indicates an expected call of UpdateIssue.
func (mr *MockIssueQueryMockRecorder) UpdateIssue(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssue", reflect.TypeOf((*MockIssueQuery)(nil).UpdateIssue), req)
}

// UpdateLabels mocks base method.
func (m *MockIssueQuery) UpdateLabels(id, projectID uint64, labelNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabels", id, projectID, labelNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabels indicates an expected call of UpdateLabels.
func (mr *MockIssueQueryMockRecorder) UpdateLabels(id, projectID, labelNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabels", reflect.TypeOf((*MockIssueQuery)(nil).UpdateLabels), id, projectID, labelNames)
}
