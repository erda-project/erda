// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erda-project/erda/internal/apps/dop/providers/issue/core/query (interfaces: Interface)

// Package mock is a generated GoMock package.
package mock

import (
	"fmt"
	"io"
	"reflect"

	"github.com/golang/mock/gomock"

	pb "github.com/erda-project/erda-proto-go/common/pb"
	pb0 "github.com/erda-project/erda-proto-go/dop/issue/core/pb"
	pb1 "github.com/erda-project/erda-proto-go/dop/issue/sync/pb"
	"github.com/erda-project/erda/apistructs"
	"github.com/erda-project/erda/internal/apps/dop/providers/issue/core/query"
	"github.com/erda-project/erda/internal/apps/dop/providers/issue/dao"
)

// MockIssueQuery is a mock of issue query interface.
type MockIssueQuery struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockIssueQuery.
type MockInterfaceMockRecorder struct {
	mock *MockIssueQuery
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockIssueQuery {
	mock := &MockIssueQuery{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueQuery) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AfterIssueAppRelationCreate mocks base method.
func (m *MockIssueQuery) AfterIssueAppRelationCreate(arg0 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterIssueAppRelationCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterIssueAppRelationCreate indicates an expected call of AfterIssueAppRelationCreate.
func (mr *MockInterfaceMockRecorder) AfterIssueAppRelationCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterIssueAppRelationCreate", reflect.TypeOf((*MockIssueQuery)(nil).AfterIssueAppRelationCreate), arg0)
}

// AfterIssueInclusionRelationChange mocks base method.
func (m *MockIssueQuery) AfterIssueInclusionRelationChange(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterIssueInclusionRelationChange", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterIssueInclusionRelationChange indicates an expected call of AfterIssueInclusionRelationChange.
func (mr *MockInterfaceMockRecorder) AfterIssueInclusionRelationChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterIssueInclusionRelationChange", reflect.TypeOf((*MockIssueQuery)(nil).AfterIssueInclusionRelationChange), arg0)
}

// AfterIssueUpdate mocks base method.
func (m *MockIssueQuery) AfterIssueUpdate(arg0 *query.IssueUpdated) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterIssueUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterIssueUpdate indicates an expected call of AfterIssueUpdate.
func (mr *MockInterfaceMockRecorder) AfterIssueUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterIssueUpdate", reflect.TypeOf((*MockIssueQuery)(nil).AfterIssueUpdate), arg0)
}

// BatchUpdateIssue mocks base method.
func (m *MockIssueQuery) BatchUpdateIssue(arg0 *pb0.BatchUpdateIssueRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateIssue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateIssue indicates an expected call of BatchUpdateIssue.
func (mr *MockInterfaceMockRecorder) BatchUpdateIssue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateIssue", reflect.TypeOf((*MockIssueQuery)(nil).BatchUpdateIssue), arg0)
}

// CreatePropertyRelation mocks base method.
func (m *MockIssueQuery) CreatePropertyRelation(arg0 *pb0.CreateIssuePropertyInstanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertyRelation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePropertyRelation indicates an expected call of CreatePropertyRelation.
func (mr *MockInterfaceMockRecorder) CreatePropertyRelation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyRelation", reflect.TypeOf((*MockIssueQuery)(nil).CreatePropertyRelation), arg0)
}

// ExportExcel mocks base method.
func (m *MockIssueQuery) ExportExcel(arg0 []*pb0.Issue, arg1 []*pb0.IssuePropertyIndex, arg2 uint64, arg3 bool, arg4 int64, arg5 string) (io.Reader, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportExcel", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportExcel indicates an expected call of ExportExcel.
func (mr *MockInterfaceMockRecorder) ExportExcel(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportExcel", reflect.TypeOf((*MockIssueQuery)(nil).ExportExcel), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetAllIssuesByProject mocks base method.
func (m *MockIssueQuery) GetAllIssuesByProject(arg0 pb0.IssueListRequest) ([]dao.IssueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIssuesByProject", arg0)
	ret0, _ := ret[0].([]dao.IssueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIssuesByProject indicates an expected call of GetAllIssuesByProject.
func (mr *MockInterfaceMockRecorder) GetAllIssuesByProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIssuesByProject", reflect.TypeOf((*MockIssueQuery)(nil).GetAllIssuesByProject), arg0)
}

// GetBatchProperties mocks base method.
func (m *MockIssueQuery) GetBatchProperties(arg0 int64, arg1 []string) ([]*pb0.IssuePropertyIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchProperties", arg0, arg1)
	ret0, _ := ret[0].([]*pb0.IssuePropertyIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchProperties indicates an expected call of GetBatchProperties.
func (mr *MockInterfaceMockRecorder) GetBatchProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchProperties", reflect.TypeOf((*MockIssueQuery)(nil).GetBatchProperties), arg0, arg1)
}

// GetIssue mocks base method.
func (m *MockIssueQuery) GetIssue(arg0 int64, arg1 *pb.IdentityInfo) (*pb0.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", arg0, arg1)
	ret0, _ := ret[0].(*pb0.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockInterfaceMockRecorder) GetIssue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockIssueQuery)(nil).GetIssue), arg0, arg1)
}

// GetIssueChildren mocks base method.
func (m *MockIssueQuery) GetIssueChildren(arg0 uint64, arg1 pb0.PagingIssueRequest) ([]dao.IssueItem, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueChildren", arg0, arg1)
	ret0, _ := ret[0].([]dao.IssueItem)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueChildren indicates an expected call of GetIssueChildren.
func (mr *MockInterfaceMockRecorder) GetIssueChildren(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueChildren", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueChildren), arg0, arg1)
}

// GetIssueItem mocks base method.
func (m *MockIssueQuery) GetIssueItem(arg0 uint64) (*dao.IssueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueItem", arg0)
	ret0, _ := ret[0].(*dao.IssueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueItem indicates an expected call of GetIssueItem.
func (mr *MockInterfaceMockRecorder) GetIssueItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueItem", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueItem), arg0)
}

// GetIssueLabelsByProjectID mocks base method.
func (m *MockIssueQuery) GetIssueLabelsByProjectID(arg0 uint64) ([]dao.IssueLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueLabelsByProjectID", arg0)
	ret0, _ := ret[0].([]dao.IssueLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueLabelsByProjectID indicates an expected call of GetIssueLabelsByProjectID.
func (mr *MockInterfaceMockRecorder) GetIssueLabelsByProjectID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueLabelsByProjectID", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueLabelsByProjectID), arg0)
}

// GetIssueParents mocks base method.
func (m *MockIssueQuery) GetIssueParents(arg0 uint64, arg1 []string) ([]dao.IssueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueParents", arg0, arg1)
	ret0, _ := ret[0].([]dao.IssueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueParents indicates an expected call of GetIssueParents.
func (mr *MockInterfaceMockRecorder) GetIssueParents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueParents", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueParents), arg0, arg1)
}

// GetIssueRelationsByIssueIDs mocks base method.
func (m *MockIssueQuery) GetIssueRelationsByIssueIDs(arg0 uint64, arg1 []string) ([]uint64, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueRelationsByIssueIDs", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueRelationsByIssueIDs indicates an expected call of GetIssueRelationsByIssueIDs.
func (mr *MockInterfaceMockRecorder) GetIssueRelationsByIssueIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueRelationsByIssueIDs", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueRelationsByIssueIDs), arg0, arg1)
}

// GetIssueStage mocks base method.
func (m *MockIssueQuery) GetIssueStage(arg0 *pb0.IssueStageRequest) ([]*pb0.IssueStage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStage", arg0)
	ret0, _ := ret[0].([]*pb0.IssueStage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStage indicates an expected call of GetIssueStage.
func (mr *MockInterfaceMockRecorder) GetIssueStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStage", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStage), arg0)
}

// GetIssueStateIDs mocks base method.
func (m *MockIssueQuery) GetIssueStateIDs(arg0 *pb0.GetIssueStatesRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStateIDs", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStateIDs indicates an expected call of GetIssueStateIDs.
func (mr *MockInterfaceMockRecorder) GetIssueStateIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStateIDs", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStateIDs), arg0)
}

// GetIssueStateIDsByTypes mocks base method.
func (m *MockIssueQuery) GetIssueStateIDsByTypes(arg0 *apistructs.IssueStatesRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStateIDsByTypes", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStateIDsByTypes indicates an expected call of GetIssueStateIDsByTypes.
func (mr *MockInterfaceMockRecorder) GetIssueStateIDsByTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStateIDsByTypes", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStateIDsByTypes), arg0)
}

// GetIssueStatesBelong mocks base method.
func (m *MockIssueQuery) GetIssueStatesBelong(arg0 *pb0.GetIssueStateRelationRequest) ([]apistructs.IssueStateState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStatesBelong", arg0)
	ret0, _ := ret[0].([]apistructs.IssueStateState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStatesBelong indicates an expected call of GetIssueStatesBelong.
func (mr *MockInterfaceMockRecorder) GetIssueStatesBelong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStatesBelong", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStatesBelong), arg0)
}

// GetIssueStatesMap mocks base method.
func (m *MockIssueQuery) GetIssueStatesMap(arg0 *pb0.GetIssueStatesRequest) (map[string][]pb0.IssueStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueStatesMap", arg0)
	ret0, _ := ret[0].(map[string][]pb0.IssueStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueStatesMap indicates an expected call of GetIssueStatesMap.
func (mr *MockInterfaceMockRecorder) GetIssueStatesMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueStatesMap", reflect.TypeOf((*MockIssueQuery)(nil).GetIssueStatesMap), arg0)
}

// GetIssuesByIssueIDs mocks base method.
func (m *MockIssueQuery) GetIssuesByIssueIDs(arg0 []uint64) ([]*pb0.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesByIssueIDs", arg0)
	ret0, _ := ret[0].([]*pb0.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesByIssueIDs indicates an expected call of GetIssuesByIssueIDs.
func (mr *MockInterfaceMockRecorder) GetIssuesByIssueIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesByIssueIDs", reflect.TypeOf((*MockIssueQuery)(nil).GetIssuesByIssueIDs), arg0)
}

// GetIssuesStatesByProjectID mocks base method.
func (m *MockIssueQuery) GetIssuesStatesByProjectID(arg0 uint64, arg1 string) ([]dao.IssueState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesStatesByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]dao.IssueState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesStatesByProjectID indicates an expected call of GetIssuesStatesByProjectID.
func (mr *MockInterfaceMockRecorder) GetIssuesStatesByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesStatesByProjectID", reflect.TypeOf((*MockIssueQuery)(nil).GetIssuesStatesByProjectID), arg0, arg1)
}

// GetProperties mocks base method.
func (m *MockIssueQuery) GetProperties(arg0 *pb0.GetIssuePropertyRequest) ([]*pb0.IssuePropertyIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", arg0)
	ret0, _ := ret[0].([]*pb0.IssuePropertyIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockInterfaceMockRecorder) GetProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockIssueQuery)(nil).GetProperties), arg0)
}

// ListStatesTransByProjectID mocks base method.
func (m *MockIssueQuery) ListStatesTransByProjectID(arg0 uint64) ([]dao.IssueStateTransition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatesTransByProjectID", arg0)
	ret0, _ := ret[0].([]dao.IssueStateTransition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatesTransByProjectID indicates an expected call of ListStatesTransByProjectID.
func (mr *MockInterfaceMockRecorder) ListStatesTransByProjectID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatesTransByProjectID", reflect.TypeOf((*MockIssueQuery)(nil).ListStatesTransByProjectID), arg0)
}

// Paging mocks base method.
func (m *MockIssueQuery) Paging(arg0 pb0.PagingIssueRequest) ([]*pb0.Issue, uint64, error) {
	res := make([]*pb0.Issue, 0)
	var total uint64
	for _, projectID := range arg0.ProjectIDs {
		res = append(res, &pb0.Issue{ProjectID: projectID, Title: fmt.Sprintf("%d", projectID)})
		total++
	}
	return res, total, nil
}

// Paging indicates an expected call of Paging.
func (mr *MockInterfaceMockRecorder) Paging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paging", reflect.TypeOf((*MockIssueQuery)(nil).Paging), arg0)
}

// SyncIssueChildrenIteration mocks base method.
func (m *MockIssueQuery) SyncIssueChildrenIteration(arg0 *pb0.Issue, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncIssueChildrenIteration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncIssueChildrenIteration indicates an expected call of SyncIssueChildrenIteration.
func (mr *MockInterfaceMockRecorder) SyncIssueChildrenIteration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncIssueChildrenIteration", reflect.TypeOf((*MockIssueQuery)(nil).SyncIssueChildrenIteration), arg0, arg1)
}

// SyncLabels mocks base method.
func (m *MockIssueQuery) SyncLabels(arg0 *pb1.Value, arg1 []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncLabels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncLabels indicates an expected call of SyncLabels.
func (mr *MockInterfaceMockRecorder) SyncLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLabels", reflect.TypeOf((*MockIssueQuery)(nil).SyncLabels), arg0, arg1)
}

// UpdateIssue mocks base method.
func (m *MockIssueQuery) UpdateIssue(arg0 *pb0.UpdateIssueRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssue indicates an expected call of UpdateIssue.
func (mr *MockInterfaceMockRecorder) UpdateIssue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssue", reflect.TypeOf((*MockIssueQuery)(nil).UpdateIssue), arg0)
}

// UpdateLabels mocks base method.
func (m *MockIssueQuery) UpdateLabels(arg0, arg1 uint64, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabels", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabels indicates an expected call of UpdateLabels.
func (mr *MockInterfaceMockRecorder) UpdateLabels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabels", reflect.TypeOf((*MockIssueQuery)(nil).UpdateLabels), arg0, arg1, arg2)
}
