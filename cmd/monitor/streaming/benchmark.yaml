# TODO. Note: just for benchmark
http-server:
  addr: ":7091"

health:
  path: "/api/health"

kafkago:
  servers: "${BOOTSTRAP_SERVERS:localhost:9092}"
  client_id: streaming
  debug_client: true

clickhouse:
  _enable: ${CLICKHOUSE_ENABLE:true}
  addr: "${CLICKHOUSE_ADDR:localhost:9000}"
  username: "${CLICKHOUSE_USERNAME:default}"
  password: "${CLICKHOUSE_PASSWORD:default}"
  dail_timeout: ${CLICKHOUSE_MAX_DIAL_TIMEOUT:30s}
  max_idle_conns: ${CLICKHOUSE_MAX_IDLE_CONNS:30}
  max_open_conns: ${CLICKHOUSE_MAX_OPEN_CONNS:100}
  conn_max_lifetime: ${CLICKHOUSE_CONN_MAX_LIFETIME:1h}
  conn_open_strategy: "round_robin"

storage-retention-strategy@metric:
  load_from_database: false
  ttl_reload_interval: "3m"
  default_ttl:  8760h

etcd:
  endpoints: "${ETCD_ENDPOINTS:http://localhost:2379}"
  username: ${ETCD_USER:root}
  password: ${ETCD_PASSWORD:default}

etcd-election@table-loader:
  root_path: "/erda/monitor-ck-table-loader-election"

etcd-election@table-initializer:
  root_path: "/erda/monitor-ck-table-initializer-election"

etcd-mutex:
  root_path: "/erda/streaming"

# --- data pipeline block ---
erda.oap.collector.core:
  pipelines:
    metrics:
      - receivers:
          - "erda.oap.collector.receiver.kafka@spotmetric"
        processors:
          - "erda.oap.collector.processor.modifier@default"
        exporters:
#          - "erda.oap.collector.exporter.stdout"
          - "erda.oap.collector.exporter.clickhouse@metric"
        batch_size: ${EXPORTER_CLICKHOUSE_METRIC_BATCH_SIZE:8192}
        _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}

erda.oap.collector.processor.modifier@default:
  rules:
    - action: add
      key: tags.cluster_name
      value: ${DICE_CLUSTER_NAME}
    - action: add
      key: tags.org_name
      value: ${DICE_ORG_NAME}

erda.oap.collector.exporter.stdout:
  print: false
  sleep: 500ms

# --- metric to clickhouse block ---
erda.oap.collector.receiver.kafka@spotmetric:
  _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}
  proto_parser: spotmetric
  consumer:
    topics: "${METRIC_TOPICS:spot-metrics}"
    group: "${METRIC_GROUP_ID:spot-monitor-metrics}"

erda.oap.collector.receiver.kafka@oapspanevent:
  _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}
  proto_parser: oapspanevent
  consumer:
    topics: "${OAP_TRACE_EVENT_TOPICS:erda-spans}"
    group: "${OAP_TRACE_EVENT_GROUP_ID:spot-monitor-trace-event}"

erda.oap.collector.exporter.clickhouse@metric:
  _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}
  storage:
    currency_num: ${EXPORTER_CH_METRIC_CURRENCY_NUM:2}
  builder:
    data_type: metric
    tenant_id_key: _metric_scope_id

clickhouse.table.initializer@metric:
  _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}
  table_prefix: "metrics"
  ttl_sync_interval: "${CLICKHOUSE_TABLE_METRIC_TTL_SYNC_INTERVAL:1h}"
  default_ddl_files:
    - path: "conf/clickhouse/metrics/ddl_create_db.sql.tpl"
      ignore_err: "false"
    - path: "conf/clickhouse/metrics/ddl_create_default_tables.sql.tpl"
      ignore_err: "false"
  tenant_ddl_files:
    - path: "conf/clickhouse/metrics/ddl_create_tenant_tables.sql.tpl"
      ignore_err: "true"

clickhouse.table.creator@metric:
  _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}
  ddl_template: "conf/clickhouse/metrics/ddl_create_tenant_tables.sql.tpl"
  default_write_table: "metrics"
  table_prefix: "metrics"

clickhouse.table.loader@metric:
  _enable: ${WRITE_METRIC_TO_CLICKHOUSE_ENABLE:true}
  load_mode: "${QUERY_METRIC_FROM_CLICKHOUSE_LOAD_MODE:LoadFromClickhouseOnly}"
  table_prefix: "metrics"
  default_search_table: "metrics_all"
  cache_key_prefix: "clickhouse-table-metric"
# --- metric to clickhouse block ---

pprof:
http-server@admin:
  addr: ":7098"
prometheus:

